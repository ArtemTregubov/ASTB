
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДеревоДляЗагрузки = РеквизитФормыВЗначение("ТаблицаКлассификатора");
	СформироватьДеревоОКПДТР(ДеревоДляЗагрузки);
	ЗначениеВРеквизитФормы(ДеревоДляЗагрузки,"ТаблицаКлассификатора");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоОКПДТР(ДеревоДляЗагрузки)
	
	//чтение схемы из макета
	ВременныйФайлСхемы = ПолучитьИмяВременногоФайла();
	
	МакетСхемы = Справочники.ДолжностиИПрофессии.ПолучитьМакет("СхемаXML");
	МакетСхемы.Записать(ВременныйФайлСхемы);
	
	ЧтениеСхемы = Новый ЧтениеXML;
	ЧтениеСхемы.ОткрытьФайл(ВременныйФайлСхемы);

	Построитель_DOM = Новый ПостроительDOM;
	Документ_DOM 	= Построитель_DOM.Прочитать(ЧтениеСхемы);
	
	ПостроительСхем_XML = Новый ПостроительСхемXML;
	Схема_XML 			= ПостроительСхем_XML.СоздатьСхемуXML(Документ_DOM);
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(Схема_XML);
	
	НоваяФабрика = Новый ФабрикаXDTO(НаборСхем);
	
	//чтение данных из макета
	ВременныйФайлДанных 	= ПолучитьИмяВременногоФайла();
	МакетДанных 			= Справочники.ДолжностиИПрофессии.ПолучитьМакет("ДанныеXML");
	МакетДанных.Записать(ВременныйФайлДанных);
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ВременныйФайлДанных);
	
	Попытка
		Данные = НоваяФабрика.ПрочитатьXML(Чтение);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из Данные.profession_category Цикл
		
		Если Элемент.class = "Профессии рабочих" Тогда
			ТекущийИсточник = Перечисления.ИсточникиДолжностей.ПрофессииРабочих;
		Иначе
			ТекущийИсточник = Перечисления.ИсточникиДолжностей.ДолжностиСлужащих;
		КонецЕсли;
		
		НовыйРаздел 				= ДеревоДляЗагрузки.Строки.Добавить();
		НовыйРаздел.Представление 	= Элемент.class;
		
		Для Каждого ЭлементКлассификатора Из Элемент.profession_list Цикл
			
			//СтруктураДанных = Новый Структура("Использовать, Представление, КодПоОКПДТР, Источник, КодКатегории, КодЕТКС, КодОКЗ, КонтрольноеЧисло, Разряд, Существует",
			//									0, ЭлементКлассификатора.profession_name, ЭлементКлассификатора.code + ЭлементКлассификатора.kch, 
			//									ТекущийИсточник, ЭлементКлассификатора.code_category, ЭлементКлассификатора.code_etkc, 
			//									ЭлементКлассификатора.code_okz, ЭлементКлассификатора.kch, ЭлементКлассификатора.razryad, 
			//									ЗначениеЗаполнено(Справочники.ДолжностиИПрофессии.НайтиПоРеквизиту("КодПоОКПДТР",ЭлементКлассификатора.code)));
			
			СтруктураДанных = Новый Структура("Использовать, Представление, КодПоОКПДТР, Источник, КодКатегории, КодЕТКС, КодОКЗ, КонтрольноеЧисло, Разряд, Существует",
												0, ЭлементКлассификатора.profession_name, ЭлементКлассификатора.code, 
												ТекущийИсточник, ЭлементКлассификатора.code_category, ЭлементКлассификатора.code_etkc, 
												ЭлементКлассификатора.code_okz, ЭлементКлассификатора.kch, ЭлементКлассификатора.razryad, 
												ЗначениеЗаполнено(Справочники.ДолжностиИПрофессии.НайтиПоРеквизиту("КодПоОКПДТР",ЭлементКлассификатора.code)));
												
			НоваяПрофессия = НовыйРаздел.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПрофессия,СтруктураДанных);
			
		КонецЦикла;
		
 	КонецЦикла;
 
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ОбработатьРезультатыПодбораНаСервере();
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатыПодбораНаСервере()
	
	МассивВыбранныхСтрок 	= Новый Массив;
	МассивКодов 			= Новый Массив;
	
	Дерево = РеквизитФормыВЗначение("ТаблицаКлассификатора");
	Для каждого СтрокаУровень1 Из Дерево.Строки Цикл
		Если СтрокаУровень1.Использовать Тогда
			Для каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл
				Если СтрокаУровень2.Использовать Тогда
						
					МассивВыбранныхСтрок.Добавить(СтрокаУровень2);
					МассивКодов.Добавить(СтрокаУровень2.КодПоОКПДТР);
							
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДолжностиИПрофессии.Ссылка КАК Ссылка,
	|	ДолжностиИПрофессии.КодПоОКПДТР КАК КодПоОКПДТР
	|ИЗ
	|	Справочник.ДолжностиИПрофессии КАК ДолжностиИПрофессии
	|ГДЕ
	|	ДолжностиИПрофессии.КодПоОКПДТР В(&МассивКодов)";
	
	Запрос.УстановитьПараметр("МассивКодов", МассивКодов);
	
	ТаблицаОКПДТР = Запрос.Выполнить().Выгрузить();
	ТаблицаОКПДТР.Индексы.Добавить("КодПоОКПДТР");
	
	НачатьТранзакцию();
	
	Для каждого СтрокаДерева Из МассивВыбранныхСтрок Цикл
		
		НайденныйЭлемент = ТаблицаОКПДТР.Найти(СтрокаДерева.КодПоОКПДТР, "КодПоОКПДТР");
		
		Если НайденныйЭлемент <> Неопределено Тогда
			СправочникОбъект = НайденныйЭлемент.Ссылка.ПолучитьОбъект();
		Иначе
			СправочникОбъект = Справочники.ДолжностиИПрофессии.СоздатьЭлемент();
		КонецЕсли;
		
		СправочникОбъект.Наименование   	= СтрокаДерева.Представление;
		СправочникОбъект.КодПоОКПДТР 		= СтрокаДерева.КодПоОКПДТР;
		СправочникОбъект.Источник      		= СтрокаДерева.Источник;
		СправочникОбъект.НаименованиеПолное = СтрокаДерева.Представление;
		СправочникОбъект.УстановитьНовыйКод();
		
		СправочникОбъект.Записать();
	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();	
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКлассификатораИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаКлассификатора.ТекущиеДанные;
	ПриИзмененииФлажка(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФлажка(ТекущиеДанные)
	
	Если ТекущиеДанные.Использовать = 2 Тогда
		ТекущиеДанные.Использовать = 0;
	КонецЕсли;
	
	ПроцедурыРаботыСНормамиКлиент.ОбходДереваВверх(ТекущиеДанные);
	ПроцедурыРаботыСНормамиКлиент.ОбходДереваВниз(ТекущиеДанные);
	
КонецПроцедуры