
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Свойства"
    ДополнительныеПараметры = Новый Структура;
    ДополнительныеПараметры.Вставить("Объект", Объект);
    ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
    УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Если (НЕ ЗначениеЗаполнено(Объект.Ссылка)) И (Объект.СоставНормы.Количество() = 0) Тогда
		Объект.СоставНормы.Добавить();
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьДоступность();
	
	//если есть ссылки, блокируем форму
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		МассивДляПоискаСсылок = Новый Массив;
		МассивДляПоискаСсылок.Добавить(Объект.Ссылка);
		
		//АСТБ_ALEX_**************************************************************
		//оператор не работает с ограниченными правами
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТаблицаСсылок = НайтиПоСсылкам(МассивДляПоискаСсылок);
		
		УстановитьПривилегированныйРежим(Ложь);
		//АСТБ_ALEX_**************************************************************
		
		Если ТаблицаСсылок.Количество() > 0 Тогда
			
			ЭтаФорма.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.Владелец.ИспользоватьГруппыИЛИ Тогда
		
		ЭтаФорма.Элементы.ГруппаГруппаИЛИ.Видимость 	= Истина;
		ЭтаФорма.Элементы.ГруппаНеГруппаИЛИ.Видимость 	= Ложь;
		
		ЭтаФорма.Элементы.СоставНормы.ПодчиненныеЭлементы.СоставНормыПериодичностьВыдачи.Видимость 	= Истина;
		
		Если Объект.ВидРасчета = Перечисления.ВидыРасчетаНорм.Период Тогда
			ЭтаФорма.Элементы.СоставНормы.ПодчиненныеЭлементы.СоставНормыУчитыватьВПотребности.Видимость = Ложь;
		Иначе
			ЭтаФорма.Элементы.СоставНормы.ПодчиненныеЭлементы.СоставНормыУчитыватьВПотребности.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		
		ЭтаФорма.Элементы.ГруппаГруппаИЛИ.Видимость 			= Ложь;
		ЭтаФорма.Элементы.ГруппаНеГруппаИЛИ.Видимость 			= Истина;
		
		Если Объект.ВидРасчета = Перечисления.ВидыРасчетаНорм.Период Тогда
			ЭтаФорма.Элементы.УчитыватьВПотребности.Видимость = Ложь;
		Иначе
			ЭтаФорма.Элементы.УчитыватьВПотребности.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	Если Объект.Владелец.ИспользоватьГруппыИЛИ Тогда
		
		Если ЗначениеЗаполнено(Объект.СоставНормы[0].ПериодичностьВыдачи) Тогда
			ЭтаФорма.Элементы.СоставНормы.ПодчиненныеЭлементы.СоставНормыУчитыватьВПотребности.Доступность = Истина;
		Иначе
			ЭтаФорма.Элементы.СоставНормы.ПодчиненныеЭлементы.СоставНормыУчитыватьВПотребности.Доступность = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.СоставНормы[0].ПериодичностьВыдачи) Тогда
			ЭтаФорма.Элементы.УчитыватьВПотребности.Доступность = Истина;
		Иначе
			ЭтаФорма.Элементы.УчитыватьВПотребности.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.ВесовойКоэффициент = 1/Объект.СоставНормы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНормыПриИзменении(Элемент)
	
	СформироватьСписокВыбора();	
	
КонецПроцедуры

&НаСервере
Функция СформироватьНаименование()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	//+++АСТБ_Горюшин_Алексей_18924
	МассивНаименований = Справочники.НормыВыдачиСИЗ.СформироватьМассивНаименованийНормыВыдачиСИЗ(ТекущийОбъект);
	
	Наименование = "";
	Для Каждого ЭлементМассива ИЗ МассивНаименований Цикл
		Если СтрДлина(ЭлементМассива) > СтрДлина(Наименование) Тогда
			Наименование = ЭлементМассива;
		КонецЕсли;
	КонецЦикла;	
	
	Объект.Наименование = Наименование;
	
	Возврат МассивНаименований;
	//было
	//Возврат Справочники.НормыВыдачиСИЗ.СформироватьМассивНаименованийНормыВыдачиСИЗ(ТекущийОбъект);
	//---АСТБ_Горюшин_Алексей_18924
	
КонецФункции

&НаКлиенте
Процедура СформироватьСписокВыбора(ОчищатьНаименование = Истина)
	
	Если ОчищатьНаименование Тогда
		Объект.Наименование = "";
	КонецЕсли;
	ЭтаФорма.Элементы.Наименование.СписокВыбора.Очистить();
	ЭтаФорма.Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СформироватьНаименование());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.Свойства
	
	СформироватьСписокВыбора(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНормыПриИзменении(Элемент)
	
	СформироватьСписокВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьВыдачиПриИзменении(Элемент)
	
	СформироватьСписокВыбора();
	
	Если НЕ ЗначениеЗаполнено(Объект.СоставНормы[0].ПериодичностьВыдачи) Тогда
		Объект.СоставНормы[0].УчитыватьВПотребности = Ложь;
	КонецЕсли;	
	
	УстановитьВидимость();
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВыдачиВТаблице(ТекущаяПериодичность,УчВПотребности = Неопределено)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого СтрокаСоставаНормы Из ТекущийОбъект.СоставНормы Цикл 
		СтрокаСоставаНормы.ПериодичностьВыдачи = ТекущаяПериодичность;
		Если НЕ ЗначениеЗаполнено(ТекущаяПериодичность) Тогда
			СтрокаСоставаНормы.УчитыватьВПотребности = Ложь;
		Иначе
			Если НЕ УчВПотребности = Неопределено Тогда
				СтрокаСоставаНормы.УчитыватьВПотребности = УчВПотребности;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаПриИзменении(Элемент)
	
	Если Объект.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыРасчетаНорм.Дежурный")
		ИЛИ Объект.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыРасчетаНорм.ДоИзноса") Тогда //нужно устанавливать одинаковую периодичность
		
		ЗаполнитьДанныеВыдачиВТаблице(Объект.СоставНормы[0].ПериодичностьВыдачи);
		
	КонецЕсли;
	
	СформироватьСписокВыбора();
	
	УстановитьВидимость();
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНормыПериодичностьВыдачиПриИзменении(Элемент)
	
	Если Объект.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыРасчетаНорм.Дежурный")
		ИЛИ Объект.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыРасчетаНорм.ДоИзноса") Тогда //нужно устанавливать одинаковую периодичность
		
		ТекущиеДанные = Элементы.СоставНормы.ТекущиеДанные;
		ЗаполнитьДанныеВыдачиВТаблице(ТекущиеДанные.ПериодичностьВыдачи);
		
	КонецЕсли;	
	
	УстановитьВидимость();
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНормыУчитыватьВПотребностиПриИзменении(Элемент)
	
	Если Объект.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыРасчетаНорм.Дежурный")
		ИЛИ Объект.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыРасчетаНорм.ДоИзноса") Тогда //нужно устанавливать одинаковую периодичность
		
		ТекущиеДанные = Элементы.СоставНормы.ТекущиеДанные;
		ЗаполнитьДанныеВыдачиВТаблице(ТекущиеДанные.ПериодичностьВыдачи,ТекущиеДанные.УчитыватьВПотребности);
		
	КонецЕсли;	
	
	УстановитьВидимость();
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
    УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
    Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
        ОбновитьЭлементыДополнительныхРеквизитов();
        УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
    // Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства&НаСервере

Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
    
    // СтандартныеПодсистемы.Свойства
    УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры
