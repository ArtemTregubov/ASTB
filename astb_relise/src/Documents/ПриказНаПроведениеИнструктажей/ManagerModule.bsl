#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриказНаПроведениеИнструктажейРабочиеМеста.Ссылка.Дата КАК Период,
	|	ПриказНаПроведениеИнструктажейРабочиеМеста.Ссылка.Организация КАК Организация,
	|	ПриказНаПроведениеИнструктажейРабочиеМеста.Подразделение КАК Подразделение,
	|	ПриказНаПроведениеИнструктажейРабочиеМеста.Должность КАК Должность,
	|	ПриказНаПроведениеИнструктажейРабочиеМеста.РабочееМесто КАК РабочееМесто,
	|	ПриказНаПроведениеИнструктажейРабочиеМеста.Инструктаж КАК Инструктаж,
	|	ПриказНаПроведениеИнструктажейРабочиеМеста.Периодичность КАК Периодичность,
	|	ПриказНаПроведениеИнструктажейРабочиеМеста.Проводить КАК Проводить,
	|	ВЫБОР
	|		КОГДА ПриказНаПроведениеИнструктажейРабочиеМеста.Инструктаж.ВидИнструктажа = ЗНАЧЕНИЕ(Перечисление.ВидыИнструктажей.Вводный)
	|			ТОГДА ПриказНаПроведениеИнструктажейРабочиеМеста.Ссылка.ОтветственныйЗаВводныйИнструктаж
	|		КОГДА ПриказНаПроведениеИнструктажейРабочиеМеста.Инструктаж.ВидИнструктажа = ЗНАЧЕНИЕ(Перечисление.ВидыИнструктажей.Первичный)
	|			ТОГДА ПриказНаПроведениеИнструктажейРабочиеМеста.Ссылка.ОтветственныйЗаПервичныйИнструктаж
	|		КОГДА ПриказНаПроведениеИнструктажейРабочиеМеста.Инструктаж.ВидИнструктажа = ЗНАЧЕНИЕ(Перечисление.ВидыИнструктажей.Повторный)
	|			ТОГДА ПриказНаПроведениеИнструктажейРабочиеМеста.Ссылка.ОтветственныйЗаПовторныйИнструктаж
	|		КОГДА ПриказНаПроведениеИнструктажейРабочиеМеста.Инструктаж.ВидИнструктажа = ЗНАЧЕНИЕ(Перечисление.ВидыИнструктажей.Внеплановый)
	|			ТОГДА ПриказНаПроведениеИнструктажейРабочиеМеста.Ссылка.ОтветственныйЗаВнеплановыйИнструктаж
	|		КОГДА ПриказНаПроведениеИнструктажейРабочиеМеста.Инструктаж.ВидИнструктажа = ЗНАЧЕНИЕ(Перечисление.ВидыИнструктажей.Целевой)
	|			ТОГДА ПриказНаПроведениеИнструктажейРабочиеМеста.Ссылка.ОтветственныйЗаЦелевойИнструктаж
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	КОНЕЦ КАК Ответственный
	|ИЗ
	|	Документ.ПриказНаПроведениеИнструктажей.РабочиеМеста КАК ПриказНаПроведениеИнструктажейРабочиеМеста
	|ГДЕ
	|	ПриказНаПроведениеИнструктажейРабочиеМеста.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	
	ТаблицыДляДвижений.Вставить("ТаблицаПриказыНаИнструктажи", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

Процедура ЗаполнитьТаблицуДокумента(ТекущийОбъект,ПоУстановленнымДанным) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАнализа",ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(ТекущийОбъект.Ссылка));
	Запрос.УстановитьПараметр("Организация",ТекущийОбъект.Организация);
	
	Если ПоУстановленнымДанным Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриказыНаИнструктажиСрезПоследних.Подразделение КАК Подразделение,
		|	ПриказыНаИнструктажиСрезПоследних.Должность КАК Должность,
		|	ПриказыНаИнструктажиСрезПоследних.РабочееМесто КАК РабочееМесто,
		|	ПриказыНаИнструктажиСрезПоследних.Инструктаж КАК Инструктаж,
		|	ПриказыНаИнструктажиСрезПоследних.Периодичность КАК Периодичность,
		|	ПриказыНаИнструктажиСрезПоследних.Проводить КАК Проводить
		|ИЗ
		|	РегистрСведений.ПриказыНаИнструктажи.СрезПоследних(&ДатаАнализа, Организация = &Организация) КАК ПриказыНаИнструктажиСрезПоследних";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
		|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
		|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ ВТ_ЗанятыеРабочиеМеста
		|ИЗ
		|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(&ДатаАнализа, Организация = &Организация) КАК ЗанятыеРабочиеМестаОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриказыНаИнструктажиСрезПоследних.Подразделение КАК Подразделение,
		|	ПриказыНаИнструктажиСрезПоследних.Должность КАК Должность,
		|	ПриказыНаИнструктажиСрезПоследних.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ ВТ_ПриказыНаИнструктажи
		|ИЗ
		|	РегистрСведений.ПриказыНаИнструктажи.СрезПоследних(&ДатаАнализа, Организация = &Организация) КАК ПриказыНаИнструктажиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗанятыеРабочиеМеста.Подразделение КАК Подразделение,
		|	ВТ_ЗанятыеРабочиеМеста.Должность КАК Должность,
		|	ВТ_ЗанятыеРабочиеМеста.РабочееМесто КАК РабочееМесто,
		|	ИСТИНА КАК Проводить
		|ИЗ
		|	ВТ_ЗанятыеРабочиеМеста КАК ВТ_ЗанятыеРабочиеМеста
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПриказыНаИнструктажи КАК ВТ_ПриказыНаИнструктажи
		|		ПО (ВТ_ЗанятыеРабочиеМеста.Подразделение = ВТ_ПриказыНаИнструктажи.Подразделение
		|				ИЛИ ВТ_ПриказыНаИнструктажи.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
		|			И (ВТ_ЗанятыеРабочиеМеста.Должность = ВТ_ПриказыНаИнструктажи.Должность
		|				ИЛИ ВТ_ПриказыНаИнструктажи.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка))
		|			И (ВТ_ЗанятыеРабочиеМеста.РабочееМесто = ВТ_ПриказыНаИнструктажи.РабочееМесто
		|				ИЛИ ВТ_ПриказыНаИнструктажи.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка))
		|ГДЕ
		|	ВТ_ПриказыНаИнструктажи.Подразделение ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ЗанятыеРабочиеМеста.Подразделение.Наименование,
		|	ВТ_ЗанятыеРабочиеМеста.Должность.Наименование,
		|	ВТ_ЗанятыеРабочиеМеста.РабочееМесто.Наименование";
		
	КонецЕсли;	
	
	ТекущийОбъект.РабочиеМеста.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПорядокПроведенияИнструктажей") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм, 
		"ПорядокПроведенияИнструктажей",
		"Порядок проведения инструктажей",
		СформироватьПечатнуюПорядокПроведенияИнструктажей(МассивОбъектов, ОбъектыПечати),,"Документ.ПриказНаПроведениеИнструктажей.ПФ_MXL_ПорядокПроведенияИнструктажей");
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриказОбУтвержденииПрограммыВводногоИнстуктажа") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм, 
		"ПриказОбУтвержденииПрограммыВводногоИнстуктажа",
		"Приказ об утверждении программы вводного инстуктажа",
		СформироватьПечатнуюФормуПриказаОбУтвержденииПрограммыВводногоИнстуктажа(МассивОбъектов, ОбъектыПечати),,"Документ.ПриказНаПроведениеИнструктажей.ПФ_MXL_ПриказОбУтвержденииПрограммыВводногоИнстуктажа");
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриказОбУтвержденииПрограммыПервичногоИнстуктажа") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм, 
		"ПриказОбУтвержденииПрограммыПервичногоИнстуктажа",
		"Приказ об утверждении программы первичного инстуктажа",
		СформироватьПечатнуюФормуПриказОбУтвержденииПрограммыПервичногоИнстуктажа(МассивОбъектов, ОбъектыПечати),,"Документ.ПриказНаПроведениеИнструктажей.ПФ_MXL_ПриказОбУтвержденииПрограммыПервичногоИнстуктажа");
		
	КонецЕсли;
			
КонецПроцедуры

Функция СформироватьПечатнуюПорядокПроведенияИнструктажей(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриказНаПроведениеИнструктажей_ПриложениеКЛичнойКарточке";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриказНаПроведениеИнструктажей.ПФ_MXL_ПриложениеКЛичнойКарточке");
	
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуПриказаОбУтвержденииПрограммыВводногоИнстуктажа(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриказНаПроведениеИнструктажей_ПриложениеКЛичнойКарточке";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриказНаПроведениеИнструктажей.ПФ_MXL_ПриложениеКЛичнойКарточке");
	
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуПриказОбУтвержденииПрограммыПервичногоИнстуктажа(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриказНаПроведениеИнструктажей_ПриложениеКЛичнойКарточке";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриказНаПроведениеИнструктажей.ПФ_MXL_ПриложениеКЛичнойКарточке");
	
	
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//формы для печати нужно согласовать, поэтому печать отключена
	
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Документ.ПриказНаПроведениеИнструктажей";
	//КомандаПечати.Идентификатор = "ПорядокПроведенияИнструктажей";
	//КомандаПечати.Представление = НСтр("ru = 'Порядок проведения инструктажей'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Документ.ПриказНаПроведениеИнструктажей";
	//КомандаПечати.Идентификатор = "ПриказОбУтвержденииПрограммыВводногоИнстуктажа";
	//КомандаПечати.Представление = НСтр("ru = 'Приказ об утверждении программы вводного инстуктажа'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Документ.ПриказНаПроведениеИнструктажей";
	//КомандаПечати.Идентификатор = "ПриказОбУтвержденииПрограммыПервичногоИнстуктажа";
	//КомандаПечати.Представление = НСтр("ru = 'Приказ об утверждении программы первичного инстуктажа'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

#КонецЕсли