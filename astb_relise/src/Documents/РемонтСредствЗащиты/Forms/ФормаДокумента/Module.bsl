////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Объект.ДокументОснование.РемонтуНеПодлежит Тогда
			Отказ = Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "У документа-основания изделие ремноту не подлежит!.";
			СообщениеПользователю.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если НЕ Объект.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРемонтаСИЗ.ПередачаВРемонт Тогда
			Отказ = Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Допускается ввод на основании документа с видом операции <<Передача в ремонт>>.";
			СообщениеПользователю.Сообщить();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	
	
	// ПодключаемоеОборудование
	ПроцедурыРаботыСНормамиСервер.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.Свойства
 	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект,НОВЫЙ Структура("ИмяЭлементаДляРазмещения","ГруппаДополнительныеРеквизиты"));
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	УстановитьВидимость();
	УстановитьДоступность();
	
	ЗаполнитьИнформациюПоШтрихкодуИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриОтключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
 	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(ПроцедурыРаботыСНормамиКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "СВОЙСТВА"

// СтандартныеПодсистемы.Свойства
 &НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "ПЕЧАТЬ"

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
  	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
  
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ...

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДокументРемонта()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РемонтСредствЗащиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РемонтСредствЗащиты КАК РемонтСредствЗащиты
	|ГДЕ
	|	РемонтСредствЗащиты.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование",Объект.Ссылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции	

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ДокументОснование.Видимость	= ЗначениеЗаполнено(Объект.ДокументОснование);	
	Элементы.ВидОперации.Видимость 			= НЕ ЗначениеЗаполнено(Объект.ДокументОснование);
	Элементы.ВидОперацииВозврат.Видимость 	= ЗначениеЗаполнено(Объект.ДокументОснование); 	
	Элементы.ГруппаРемонт.Видимость			= НЕ Объект.РемонтуНеПодлежит;
	Элементы.ГруппаПредупреждение.Видимость = ЕстьДокументРемонта();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	Элементы.Организация.ТолькоПросмотр 		= ЗначениеЗаполнено(Объект.ДокументОснование) ИЛИ ЕстьДокументРемонта();
	Элементы.Контрагент.ТолькоПросмотр 			= ЗначениеЗаполнено(Объект.ДокументОснование) ИЛИ ЕстьДокументРемонта();
	Элементы.ШтрихкодИзделия.ТолькоПросмотр 	= ЗначениеЗаполнено(Объект.ДокументОснование) ИЛИ ЕстьДокументРемонта();
	Элементы.РемонтуНеПодлежит.ТолькоПросмотр 	= ЗначениеЗаполнено(Объект.ДокументОснование) ИЛИ ЕстьДокументРемонта();
	Элементы.Комментарий.ТолькоПросмотр 		= ЗначениеЗаполнено(Объект.ДокументОснование) ИЛИ ЕстьДокументРемонта();
	Элементы.Ответственный.ТолькоПросмотр 		= ЗначениеЗаполнено(Объект.ДокументОснование) ИЛИ ЕстьДокументРемонта();
	Элементы.Ремонт.ТолькоПросмотр 				= ЗначениеЗаполнено(Объект.ДокументОснование) ИЛИ ЕстьДокументРемонта();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ТекущийШтрихкод = СтрЗаменить(ДанныеШтрихкодов[0].Штрихкод,Символ(29)," ");
	ТекущийШтрихкод = СтрЗаменить(ТекущийШтрихкод,Символ(19)," ");
	
	Объект.ШтрихкодИзделия = ТекущийШтрихкод;
	
	ЗаполнитьИнформациюПоШтрихкодуИзделия();
	
	Модифицированность = Истина;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьИнформациюПоШтрихкодуИзделия()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Организация КАК ОрганизацияИзделия,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник КАК Сотрудник,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ДатаВыдачи КАК ДатаВыдачи
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатурыДляУчетаЧистки КАК ШтрихкодыНоменклатурыДляУчетаЧистки
	|ГДЕ
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод",Объект.ШтрихкодИзделия);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ОрганизацияИзделия 			= Справочники.Организации.ПустаяСсылка();
		Сотрудник 					= Справочники.Сотрудники.ПустаяСсылка();
		Номенклатура 				= Справочники.Номенклатура.ПустаяСсылка();
		ХарактеристикаНоменклатуры 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		ДатаВыдачи 					= Дата(1,1,1,0,0,0);
	Иначе
		ОрганизацияИзделия 			= Результат.Выгрузить()[0].ОрганизацияИзделия;
		Сотрудник 					= Результат.Выгрузить()[0].Сотрудник;
		Номенклатура 				= Результат.Выгрузить()[0].Номенклатура;
		ХарактеристикаНоменклатуры 	= Результат.Выгрузить()[0].ХарактеристикаНоменклатуры;
		ДатаВыдачи 					= Результат.Выгрузить()[0].ДатаВыдачи;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ШтрихкодИзделияПриИзменении(Элемент)
	
	ЗаполнитьИнформациюПоШтрихкодуИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтВидРемонтаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ремонт.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидРемонта = ПредопределенноеЗначение("Справочник.ВидыРемонтаСИЗ.РемонтуНеПодлежит") Тогда
		ТекущиеДанные.ВидРемонта = ПредопределенноеЗначение("Справочник.ВидыРемонтаСИЗ.ПустаяСсылка");
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Количество = 1;
	КонецЕсли;	
	
	ТекущиеДанные.Цена 	= ПолучитьЦенуВидаРемонтаНаСервере(ТекущиеДанные.ВидРемонта);
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЦенуВидаРемонтаНаСервере(ВидРемонта)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат Документы.РемонтСредствЗащиты.ПолучитьЦенуВидаРемонта(ВидРемонта,ТекущийОбъект);
	
КонецФункции	

&НаКлиенте
Процедура РемонтКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ремонт.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
КонецПроцедуры

&НаСервере
Процедура РемонтуНеПодлежитПриИзмененииНаСервере()
	
	Объект.Ремонт.Очистить();
	
	Если Объект.РемонтуНеПодлежит  Тогда
		НоваяСтрока = Объект.Ремонт.Добавить();
		НоваяСтрока.ВидРемонта = Справочники.ВидыРемонтаСИЗ.РемонтуНеПодлежит;
		НоваяСтрока.Количество = 1;
	КонецЕсли;
	
	Объект.СуммаДокумента = 0;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтуНеПодлежитПриИзменении(Элемент)
	
	РемонтуНеПодлежитПриИзмененииНаСервере();
	
КонецПроцедуры


