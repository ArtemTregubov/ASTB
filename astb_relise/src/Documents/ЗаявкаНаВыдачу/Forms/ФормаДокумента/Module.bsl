////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "СВОЙСТВА"

// СтандартныеПодсистемы.Свойства
 &НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "ПЕЧАТЬ"

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
  УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
  
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ...

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	
	//АСТБ_ALEXEY_70409**************************************************************
	//Объект.МОЛ = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация);
	Объект.МОЛ = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация,Объект.СоздательДокумента);
	//АСТБ_ALEXEY_70409**************************************************************
	Элементы.МОЛ.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.Склад,Объект.Организация));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяАлгоритмВилка(ТекущаяОрганизация)
	
	Возврат ТекущаяОрганизация.ИспользоватьАлгоритм_0_0_0_3 ИЛИ ТекущаяОрганизация.ИспользоватьАлгоритм_0_0_0_4;	
	
КонецФункции	

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если НЕ ИспользуетсяАлгоритмВилка(Объект.Организация) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Документ предназначен только для организаций, использующих алгоритм 0003 или 0004!'");
			Сообщение.Сообщить();
			
			Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
			
		КонецЕсли;	
		
	КонецЕсли;
	
	//АСТБ_ALEXEY_70409**************************************************************
	//Объект.МОЛ = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация);
	Объект.МОЛ = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация,Объект.СоздательДокумента);
	//АСТБ_ALEXEY_70409**************************************************************
	Элементы.МОЛ.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.Склад,Объект.Организация));
	
	Объект.Товары.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
 	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект,НОВЫЙ Структура("ИмяЭлементаДляРазмещения","ГруппаДополнительныеРеквизиты"));
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	//блокируем форму, если по документу выдачи есть передача прав собственности
	Если НЕ Параметры.Ключ.Пустая() Тогда //объект записан в базу
		
		Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
			
			ЕстьПеремещениеПоЗаявке = ЕстьПеремещениеПоЗаявке(Объект.Ссылка);
			ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость 	= ЕстьПеремещениеПоЗаявке;
			ЭтаФорма.ТолькоПросмотр 							= ЕстьПеремещениеПоЗаявке;
			
		КонецЕсли;	
		
	Иначе
		
		ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость = Ложь;
		
		Объект.НачалоПериодаВыдачи 	= НачалоМесяца(КонецМесяца(ТекущаяДата()) + 1);
		Объект.КонецПериодаВыдачи  	= КонецМесяца(КонецМесяца(ТекущаяДата()) + 1);
		
	КонецЕсли;
	
	ЭтаФорма.Элементы.МОЛ.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.Склад,Объект.Организация));
	ЭтаФорма.Элементы.МОЛОтправителя.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.СкладОтправитель,Объект.Организация));
	
	ЭтаФорма.Элементы.ПредставлениеПериода.Заголовок = "Период: " + ПредставлениеПериода(НачалоДня(Объект.НачалоПериодаВыдачи),КонецДня(Объект.КонецПериодаВыдачи),"ДФ=ММММгггг");
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ЕстьПеремещениеПоЗаявке(Заявка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеНоменклатуры КАК ПеремещениеНоменклатуры
	|ГДЕ
	|	ПеремещениеНоменклатуры.Проведен
	|	И ПеремещениеНоменклатуры.ДокументОснование = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка",Заявка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Комплекты.Видимость = Объект.УчитыватьОстаткиНаСкладе;
	Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураКомплект.Видимость = Объект.УчитыватьОстаткиНаСкладе;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
 	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьОстаткиНаСкладеПриИзменении(Элемент)
	
	Объект.Товары.Очистить();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСУчетомНеВыданныхНаСервере()
	
	Документы.ЗаявкаНаВыдачу.ЗаполнитьТаблицуДокумента(Объект,Истина);
	
	ТоварыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСУчетомНеВыданных(Команда)
	
	ЗаполнитьСУчетомНеВыданныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБезУчетаНеВыданныхНаСервере()
	
	Документы.ЗаявкаНаВыдачу.ЗаполнитьТаблицуДокумента(Объект,Ложь);
	
	ТоварыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполинтьБезУчетаНеВыданных(Команда)
	
	ЗаполнитьБезУчетаНеВыданныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьВсеКомплекты(Команда)
	
	РазобратьВсеКомплектыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РазобратьВсеКомплектыНаСервере()
	
	ТаблицаДокумента = Объект.Товары.Выгрузить();
	ТаблицаДокумента.Очистить();
	
	ЕстьКомплеты = Ложь;
	
	Для Каждого СтрокаДокумента Из Объект.Товары Цикл
		
		Если СтрокаДокумента.ВведенаВручную Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаДокумента.Номенклатура.Комплект Тогда
			ЕстьКомплеты = Истина;
			Для Каждого СтрокаКомплектующих Из СтрокаДокумента.Номенклатура.Комплектующие Цикл
				НоваяСтрока = ТаблицаДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
				НоваяСтрока.Комплект 					= СтрокаДокумента.Номенклатура;
				НоваяСтрока.Номенклатура 				= СтрокаКомплектующих.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры 	= ПроцедурыРаботыСНормамиСервер.ПолучитьХарактеристикуПоАнтропометрии(СтрокаКомплектующих.Номенклатура,СтрокаДокумента.Сотрудник);
				НоваяСтрока.КоличествоВКомплекте 		= СтрокаКомплектующих.Количество;
			КонецЦикла;
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЕстьКомплеты Тогда
		Объект.Товары.Загрузить(ТаблицаДокумента);
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		Сообщить("Комплекты в документе не найдены.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьВыбранныйКомплект(Команда)
	
	МассивВыделенныхСтрок = ЭтаФорма.Элементы.Товары.ВыделенныеСтроки;
	
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Сообщить("Не выбраны строки документа.");
		Возврат;
	КонецЕсли;

	РазобратьВыбранныйКомплектНаСервере(МассивВыделенныхСтрок);
	
КонецПроцедуры

&НаСервере
Процедура РазобратьВыбранныйКомплектНаСервере(МассивНомеровСтрок)
	
	ТаблицаДокумента = Объект.Товары.Выгрузить();
	ТаблицаДокумента.Очистить();
	
	ЕстьКомплеты = Ложь;
	
	МассивРазворачиваемыхСотрудников 		= Новый Массив;
	МассивРазворачиваемыхКомплектов 		= Новый Массив;
	МассивРазворачиваемыхНормВыдачи 		= Новый Массив;
	МассивРазворачиваемыхНоменклатурНорм 	= Новый Массив;
	
	Для Каждого ЭлементМассива Из МассивНомеровСтрок Цикл
		
		ДанныеСтроки = Объект.Товары.НайтиПоидентификатору(ЭлементМассива);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ВведенаВручную Тогда
			Продолжить;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) или не ДанныеСтроки.Номенклатура.Комплект Тогда
			Продолжить;
		КонецЕсли;                                             
		
		Если МассивРазворачиваемыхКомплектов.Найти(ДанныеСтроки.Номенклатура) = неопределено Тогда
			МассивРазворачиваемыхКомплектов.Добавить(ДанныеСтроки.Номенклатура);
		КонецЕсли;
		
		Если МассивРазворачиваемыхНормВыдачи.Найти(ДанныеСтроки.НормаВыдачи) = неопределено Тогда
			МассивРазворачиваемыхНормВыдачи.Добавить(ДанныеСтроки.НормаВыдачи);
		КонецЕсли;
		
		Если МассивРазворачиваемыхСотрудников.Найти(ДанныеСтроки.Сотрудник) = неопределено Тогда
			МассивРазворачиваемыхСотрудников.Добавить(ДанныеСтроки.Сотрудник);
		КонецЕсли;
		
		Если МассивРазворачиваемыхНоменклатурНорм.Найти(ДанныеСтроки.НоменклатураНормы) = неопределено Тогда
			МассивРазворачиваемыхНоменклатурНорм.Добавить(ДанныеСтроки.НоменклатураНормы);
		КонецЕсли;
		
	КонецЦикла;
	                                                           
	СверткаПотребностиПоНоменклатуреНормы = ПолучитьОпциюОрганизации(Объект.Организация,"СверткаПотребностиПоНоменклатуреНормы");
	
	Для Каждого СтрокаДокумента Из Объект.Товары Цикл
		
		Если НЕ МассивРазворачиваемыхКомплектов.Найти(СтрокаДокумента.Номенклатура) = Неопределено Тогда
			
			Если НЕ МассивРазворачиваемыхСотрудников.Найти(СтрокаДокумента.Сотрудник) = Неопределено Тогда
				
				Если НЕ МассивРазворачиваемыхНормВыдачи.Найти(СтрокаДокумента.НормаВыдачи) = Неопределено Тогда
					
					ЕстьКомплеты = Истина;
					Для Каждого СтрокаКомплектующих Из СтрокаДокумента.Номенклатура.Комплектующие Цикл
						НоваяСтрока = ТаблицаДокумента.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
						НоваяСтрока.Комплект 					= СтрокаДокумента.Номенклатура;
						НоваяСтрока.Номенклатура 				= СтрокаКомплектующих.Номенклатура;
						НоваяСтрока.ХарактеристикаНоменклатуры 	= ПроцедурыРаботыСНормамиСервер.ПолучитьХарактеристикуПоАнтропометрии(СтрокаКомплектующих.Номенклатура,СтрокаДокумента.Сотрудник);
						НоваяСтрока.КоличествоВКомплекте 		= СтрокаКомплектующих.Количество;
					КонецЦикла;
					
				Иначе	
					
					Если СверткаПотребностиПоНоменклатуреНормы И (НЕ МассивРазворачиваемыхНоменклатурНорм.Найти(СтрокаДокумента.НоменклатураНормы) = Неопределено) Тогда
						
						ЕстьКомплеты = Истина;
						Для Каждого СтрокаКомплектующих Из СтрокаДокумента.Номенклатура.Комплектующие Цикл
							НоваяСтрока = ТаблицаДокумента.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
							НоваяСтрока.Комплект 					= СтрокаДокумента.Номенклатура;
							НоваяСтрока.Номенклатура 				= СтрокаКомплектующих.Номенклатура;
							НоваяСтрока.ХарактеристикаНоменклатуры 	= ПроцедурыРаботыСНормамиСервер.ПолучитьХарактеристикуПоАнтропометрии(СтрокаКомплектующих.Номенклатура,СтрокаДокумента.Сотрудник);
							НоваяСтрока.КоличествоВКомплекте 		= СтрокаКомплектующих.Количество;
						КонецЦикла;
						
					Иначе
						
						ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
						
					КонецЕсли;
				
				КонецЕсли;
				
			Иначе	
				
				ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
				
			КонецЕсли;
			
		Иначе	
			
			ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЕстьКомплеты Тогда
		Объект.Товары.Загрузить(ТаблицаДокумента);
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		Сообщить("Комплекты в выбранных строках не найдены.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьВсеКомплекты(Команда)
	
	СобратьВсеКомплектыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СобратьВсеКомплектыНаСервере()
	
	ТаблицаДокумента = Объект.Товары.Выгрузить();
	ТаблицаДокумента.Очистить();
	
	ЕстьКомплеты = Ложь;
	
	ТаблицаОбработанныхКомплектов = Новый ТаблицаЗначений;
	ТаблицаОбработанныхКомплектов.Колонки.Добавить("Сотрудник");
	ТаблицаОбработанныхКомплектов.Колонки.Добавить("Комплект");
	ТаблицаОбработанныхКомплектов.Колонки.Добавить("НормаВыдачи");
	
	СтруктураПоиска = Новый Структура("Сотрудник,Комплект,НормаВыдачи");
	
	Для Каждого СтрокаДокумента Из Объект.Товары Цикл
		
		Если СтрокаДокумента.ВведенаВручную Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Комплект) Тогда
			ЕстьКомплеты = Истина;
			СтруктураПоиска.Сотрудник 	= СтрокаДокумента.Сотрудник;
			СтруктураПоиска.Комплект 	= СтрокаДокумента.Комплект;
			СтруктураПоиска.НормаВыдачи = СтрокаДокумента.НормаВыдачи;
			
			СтрокаТаблицыКомплекта = ТаблицаОбработанныхКомплектов.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокаТаблицыКомплекта.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
				НоваяСтрока.Номенклатура 				= СтрокаДокумента.Комплект;
				НоваяСтрока.ХарактеристикаНоменклатуры 	= ПроцедурыРаботыСНормамиСервер.ПолучитьХарактеристикуПоАнтропометрии(НоваяСтрока.Номенклатура,СтрокаДокумента.Сотрудник);
				НоваяСтрока.КоличествоВКомплекте 		= 0;
				НоваяСтрока.Комплект 					= Справочники.Номенклатура.ПустаяСсылка();
				СтрокаКомплекта = ТаблицаОбработанныхКомплектов.Добавить();
				СтрокаКомплекта.Сотрудник 	= СтрокаДокумента.Сотрудник;
				СтрокаКомплекта.Комплект 	= СтрокаДокумента.Комплект;
				СтрокаКомплекта.НормаВыдачи = СтрокаДокумента.НормаВыдачи;
			КонецЕсли;
		Иначе	
			ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЕстьКомплеты Тогда
		Объект.Товары.Загрузить(ТаблицаДокумента);
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		Сообщить("Комплекты в документе не найдены.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьВыбранныйКомплект(Команда)
	
	МассивВыделенныхСтрок = ЭтаФорма.Элементы.Товары.ВыделенныеСтроки;
	
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Сообщить("Не выбраны строки документа.");
		Возврат;
	КонецЕсли;
	
	СверткаПотребностиПоНоменклатуреНормы = ПолучитьОпциюОрганизации(Объект.Организация,"СверткаПотребностиПоНоменклатуреНормы");
	
	Если СверткаПотребностиПоНоменклатуреНормы Тогда
		
		ДополнитьМассивВыделенныхСтрок(МассивВыделенныхСтрок);
		
	КонецЕсли;
	
	СобратьВыбранныйКомплектНаСервере(МассивВыделенныхСтрок);
	
КонецПроцедуры

&НаСервере
Процедура СобратьВыбранныйКомплектНаСервере(МассивВыделенныхСтрок)
	
	ТаблицаДокумента = Объект.Товары.Выгрузить();
	ТаблицаДокумента.Очистить();
	
	//создаем таблицу сворачиваемого комплекта
	
	ТаблицаКомплектовДляОбработки = Новый ТаблицаЗначений;
	ТаблицаКомплектовДляОбработки.Колонки.Добавить("Сотрудник");
	ТаблицаКомплектовДляОбработки.Колонки.Добавить("Комплект");
	ТаблицаКомплектовДляОбработки.Колонки.Добавить("НормаВыдачи");
	ТаблицаКомплектовДляОбработки.Колонки.Добавить("Обработан");
	
	СтруктураПоиска = Новый Структура("Сотрудник,Комплект,НормаВыдачи");
	
	Для Каждого ЭлементМассива Из МассивВыделенныхСтрок Цикл
		
		ДанныеСтроки = Объект.Товары.НайтиПоидентификатору(ЭлементМассива);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ВведенаВручную Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Комплект) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Сотрудник 	= ДанныеСтроки.Сотрудник;
		СтруктураПоиска.Комплект 	= ДанныеСтроки.Комплект;
		СтруктураПоиска.НормаВыдачи = ДанныеСтроки.НормаВыдачи;
		
		Если ТаблицаКомплектовДляОбработки.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			
			НоваяСтрока 			= ТаблицаКомплектовДляОбработки.Добавить();
			НоваяСтрока.Сотрудник 	= ДанныеСтроки.Сотрудник;
			НоваяСтрока.Комплект 	= ДанныеСтроки.Комплект;
			НоваяСтрока.НормаВыдачи = ДанныеСтроки.НормаВыдачи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьКомплекты = Ложь;
	
	Для Каждого СтрокаДокумента Из Объект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Комплект) Тогда
			
			СтруктураПоиска.Сотрудник 	= СтрокаДокумента.Сотрудник;
			СтруктураПоиска.НормаВыдачи = СтрокаДокумента.НормаВыдачи;
			СтруктураПоиска.Комплект 	= СтрокаДокумента.Комплект;
			
			СтрокаТаблицыКомплекта = ТаблицаКомплектовДляОбработки.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокаТаблицыКомплекта.Количество() > 0 Тогда
				ЕстьКомплекты = Истина;
				СтруктураПоиска.НормаВыдачи = СтрокаДокумента.НормаВыдачи;
				УточненнаяСтрокаТаблицыКомплекта = ТаблицаКомплектовДляОбработки.НайтиСтроки(СтруктураПоиска);
				Если УточненнаяСтрокаТаблицыКомплекта.Количество() = 0 Тогда
					НоваяСтрока = ТаблицаКомплектовДляОбработки.Добавить();
					НоваяСтрока.Сотрудник 	= СтрокаДокумента.Сотрудник;
					НоваяСтрока.Комплект 	= СтрокаДокумента.Комплект;
					НоваяСтрока.НормаВыдачи = СтрокаДокумента.НормаВыдачи;
					УточненнаяСтрокаТаблицыКомплекта = НоваяСтрока;
				Иначе 
					УточненнаяСтрокаТаблицыКомплекта = УточненнаяСтрокаТаблицыКомплекта[0];
				КонецЕсли;	
					
				Если не УточненнаяСтрокаТаблицыКомплекта.Обработан = Истина Тогда
					НоваяСтрока = ТаблицаДокумента.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
					НоваяСтрока.Номенклатура 				= СтрокаДокумента.Комплект;
					НоваяСтрока.ХарактеристикаНоменклатуры 	= ПроцедурыРаботыСНормамиСервер.ПолучитьХарактеристикуПоАнтропометрии(НоваяСтрока.Номенклатура,СтрокаДокумента.Сотрудник);
					НоваяСтрока.КоличествоВКомплекте 		= 0;
					НоваяСтрока.Комплект 					= Справочники.Номенклатура.ПустаяСсылка();
					УточненнаяСтрокаТаблицыКомплекта.Обработан = Истина;
				КонецЕсли;
			Иначе
				ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
			КонецЕсли;
		Иначе	
			ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
		КонецЕсли;

	КонецЦикла;
	
	Если ЕстьКомплекты Тогда
		Объект.Товары.Загрузить(ТаблицаДокумента);
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		Сообщить("Комплекты в выбранных строках не найдены.");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОпциюОрганизации(Организация,НаименованиеОпции)
	
	Возврат Организация[НаименованиеОпции];
	
КонецФункции

&НаСервере
Процедура ДополнитьМассивВыделенныхСтрок(МассивВыделенныхСтрок)
	
	ТаблицаДанныхДляОбработки = Новый ТаблицаЗначений;
	ТаблицаДанныхДляОбработки.Колонки.Добавить("Сотрудник");
	ТаблицаДанныхДляОбработки.Колонки.Добавить("НоменклатураНормы");
	
	Для Каждого ЭлементМассива Из МассивВыделенныхСтрок Цикл
		
		ДанныеСтроки = Объект.Товары.НайтиПоидентификатору(ЭлементМассива);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Комплект) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока 					= ТаблицаДанныхДляОбработки.Добавить();
		НоваяСтрока.Сотрудник 			= ДанныеСтроки.Сотрудник;
		НоваяСтрока.НоменклатураНормы 	= ДанныеСтроки.НоменклатураНормы;
		
	КонецЦикла;
	
	Если ТаблицаДанныхДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ЭтаФорма.Объект.Товары Цикл
		
		СтрутураПоиска 	= Новый Структура("Сотрудник, НоменклатураНормы", СтрокаТаблицы.Сотрудник, СтрокаТаблицы.НоменклатураНормы);
		НайденныеСтроки = ТаблицаДанныхДляОбработки.НайтиСтроки(СтрутураПоиска);
		
		Если НЕ НайденныеСтроки.Количество() = 0 Тогда
			МассивВыделенныхСтрок.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНормыПриИзменении(Элемент)
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.ЗаявкаНаВыдачу_ТоварыНоменклатураНормыПриИзменении(Элемент,Объект,ЭтаФорма)");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.ЗаявкаНаВыдачу_ТоварыНоменклатураПриИзменении(Элемент,Объект,ЭтаФорма)");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//запрет редактирования номенклатуры для разобранного комплекта
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Комплект) И Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//МВЗ редактируется только для строк, введенных вручную
	Если НЕ Элемент.ТекущиеДанные.ВведенаВручную И Элемент.ТекущийЭлемент.Имя = "ТоварыМВЗ" Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//далее в зависимости от алгоритма
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.ЗаявкаНаВыдачу_ТоварыПередНачаломИзменения(Элемент, Объект, ЭтаФорма, Отказ)");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокНоменклатурыВыдачи(ТекущиеДанные.НоменклатураНормы,ТекущиеДанные.Сотрудник));
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатураНормы" Тогда	
		
		//список нужен, если используются группы "ИЛИ"
		Если ПолучитьОпциюОрганизации(Объект.Организация,"ИспользоватьГруппыИЛИ") Тогда
			ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьСписокНоменклатурыНормыПоНормеВыдачи(ТекущиеДанные.НормаВыдачи));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыСотрудник" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Сотрудник);
			ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаЭлемента", ПараметрыФормы);
		КонецЕсли;	
	ИначеЕсли Поле.Имя = "ТоварыНормаВыдачи" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.НормаВыдачи) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.НормаВыдачи);
			ОткрытьФорму("Справочник.НормыВыдачиСИЗ.Форма.ФормаЭлемента", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		
		Элемент.ПодчиненныеЭлементы.ТоварыНоменклатура.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокНоменклатурыВыдачи(Элемент.ТекущиеДанные.НоменклатураНормы,Элемент.ТекущиеДанные.Сотрудник));
		
	КонецЕсли;
	
	Если НЕ Элемент.ТекущиеДанные.ВведенаВручную И Элемент.ТекущиеДанные.Количество > Элемент.ТекущиеДанные.КоличествоПотребность ТОгда
		Элемент.ТекущиеДанные.Количество = Элемент.ТекущиеДанные.КоличествоПотребность;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокНоменклатурыВыдачи(НоменклатураНормы,Сотрудник)
	
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(Сотрудник);
	
	ДатаАнализа = ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Объект.Ссылка);
	
	ТаблицаЗанятыхРМ 			= ПроцедурыРаботыСНормамиСервер.ПолучитьТаблицуЗанятыхРабочихМестСУсловиями(МассивСотрудников,Объект.Организация,ДатаАнализа);
	ТаблицаУстановленныхНорм 	= ПроцедурыРаботыСНормамиСервер.ПолучитьТаблицуУстановленныхНорм(Объект.Организация,ДатаАнализа,ТаблицаЗанятыхРМ.ВыгрузитьКолонку("Подразделение"),ТаблицаЗанятыхРМ.ВыгрузитьКолонку("Должность"));
	ТаблицаСНормами 			= ПроцедурыРаботыСНормамиСервер.ПодобратьНормы(ТаблицаЗанятыхРМ,ТаблицаУстановленныхНорм.Скопировать(НОВЫЙ Структура("НоменклатураНормы",НоменклатураНормы)),Объект.Организация,ДатаАнализа,"Сотрудник,Подразделение,Должность,НоменклатураНормы,Использовать");
	
	ТаблицаСоответствия = ПроцедурыРаботыСНормамиСервер.ПолучитьСоответствияНоменклатурыДляСотрудника(ТаблицаСНормами,?(ЗначениеЗаполнено(Объект.Ссылка),ДатаАнализа,ТекущаяДата()),НоменклатураНормы);
	
	Возврат ТаблицаСоответствия.ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	//АСТБ_ALEXEY_70409**************************************************************
	//Объект.МОЛОтправителя = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.СкладОтправитель,Объект.Организация);
	Объект.МОЛОтправителя = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.СкладОтправитель,Объект.Организация,Объект.СоздательДокумента);
	//АСТБ_ALEXEY_70409**************************************************************
	Элементы.МОЛОтправителя.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.СкладОтправитель,Объект.Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ Копирование И НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВведенаВручную = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если НЕ Элемент.ТекущиеДанные.ВведенаВручную Тогда
		Отказ = истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриИзмененииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.МВЗ КАК МВЗ,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Отказ КАК Отказ
	|ПОМЕСТИТЬ ВТ_ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ ТаблицаТовары.Отказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Поставщик КАК Поставщик
	|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ПериодРасчета, Организация = &Организация) КАК ЦеныНоменклатурыСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаТовары.МВЗ КАК МВЗ,
	|	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ВТ_ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_СводнаяТаблица
	|ИЗ
	|	ВТ_ТаблицаТовары КАК ВТ_ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ВТ_ТаблицаТовары.Номенклатура = ВТ_Номенклатура.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаТовары.МВЗ,
	|	ВТ_ТаблицаТовары.ХарактеристикаНоменклатуры,
	|	ВТ_Номенклатура.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СводнаяТаблица.МВЗ КАК МВЗ,
	|	ВТ_СводнаяТаблица.Номенклатура КАК Номенклатура,
	|	ВТ_СводнаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_СводнаяТаблица.Количество КАК Количество,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Цена, 0) * ВТ_СводнаяТаблица.Количество КАК Сумма
	|ИЗ
	|	ВТ_СводнаяТаблица КАК ВТ_СводнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры
	|		ПО ВТ_СводнаяТаблица.Номенклатура = ВТ_ЦеныНоменклатуры.Номенклатура
	|			И ВТ_СводнаяТаблица.Номенклатура.Поставщик = ВТ_ЦеныНоменклатуры.Поставщик
	|
	|УПОРЯДОЧИТЬ ПО
	|	МВЗ,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("ТаблицаТовары",	Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ПериодРасчета",	ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Объект.Ссылка));
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	
	Объект.ТоварыСводная.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Объект.СуммаДокумента = Объект.ТоварыСводная.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТоварыПриИзмененииНаСервере();
	
КонецПроцедуры
