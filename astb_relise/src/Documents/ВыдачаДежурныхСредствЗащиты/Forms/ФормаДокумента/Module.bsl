
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект,НОВЫЙ Структура("ИмяЭлементаДляРазмещения","ГруппаДополнительныеРеквизиты"));
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	//блокируем форму, если по документу выдачи есть передача прав собственности
	Если НЕ Параметры.Ключ.Пустая() Тогда //объект записан в базу
		
		//+++АСТБ_Горюшин_Алексей_17125
		Если Объект.Организация.ПереходПраваСобственностиПоПредварительнойЗаявкеППС
			Тогда 
			ЕстьПередачаПравСобственности = РегистрыНакопления.РеализованныеСИЗ.ЕстьПредварительнаяПередачаПравСобственности(Объект.Ссылка);
			Элементы.ПолеТекстПредупреждения.Заголовок = "По документу существует проведенный документ 'Предварительный переход права собственности'. Редактирование запрещено!";
		Иначе	
		//---АСТБ_Горюшин_Алексей_17125	
		ЕстьПередачаПравСобственности = РегистрыНакопления.СобственныеСИЗ.ЕстьПередачаПравСобственности(Объект.Ссылка);
		//+++АСТБ_Горюшин_Алексей_17125
		КонецЕсли;
		//---АСТБ_Горюшин_Алексей_17125
		
		ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость 		= ЕстьПередачаПравСобственности;
		
		Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
			ЭтаФорма.ТолькоПросмотр = ЕстьПередачаПравСобственности;
		КонецЕсли;
		
	Иначе
		
		ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость 		= Ложь;
		ЭтаФорма.Элементы.ШтрихкодыНоменклатуры.ТолькоПросмотр 	= НЕ РольДоступна("АдминистраторСистемы"); 
		
	КонецЕсли;
	
	//Танцюра А.Н. -- №129655 BUG: одновременная установка штрихкодов -- 02.11.2021 <<<
	Элементы.ШтрихкодыНоменклатуры.КоманднаяПанель.ПодчиненныеЭлементы.ШтрихкодыНоменклатурыПерезаполнитьШтрихкоды.Видимость = НЕ Объект.Проведен;
	//Танцюра А.Н. -- №129655 BUG: одновременная установка штрихкодов -- 02.11.2021 >>>
	
	ЭтаФорма.Элементы.МОЛ.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.Склад,Объект.Организация));
	
	// ПодключаемоеОборудование
	ПроцедурыРаботыСНормамиСервер.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
	//АсТБ_Alexey_54797_********************************************************************
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	//АсТБ_Alexey_54797_********************************************************************
	
	//***НСК Трегубов А.А.*** -- Адресное хранение --  03.09.2019 <<<
	АХ_ПриСозданииНаСервере(Отказ,СтандартнаяОбработка);
	//***НСК Трегубов А.А.*** -- Адресное хранение --  03.09.2019 >>>	
	
КонецПроцедуры

//АсТБ_Alexey_54797_********************************************************************
&НаСервере
Процедура ЗаполнитьКолонку_ОбязательнаяМаркировка()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМаркировку") Тогда
		Возврат;
	КонецЕсли;	
	
	Для КАждого СтрокаТаблицыТовары Из Объект.Товары Цикл
		
		СтрокаТаблицыТовары.ОбязательнаяМаркировка = ОбязательнаяМаркировкаНоменклатуры(СтрокаТаблицыТовары.Номенклатура,Объект.Дата);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбязательнаяМаркировкаНоменклатуры(Номенклатура,ДатаАнализа)
	
	Возврат Справочники.Номенклатура.ОбязательнаяМаркировка(Номенклатура,ДатаАнализа);
	
КонецФункции
//АсТБ_Alexey_54797_********************************************************************

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
 	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Организация.ПрефиксШтрихкодаНоменклатуры)
		И ПроцедурыРаботыСНормамиСервер.НужныШтрихкоды(ТекущийОбъект.Товары.ВыгрузитьКолонку("Номенклатура")) Тогда
		Сообщить("Не задан префикс штрихкода номенклатуры!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	Документы.ВыдачаДежурныхСредствЗащиты.ЗаполнитьШтрихкоды(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(ПроцедурыРаботыСНормамиКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Функция ЕстьКодМаркировки(КодМаркировки,ТекстСообщения)
	
	ПараметрыСервиса = ПроцедурыРаботыСНормамиСервер.ПолучитьПараметрыПодключенияКСервисуДляПроверкиКодовМаркировки(Объект.Организация);
	
	ТекстСообщения = "";
	
	Если НЕ ПараметрыСервиса = Неопределено Тогда
	    //АсТБ_Alexey_64630********************************************************************
		Если ПараметрыСервиса.Источник = Перечисления.ИсточникиДляПроверкиКодовМаркировки.ЕИСФ Тогда
	    	ПроцедурыРаботыСНормамиСервер.ПроверитьКодМаркировки(ПараметрыСервиса,КодМаркировки,ТекстСообщения);
		Иначе
			Если НЕ Сред(КодМаркировки,4,3) = "290" Тогда
				ПроцедурыРаботыСНормамиСервер.ПроверитьКодМаркировки(ПараметрыСервиса,КодМаркировки,ТекстСообщения);
			КонецЕсли;	
		КонецЕсли;
		//АсТБ_Alexey_64630********************************************************************
	Иначе
		ТекстСообщения = "Не заданы параметры для подключения к сервису для проверки кодов маркировки!";
	КонецЕсли;
	
	Возврат ТекстСообщения = "";
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если ЭтаФорма.Элементы.Страницы.ТекущаяСтраница = ЭтаФорма.Элементы.ГруппаШтрихкоды Тогда
		
		ТекущиеДанные = ЭтаФорма.Элементы.ШтрихкодыНоменклатуры.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Штрихкод = СтрЗаменить(ДанныеШтрихкодов[0].Штрихкод,Символ(29)," ");
		ТекущиеДанные.Штрихкод = СтрЗаменить(ТекущиеДанные.Штрихкод,Символ(19)," "); 
		
		Модифицированность = Истина;
		
	ИначеЕсли ЭтаФорма.Элементы.Страницы.ТекущаяСтраница = ЭтаФорма.Элементы.ГруппаТовары Тогда
		
		ТекущиеДанныеТовары = ЭтаФорма.Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанныеТовары = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		//+++АСТБ_Горюшин_Алексей_19442
		Если НЕ УказанВидМаркированнойНоменклатуры(ТекущиеДанныеТовары.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		//---АСТБ_Горюшин_Алексей_19442
		
		//АсТБ_Alexey_70791*******************************************************************
		Если ЗначениеЗаполнено(ТекущиеДанныеТовары.ПроцентИзноса) Тогда
			Возврат;
		КонецЕсли;	
		//АсТБ_Alexey_70791*******************************************************************
		
		Если ТипЗнч(ДанныеШтрихкодов) = Тип("Строка") Тогда
			КодМаркировки = СтрЗаменить(ДанныеШтрихкодов,Символ(29)," ");
			КодМаркировки = СтрЗаменить(КодМаркировки,Символ(19)," ");
		Иначе
			КодМаркировки = СтрЗаменить(ДанныеШтрихкодов[0].Штрихкод,Символ(29)," ");
			КодМаркировки = СтрЗаменить(КодМаркировки,Символ(19)," ");
		КонецЕсли;
		
		ТекстСообщения = "";
		
		//АсТБ_Alexey_64630********************************************************************
		//Если НЕ Сред(КодМаркировки,4,3) = "290" Тогда
			
			Если НЕ ЕстьКодМаркировки(КодМаркировки,ТекстСообщения) Тогда
				
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ТекстСообщения;
				СообщениеПользователю.Сообщить();
				
				Возврат;
				
			КонецЕсли;
			
		//КонецЕсли;
		//АсТБ_Alexey_64630********************************************************************
		
		НайденныеСтроки = Объект.КодыМаркировки.НайтиСтроки(НОВЫЙ Структура("КодМаркировки",КодМаркировки));
		
		Если НайденныеСтроки.Количество() = 0 ТОгда
			
			Если Сред(КодМаркировки,4,3) = "290" Тогда //это универсальный GTIN
				
				НоваяСтрока 				= Объект.КодыМаркировки.Добавить();
				НоваяСтрока.КодМаркировки 	= КодМаркировки;
		    	Модифицированность 			= Истина;
			
				НоваяСтрока.Номенклатура 				= ТекущиеДанныеТовары.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры 	= ТекущиеДанныеТовары.ХарактеристикаНоменклатуры;
				
			Иначе //это уникальный GTIN
				
				РезультатПроверки = ПроверитьGTINНоменклатуры(Сред(КодМаркировки,4,13),ТекущиеДанныеТовары.Номенклатура,ТекущиеДанныеТовары.ХарактеристикаНоменклатуры);
				
				Если РезультатПроверки = "" Тогда
					НоваяСтрока 				= Объект.КодыМаркировки.Добавить();
					НоваяСтрока.КодМаркировки 	= КодМаркировки;
		    		Модифицированность 			= Истина;
					НоваяСтрока.Номенклатура 				= ТекущиеДанныеТовары.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры 	= ТекущиеДанныеТовары.ХарактеристикаНоменклатуры;
				Иначе
					СообщениеПользователю = Новый СообщениеПользователю;
					СообщениеПользователю.Текст = РезультатПроверки;
					СообщениеПользователю.Сообщить();
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьGTINНоменклатуры(GTIN,Номенклатура,ХарактеристикаНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	GTINНоменклатуры.GTIN КАК GTIN,
	|	GTINНоменклатуры.Номенклатура КАК Номенклатура,
	|	GTINНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.GTINНоменклатуры КАК GTINНоменклатуры
	|ГДЕ
	|	GTINНоменклатуры.GTIN = &GTIN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	GTINНоменклатуры.GTIN КАК GTIN,
	|	GTINНоменклатуры.Номенклатура КАК Номенклатура,
	|	GTINНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.GTINНоменклатуры КАК GTINНоменклатуры
	|ГДЕ
	|	GTINНоменклатуры.Номенклатура = &Номенклатура
	|	И GTINНоменклатуры.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("GTIN",						GTIN);
	Запрос.УстановитьПараметр("Номенклатура",				Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",	ХарактеристикаНоменклатуры);
	
	Результат = Запрос.ВыполнитьПакет();
	
	РезультатПоGTIN 		= Результат[0].Выгрузить();
	РезультатПоНоменклатуре = Результат[1].Выгрузить();
	
	РезультатПРоверки = "";
	
	Если РезультатПоGTIN.Количество() = 0 Тогда //возможно, это GTIN стороннего поставщика - проверяем номенклатуру в регистре
		Если НЕ РезультатПоНоменклатуре.Количество() = 0 Тогда //неверный GTIN
			РезультатПроверки = "Считан неверный код маркировки для выбранной номенклатуры: " + Номенклатура + ?(ЗначениеЗаполнено(ХарактеристикаНоменклатуры)," (" + ХарактеристикаНоменклатуры + ") "," ") + "Убедитесь, что считывается код для нужной номенклатуры";
		КонецЕсли;
	Иначе
		НоменклаутраПоРегистру 					= РезультатПоGTIN[0].Номенклатура;
		ХарактеристикаНоменклатурыПоРегистру 	= РезультатПоGTIN[0].ХарактеристикаНоменклатуры;
		Если (НЕ НоменклаутраПоРегистру = Номенклатура) ИЛИ (НЕ ХарактеристикаНоменклатурыПоРегистру = ХарактеристикаНоменклатуры) Тогда
			РезультатПроверки = "Считан неверный код маркировки для выбранной номенклатуры: " + Номенклатура + ?(ЗначениеЗаполнено(ХарактеристикаНоменклатуры)," (" + ХарактеристикаНоменклатуры + ") "," ") + "Убедитесь, что считывается код для нужной номенклатуры";
		КонецЕсли;	
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "СВОЙСТВА"

// СтандартныеПодсистемы.Свойства
 &НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "ПЕЧАТЬ"

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
  УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
  
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ...

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксимальныйШтрихкодПоДокументу = ПроцедурыРаботыСНормамиСервер.ПолучитьМаксимальныйШтрихкодДокументаЧислом(ТекущийОбъект.Ссылка);
	
	Если МаксимальныйШтрихкодПоДокументу > Объект.Организация.МаксимальноеЗначениеШтрихкода Тогда
		ОрганизацияОбъект = Объект.Организация.ПолучитьОбъект();
		ОрганизацияОбъект.МаксимальноеЗначениеШтрихкода = МаксимальныйШтрихкодПоДокументу;
		ОрганизацияОбъект.Записать();
	КонецЕсли;
	
	//Танцюра А.Н. -- №129655 BUG: одновременная установка штрихкодов -- 02.11.2021 <<<
	Элементы.ШтрихкодыНоменклатуры.КоманднаяПанель.ПодчиненныеЭлементы.ШтрихкодыНоменклатурыПерезаполнитьШтрихкоды.Видимость = НЕ Объект.Проведен;
	//Танцюра А.Н. -- №129655 BUG: одновременная установка штрихкодов -- 02.11.2021 >>>
	
	//***НСК Трегубов А.А.*** -- Адресное хранение --  03.09.2019 <<<
	АХ_ПослеЗаписиНаСервере(ТекущийОбъект,ПараметрыЗаписи);	
	//***НСК Трегубов А.А.*** -- Адресное хранение --  03.09.2019 >>>	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	Объект.Товары.Очистить();
	//АСТБ_ALEXEY_72838_**************************************************************
	Объект.ШтрихкодыНоменклатуры.Очистить();
	Объект.КодыМаркировки.Очистить();
	//АСТБ_ALEXEY_72838_**************************************************************
	//АСТБ_ALEXEY_69654_**************************************************************
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Склад = ПроцедурыРаботыСНормамиСервер.ПолучитьСкладОрганизации(Объект.Организация);
	КонецЕсли;	
	//АСТБ_ALEXEY_69654_**************************************************************
	//АСТБ_ALEXEY_70409**************************************************************
	//Объект.МОЛ = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация);
	Объект.МОЛ = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация,Объект.СоздательДокумента);
	//АСТБ_ALEXEY_70409**************************************************************
	Элементы.МОЛ.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.Склад,Объект.Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	Объект.Товары.Очистить();
	//АСТБ_ALEXEY_72838_**************************************************************
	Объект.ШтрихкодыНоменклатуры.Очистить();
	Объект.КодыМаркировки.Очистить();
	//АСТБ_ALEXEY_72838_**************************************************************
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНаСервере()
	
	Документы.ВыдачаДежурныхСредствЗащиты.ЗаполнитьТаблицуДокумента(Объект);
	
	//АсТБ_Alexey_54797_********************************************************************
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	//АсТБ_Alexey_54797_********************************************************************
	
	//+++АСТБ_Горюшин_Алексей_26518
	ПроверитьАктуальностьКодовМаркировки();
	//---АСТБ_Горюшин_Алексей_26518
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧасть(Команда)
	
	ЗаполнитьТабличнуюЧастьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	МассивИдентификаторовВыделенныхСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	МассивНомеровСтрок = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из МассивИдентификаторовВыделенныхСтрок Цикл
		
		МассивНомеровСтрок.Добавить(Элементы.Товары.ДанныеСтроки(ИдентификаторСтроки).НомерСтроки);
		
	КонецЦикла;
	
	АдресВременногоХранилища = ВыгрузитьТаблицуДокументаВоВременноеХранилище(МассивНомеровСтрок);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВременногоХранилищаТаблицы",	АдресВременногоХранилища);
	ПараметрыФормы.Вставить("Склад",							Объект.Склад);
	ПараметрыФормы.Вставить("Дата",								?(ЗначениеЗаполнено(Объект.Ссылка),Объект.Дата,ТекущаяДата()));
	ПараметрыФормы.Вставить("Сотрудник",						Объект.Сотрудник);
	ПараметрыФормы.Вставить("Организация",						Объект.Организация);
	
	ОткрытьФорму("Обработка.ПодборНоменклатурыВыдачи.Форма.ФормаПодбораПоВыделеннымСтрокам",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатурыВыдачи.Форма.ФормаПодбораПоВыделеннымСтрокам" Тогда
		
		СкорректироватьСтроки(ВыбранноеЗначение.АдресРезультатаПодбораВХранилище);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

	Модифицированность = Истина;
	
	//+++АСТБ_Горюшин_Алексей_26518
	ПроверитьАктуальностьКодовМаркировки();
	//---АСТБ_Горюшин_Алексей_26518

КонецПроцедуры

&НаСервере
Функция ВыгрузитьТаблицуДокументаВоВременноеХранилище(МассивНомеровСтрок)
	
	ТаблицаДляОбработки = Объект.Товары.Выгрузить();
	ТаблицаДляОбработки.Очистить();
	ТаблицаДляОбработки.Колонки.Добавить("ИдентификаторСтрокиДокумента",Новый ОписаниеТипов("Число"));
	
	Для Каждого НомерСтроки Из МассивНомеровСтрок Цикл
		
		НоваяСтрока = ТаблицаДляОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Объект.Товары[НомерСтроки - 1]);
		НоваяСтрока.ИдентификаторСтрокиДокумента = НомерСтроки - 1;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДляОбработки,ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура СкорректироватьСтроки(АдресРезультатаПодбораВХранилище)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаДокумента = ТекущийОбъект.Товары.Выгрузить();
	ТаблицаДокумента.Очистить();
	
	ТаблицаДанныхПодбора = ПолучитьИзВременногоХранилища(АдресРезультатаПодбораВХранилище);
	
	Для Каждого СтрокаТовары Из ТекущийОбъект.Товары Цикл
		
		НайденныеСтроки = ТаблицаДанныхПодбора.НайтиСтроки(Новый Структура("ИдентификаторСтрокиДокумента",СтрокаТовары.НомерСтроки - 1));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаТовары);
			
		Иначе
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),НайденнаяСтрока);
				
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.Товары.Загрузить(ТаблицаДокумента);
	
	ТекущийОбъект.СуммаДокумента = ТекущийОбъект.Товары.Итог("Сумма");	
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
	//АсТБ_Alexey_54797_********************************************************************
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	//АсТБ_Alexey_54797_********************************************************************
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокНоменклатурыВыдачи(ТекущиеДанные.НоменклатураНормы,Объект.Сотрудник));
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатураНормы" Тогда	
		
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьСписокНоменклатурыНормыПоНормеВыдачи(ТекущиеДанные.НормаВыдачи));
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыПроцентИзноса" Тогда
		
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПроцентИзноса.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьСписокПроцентовИзносаПоОстаткам(ТекущиеДанные.Номенклатура,ТекущиеДанные.ХарактеристикаНоменклатуры,Объект.Склад,Объект.Организация));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРезультатПодбораИзХранилища(АдресРезультатаПодбораВХранилище)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаПодбора = ПолучитьИзВременногоХранилища(АдресРезультатаПодбораВХранилище);
	
	Для Каждого СтрокаТаблицыПодбора Из ТаблицаПодбора Цикл
		
		СтрокаДокумента = ТекущийОбъект.Товары[СтрокаТаблицыПодбора.НомерСтрокиДокумента-1];
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента,СтрокаТаблицыПодбора);
		
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
	//АсТБ_Alexey_54797_********************************************************************
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	//АсТБ_Alexey_54797_********************************************************************
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокНоменклатурыВыдачи(НоменклатураНормы,Сотрудник)
	
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(Сотрудник);
	
	ДатаАнализа = ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Объект.Ссылка);
	
	ТаблицаЗанятыхРМ 			= ПроцедурыРаботыСНормамиСервер.ПолучитьТаблицуЗанятыхРабочихМестСУсловиями(МассивСотрудников,Объект.Организация,ДатаАнализа);
	ТаблицаУстановленныхНорм 	= ПроцедурыРаботыСНормамиСервер.ПолучитьТаблицуУстановленныхНорм(Объект.Организация,ДатаАнализа,ТаблицаЗанятыхРМ.ВыгрузитьКолонку("Подразделение"),ТаблицаЗанятыхРМ.ВыгрузитьКолонку("Должность"),ЛОЖЬ);
	ТаблицаСНормами 			= ПроцедурыРаботыСНормамиСервер.ПодобратьНормы(ТаблицаЗанятыхРМ,ТаблицаУстановленныхНорм.Скопировать(НОВЫЙ Структура("НоменклатураНормы",НоменклатураНормы)),Объект.Организация,ДатаАнализа,"Сотрудник,Подразделение,Должность,НоменклатураНормы,Использовать");
	
	ТаблицаСоответствия = ПроцедурыРаботыСНормамиСервер.ПолучитьСоответствияНоменклатурыДляСотрудника(ТаблицаСНормами,?(ЗначениеЗаполнено(Объект.Ссылка),ДатаАнализа,ТекущаяДата()),НоменклатураНормы);
	
	Возврат ТаблицаСоответствия.ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОпциюОрганизации(Организация,НаименованиеОпции)
	
	Возврат Организация[НаименованиеОпции];
	
КонецФункции

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыКоличество" Тогда
		Элемент.ТекущиеДанные.Сумма = Элемент.ТекущиеДанные.Количество * Элемент.ТекущиеДанные.Цена;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
			Элемент.ТекущиеДанные.Цена = ПолучитьЦенуСервер(Элемент.ТекущиеДанные.Номенклатура);
			Элемент.ТекущиеДанные.Сумма = Элемент.ТекущиеДанные.Количество * Элемент.ТекущиеДанные.Цена;
		Иначе
			Элемент.ТекущиеДанные.Цена = 0;
			Элемент.ТекущиеДанные.Сумма = 0;
		КонецЕсли;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыЦена" Тогда
		Элемент.ТекущиеДанные.Сумма = Элемент.ТекущиеДанные.Количество * Элемент.ТекущиеДанные.Цена;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	
	//АсТБ_Alexey_54797_********************************************************************
	ТоварыПриИзмененииНаСервере();
	//АсТБ_Alexey_54797_********************************************************************
	
КонецПроцедуры

//АсТБ_Alexey_54797_********************************************************************
&НаСервере
Процедура ТоварыПриИзмененииНаСервере()
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
КонецПроцедуры
//АсТБ_Alexey_54797_********************************************************************

&НаСервере
Функция ПолучитьЦенуСервер(Номенклатура)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Цена = ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(Номенклатура,Объект.Организация,Объект.Дата);
	Иначе
		Цена = ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(Номенклатура,Объект.Организация,ТекущаяДата());
	Конецесли;
	
	Возврат Цена;
	
КонецФункции

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	//АСТБ_ALEXEY_70409**************************************************************
	//Объект.МОЛ = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация);
	Объект.МОЛ = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация,Объект.СоздательДокумента);
	//АСТБ_ALEXEY_70409**************************************************************
	Элементы.МОЛ.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.Склад,Объект.Организация));
	
КонецПроцедуры

#Область АдресноеХранение

&НаСервере
Процедура АХ_ПриСозданииНаСервере(Отказ,СтандартнаяОбработка)	
	АХ_УстановитьВидимостьИДоступность();	
КонецПроцедуры

&НаСервере
Процедура АХ_ПослеЗаписиНаСервере(ТекущийОбъект,ПараметрыЗаписи)	
	АХ_УстановитьВидимостьИДоступность();	
КонецПроцедуры

&НаКлиенте
Процедура АХ_ПередатьНаСклад(Команда)
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(Объект.Ссылка);	
	
	СтруктураОбработкиОшибок = АХ_ОбменКлиент.ИнициализироватьСтруктуруОбработкиОшибок();
	АХ_ОбменКлиент.ПередатьДанныеВАдресноеХранение(МассивДанных,ЭтотОбъект.Модифицированность,СтруктураОбработкиОшибок);	
	
	АХ_УстановитьВидимостьИДоступность();	
	
КонецПроцедуры

&НаСервере
Процедура АХ_УстановитьВидимостьИДоступность()
	
	СтруктураСвойствОформления = АХ_ОбменВызовСервера.МожноСформироватьПланСнятия(Объект);
	
	Для Каждого Свойство из СтруктураСвойствОформления Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АХ_ПередатьНаСклад",
		Свойство.Ключ,	
		Свойство.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КодыМаркировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Копирование;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДвоичныеДанныеКомпоненты()
	
	Возврат ПолучитьОбщийМакет("КомпонентаAddInNative");
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//10.04.2020 отключено принулительное переключение раскладки на латиницу
	//МакетКомпоненты = ПолучитьДвоичныеДанныеКомпоненты();
	//МакетКомпоненты.Записать("C:\Temp\AddInNative.dll");
	//
	////принудительное переключение раскладки на латиницу
	//ВККонтекст = Неопределено;
	//
	//Попытка
	//	
	//	ПодключитьВнешнююКомпоненту("C:\Temp\AddInNative.dll","kbd", ТипВнешнейКомпоненты.Native);
	//	//ПодключитьВнешнююКомпоненту("E:\Install_old\PUBID_292148-AddInNative\AddInNative.dll","kbd", ТипВнешнейКомпоненты.Native);
	//	ВККонтекст = Новый("AddIn.kbd.KeyboardLayout");
	//	
	//Исключение
	//	
	//	СообщениеПользователю = Новый СообщениеПользователю;
	//	СообщениеПользователю.Текст = "Ошибка при инициализации внешней копоненты AddInNative.dll!" + Символы.ПС + ОписаниеОшибки();
	//	СообщениеПользователю.Сообщить();
	//	
	//Конецпопытки;
	//
	//Если не ВККонтекст = неопределено тогда 
	//	//ВККонтекст. УстановитьРаскладкуБезОбработки ("00000419");          //Русская раскладка
	//	ВККонтекст.УстановитьРаскладкуБезОбработки("00000409");          //Латинская раскладка
	//КонецЕсли;
	//
	//ВККонтекст = Неопределено;
	//
	//УдалитьФайлы("C:\Temp\","*.dll");
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриОтключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКодаМаркировки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);	
	
	ПоказатьВводСтроки(Оповещение, , НСтр("ru = 'Введите код маркировки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(КодМаркировки, ДополнительныеПараметры) Экспорт
	
	Если КодМаркировки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОбработатьШтрихкоды(КодМаркировки);
	
КонецПроцедуры

//+++АСТБ_Горюшин_Алексей_19442
&НаСервереБезКонтекста
Функция УказанВидМаркированнойНоменклатуры(Номенклатура)
	
	Если ЗначениеЗаполнено(Номенклатура.ВидМаркированнойНоменклатуры) Тогда
		Возврат Истина;
	Иначе
		ТекстСообщения = "Для номенклатуры ""%1"" не требуется считывать код маркировки.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Номенклатура);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции //---АСТБ_Горюшин_Алексей_19442

//+++АСТБ_Горюшин_Алексей_26518
&НаСервере
Процедура ПроверитьАктуальностьКодовМаркировки()
	
	УдаляемыеСтроки = Новый Массив();
	
	Для Каждого СтрокаКодовМарикровки ИЗ Объект.КодыМаркировки Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", СтрокаКодовМарикровки.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаКодовМарикровки.ХарактеристикаНоменклатуры);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаКодовМарикровки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока ИЗ УдаляемыеСтроки Цикл
		Объект.КодыМаркировки.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры //---АСТБ_Горюшин_Алексей_26518

//+++АСТБ_Горюшин_Алексей_26518
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ПроверитьАктуальностьКодовМаркировки();
	
	//АсТБ_Alexey_54797_********************************************************************
	ТоварыНоменклатураПриИзмененииНаСервере();
	//АсТБ_Alexey_54797_********************************************************************
	
КонецПроцедуры //---АСТБ_Горюшин_Алексей_26518

//+++АСТБ_Горюшин_Алексей_26518
&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	ПроверитьАктуальностьКодовМаркировки();
КонецПроцедуры //---АСТБ_Горюшин_Алексей_26518

//+++АСТБ_Горюшин_Алексей_57264
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры //---АСТБ_Горюшин_Алексей_57264

//АсТБ_Alexey_54797_********************************************************************
&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере()
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
КонецПроцедуры

//АсТБ_Alexey_54797_********************************************************************

//АсТБ_Alexey_72279_********************************************************************

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьТаблицуШтрихкодов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуШтрихкодов()
	
	ТаблицаШрихкодов = Объект.ШтрихкодыНоменклатуры.Выгрузить();
	ТаблицаШрихкодов.ЗаполнитьЗначения(Объект.Дата,"ДатаВыдачи");
	Объект.ШтрихкодыНоменклатуры.Загрузить(ТаблицаШрихкодов);
	
КонецПроцедуры	

//АсТБ_Alexey_72279_********************************************************************

//Танцюра А.Н. -- №129655 BUG: одновременная установка штрихкодов -- 02.11.2021 <<<

&НаСервере
Процедура ПерезаполнитьШтрихкодыНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекущийОбъект.ШтрихкодыНоменклатуры.Очистить();
	
	Документы.ВыдачаДежурныхСредствЗащиты.ЗаполнитьШтрихкоды(ТекущийОбъект);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьШтрихкоды(Команда)
	
	Если Объект.ШтрихкодыНоменклатуры.Количество() > 0 Тогда

		Текст = "ru = ""Табличная часть будет очищена! Продолжить выполнение операции?"";";
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры);
		
		ПоказатьВопрос(Оповещение,НСтр(Текст),РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

    ПерезаполнитьШтрихкодыНаСервере();
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

//Танцюра А.Н. -- №129655 BUG: одновременная установка штрихкодов -- 02.11.2021 >>>