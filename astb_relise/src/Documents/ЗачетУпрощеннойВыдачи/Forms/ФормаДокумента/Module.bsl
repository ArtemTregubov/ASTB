////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
 	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект,НОВЫЙ Структура("ИмяЭлементаДляРазмещения","ГруппаДополнительныеРеквизиты"));
	// Конец СтандартныеПодсистемы.Свойства
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
 	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Сотрудники.Форма.ФормаВыбора" Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			
			ЗаполнитьПоСотрудникамНаСервере(ВыбранноеЗначение);
			
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ДолжностиИПрофессии.Форма.ФормаВыбора" Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			
			ЗаполнитьПоДолжностямНаСервере(ВыбранноеЗначение);
			
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Подразделения.Форма.ФормаВыбора" Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			
			ЗаполнитьПоПодразделениямНаСервере(ВыбранноеЗначение);
			
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НоменклатураНормОрганизации.Форма.ФормаВыбора" Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			
			ЗаполнитьПоНоменклатуреНормыНаСервере(ВыбранноеЗначение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Товары.Очистить();
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "СВОЙСТВА"

// СтандартныеПодсистемы.Свойства
 &НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ...

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ДОКУМЕНТА...

&НаСервере
Процедура ЗаполнитьПолностьюНаСервере()
	
	Документы.ЗачетУпрощеннойВыдачи.ЗаполнитьТаблицуДокумента(Объект,"Полностью");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолностью(Команда)
	
	ЗаполнитьПолностьюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСотрудникамНаСервере(СписокСотрудников)
	
	Документы.ЗачетУпрощеннойВыдачи.ЗаполнитьТаблицуДокумента(Объект,"ПоСотрудникам",СписокСотрудников);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСотрудникам(Команда)
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормыВыбора.Вставить("Отбор",              Новый Структура("Владелец", Объект.Организация));
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",ПараметрыФормыВыбора,ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПодразделениямНаСервере(СписокПодразделений)
	
	Документы.ЗачетУпрощеннойВыдачи.ЗаполнитьТаблицуДокумента(Объект,"ПоПодразделениям",СписокПодразделений);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПодразделениям(Команда)
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормыВыбора.Вставить("Отбор",              Новый Структура("Владелец", Объект.Организация));
	
	ОткрытьФорму("Справочник.Подразделения.ФормаВыбора",ПараметрыФормыВыбора,ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДолжностямНаСервере(СписокДолжностей)
	
	Документы.ЗачетУпрощеннойВыдачи.ЗаполнитьТаблицуДокумента(Объект,"ПоДолжностям",СписокДолжностей);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДолжностям(Команда)
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
	
	ОткрытьФорму("Справочник.ДолжностиИПрофессии.ФормаВыбора",ПараметрыФормыВыбора,ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНоменклатуреНормыНаСервере(СписокНоменклатурыНорм)
	
	Документы.ЗачетУпрощеннойВыдачи.ЗаполнитьТаблицуДокумента(Объект,"ПоНоменклатуреНормы",СписокНоменклатурыНорм);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНоменклатуреНормы(Команда)
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормыВыбора.Вставить("Отбор",              Новый Структура("Владелец", Объект.Организация));
	
	ОткрытьФорму("Справочник.НоменклатураНормОрганизации.ФормаВыбора",ПараметрыФормыВыбора,ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыНормаВыдачи" Тогда
		
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыГруппаПотребность.ПодчиненныеЭлементы.ТоварыНормаВыдачи.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокНормыВыдачи(ТекущиеДанные.Сотрудник));
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыДатаПотребности" Тогда
		
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыГруппаПотребность.ПодчиненныеЭлементы.ТоварыДатаПотребности.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокДатПотребности(ТекущиеДанные.Сотрудник,ТекущиеДанные.НормаВыдачи));
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатураНормыПотребности" Тогда
		
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыГруппаПотребность.ПодчиненныеЭлементы.ТоварыНоменклатураНормыПотребности.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокНоменклатурыНормы(ТекущиеДанные.НормаВыдачи));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокНормыВыдачи(ТекущийСотрудник)
	
	ДатаАнализа = ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Объект.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи КАК НормаВыдачи
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(
	|			&ДатаАнализа,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК ПотребностьВыдачиСИЗОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи.Наименование";
	
	Запрос.УстановитьПараметр("ДатаАнализа",ДатаАнализа);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник",	ТекущийСотрудник);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НормаВыдачи");
	
КонецФункции

&НаКлиенте
Процедура ТоварыНормаВыдачиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НоменклатураНормыПотребности 	= ПолучитьНоменклатуруНормы(ТекущиеДанные.НормаВыдачи);	
	
	Если ИспользоватьВилку(Объект.Организация) Тогда
		
		ТекущиеДанные.ДатаПотребности 		= Дата('00010101');
		ТекущиеДанные.КоличествоПотребность	= 0;
		
	Иначе
		
		МассивДатПотребности = ПолучитьСписокДатПотребности(ТекущиеДанные.Сотрудник,ТекущиеДанные.НормаВыдачи);
		
		ТекущиеДанные.ДатаПотребности 		= МассивДатПотребности[0];
		ТекущиеДанные.КоличествоПотребность	= ПолучитьОстатокПоПотребности(ТекущиеДанные.Сотрудник,ТекущиеДанные.НормаВыдачи,ТекущиеДанные.НоменклатураНормыПотребности,ТекущиеДанные.ДатаПотребности);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьВилку(Организация)
	
	Возврат Организация.ЧастичнаяВыдача = 3 ИЛИ Организация.ЧастичнаяВыдача = 4;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНоменклатуруНормы(НормаВыдачи)
	
	Возврат НормаВыдачи.СоставНормы[0].НоменклатураНормы;
	
КонецФункции	

&НаСервере
Функция ПолучитьСписокДатПотребности(ТекущийСотрудник,ТекущаяНормаВыдачи)
	
	ДатаАнализа = ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Объект.Ссылка);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПотребностьВыдачиСИЗОстатки.ДатаПотребности КАК ДатаПотребности
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(
	|			&ДатаАнализа,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник
	|				И НормаВыдачи = &НормаВыдачи) КАК ПотребностьВыдачиСИЗОстатки
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ПотребностьВыдачиСИЗОстатки.ДатаПотребности, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&ДатаДокумента, МЕСЯЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПотребности";
	
	Запрос.УстановитьПараметр("ДатаАнализа",ДатаАнализа);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник",	ТекущийСотрудник);
	Запрос.УстановитьПараметр("НормаВыдачи",ТекущаяНормаВыдачи);
	Запрос.УстановитьПараметр("ДатаДокумента",?(ЗначениеЗаполнено(Объект.Ссылка),Объект.Дата,ТекущаяДата()));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДатаПотребности");
		
КонецФункции

&НаСервере
Функция ПолучитьСписокНоменклатурыНормы(НормаВыдачи)

    Возврат НормаВыдачи.СоставНормы.ВыгрузитьКолонку("НоменклатураНормы");
	
КонецФункции	
	
&НаКлиенте
Процедура ТоварыДатаПотребностиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КоличествоПотребность = ПолучитьОстатокПоПотребности(ТекущиеДанные.Сотрудник,ТекущиеДанные.НормаВыдачи,ТекущиеДанные.НоменклатураНормыПотребности,ТекущиеДанные.ДатаПотребности);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОстатокПоПотребности(ТекущийСотрудник,ТекущаяНормаВыдачи,ТекущаяНоменклатураНормы,ТекущаяДатаПотребности)
	
	ДатаАнализа = ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Объект.Ссылка);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ПотребностьВыдачиСИЗОстатки.КоличествоОстаток) КАК Количество,
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник КАК Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи КАК НормаВыдачи,
	|	ПотребностьВыдачиСИЗОстатки.ДатаПотребности КАК ДатаПотребности
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(
	|			&ДатаАнализа,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник
	|				И НормаВыдачи = &НормаВыдачи
	|				И НоменклатураНормы = &НоменклатураНормы
	|				И ДатаПотребности = &ДатаПотребности) КАК ПотребностьВыдачиСИЗОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи,
	|	ПотребностьВыдачиСИЗОстатки.ДатаПотребности";
	
	Запрос.УстановитьПараметр("ДатаАнализа",		ДатаАнализа);
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник",			ТекущийСотрудник);
	Запрос.УстановитьПараметр("НормаВыдачи",		ТекущаяНормаВыдачи);
	Запрос.УстановитьПараметр("НоменклатураНормы",	ТекущаяНоменклатураНормы);
	Запрос.УстановитьПараметр("ДатаПотребности",	ТекущаяДатаПотребности);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат ТаблицаЗапроса[0].Количество;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураНормыПотребностиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьВилку(Объект.Организация) Тогда
		
		ТекущиеДанные.ДатаПотребности 		= Дата('00010101');
		ТекущиеДанные.КоличествоПотребность	= 0;
		
	Иначе
		
		МассивДатПотребности = ПолучитьСписокДатПотребности(ТекущиеДанные.Сотрудник,ТекущиеДанные.НормаВыдачи);
		
		ТекущиеДанные.ДатаПотребности 		= МассивДатПотребности[0];
		ТекущиеДанные.КоличествоПотребность	= ПолучитьОстатокПоПотребности(ТекущиеДанные.Сотрудник,ТекущиеДанные.НормаВыдачи,ТекущиеДанные.НоменклатураНормыПотребности,ТекущиеДанные.ДатаПотребности);
		
	КонецЕсли;
	
КонецПроцедуры
