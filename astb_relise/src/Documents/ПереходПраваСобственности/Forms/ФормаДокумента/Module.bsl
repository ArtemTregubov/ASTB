
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
 	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект,НОВЫЙ Структура("ИмяЭлементаДляРазмещения","ГруппаДополнительныеРеквизиты"));
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		Объект.НачалоПериода = НачалоМесяца(ТекущаяДата());
		Объект.КонецПериода = КонецМесяца(ТекущаяДата());
		Модифицированность = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Объект.Товары.Количество() > 0 Тогда
			Объект.Товары.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанныхСАП") Тогда
		
		Если ПроцедурыРаботыСНормамиСервер.ДокументППСВыгруженВСАП(Объект.Ссылка) Тогда
			
			ЭтаФорма.ТолькоПросмотр = Истина;
			ЭтаФорма.Элементы.ПолеТекстПредупреждения.Заголовок = "Документ, выгруженный в SAP, доступен только на просмотр.";
			ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость = Истина;
			
		Иначе
			
			ЭтаФорма.ТолькоПросмотр = Объект.Проведен;
			
			Если Объект.Проведен Тогда
				ЭтаФорма.Элементы.ПолеТекстПредупреждения.Заголовок = "Проведенный документ доступен только на просмотр.";
				ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость = Истина;
			Иначе	
				ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		//АсТБ_Alexey_57850_********************************************************************
		ЕстьУспешнаяВыгрузка = ЗаполнитьТаблицуРезультатовВыгрузкиКомплектов();
		Элементы.ГруппаРезультатыВыгрузкиКомплектов.Видимость = НЕ РезультатыВыгрузкиКомплектов.Количество() = 0;
		ЭтаФорма.ТолькоПросмотр = ЕстьУспешнаяВыгрузка;
		//АсТБ_Alexey_57850_********************************************************************
		
	Иначе
		
		ЭтаФорма.ТолькоПросмотр = Объект.Проведен;
		
		Если Объект.Проведен Тогда
			ЭтаФорма.Элементы.ПолеТекстПредупреждения.Заголовок = "Проведенный документ доступен только на просмотр.";
			ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость = Истина;
		Иначе	
			ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ПериодВыдачи.ДатаНачала 	= Объект.НачалоПериода;
	ПериодВыдачи.ДатаОкончания 	= Объект.КонецПериода;
	
	//+++АсТБ_Alexey_90717_********************************************************************
	УстановитьВидимостьЭлементовГТД();	
	//---АсТБ_Alexey_90717_********************************************************************
	
КонецПроцедуры

//+++АсТБ_Alexey_90717_********************************************************************

&НаСервере
Процедура УстановитьВидимостьЭлементовГТД()
	
	ЕстьНастройкиПодключенияДлязагрузкиГТД = РегистрыСведений.ПараметрыПодключенияКСервисуДляЗагрузкиГТД.ЕстьНастройкиПодключения(Объект.Организация);
	
	Элементы.ТоварыЗаполнитьГТД.Видимость 							= ЕстьНастройкиПодключенияДлязагрузкиГТД;
	Элементы.Товары.ПодчиненныеЭлементы.ТоварыНомерГТД.Видимость 	= ЕстьНастройкиПодключенияДлязагрузкиГТД;
	Элементы.Товары.ПодчиненныеЭлементы.ТоварыСтрана.Видимость 		= ЕстьНастройкиПодключенияДлязагрузкиГТД;
	
КонецПроцедуры	

//---АсТБ_Alexey_90717_********************************************************************

//АсТБ_Alexey_57850_********************************************************************
&НаСервере
Функция ЗаполнитьТаблицуРезультатовВыгрузкиКомплектов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгруженныеКомплектыППСвСАП.Комплект КАК Комплект,
	|	ВыгруженныеКомплектыППСвСАП.КодЗавода КАК КодЗавода,
	|	ВыгруженныеКомплектыППСвСАП.message_type КАК message_type,
	|	ВыгруженныеКомплектыППСвСАП.doc_num КАК doc_num,
	|	ВыгруженныеКомплектыППСвСАП.message_text КАК message_text,
	|	ВыгруженныеКомплектыППСвСАП.XML_text КАК XML_text
	|ИЗ
	|	РегистрСведений.ВыгруженныеКомплектыППСвСАП КАК ВыгруженныеКомплектыППСвСАП
	|ГДЕ
	|	ВыгруженныеКомплектыППСвСАП.ДокументППС = &ДокументППС
	|
	|УПОРЯДОЧИТЬ ПО
	|	Комплект,
	|	КодЗавода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыгруженныеКомплектыППСвСАП.Комплект КАК Комплект,
	|	ВыгруженныеКомплектыППСвСАП.КодЗавода КАК КодЗавода,
	|	ВыгруженныеКомплектыППСвСАП.message_type КАК message_type,
	|	ВыгруженныеКомплектыППСвСАП.doc_num КАК doc_num,
	|	ВыгруженныеКомплектыППСвСАП.message_text КАК message_text,
	|	ВыгруженныеКомплектыППСвСАП.XML_text КАК XML_text
	|ИЗ
	|	РегистрСведений.ВыгруженныеКомплектыППСвСАП КАК ВыгруженныеКомплектыППСвСАП
	|ГДЕ
	|	ВыгруженныеКомплектыППСвСАП.ДокументППС = &ДокументППС
	|	И ВыгруженныеКомплектыППСвСАП.message_type = ""200""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Комплект,
	|	КодЗавода";
	
	Запрос.УстановитьПараметр("ДокументППС",Объект.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ЗначениеВРеквизитФормы(Результат[0].Выгрузить(),"РезультатыВыгрузкиКомплектов");
	
	Возврат Результат[1].Выгрузить().Количество() > 0;
	
КонецФункции	
//АсТБ_Alexey_57850_********************************************************************

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
 	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "СВОЙСТВА"

// СтандартныеПодсистемы.Свойства
 &НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "ПЕЧАТЬ"

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
  УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
  
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ...

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Товары.Количество()>0 Тогда
		
		Текст = НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса_ОрганизацияНачалоВыбора", ЭтаФорма, Параметры);
		
		ПоказатьВопрос(Оповещение,Текст,РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ФормаВыбора = ПолучитьФорму("Справочник.Организации.Форма.ФормаВыбора",,ЭтаФорма,УникальныйИдентификатор);
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса_ОрганизацияНачалоВыбора(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ФормаВыбора = ПолучитьФорму("Справочник.Организации.Форма.ФормаВыбора",,ЭтаФорма,УникальныйИдентификатор);
	ФормаВыбора.Открыть();
		
    Объект.Товары.Очистить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ЗаполнитьПоДокументамВыдачи(Команда)
	
	ЗаполнитьТабличнуюЧастьТовары();

	//АсТБ_Alexey_56458_********************************************************************
	Модифицированность = Истина;
	//АсТБ_Alexey_56458_********************************************************************
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьТовары()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		Объект.КонецПериода = ТекущаяДата();
	КонецЕсли;
	
	Документы.ПереходПраваСобственности.ЗаполнитьПоДокументамВыдачиНаСервере(ТекущийОбъект);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДокументВыдачи) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.ДокументВыдачи);
	
	Если ТипЗнч(Элемент.ТекущиеДанные.ДокументВыдачи) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику") Тогда
		ОткрытьФорму("Документ.ВыдачаСредствЗащитыСотруднику.Форма.ФормаДокумента", ПараметрыФормы);
	ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.ДокументВыдачи) = Тип("ДокументСсылка.ВыдачаДежурныхСредствЗащиты") Тогда
		ОткрытьФорму("Документ.ВыдачаДежурныхСредствЗащиты.Форма.ФормаДокумента", ПараметрыФормы);		
	Иначе
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыдачиПриИзменении(Элемент)
	
	Если Объект.Товары.Количество()>0 Тогда
		
		Текст = НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры);
		
		ПоказатьВопрос(Оповещение,Текст,РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Объект.НачалоПериода = ПериодВыдачи.ДатаНачала;
		Объект.КонецПериода  = ПериодВыдачи.ДатаОкончания;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ПериодВыдачи.ДатаНачала 	= Объект.НачалоПериода;
		ПериодВыдачи.ДатаОкончания 	= Объект.КонецПериода;
        Возврат;
    КонецЕсли;

    Объект.Товары.Очистить();
	
	Объект.НачалоПериода = ПериодВыдачи.ДатаНачала;
	Объект.КонецПериода  = ПериодВыдачи.ДатаОкончания;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

//АсТБ_Alexey_57850_********************************************************************
&НаСервере
Процедура ВыгрузитьКомплектыВSAPНаСервере(Тест = Ложь)
	
	МассивДокументовВыдачи = Объект.Товары.Выгрузить().ВыгрузитьКолонку("ДокументВыдачи");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаДежурныхСредствЗащитыТовары.Ссылка.Склад.КодЗаводаДляВыгрузкиВSAP КАК КодЗавода,
	|	ВыдачаДежурныхСредствЗащитыТовары.Номенклатура КАК Номенклатура,
	|	ВыдачаДежурныхСредствЗащитыТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ВыдачаДежурныхСредствЗащитыТовары.Количество) КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Комплект
	|ПОМЕСТИТЬ ВТ_ДокументыВыдачи
	|ИЗ
	|	Документ.ВыдачаДежурныхСредствЗащиты.Товары КАК ВыдачаДежурныхСредствЗащитыТовары
	|ГДЕ
	|	ВыдачаДежурныхСредствЗащитыТовары.Ссылка В(&МассивДокументовВыдачи)
	|	И ВыдачаДежурныхСредствЗащитыТовары.Номенклатура.Комплект
	|	И НЕ ВыдачаДежурныхСредствЗащитыТовары.Номенклатура.ВидУчетаКомплектаДляППС = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаКомплектов.УчитыватьКакКомплектующие)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыдачаДежурныхСредствЗащитыТовары.Номенклатура,
	|	ВыдачаДежурныхСредствЗащитыТовары.ХарактеристикаНоменклатуры,
	|	ВыдачаДежурныхСредствЗащитыТовары.Ссылка.Склад.КодЗаводаДляВыгрузкиВSAP
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотрудникуТовары.Ссылка.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|			ТОГДА ВыдачаСредствЗащитыСотрудникуТовары.Ссылка.СкладОтправитель.КодЗаводаДляВыгрузкиВSAP
	|		ИНАЧЕ ВыдачаСредствЗащитыСотрудникуТовары.Ссылка.Склад.КодЗаводаДляВыгрузкиВSAP
	|	КОНЕЦ,
	|	ВыдачаСредствЗащитыСотрудникуТовары.Номенклатура,
	|	ВыдачаСредствЗащитыСотрудникуТовары.ХарактеристикаНоменклатуры,
	|	СУММА(ВыдачаСредствЗащитыСотрудникуТовары.Количество),
	|	ВыдачаСредствЗащитыСотрудникуТовары.Комплект
	|ИЗ
	|	Документ.ВыдачаСредствЗащитыСотруднику.Товары КАК ВыдачаСредствЗащитыСотрудникуТовары
	|ГДЕ
	|	НЕ ВыдачаСредствЗащитыСотрудникуТовары.НеВыдано
	|	И ВыдачаСредствЗащитыСотрудникуТовары.Ссылка В(&МассивДокументовВыдачи)
	|	И ВЫБОР
	|			КОГДА ВыдачаСредствЗащитыСотрудникуТовары.Номенклатура.Комплект
	|				ТОГДА НЕ ВыдачаСредствЗащитыСотрудникуТовары.Номенклатура.ВидУчетаКомплектаДляППС = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаКомплектов.УчитыватьКакКомплектующие)
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НЕ ВыдачаСредствЗащитыСотрудникуТовары.Комплект = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|						ТОГДА НЕ ВыдачаСредствЗащитыСотрудникуТовары.Комплект.ВидУчетаКомплектаДляППС = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаКомплектов.УчитыватьКакКомплектующие)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыдачаСредствЗащитыСотрудникуТовары.Номенклатура,
	|	ВыдачаСредствЗащитыСотрудникуТовары.ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотрудникуТовары.Ссылка.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|			ТОГДА ВыдачаСредствЗащитыСотрудникуТовары.Ссылка.СкладОтправитель.КодЗаводаДляВыгрузкиВSAP
	|		ИНАЧЕ ВыдачаСредствЗащитыСотрудникуТовары.Ссылка.Склад.КодЗаводаДляВыгрузкиВSAP
	|	КОНЕЦ,
	|	ВыдачаСредствЗащитыСотрудникуТовары.Комплект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДокументыВыдачи.КодЗавода КАК КодЗавода,
	|	ВТ_ДокументыВыдачи.Комплект КАК Комплект
	|ИЗ
	|	ВТ_ДокументыВыдачи КАК ВТ_ДокументыВыдачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыВыдачи.КодЗавода КАК КодЗавода,
	|	ВТ_ДокументыВыдачи.Номенклатура КАК Номенклатура,
	|	ВТ_ДокументыВыдачи.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ВТ_ДокументыВыдачи.Количество) КАК Количество,
	|	ВТ_ДокументыВыдачи.Комплект КАК Комплект
	|ИЗ
	|	ВТ_ДокументыВыдачи КАК ВТ_ДокументыВыдачи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыВыдачи.КодЗавода,
	|	ВТ_ДокументыВыдачи.Номенклатура,
	|	ВТ_ДокументыВыдачи.ХарактеристикаНоменклатуры,
	|	ВТ_ДокументыВыдачи.Комплект
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодЗавода,
	|	Комплект,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КодыМаркировкиВыданныхСредствЗащиты.Регистратор ССЫЛКА Документ.ВыдачаДежурныхСредствЗащиты
	|			ТОГДА КодыМаркировкиВыданныхСредствЗащиты.Регистратор.Склад.КодЗаводаДляВыгрузкиВSAP
	|		КОГДА КодыМаркировкиВыданныхСредствЗащиты.Регистратор ССЫЛКА Документ.ВыдачаСредствЗащитыСотруднику
	|			ТОГДА ВЫБОР
	|					КОГДА КодыМаркировкиВыданныхСредствЗащиты.Регистратор.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|						ТОГДА КодыМаркировкиВыданныхСредствЗащиты.Регистратор.СкладОтправитель.КодЗаводаДляВыгрузкиВSAP
	|					ИНАЧЕ КодыМаркировкиВыданныхСредствЗащиты.Регистратор.Склад.КодЗаводаДляВыгрузкиВSAP
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодЗавода,
	|	КодыМаркировкиВыданныхСредствЗащиты.Номенклатура КАК Номенклатура,
	|	КодыМаркировкиВыданныхСредствЗащиты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КодыМаркировкиВыданныхСредствЗащиты.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	РегистрСведений.КодыМаркировкиВыданныхСредствЗащиты КАК КодыМаркировкиВыданныхСредствЗащиты
	|ГДЕ
	|	КодыМаркировкиВыданныхСредствЗащиты.Регистратор В(&МассивДокументовВыдачи)
	|	И КодыМаркировкиВыданныхСредствЗащиты.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация",			Объект.Организация);
	Запрос.УстановитьПараметр("МассивДокументовВыдачи",	МассивДокументовВыдачи);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаКомплектов 		= Результат[1].Выгрузить();
	ТаблицаВыдачи 			= Результат[2].Выгрузить();
	ТаблицаКодовМаркировки 	= Результат[3].Выгрузить();
	
	Для Каждого СтрокаТаблицыКомплектов Из ТаблицаКомплектов Цикл
		
		СтруктураПоиска = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыКомплектов);
		
		НайденныеСтроки = ТаблицаВыдачи.НайтиСтроки(СтруктураПоиска);
		
		Если ЗначениеЗаполнено(СтрокаТаблицыКомплектов.Комплект) Тогда //комплект разобран
			
			ХМЛ = Новый ЗаписьXML;
			
			ХМЛ.УстановитьСтроку();
			
			ХМЛ.ЗаписатьОбъявлениеXML();
			
			ХМЛ.ЗаписатьНачалоЭлемента("Root");
			
			ХМЛ.ЗаписатьНачалоЭлемента("TestRun");
			ХМЛ.ЗаписатьТекст(?(Тест,"True",""));
			ХМЛ.ЗаписатьКонецЭлемента(); //TestRun
			
			ХМЛ.ЗаписатьНачалоЭлемента("DocDate");
			ХМЛ.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=dd.MM.yyyy"));
			ХМЛ.ЗаписатьКонецЭлемента(); //DocDate
			
			ХМЛ.ЗаписатьНачалоЭлемента("HeaderTxt");
			ХМЛ.ЗаписатьТекст("Комплектация");
			ХМЛ.ЗаписатьКонецЭлемента(); //HeaderTxt
			
			ХМЛ.ЗаписатьНачалоЭлемента("SelfPickUpPoint");
			ХМЛ.ЗаписатьТекст(СтрокаТаблицыКомплектов.КодЗавода);
			ХМЛ.ЗаписатьКонецЭлемента(); //SelfPickUpPoint
			
			ХМЛ.ЗаписатьНачалоЭлемента("AutoTz");
			ХМЛ.ЗаписатьТекст("True");
			ХМЛ.ЗаписатьКонецЭлемента(); //AutoTz
			
			ХМЛ.ЗаписатьНачалоЭлемента("SetLines");
			
			ХМЛ.ЗаписатьНачалоЭлемента("Set");
			
			ХМЛ.ЗаписатьНачалоЭлемента("SetCode");
			ХМЛ.ЗаписатьТекст(Формат(СтрокаТаблицыКомплектов.Комплект.КодСинхронизации,"ЧГ="));
			ХМЛ.ЗаписатьКонецЭлемента(); //SetCode
			
			ХМЛ.ЗаписатьНачалоЭлемента("SetSize");
			ХМЛ.ЗаписатьТекст(?(ЗначениеЗаполнено(НайденныеСтроки[0].ХарактеристикаНоменклатуры),НайденныеСтроки[0].ХарактеристикаНоменклатуры.КодSAP,""));
			ХМЛ.ЗаписатьКонецЭлемента(); //SetSize
			
			КоличествоВыдано = ПолучитьВыданноеКоличествоКомплектов(СтрокаТаблицыКомплектов.Комплект,НайденныеСтроки[0].Номенклатура,НайденныеСтроки[0].Количество);
			
			ХМЛ.ЗаписатьНачалоЭлемента("SetQuantity");
			ХМЛ.ЗаписатьТекст(Формат(КоличествоВыдано,"ЧРД=.; ЧГ=0"));
			ХМЛ.ЗаписатьКонецЭлемента(); //SetQuantity
			
			ХМЛ.ЗаписатьНачалоЭлемента("Compl");
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ХМЛ.ЗаписатьНачалоЭлемента("Item");
				
				ХМЛ.ЗаписатьНачалоЭлемента("ComplCode");
				ХМЛ.ЗаписатьТекст(Формат(НайденнаяСтрока.Номенклатура.КодСинхронизации,"ЧГ="));
				ХМЛ.ЗаписатьКонецЭлемента(); //ComplCode
				
				ХМЛ.ЗаписатьНачалоЭлемента("ComplSize");
				ХМЛ.ЗаписатьТекст(?(ЗначениеЗаполнено(НайденнаяСтрока.ХарактеристикаНоменклатуры),НайденнаяСтрока.ХарактеристикаНоменклатуры.КодSAP,""));
				ХМЛ.ЗаписатьКонецЭлемента(); //ComplSize
				
				ХМЛ.ЗаписатьНачалоЭлемента("ComplQuantity");
				ХМЛ.ЗаписатьТекст(Формат(НайденнаяСтрока.Количество,"ЧРД=.; ЧГ=0"));
				ХМЛ.ЗаписатьКонецЭлемента(); //ComplQuantity
				
				СтруктураПоискаКодовМаркировки = Новый Структура;
				СтруктураПоискаКодовМаркировки.Вставить("КодЗавода",					НайденнаяСтрока.КодЗавода);
				СтруктураПоискаКодовМаркировки.Вставить("Номенклатура",					НайденнаяСтрока.Номенклатура);
				СтруктураПоискаКодовМаркировки.Вставить("ХарактеристикаНоменклатуры",	НайденнаяСтрока.ХарактеристикаНоменклатуры);
				
				НайденныеСтрокиКодовМаркировки = ТаблицаКодовМаркировки.НайтиСтроки(СтруктураПоискаКодовМаркировки);
				
				Для Каждого НайденнаяСтрокаКодовМаркировки Из НайденныеСтрокиКодовМаркировки Цикл
					
					ХМЛ.ЗаписатьНачалоЭлемента("Sn");
					ХМЛ.ЗаписатьТекст(ПолучитьКодМаркировкиВbase64(НайденнаяСтрокаКодовМаркировки.КодМаркировки));
					ХМЛ.ЗаписатьКонецЭлемента(); //Sn
					
				КонецЦикла;
				
				ХМЛ.ЗаписатьКонецЭлемента(); //Item
				
			КонецЦикла;
			
			ХМЛ.ЗаписатьКонецЭлемента(); //Compl
			
			ХМЛ.ЗаписатьКонецЭлемента(); //Set
			
			ХМЛ.ЗаписатьКонецЭлемента(); //SetLines
			
			ХМЛ.ЗаписатьКонецЭлемента(); //Root
			
			XML_Строка = ХМЛ.Закрыть();
			
			ВыгрузитьДанныеВСАП(XML_Строка, СтрокаТаблицыКомплектов.КодЗавода, СтрокаТаблицыКомплектов.Комплект);
			
		Иначе //комплект собран
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ХМЛ = Новый ЗаписьXML;
				
				ХМЛ.УстановитьСтроку();
				
				ХМЛ.ЗаписатьОбъявлениеXML();
				
				ХМЛ.ЗаписатьНачалоЭлемента("Root");
				
				ХМЛ.ЗаписатьНачалоЭлемента("TestRun");
				ХМЛ.ЗаписатьТекст(?(Тест,"True",""));
				ХМЛ.ЗаписатьКонецЭлемента(); //TestRun
				
				ХМЛ.ЗаписатьНачалоЭлемента("DocDate");
				ХМЛ.ЗаписатьТекст(Формат(Объект.Дата,"ДФ=dd.MM.yyyy"));
				ХМЛ.ЗаписатьКонецЭлемента(); //DocDate
				
				ХМЛ.ЗаписатьНачалоЭлемента("HeaderTxt");
				ХМЛ.ЗаписатьТекст("Комплектация");
				ХМЛ.ЗаписатьКонецЭлемента(); //HeaderTxt
				
				ХМЛ.ЗаписатьНачалоЭлемента("SelfPickUpPoint");
				ХМЛ.ЗаписатьТекст(СтрокаТаблицыКомплектов.КодЗавода);
				ХМЛ.ЗаписатьКонецЭлемента(); //SelfPickUpPoint
				
				ХМЛ.ЗаписатьНачалоЭлемента("AutoTz");
				ХМЛ.ЗаписатьТекст("True");
				ХМЛ.ЗаписатьКонецЭлемента(); //AutoTz
				
				ХМЛ.ЗаписатьНачалоЭлемента("SetLines");
				
				ХМЛ.ЗаписатьНачалоЭлемента("Set");
				
				ХМЛ.ЗаписатьНачалоЭлемента("SetCode");
				ХМЛ.ЗаписатьТекст(Формат(НайденнаяСтрока.Номенклатура.КодСинхронизации,"ЧГ="));
				ХМЛ.ЗаписатьКонецЭлемента(); //SetCode
				
				ХМЛ.ЗаписатьНачалоЭлемента("SetSize");
				ХМЛ.ЗаписатьТекст(?(ЗначениеЗаполнено(НайденнаяСтрока.ХарактеристикаНоменклатуры),НайденнаяСтрока.ХарактеристикаНоменклатуры.КодSAP,""));
				ХМЛ.ЗаписатьКонецЭлемента(); //SetSize
				
				ХМЛ.ЗаписатьНачалоЭлемента("SetQuantity");
				ХМЛ.ЗаписатьТекст(Формат(НайденнаяСтрока.Количество,"ЧРД=.; ЧГ=0"));
				ХМЛ.ЗаписатьКонецЭлемента(); //SetQuantity
				
				ХМЛ.ЗаписатьНачалоЭлемента("Compl");
				
				Для Каждого Комплектующее Из НайденнаяСтрока.Номенклатура.Комплектующие Цикл
					
					ХМЛ.ЗаписатьНачалоЭлемента("Item");
					
					ХМЛ.ЗаписатьНачалоЭлемента("ComplCode");
					ХМЛ.ЗаписатьТекст(Формат(Комплектующее.Номенклатура.КодСинхронизации,"ЧГ="));
					ХМЛ.ЗаписатьКонецЭлемента(); //ComplCode
					
					ХМЛ.ЗаписатьНачалоЭлемента("ComplSize");
					ХМЛ.ЗаписатьТекст(ПолучитьРазмерКомплектующего(?(ЗначениеЗаполнено(НайденнаяСтрока.ХарактеристикаНоменклатуры),НайденнаяСтрока.ХарактеристикаНоменклатуры.КодSAP,""),Комплектующее.Номенклатура));
					ХМЛ.ЗаписатьКонецЭлемента(); //ComplSize
					
					ХМЛ.ЗаписатьНачалоЭлемента("ComplQuantity");
					ХМЛ.ЗаписатьТекст(Формат(НайденнаяСтрока.Количество * Комплектующее.Количество,"ЧРД=.; ЧГ=0"));
					ХМЛ.ЗаписатьКонецЭлемента(); //ComplQuantity
					
					ХМЛ.ЗаписатьКонецЭлемента(); //Item					
					
				КонецЦикла;
				
				ХМЛ.ЗаписатьКонецЭлемента(); //Compl
				
				ХМЛ.ЗаписатьКонецЭлемента(); //Set
				
				ХМЛ.ЗаписатьКонецЭлемента(); //SetLines
				
				ХМЛ.ЗаписатьКонецЭлемента(); //Root
				
				XML_Строка = ХМЛ.Закрыть();
				
				ВыгрузитьДанныеВСАП(XML_Строка, СтрокаТаблицыКомплектов.КодЗавода, НайденнаяСтрока.Номенклатура);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ЗаполнитьТаблицуРезультатовВыгрузкиКомплектов();
	Элементы.ГруппаРезультатыВыгрузкиКомплектов.Видимость = НЕ РезультатыВыгрузкиКомплектов.Количество() = 0;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеВСАП(XML_Строка, КодЗавода, Комплект)
	
	//проверяем возможность повторной выгрузки
	НаборЗаписей = РегистрыСведений.ВыгруженныеКомплектыППСвСАП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументППС.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.КодЗавода.Установить(КодЗавода);
	НаборЗаписей.Отбор.Комплект.Установить(Комплект);
	НаборЗаписей.Прочитать();
	
	Если НЕ НаборЗаписей.Количество() = 0 Тогда
		
		Статус_Сообщения 	= НаборЗаписей[0].message_type;
		Номер_Документа 	= НаборЗаписей[0].doc_num;
		
		Если НЕ (Статус_Сообщения = "300" и Номер_Документа = "") Тогда
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;
	
	Результат = "";
	ОписаниеОшибки = "";
	
	Прокси = РегистрыСведений.НастройкиПараметровОбменаСАП.ПолучитьПроксиДляВыгрузкиКомплектовИзППС(Объект.Организация,ОписаниеОшибки);
	
	Если ОписаниеОшибки = "" Тогда
		Попытка
		    Результат = Прокси.ZWMS_REP_SM_COMPLEMENTATION(XML_Строка);
		Исключение
			Результат = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Результат;
			Сообщение.Сообщить();
			Возврат;
		КонецПопытки;
	//Танцюра А.Н. -- №128111 Ошибка при выгрузке комплектов в SAP -- 29.09.2021 <<<	
	Иначе	
		Результат = ОписаниеОшибки;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Результат;
		Сообщение.Сообщить();
		Возврат;
	//Танцюра А.Н. -- №128111 Ошибка при выгрузке комплектов в SAP -- 29.09.2021 >>>	
	КонецЕсли;	
	
	//Ответ:
	//<body>
	//<message_type>200</message_type>   - статус сообщения 200 – ОК, 300 – не ОК
	//<doc_num>4130001234</doc_num>      - номер документа материала в SAP
	//<message_text>Создан документ. Проведен документ.</message_text> - текст ошибки, если статус 200 и номер документа есть, то текст в данном элементе можно игнорировать
	//</body>

	Статус_Сообщения 	= "";
	Номер_Документа 	= "";
	Текст_Ошибки 		= "";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Результат);
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТекущийТЭГ = ЧтениеXML.Имя;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если ТекущийТЭГ = "message_type" Тогда
			    Статус_Сообщения = ЧтениеXML.Значение;
			ИначеЕсли ТекущийТЭГ = "doc_num" Тогда
				Номер_Документа = ЧтениеXML.Значение;
			ИначеЕсли ТекущийТЭГ = "message_text" Тогда
				Текст_Ошибки = ЧтениеXML.Значение;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ВыгруженныеКомплектыППСвСАП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументППС.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.КодЗавода.Установить(КодЗавода);
	НаборЗаписей.Отбор.Комплект.Установить(Комплект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.ДокументППС 	= Объект.Ссылка;
		НоваяЗапись.КодЗавода 		= КодЗавода;
		НоваяЗапись.Комплект 		= Комплект;
		НоваяЗапись.message_type 	= Статус_Сообщения;
		НоваяЗапись.doc_num 		= Номер_Документа;
		НоваяЗапись.message_text 	= Текст_Ошибки;
		НоваяЗапись.XML_text 		= XML_Строка;
		
	Иначе
		
		НаборЗаписей[0].message_type	= Статус_Сообщения;
		НаборЗаписей[0].doc_num 		= Номер_Документа;
		НаборЗаписей[0].message_text 	= Текст_Ошибки;
		НаборЗаписей[0].XML_text 		= XML_Строка;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьРазмерКомплектующего(НаименованиеХарактеристики,Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.КодSAP КАК КодSAP,
	|	ХарактеристикиНоменклатуры.Владелец КАК Владелец
	|ПОМЕСТИТЬ ВТ_Размеры
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Размеры.КодSAP КАК КодSAP,
	|	ВТ_Размеры.Владелец КАК Владелец
	|ИЗ
	|	ВТ_Размеры КАК ВТ_Размеры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Размеры.КодSAP КАК КодSAP
	|ИЗ
	|	ВТ_Размеры КАК ВТ_Размеры
	|ГДЕ
	|	ВТ_Размеры.КодSAP = &КодSAP";
	
	Запрос.УстановитьПараметр("Владелец",	Номенклатура);
	Запрос.УстановитьПараметр("КодSAP",		НаименованиеХарактеристики);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаСРазмером = Результат[2].Выгрузить();
	ТаблицаСЛюбымРазмером = Результат[1].Выгрузить();
	
	Если ЗначениеЗаполнено(НаименованиеХарактеристики) Тогда
		
		Если ТаблицаСРазмером.Количество() = 0 Тогда
			Если ТаблицаСЛюбымРазмером.Количество() = 0 Тогда
				Возврат "";
			Иначе
				Возврат ТаблицаСЛюбымРазмером[0].КодSAP;
			КонецЕсли;
		Иначе
			Возврат ТаблицаСРазмером[0].КодSAP;
		КонецЕсли;
		
	Иначе
		
		Если ТаблицаСЛюбымРазмером.Количество() = 0 Тогда
			Возврат "";
		Иначе
			Возврат ТаблицаСЛюбымРазмером[0].КодSAP;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьВыданноеКоличествоКомплектов(Комплект,Номенклатура,ВыданоКомплектующего)
	
	НайденныеСтроки = Комплект.Комплектующие.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		Возврат 0;
		
	Иначе
		
		КоличествоКомплектующего = НайденныеСтроки[0].Количество;
		
		Если КоличествоКомплектующего = 0 Тогда
			Возврат 0;
		Иначе
			Возврат ВыданоКомплектующего/КоличествоКомплектующего;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьКодМаркировкиВbase64(КодМаркировки)
	
	//позаимствовано с "Инфостарта" и модифицировано
	//https://infostart.ru/public/392252/
	
	КодировкаФайла = КодировкаТекста.UTF8;
		
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	
	Запись = Новый ЗаписьТекста(ВременныйФайл, КодировкаФайла);
	Запись.Записать(КодМаркировки);
	Запись.Закрыть();
	
	ДвДанные = Новый ДвоичныеДанные(ВременныйФайл);
	Encoded = Base64Строка(ДвДанные);
	
	//платформа добавляет префикс
	Если СтрНайти(Encoded, "/") > 0 Тогда
		Encoded = Сред(Encoded, СтрНайти(Encoded, "/") + 1);
	КонецЕсли;
	
	УдалитьФайлы(ВременныйФайл);
	
	Возврат Encoded;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьКомплектыВSAP(Команда)
	
	Если НЕ Объект.Проведен Тогда
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Перед выгрузкой необходимо провести документ!";
		СообщениеПользователю.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ВыгрузитьКомплектыВSAPНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПроксиДляВыгрузкиППС(ОписаниеОшибки)
	
	Возврат РегистрыСведений.НастройкиПараметровОбменаСАП.ПолучитьПроксиДляВыгрузкиКомплектовИзППС(Объект.Организация, ОписаниеОшибки, Истина);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	ОписаниеОшибки = "";
	
	Сообщение = Новый СообщениеПользователю;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда	
		Сообщение.Текст = "Не выбрана организация!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ПодключениеУстановлено = ПолучитьПроксиДляВыгрузкиППС(ОписаниеОшибки);
	
	Если ПодключениеУстановлено Тогда
		Сообщение.Текст = "Подключение установлено.";
	Иначе
		Сообщение.Текст = ОписаниеОшибки;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКомплектыВSAPТест(Команда)
	
	ВыгрузитьКомплектыВSAPНаСервере(Истина);
	
КонецПроцедуры

//АсТБ_Alexey_57850_********************************************************************

//+++АсТБ_Alexey_90717_********************************************************************

&НаСервере
Процедура ЗаполнитьГТДНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	Документы.ПереходПраваСобственности.ЗаполнитьГТД(ТекущийОбъект);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГТД(Команда)
	
	ЗаполнитьГТДНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Организации.Форма.ФормаВыбора" Тогда
		
		Объект.Организация = ВыбранноеЗначение;
		
		УстановитьВидимостьЭлементовГТД();
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

//---АсТБ_Alexey_90717_********************************************************************