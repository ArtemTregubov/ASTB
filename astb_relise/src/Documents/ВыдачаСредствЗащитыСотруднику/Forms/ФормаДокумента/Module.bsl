////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	Объект.Товары.Очистить();
	//АСТБ_ALEXEY_72838_**************************************************************
	Объект.ШтрихкодыНоменклатуры.Очистить();
	Объект.КодыМаркировки.Очистить();
	//АСТБ_ALEXEY_72838_**************************************************************
	
	Объект.Сотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	
	СформироватьИнформациюОбОсновномМестеРаботы();
	
	ИспользоватьПредварительныеЗаявкиНаКоллективнуюВыдачу = ПолучитьОпциюОрганизации(Объект.Организация,"ИспользоватьПредварительныеЗаявкиНаКоллективнуюВыдачу");
	
	Если ИспользоватьПредварительныеЗаявкиНаКоллективнуюВыдачу И Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача") Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВыдачиСИЗ.ПредварительнаяЗаявка");
	Иначе
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВыдачиСИЗ.ФактическаяВыдача");
	КонецЕсли;
	
	//АСТБ_ALEXEY_69654_**************************************************************
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) И ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.СкладОтправитель = ПроцедурыРаботыСНормамиСервер.ПолучитьСкладОрганизации(Объект.Организация);
		Конецесли;
	Иначе
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Склад = ПроцедурыРаботыСНормамиСервер.ПолучитьСкладОрганизации(Объект.Организация);
		КонецЕсли;
	Конецесли;
	//АСТБ_ALEXEY_69654_**************************************************************
	
	//АСТБ_ALEXEY_70409**************************************************************
	//Объект.МОЛ = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация);
	Объект.МОЛ = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация,Объект.СоздательДокумента);
	//АСТБ_ALEXEY_70409**************************************************************
	Элементы.МОЛ.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.Склад,Объект.Организация));
	
	//АСТБ_ALEXEY_70409**************************************************************
	//Объект.МОЛСкладаОтправителя	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.СкладОтправитель,Объект.Организация);
	Объект.МОЛСкладаОтправителя	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.СкладОтправитель,Объект.Организация,Объект.СоздательДокумента);
	//АСТБ_ALEXEY_70409**************************************************************
	Элементы.МОЛСкладаОтправителя.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.СкладОтправитель,Объект.Организация));
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику") Тогда //проверяем вид операции
			
			Если Объект.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийВыдачиСИЗ.ФактическаяВыдача Тогда
				Отказ = Истина;
				Сообщить("Допускается ввод на основании документа с видом операции <<Предварительная заявка>>.");
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОбращениеНаСклад") Тогда
			
			Если НЕ Объект.ДокументОснование.КатегорияОбращения = Справочники.КатегорииОбращенияНаСклад.ЗаявкаНаПолучение Тогда
				Отказ = Истина;
				Сообщить("Допускается ввод на основании документа с категорией обращения <<Заявка на получение>>.");
				Возврат;
			КонецЕсли;
			
			Если ЕстьВыдача(Объект.ДокументОснование,Объект.Ссылка) Тогда
				Отказ = Истина;
				Сообщить("На основании документа: " + Объект.ДокументОснование + " уже введен документ выдачи.");
				Возврат;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача;
			КонецЕсли;
			
			Элементы.ВидВыдачиСИЗ.Доступность = Ложь;
			
			СобратьВсеКомплектыНаСервере();
			
			СкорректироватьНоменклатуруПоОбращениюНаСклад();
			
		//отсечка убрана 07.09.2018 по просьбе Щербакова Григория (Карелия-Восток-Сервис)	
		//Иначе //проверяем наличие введенных ранее документов выдачи
		//	
		//	Если ЕстьВыдача(Объект.ДокументОснование,Объект.Ссылка) И НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВыдачу") Тогда
		//		Отказ = Истина;
		//		Сообщить("На основании документа: " + Объект.ДокументОснование + " уже введен документ выдачи.");
		//		Возврат;
		//	КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект,НОВЫЙ Структура("ИмяЭлементаДляРазмещения","ГруппаДополнительныеРеквизиты"));
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	ПереданВПримерку = ЕстьПередачаВПримерку();
	
	УправлениеВидимостьюЭлементовФормы();
	УправлениеДоступностьюЭлементовФормы();
	УправлениеСвойствамиЭлементовФормы();
	УстановитьЗаголовокФормы();
	
	//блокируем форму, если по документу выдачи есть передача прав собственности
	Если НЕ Параметры.Ключ.Пустая() Тогда //объект записан в базу
		
		//+++АСТБ_Горюшин_Алексей_17125
		Если Объект.Организация.ПереходПраваСобственностиПоПредварительнойЗаявкеППС
			Тогда 
			ЕстьПередачаПравСобственности = РегистрыНакопления.РеализованныеСИЗ.ЕстьПредварительнаяПередачаПравСобственности(Объект.Ссылка);
			Элементы.ПолеТекстПредупреждения.Заголовок = "По документу существует проведенный документ 'Предварительный переход права собственности'. Редактирование запрещено!";
		Иначе	
		//---АСТБ_Горюшин_Алексей_17125
		ЕстьПередачаПравСобственности = РегистрыНакопления.СобственныеСИЗ.ЕстьПередачаПравСобственности(Объект.Ссылка);
		//+++АСТБ_Горюшин_Алексей_17125
		КонецЕсли;
		//---АСТБ_Горюшин_Алексей_17125
		
		ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость = ЕстьПередачаПравСобственности;
		
		Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
			ЭтаФорма.ТолькоПросмотр = ЕстьПередачаПравСобственности;
		КонецЕсли;
		
	Иначе
		
		ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость 		= Ложь;
		ЭтаФорма.Элементы.ШтрихкодыНоменклатуры.ТолькоПросмотр 	= НЕ РольДоступна("АдминистраторСистемы"); 
		
	КонецЕсли;
	
	ЭтаФорма.Элементы.МОЛ.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.Склад,Объект.Организация));
	ЭтаФорма.Элементы.МОЛСкладаОтправителя.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.СкладОтправитель,Объект.Организация));
	
	// ПодключаемоеОборудование
	ПроцедурыРаботыСНормамиСервер.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
	ЗаполнитьКолонку_ТипУсловия_Основание();
	
	//***НСК Трегубов А.А.*** -- 90515 --  30.08.2021 <<<         
	ЗаполнитьКолонку_НеВыданоПоПричине();
	//***НСК Трегубов А.А.*** -- 90515 --  30.08.2021 >>>
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
	//***НСК Трегубов А.А.*** -- АдресноеХранение --  03.09.2019 <<<
	АХ_ПриСозданииНаСервере(Отказ,СтандартнаяОбработка);	
	//***НСК Трегубов А.А.*** -- АдресноеХранение --  03.09.2019 >>>
	
	//костыль - защита от дурака - с 18.03.2021 (релиз 110) используем типовой механизм БСП
	//Если Объект.Проведен И Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача Тогда
	//	Элементы.Организация.Доступность = Ложь;
	//	Элементы.Сотрудник.Доступность = Ложь;
	//КонецЕсли;
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

&НаСервере
Функция ЕстьПередачаВПримерку()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТочкиОбслуживанияСотрудников.ДокументВыдачи КАК ДокументВыдачи,
	|	ТочкиОбслуживанияСотрудников.ПринятВРаботу КАК ПринятВРаботу,
	|	ТочкиОбслуживанияСотрудников.ПереданНаСборку КАК ПереданНаСборку,
	|	ТочкиОбслуживанияСотрудников.ПереданВПримерку КАК ПереданВПримерку,
	|	ТочкиОбслуживанияСотрудников.ОбслуживаниеЗавершено КАК ОбслуживаниеЗавершено
	|ИЗ
	|	РегистрСведений.ТочкиОбслуживанияСотрудников КАК ТочкиОбслуживанияСотрудников
	|ГДЕ
	|	ТочкиОбслуживанияСотрудников.ДокументВыдачи = &ДокументВыдачи";
	
	Запрос.УстановитьПараметр("ДокументВыдачи",Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ЗначениеЗаполнено(ТаблицаЗапроса[0].ПереданВПримерку);
	
КонецФункции	

&НаСервере
Процедура СкорректироватьНоменклатуруПоОбращениюНаСклад()
	
	Для Каждого СтрокаОснования Из Объект.ДокументОснование.Товары Цикл
		
		СтруктураПоиска = Новый Структура("НормаВыдачи, НоменклатураНормы", СтрокаОснования.НормаВыдачи, СтрокаОснования.НоменклатураНормы);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НайденнаяСтрока.НеВыдано 			= СтрокаОснования.Отказ;
			НайденнаяСтрока.НеВыданоПоПричине 	= СтрокаОснования.ПричинаОтказа;
			
			Если НайденнаяСтрока.НеВыдано Тогда
				
				НайденнаяСтрока.Номенклатура 				= ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
				НайденнаяСтрока.ХарактеристикаНоменклатуры 	= ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
				НайденнаяСтрока.Цена 						= 0;
				НайденнаяСтрока.Сумма 						= 0;
				НайденнаяСтрока.Количество					= 0;
				НайденнаяСтрока.КоличествоВКомплекте		= 0;
				
			Иначе
				
				НайденнаяСтрока.Номенклатура 				= СтрокаОснования.Номенклатура;
				НайденнаяСтрока.ХарактеристикаНоменклатуры 	= СтрокаОснования.ХарактеристикаНоменклатуры;
				
				Если ЗначениеЗаполнено(СтрокаОснования.Номенклатура) Тогда
					НайденнаяСтрока.Цена 	= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НайденнаяСтрока.Номенклатура,Объект.Организация,Объект.Дата);
					НайденнаяСтрока.Сумма 	= НайденнаяСтрока.Количество * НайденнаяСтрока.Цена;
				КонецЕсли;
				
			КонецЕсли;
	
		КонецЦикла;	
		
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьКолонку_ОбязательнаяМаркировка()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМаркировку") Тогда
		Возврат;
	КонецЕсли;	
	
	Для КАждого СтрокаТаблицыТовары Из Объект.Товары Цикл
		
		СтрокаТаблицыТовары.ОбязательнаяМаркировка = ОбязательнаяМаркировкаНоменклатуры(СтрокаТаблицыТовары.Номенклатура,Объект.Дата);
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Функция ОбязательнаяМаркировкаНоменклатуры(Номенклатура,ДатаАнализа)
	
	Возврат Справочники.Номенклатура.ОбязательнаяМаркировка(Номенклатура,ДатаАнализа);
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьКолонку_ТипУсловия_Основание()
	
	Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача ИЛИ Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.УпрощеннаяВыдача Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(
	|			&ПериодАнализа,
	|			Организация = &Организация
	|				И Сотрудник В (&МассивСотрудников)) КАК ЗанятыеРабочиеМестаОстатки";
	
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	Запрос.УстановитьПараметр("МассивСотрудников",	Объект.Товары.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
	Запрос.УстановитьПараметр("ПериодАнализа",		ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Объект.Ссылка));
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивПодразделений = ТаблицаЗапроса.ВыгрузитьКолонку("Подразделение");
	МассивДолжностей 	= ТаблицаЗапроса.ВыгрузитьКолонку("Должность");
	МассивРабочихМест 	= ТаблицаЗапроса.ВыгрузитьКолонку("РабочееМесто");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
	|	ТаблицаДокумента.НормаВыдачи КАК НормаВыдачи
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Подразделение КАК Подразделение,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Должность КАК Должность,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Условие КАК Условие
	|ПОМЕСТИТЬ ВТ_ДУР
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник КАК Сотрудник,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Подразделение КАК Подразделение,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Должность КАК Должность,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.РабочееМесто КАК РабочееМесто,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Условие КАК Условие,
	|		МАКСИМУМ(ДоступныеУсловияРаботыСотрудникаСрезПоследних.Период) КАК Период
	|	ИЗ
	|		РегистрСведений.ДоступныеУсловияРаботыСотрудника.СрезПоследних(&ПериодАнализа, Сотрудник В (&МассивСотрудников)) КАК ДоступныеУсловияРаботыСотрудникаСрезПоследних
	|	ГДЕ
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Использовать
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Подразделение,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Должность,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.РабочееМесто,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Условие) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеУсловияРаботыСотрудника.СрезПоследних(&ПериодАнализа, Сотрудник В (&МассивСотрудников)) КАК ДоступныеУсловияРаботыСотрудникаСрезПоследних
	|		ПО ВложенныйЗапрос.Сотрудник = ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник
	|			И ВложенныйЗапрос.Период = ДоступныеУсловияРаботыСотрудникаСрезПоследних.Период
	|			И ВложенныйЗапрос.Подразделение = ДоступныеУсловияРаботыСотрудникаСрезПоследних.Подразделение
	|			И ВложенныйЗапрос.Должность = ДоступныеУсловияРаботыСотрудникаСрезПоследних.Должность
	|			И ВложенныйЗапрос.РабочееМесто = ДоступныеУсловияРаботыСотрудникаСрезПоследних.РабочееМесто
	|			И ВложенныйЗапрос.Условие = ДоступныеУсловияРаботыСотрудникаСрезПоследних.Условие
	|ГДЕ
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Подразделение КАК Подразделение,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Должность КАК Должность,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.УсловиеНормы КАК УсловиеНормы,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.НормаВыдачи КАК НормаВыдачи
	|ПОМЕСТИТЬ ВТ_УН
	|ИЗ
	|	РегистрСведений.УстановленныеНормыВыдачиСИЗ.СрезПоследних(
	|			&ПериодАнализа,
	|			Организация = &Организация
	|				И (Подразделение В (&МассивПодразделений)
	|					ИЛИ Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|				И (Должность В (&МассивДолжностей)
	|					ИЛИ Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка))
	|				И (РабочееМесто В (&МассивРабочихМест)
	|					ИЛИ РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка))) КАК УстановленныеНормыВыдачиСИЗСрезПоследних
	|ГДЕ
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормыВыдачиСИЗ.Ссылка КАК НормаВыдачи,
	|	НормыВыдачиСИЗ.ОснованиеНормы КАК ОснованиеНормы
	|ПОМЕСТИТЬ ВТ_НормыВыдачи
	|ИЗ
	|	Справочник.НормыВыдачиСИЗ КАК НормыВыдачиСИЗ
	|ГДЕ
	|	НормыВыдачиСИЗ.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УточненныеОснованияНормВыдачи.НормаВыдачи КАК НормаВыдачи,
	|	УточненныеОснованияНормВыдачи.Подразделение КАК Подразделение,
	|	УточненныеОснованияНормВыдачи.Должность КАК Должность,
	|	УточненныеОснованияНормВыдачи.РабочееМесто КАК РабочееМесто,
	|	УточненныеОснованияНормВыдачи.Основание КАК Основание
	|ПОМЕСТИТЬ ВТ_УточненныеОснования
	|ИЗ
	|	РегистрСведений.УточненныеОснованияНормВыдачи КАК УточненныеОснованияНормВыдачи
	|ГДЕ
	|	УточненныеОснованияНормВыдачи.Организация = &Организация
	|	И (УточненныеОснованияНормВыдачи.Подразделение В (&МассивПодразделений)
	|			ИЛИ УточненныеОснованияНормВыдачи.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|	И (УточненныеОснованияНормВыдачи.Должность В (&МассивДолжностей)
	|			ИЛИ УточненныеОснованияНормВыдачи.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка))
	|	И (УточненныеОснованияНормВыдачи.РабочееМесто В (&МассивРабочихМест)
	|			ИЛИ УточненныеОснованияНормВыдачи.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаДокумента.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДокумента.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ДУР.Подразделение КАК Подразделение,
	|	ВТ_ДУР.Должность КАК Должность,
	|	ВТ_ДУР.РабочееМесто КАК РабочееМесто,
	|	ВТ_ДУР.Условие КАК Условие
	|ПОМЕСТИТЬ ВТ_ДУРпоДокументу
	|ИЗ
	|	ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДУР КАК ВТ_ДУР
	|		ПО ВТ_ТаблицаДокумента.Сотрудник = ВТ_ДУР.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДУРпоДокументу.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВТ_УН.УсловиеНормы ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_УН.УсловиеНормы.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.ЗимойДополнительно)
	|					ТОГДА 1
	|				КОГДА ВТ_УН.УсловиеНормы.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.ПриУсловии)
	|					ТОГДА 2
	|				КОГДА ВТ_УН.УсловиеНормы.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.ПриУсловииЗимойДополнительно)
	|					ТОГДА 3
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипУсловия,
	|	ВТ_УН.УсловиеНормы КАК УсловиеНормы,
	|	ЕСТЬNULL(ВТ_УточненныеОснования.Основание, ВТ_НормыВыдачи.ОснованиеНормы) КАК Основание
	|ИЗ
	|	ВТ_ДУРпоДокументу КАК ВТ_ДУРпоДокументу
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УН КАК ВТ_УН
	|		ПО ВТ_ДУРпоДокументу.НормаВыдачи = ВТ_УН.НормаВыдачи
	|			И (ВТ_ДУРпоДокументу.Подразделение = ВТ_УН.Подразделение
	|				ИЛИ ВТ_УН.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|			И (ВТ_ДУРпоДокументу.Должность = ВТ_УН.Должность
	|				ИЛИ ВТ_УН.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка))
	|			И (ВТ_ДУРпоДокументу.РабочееМесто = ВТ_УН.РабочееМесто
	|				ИЛИ ВТ_УН.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка))
	|			И ВТ_ДУРпоДокументу.Условие = ВТ_УН.УсловиеНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормыВыдачи КАК ВТ_НормыВыдачи
	|		ПО ВТ_ДУРпоДокументу.НормаВыдачи = ВТ_НормыВыдачи.НормаВыдачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УточненныеОснования КАК ВТ_УточненныеОснования
	|		ПО ВТ_ДУРпоДокументу.НормаВыдачи = ВТ_УточненныеОснования.НормаВыдачи
	|			И (ВТ_ДУРпоДокументу.Подразделение = ВТ_УточненныеОснования.Подразделение
	|				ИЛИ ВТ_УточненныеОснования.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|			И (ВТ_ДУРпоДокументу.Должность = ВТ_УточненныеОснования.Должность
	|				ИЛИ ВТ_УточненныеОснования.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка))
	|			И (ВТ_ДУРпоДокументу.РабочееМесто = ВТ_УточненныеОснования.РабочееМесто
	|				ИЛИ ВТ_УточненныеОснования.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка))
	|ГДЕ
	|	НЕ ВТ_УН.УсловиеНормы ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента",	Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	Запрос.УстановитьПараметр("МассивСотрудников",	Объект.Товары.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
	Запрос.УстановитьПараметр("ПериодАнализа",		ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Объект.Ссылка));
	Запрос.УстановитьПараметр("МассивПодразделений",МассивПодразделений);
	Запрос.УстановитьПараметр("МассивДолжностей",	МассивДолжностей);
	Запрос.УстановитьПараметр("МассивРабочихМест",	МассивРабочихМест);
	
    ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Объект.Товары[СтрокаТаблицыЗапроса.НомерСтроки - 1].ТипУсловия 	= СтрокаТаблицыЗапроса.ТипУсловия;	
		Объект.Товары[СтрокаТаблицыЗапроса.НомерСтроки - 1].Условие 	= СтрокаТаблицыЗапроса.УсловиеНормы;
		Объект.Товары[СтрокаТаблицыЗапроса.НомерСтроки - 1].Основание 	= СтрокаТаблицыЗапроса.Основание;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюЭлементовФормы()
	
	Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача Тогда
		
		//элементы формы
		ЭтаФорма.Элементы.ГруппаПроизвольнаяВыдача.Видимость 	= Истина;
		ЭтаФорма.Элементы.ГруппаОснование.Видимость				= Истина;
		ЭтаФорма.Элементы.ВидВыдачиСИЗ.Видимость				= Ложь;
		ЭтаФорма.Элементы.НадписьПроизвольнаяВыдача.Видимость	= Истина;
		ЭтаФорма.Элементы.ГруппаСкладОтправительМОЛ.Видимость	= Ложь;
		ЭтаФорма.Элементы.ГруппаСотрудник.Видимость 			= Истина;
		ЭтаФорма.Элементы.ГруппаШтрихкоды.Видимость				= Истина;
		ЭтаФорма.Элементы.МВЗ1.Видимость						= Ложь;
		ЭтаФорма.Элементы.ПереданВПримерку.Видимость 			= Ложь;
		
		//колонки табличной части
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ГруппаНеВыдано.Видимость 					= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыСотрудник.Видимость 					= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНормаВыдачи.Видимость 				= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыОснование.Видимость 					= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.Видимость 			= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаВыдачи.Видимость 				= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличествоПотребность.Видимость 		= Ложь;
		//АсТБ_Alexey_69695_*******************************************************************
		//ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураКомплект.Видимость 	= Ложь;
		//ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличествоВКомплекте.Видимость 	= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураКомплект.Видимость 		= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличествоВКомплекте.Видимость 		= Истина;
		//АсТБ_Alexey_69695_*******************************************************************
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПериодичностьВыдачи.Видимость 		= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыТипУсловия.Видимость 				= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыУсловие.Видимость 					= Ложь;
		
		//командная панель табличной части
		//АсТБ_Alexey_69695_*******************************************************************
		//ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Комплекты.Видимость 													= Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Комплекты.Видимость 													= Истина;
		//АсТБ_Alexey_69695_*******************************************************************
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Видимость													= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыПодбор.Видимость 					= Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыЗаполнитьПоСотруднику.Видимость 	= Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыУточнитьПотребность.Видимость 		= Ложь;
		//+++АСТБ_Горюшин_Алексей_19306
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыЗаполнить.Видимость                                              = Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыЗаполнитьПоДСИЗ.Видимость 			= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыПодборВСтроке.Видимость		 	= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыПодборНоменклатурыВыдачи.Видимость	= Ложь;
		//---АСТБ_Горюшин_Алексей_19306
		
		//АсТБ_Alexey_102437_*******************************************************************
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыОбщаяПричинаНевыдачи.Видимость = Истина;
		//АсТБ_Alexey_102437_*******************************************************************
		
		//***НСК Трегубов А.А.*** -- 90515  --  21.07.2021 <<<
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыУстановитьУсловия.Видимость = Ложь;
		//***НСК Трегубов А.А.*** -- 90515 --  21.07.2021 >>>

	ИначеЕсли Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.УпрощеннаяВыдача Тогда
		
		//элементы формы
		ЭтаФорма.Элементы.ГруппаПроизвольнаяВыдача.Видимость 	= Ложь;
		ЭтаФорма.Элементы.ГруппаОснование.Видимость				= Ложь;
		ЭтаФорма.Элементы.ВидВыдачиСИЗ.Видимость				= Истина;
		ЭтаФорма.Элементы.НадписьПроизвольнаяВыдача.Видимость	= Ложь;
		ЭтаФорма.Элементы.ГруппаСкладОтправительМОЛ.Видимость	= Ложь;
		ЭтаФорма.Элементы.ГруппаСотрудник.Видимость 			= Истина;
		//+++АСТБ_Горюшин_Алексей_19306
		ЭтаФорма.Элементы.ГруппаШтрихкоды.Видимость				= Истина;
		//было
		//ЭтаФорма.Элементы.ГруппаШтрихкоды.Видимость			= Ложь;
		//---АСТБ_Горюшин_Алексей_19306
		ЭтаФорма.Элементы.МВЗ1.Видимость						= Истина;
		ЭтаФорма.Элементы.ПереданВПримерку.Видимость 			= Ложь;
		
		//колонки табличной части
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ГруппаНеВыдано.Видимость 					= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыСотрудник.Видимость 					= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНормаВыдачи.Видимость 				= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыОснование.Видимость 					= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.Видимость 			= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаВыдачи.Видимость 				= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличествоПотребность.Видимость 		= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураКомплект.Видимость 		= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличествоВКомплекте.Видимость 		= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПериодичностьВыдачи.Видимость 		= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыТипУсловия.Видимость 				= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыУсловие.Видимость 					= Ложь;
		
		//командная панель табличной части
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Комплекты.Видимость 	= Ложь;
		//+++АСТБ_Горюшин_Алексей_19306
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыЗаполнить.Видимость                                              = Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Видимость													= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыПодбор.Видимость 					= Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыЗаполнитьПоДСИЗ.Видимость 			= Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыЗаполнитьПоСотруднику.Видимость 	= Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыПодборВСтроке.Видимость		 	= Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыУточнитьПотребность.Видимость 		= Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыПодборНоменклатурыВыдачи.Видимость	= Истина;
		//было
		//ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Видимость	= Ложь;
		//---АСТБ_Горюшин_Алексей_19306
		
		//АсТБ_Alexey_102437_*******************************************************************
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыОбщаяПричинаНевыдачи.Видимость = Ложь;
		//АсТБ_Alexey_102437_*******************************************************************
		
		//***НСК Трегубов А.А.*** -- 90515  --  21.07.2021 <<<
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыУстановитьУсловия.Видимость = Ложь;
		//***НСК Трегубов А.А.*** -- 90515 --  21.07.2021 >>>

	ИначеЕсли Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача Тогда
		
		//элементы формы
		ЭтаФорма.Элементы.ГруппаСотрудник.Видимость 				= Ложь;
		ЭтаФорма.Элементы.ГруппаПроизвольнаяВыдача.Видимость 		= Ложь;
		ЭтаФорма.Элементы.ВидВыдачиСИЗ.Видимость					= Истина;
		ЭтаФорма.Элементы.НадписьПроизвольнаяВыдача.Видимость		= Ложь;
		Если ЗначениеЗаполнено(Объект.Организация) 
			И Объект.Организация.ИспользоватьПредварительныеЗаявкиНаКоллективнуюВыдачу 
			И Объект.ВидОперации = Перечисления.ВидыОперацийВыдачиСИЗ.ФактическаяВыдача Тогда
			ЭтаФорма.Элементы.ГруппаСкладОтправительМОЛ.Видимость	= Ложь;
			ЭтаФорма.Элементы.ГруппаОснование.Видимость				= Истина;
		Иначе
			Если Объект.Склад.АвтоматизированнаяВыдача Тогда
				ЭтаФорма.Элементы.ГруппаСкладОтправительМОЛ.Видимость	= Ложь;
			Иначе
				ЭтаФорма.Элементы.ГруппаСкладОтправительМОЛ.Видимость	= Истина;
			КонецЕсли;	
			ЭтаФорма.Элементы.ГруппаОснование.Видимость				= Ложь;
		КонецЕсли;
		ЭтаФорма.Элементы.ГруппаШтрихкоды.Видимость					= Ложь;
		ЭтаФорма.Элементы.МВЗ1.Видимость							= Ложь;
		ЭтаФорма.Элементы.ПереданВПримерку.Видимость 				= Ложь;
		
		//Если Объект.ВидОперации = Перечисления.ВидыОперацийВыдачиСИЗ.ПредварительнаяЗаявка Тогда
		//	ЭтаФорма.Элементы.ПредварительнаяСборка.Видимость 		= Ложь;
		//КонецЕсли;	
		
		//колонки табличной части
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ГруппаНеВыдано.Видимость 					= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыСотрудник.Видимость 					= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНормаВыдачи.Видимость 				= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыОснование.Видимость 					= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.Видимость 			= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаВыдачи.Видимость 				= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличествоПотребность.Видимость 		= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураКомплект.Видимость 		= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличествоВКомплекте.Видимость 		= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПериодичностьВыдачи.Видимость 		= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыТипУсловия.Видимость 				= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыУсловие.Видимость 					= Истина;
		
		//командная панель табличной части
		//Танцюра А.Н. -- №126369 Комплекты в документе выдача СИЗ -- 16.11.2021 <<<
		//ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Комплекты.Видимость 														= Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Комплекты.ПодчиненныеЭлементы.ТоварыРазобратьВыбранныйКомплект.Видимость 	= Истина;	
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Комплекты.ПодчиненныеЭлементы.ТоварыСобратьВыбранныйКомплект.Видимость 	= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Комплекты.ПодчиненныеЭлементы.ТоварыРазобратьВсеКомплекты.Видимость 		= Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Комплекты.ПодчиненныеЭлементы.ТоварыСобратьВсеКомплекты.Видимость 			= Ложь;
		//Танцюра А.Н. -- №126369 Комплекты в документе выдача СИЗ -- 16.11.2021 >>>
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Видимость													= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыПодбор.Видимость 					= Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыЗаполнитьПоСотруднику.Видимость 	= Истина;
		//+++АСТБ_Горюшин_Алексей_19306
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыЗаполнить.Видимость                                              = Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыЗаполнитьПоДСИЗ.Видимость 			= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыПодборВСтроке.Видимость		 	= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыПодборНоменклатурыВыдачи.Видимость	= Ложь;
		//---АСТБ_Горюшин_Алексей_19306
		
		//АсТБ_Alexey_102437_*******************************************************************
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыОбщаяПричинаНевыдачи.Видимость = Истина;
		//АсТБ_Alexey_102437_*******************************************************************
		
		//***НСК Трегубов А.А.*** -- 90515  --  21.07.2021 <<<
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыУстановитьУсловия.Видимость = Истина;
		//***НСК Трегубов А.А.*** -- 90515 --  21.07.2021 >>>
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийВыдачиСИЗ.ФактическаяВыдача Тогда
			ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыУточнитьПотребность.Видимость 	= Истина;
		Иначе
			ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыУточнитьПотребность.Видимость 	= Ложь;
		КонецЕсли;	
		
	ИначеЕсли Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача Тогда
		
		//элементы формы
		ЭтаФорма.Элементы.ГруппаСотрудник.Видимость 			= Истина;
		ЭтаФорма.Элементы.ГруппаПроизвольнаяВыдача.Видимость	= Ложь;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ЭтаФорма.Элементы.ГруппаОснование.Видимость			= Истина;
		Иначе
			ЭтаФорма.Элементы.ГруппаОснование.Видимость			= Ложь;
		КонецЕсли;
		ЭтаФорма.Элементы.ВидВыдачиСИЗ.Видимость				= Истина;
		ЭтаФорма.Элементы.НадписьПроизвольнаяВыдача.Видимость	= Ложь;
		ЭтаФорма.Элементы.ГруппаСкладОтправительМОЛ.Видимость	= Ложь;
		ЭтаФорма.Элементы.ГруппаШтрихкоды.Видимость				= Истина;
		ЭтаФорма.Элементы.МВЗ1.Видимость						= Ложь;
		ЭтаФорма.Элементы.ПереданВПримерку.Видимость 			= ЗначениеЗаполнено(Объект.Ссылка);
		
		//колонки табличной части
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ГруппаНеВыдано.Видимость 					= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыСотрудник.Видимость 					= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНормаВыдачи.Видимость 				= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыОснование.Видимость 					= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.Видимость 			= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаВыдачи.Видимость 				= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличествоПотребность.Видимость 		= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураКомплект.Видимость 		= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличествоВКомплекте.Видимость 		= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПериодичностьВыдачи.Видимость 		= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыТипУсловия.Видимость 				= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыУсловие.Видимость 					= Истина;
		
		//командная панель табличной части
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Комплекты.Видимость 													= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.Видимость													= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыПодбор.Видимость 					= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыЗаполнитьПоСотруднику.Видимость 	= Ложь;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыУточнитьПотребность.Видимость 		= Ложь;
		//+++АСТБ_Горюшин_Алексей_19306
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыЗаполнить.Видимость                                              = Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыЗаполнитьПоДСИЗ.Видимость 			= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыПодборВСтроке.Видимость		 	= Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Заполнить.ПодчиненныеЭлементы.ТоварыПодборНоменклатурыВыдачи.Видимость	= Ложь;
		//---АСТБ_Горюшин_Алексей_19306
		
		//АсТБ_Alexey_102437_*******************************************************************
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыОбщаяПричинаНевыдачи.Видимость = Истина;
		//АсТБ_Alexey_102437_*******************************************************************
		
		//***НСК Трегубов А.А.*** -- 90515  --  21.07.2021 <<<
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыУстановитьУсловия.Видимость = Истина;
		//***НСК Трегубов А.А.*** -- 90515 --  21.07.2021 >>>
		
	КонецЕсли;
	
	//Танцюра А.Н. -- №129655 BUG: одновременная установка штрихкодов -- 02.11.2021 <<<
	Элементы.ШтрихкодыНоменклатуры.КоманднаяПанель.ПодчиненныеЭлементы.ШтрихкодыНоменклатурыПерезаполнитьШтрихкоды.Видимость = НЕ Объект.Проведен;
	//Танцюра А.Н. -- №129655 BUG: одновременная установка штрихкодов -- 02.11.2021 >>>
	
	//+++АСТБ_Горюшин_Алексей_23750
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВыдачиСИЗ.ПредварительнаяЗаявка Тогда
		ЭтаФорма.Элементы.ПеремещатьВсе.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.ПеремещатьВсе.Видимость = Ложь;
	КонецЕсли;
	//---АСТБ_Горюшин_Алексей_23750
	
КонецПроцедуры

&НаКлиенте
Функция МожноПодписыватьДокумент()
	
	//Wacom sign pro PDF снято с поддержки производителем
	
	//#Если ВебКлиент Тогда
	//	Возврат Ложь;
	//#КонецЕсли
	//
	//Файл_х64 = Новый Файл("C:\Program Files (x86)\Wacom sign pro PDF\signPro_Application_Launcher.exe");
	//Файл_х86 = Новый Файл("C:\Program Files\Wacom sign pro PDF\signPro_Application_Launcher.exe");
	//
	//Если Файл_х64.Существует() ИЛИ Файл_х86.Существует() Тогда
	//	Если Объект.Проведен Тогда
	//		Возврат Истина;
	//	Иначе	
	//		Возврат Ложь;
	//	КонецЕсли;	
	//Иначе	
	//	Возврат Ложь;
	//КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УправлениеДоступностьюЭлементовФормы()
	
	Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача Тогда
		
		ЭтаФорма.Элементы.ГруппаСкладМОЛ.ТолькоПросмотр 									= Истина;
		ЭтаФорма.Элементы.ГруппаСотрудник.ТолькоПросмотр 									= Истина;
		ЭтаФорма.Элементы.ГруппаПроизвольнаяВыдача.ТолькоПросмотр 							= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.ТолькоПросмотр = Истина;
		
	ИначеЕсли Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача Тогда
			
		Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику") Тогда
			
			ЭтаФорма.Элементы.ГруппаСкладМОЛ.ТолькоПросмотр = Истина;
					
		КонецЕсли;
		
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПериодичностьВыдачи.ТолькоПросмотр = Истина;
		
	ИначеЕсли Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.УпрощеннаяВыдача Тогда
		
		ЭтаФорма.Элементы.ГруппаСкладМОЛ.ТолькоПросмотр 			= Ложь;
		ЭтаФорма.Элементы.ГруппаСотрудник.ТолькоПросмотр 			= Ложь;
		ЭтаФорма.Элементы.ГруппаПроизвольнаяВыдача.ТолькоПросмотр	= Истина;
		ЭтаФорма.Элементы.Товары.ТолькоПросмотр 					= Ложь;
		
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПериодичностьВыдачи.ТолькоПросмотр = Ложь;
		
	Иначе
		
		ЭтаФорма.Элементы.ГруппаСкладМОЛ.ТолькоПросмотр 			= Ложь;
		ЭтаФорма.Элементы.ГруппаСотрудник.ТолькоПросмотр 			= Ложь;
		ЭтаФорма.Элементы.ГруппаПроизвольнаяВыдача.ТолькоПросмотр 	= Ложь;
		
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПериодичностьВыдачи.ТолькоПросмотр = Истина;
		
		УстановитьДоступностьПередачиВПримерку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПередачиВПримерку()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТочкиОбслуживанияСотрудников.ДокументВыдачи КАК ДокументВыдачи,
	|	ТочкиОбслуживанияСотрудников.ПринятВРаботу КАК ПринятВРаботу,
	|	ТочкиОбслуживанияСотрудников.ПереданНаСборку КАК ПереданНаСборку,
	|	ТочкиОбслуживанияСотрудников.ПереданВПримерку КАК ПереданВПримерку,
	|	ТочкиОбслуживанияСотрудников.ОбслуживаниеЗавершено КАК ОбслуживаниеЗавершено
	|ИЗ
	|	РегистрСведений.ТочкиОбслуживанияСотрудников КАК ТочкиОбслуживанияСотрудников
	|ГДЕ
	|	ТочкиОбслуживанияСотрудников.ДокументВыдачи = &ДокументВыдачи";
	
	Запрос.УстановитьПараметр("ДокументВыдачи",Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Элементы.ПереданВПримерку.Доступность = Истина;
		Возврат;
	КонецЕсли;	
	
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Если ЗначениеЗаполнено(ТаблицаЗапроса[0].ПереданВПримерку) ИЛИ (ЗначениеЗаполнено(ТаблицаЗапроса[0].ОбслуживаниеЗавершено)) Тогда 
		Элементы.ПереданВПримерку.Доступность = Ложь;
	Иначе
		Элементы.ПереданВПримерку.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура УправлениеСвойствамиЭлементовФормы()
	
	Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.УпрощеннаяВыдача Тогда
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.КнопкаВыпадающегоСписка 		= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.КнопкаВыбора 					= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура.КнопкаВыпадающегоСписка 			= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура.КнопкаВыбора 						= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.АвтоОтметкаНезаполненного		= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура.АвтоОтметкаНезаполненного			= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличество.АвтоОтметкаНезаполненного				= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПериодичностьВыдачи.АвтоОтметкаНезаполненного 	= Истина;
	Иначе
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.КнопкаВыпадающегоСписка 		= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.КнопкаВыбора 					= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура.КнопкаВыпадающегоСписка 			= Истина;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура.КнопкаВыбора 						= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.АвтоОтметкаНезаполненного		= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура.АвтоОтметкаНезаполненного			= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличество.АвтоОтметкаНезаполненного				= Ложь;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПериодичностьВыдачи.АвтоОтметкаНезаполненного 	= Ложь;
	КонецЕсли;
					
КонецПроцедуры	

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДополнительныйКомментарий = "";
	Иначе
		ДополнительныйКомментарий = " (создание)";
	КонецЕсли;	
	
	Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача Тогда
		ЭтаФорма.Заголовок = Объект.Склад.Наименование + ДополнительныйКомментарий;
	Иначе
		ЭтаФорма.Заголовок = ФизическиеЛица.ФамилияИнициалыФизЛица(Объект.Сотрудник.ФизическоеЛицо)  + ДополнительныйКомментарий;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ЕстьВыдача(ДокументОснование, Выдача)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаСредствЗащитыСотруднику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВыдачаСредствЗащитыСотруднику КАК ВыдачаСредствЗащитыСотруднику
	|ГДЕ
	|	НЕ ВыдачаСредствЗащитыСотруднику.Ссылка = &Ссылка
	|	И ВыдачаСредствЗащитыСотруднику.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("Ссылка",				Выдача);
	Запрос.УстановитьПараметр("ДокументОснование",	ДокументОснование);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
 	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	Если ТекущийОбъект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача
		ИЛИ ТекущийОбъект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача
		//+++АСТБ_Горюшин_Алексей_19306
		ИЛИ ТекущийОбъект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.УпрощеннаяВыдача
		//---АСТБ_Горюшин_Алексей_19306
		Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Организация.ПрефиксШтрихкодаНоменклатуры) 
			И ПроцедурыРаботыСНормамиСервер.НужныШтрихкоды(ТекущийОбъект.Товары.ВыгрузитьКолонку("Номенклатура")) Тогда
			Сообщить("Не задан префикс штрихкода номенклатуры!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Документы.ВыдачаСредствЗащитыСотруднику.ЗаполнитьШтрихкоды(ТекущийОбъект);
		
	КонецЕсли;
	
	//АсТБ_Alexey_81661_********************************************************************
	ПроверитьРазмерыКомплектующих();
	//АсТБ_Alexey_81661_********************************************************************
	
КонецПроцедуры

//АсТБ_Alexey_81661_********************************************************************
Процедура ПроверитьРазмерыКомплектующих()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Комплект КАК Комплект,
	|	ТаблицаДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокумента.Комплект КАК Комплект,
	|	ХарактеристикиНоменклатуры.Метрика КАК Метрика
	|ПОМЕСТИТЬ ВТ_КомплектыСМетриками
	|ИЗ
	|	ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВТ_ТаблицаДокумента.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.Ссылка
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатуры.Метрика ЕСТЬ NULL
	|	И НЕ ВТ_ТаблицаДокумента.Комплект = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КомплектыСМетриками.Комплект КАК Комплект,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_КомплектыСМетриками.Метрика) КАК КоличествоМетрик
	|ИЗ
	|	ВТ_КомплектыСМетриками КАК ВТ_КомплектыСМетриками
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КомплектыСМетриками.Комплект
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_КомплектыСМетриками.Метрика) > 1";
		
	Запрос.УстановитьПараметр("ТаблицаДокумента",ТекущийОбъект.Товары.Выгрузить());
	
	Результат =  Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Выбраны комплектующие с разными размерами.";
		СообщениеПользователю.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры	
//АсТБ_Alexey_81661_********************************************************************

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	//Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
	Если Источник = "ПодключаемоеОборудование" Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(ПроцедурыРаботыСНормамиКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	//присоединенный файл
	Если ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		Объект.ПрисоединенныйФайлМБ7 	= Источник;
		Модифицированность 				= Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ЕстьКодМаркировки(КодМаркировки,ТекстСообщения)
	
	ПараметрыСервиса = ПроцедурыРаботыСНормамиСервер.ПолучитьПараметрыПодключенияКСервисуДляПроверкиКодовМаркировки(Объект.Организация);
	
	ТекстСообщения = "";
	
	Если НЕ ПараметрыСервиса = Неопределено Тогда
		//АсТБ_Alexey_64630********************************************************************
		Если ПараметрыСервиса.Источник = Перечисления.ИсточникиДляПроверкиКодовМаркировки.ЕИСФ Тогда
	    	ПроцедурыРаботыСНормамиСервер.ПроверитьКодМаркировки(ПараметрыСервиса,КодМаркировки,ТекстСообщения);
		Иначе
			Если НЕ Сред(КодМаркировки,4,3) = "290" Тогда
				ПроцедурыРаботыСНормамиСервер.ПроверитьКодМаркировки(ПараметрыСервиса,КодМаркировки,ТекстСообщения);
			КонецЕсли;	
		КонецЕсли;
		//АсТБ_Alexey_64630********************************************************************
	Иначе
		ТекстСообщения = "Не заданы параметры для подключения к сервису для проверки кодов маркировки!";
	КонецЕсли;
	
	Возврат ТекстСообщения = "";
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если ЭтаФорма.Элементы.Страницы.ТекущаяСтраница = ЭтаФорма.Элементы.ГруппаШтрихкоды Тогда
		
		ТекущиеДанные = ЭтаФорма.Элементы.ШтрихкодыНоменклатуры.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Штрихкод = СтрЗаменить(ДанныеШтрихкодов[0].Штрихкод,Символ(29)," ");
		ТекущиеДанные.Штрихкод = СтрЗаменить(ТекущиеДанные.Штрихкод,Символ(19)," ");
		
		Модифицированность = Истина;
		
	ИначеЕсли ЭтаФорма.Элементы.Страницы.ТекущаяСтраница = ЭтаФорма.Элементы.ГруппаТовары Тогда
		
		ТекущиеДанныеТовары = ЭтаФорма.Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанныеТовары = Неопределено Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не определена строка табличнорй части.";
			СообщениеПользователю.Сообщить();
			Возврат;
		КонецЕсли;
		
		//+++АСТБ_Горюшин_Алексей_19442
		Если НЕ УказанВидМаркированнойНоменклатуры(ТекущиеДанныеТовары.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		//---АСТБ_Горюшин_Алексей_19442
		
		//АсТБ_Alexey_70791_*******************************************************************
		Если ЗначениеЗаполнено(ТекущиеДанныеТовары.ПроцентИзноса) Тогда
			Возврат;
		КонецЕсли;	
		//АсТБ_Alexey_70791_*******************************************************************
		
		Если ТипЗнч(ДанныеШтрихкодов) = Тип("Строка") Тогда
			КодМаркировки = СтрЗаменить(ДанныеШтрихкодов,Символ(29)," ");
			КодМаркировки = СтрЗаменить(КодМаркировки,Символ(19)," ");
		Иначе
			КодМаркировки = СтрЗаменить(ДанныеШтрихкодов[0].Штрихкод,Символ(29)," ");
			КодМаркировки = СтрЗаменить(КодМаркировки,Символ(19)," ");
		КонецЕсли;
		
		ТекстСообщения = "";
		
		//АсТБ_Alexey_64630_********************************************************************
		//Если НЕ Сред(КодМаркировки,4,3) = "290" Тогда
			
			Если НЕ ЕстьКодМаркировки(КодМаркировки,ТекстСообщения) Тогда
				
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ТекстСообщения;
				СообщениеПользователю.Сообщить();
				
				Возврат;
				
			КонецЕсли;
			
		//КонецЕсли;
		//АсТБ_Alexey_64630_********************************************************************
		
		НайденныеСтроки = Объект.КодыМаркировки.НайтиСтроки(НОВЫЙ Структура("КодМаркировки",КодМаркировки));
		
		Если НайденныеСтроки.Количество() = 0 ТОгда
			
			Если Сред(КодМаркировки,4,3) = "290" Тогда //это универсальный GTIN
				
				НоваяСтрока 				= Объект.КодыМаркировки.Добавить();
				НоваяСтрока.КодМаркировки 	= КодМаркировки;
		    	Модифицированность 			= Истина;
			
				НоваяСтрока.Номенклатура 				= ТекущиеДанныеТовары.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры 	= ТекущиеДанныеТовары.ХарактеристикаНоменклатуры;
				
			Иначе //это уникальный GTIN
				
				РезультатПроверки = ПроверитьGTINНоменклатуры(Сред(КодМаркировки,4,13),ТекущиеДанныеТовары.Номенклатура,ТекущиеДанныеТовары.ХарактеристикаНоменклатуры);
				
				Если РезультатПроверки = "" Тогда
					НоваяСтрока 				= Объект.КодыМаркировки.Добавить();
					НоваяСтрока.КодМаркировки 	= КодМаркировки;
		    		Модифицированность 			= Истина;
					НоваяСтрока.Номенклатура 				= ТекущиеДанныеТовары.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры 	= ТекущиеДанныеТовары.ХарактеристикаНоменклатуры;
				Иначе
					СообщениеПользователю = Новый СообщениеПользователю;
					СообщениеПользователю.Текст = РезультатПроверки;
					СообщениеПользователю.Сообщить();
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьGTINНоменклатуры(GTIN,Номенклатура,ХарактеристикаНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	GTINНоменклатуры.GTIN КАК GTIN,
	|	GTINНоменклатуры.Номенклатура КАК Номенклатура,
	|	GTINНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.GTINНоменклатуры КАК GTINНоменклатуры
	|ГДЕ
	|	GTINНоменклатуры.GTIN = &GTIN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	GTINНоменклатуры.GTIN КАК GTIN,
	|	GTINНоменклатуры.Номенклатура КАК Номенклатура,
	|	GTINНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.GTINНоменклатуры КАК GTINНоменклатуры
	|ГДЕ
	|	GTINНоменклатуры.Номенклатура = &Номенклатура
	|	И GTINНоменклатуры.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("GTIN",						GTIN);
	Запрос.УстановитьПараметр("Номенклатура",				Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",	ХарактеристикаНоменклатуры);
	
	Результат = Запрос.ВыполнитьПакет();
	
	РезультатПоGTIN 		= Результат[0].Выгрузить();
	РезультатПоНоменклатуре = Результат[1].Выгрузить();
	
	РезультатПРоверки = "";
	
	Если РезультатПоGTIN.Количество() = 0 Тогда //возможно, это GTIN стороннего поставщика - проверяем номенклатуру в регистре
		Если НЕ РезультатПоНоменклатуре.Количество() = 0 Тогда //неверный GTIN
			РезультатПроверки = "Считан неверный код маркировки для выбранной номенклатуры: " + Номенклатура + ?(ЗначениеЗаполнено(ХарактеристикаНоменклатуры)," (" + ХарактеристикаНоменклатуры + ") "," ") + "Убедитесь, что считывается код для нужной номенклатуры";
		КонецЕсли;
	Иначе
		НоменклаутраПоРегистру 					= РезультатПоGTIN[0].Номенклатура;
		ХарактеристикаНоменклатурыПоРегистру 	= РезультатПоGTIN[0].ХарактеристикаНоменклатуры;
		Если (НЕ НоменклаутраПоРегистру = Номенклатура) ИЛИ (НЕ ХарактеристикаНоменклатурыПоРегистру = ХарактеристикаНоменклатуры) Тогда
			РезультатПроверки = "Считан неверный код маркировки для выбранной номенклатуры: " + Номенклатура + ?(ЗначениеЗаполнено(ХарактеристикаНоменклатуры)," (" + ХарактеристикаНоменклатуры + ") "," ") + "Убедитесь, что считывается код для нужной номенклатуры";
		КонецЕсли;	
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции	

&НаСервере
Функция ЕстьСкопированныеСтроки(НормаВыдачи) Экспорт
	
	ТаблицаДокумента = Объект.Товары.Выгрузить();
	
	НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(НОВЫЙ Структура("НормаВыдачи, ДобавленаКопированием",НормаВыдачи,Истина));
	
	Возврат НайденныеСтроки.Количество() > 0;
	
КонецФункции

&НаСервере
Процедура ПодобратьНоменклатуруВыдачи(ТаблицаДокумента, НомерСтрокиТаблицы, ТекущийОбъект)
	
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(ТаблицаДокумента[НомерСтрокиТаблицы-1].Сотрудник);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТаблицаДокумента[НомерСтрокиТаблицы-1]);
	
	ТаблицаНоменклатурыНормСотрудников = ТаблицаДокумента.Скопировать(МассивСтрок,"Сотрудник, НоменклатураНормы");
	
	ТаблицаРазмеров = ПроцедурыРаботыСНормамиСервер.ПодобратьРазмерыДляСотрудников(ТаблицаНоменклатурыНормСотрудников,?(ЗначениеЗаполнено(ТекущийОбъект.Ссылка),ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(ТекущийОбъект.Ссылка),ТекущаяДата()),ТекущийОбъект.Организация);
	
	ТаблицаПотребности   = ТаблицаДокумента.Скопировать(МассивСтрок,"Сотрудник, НормаВыдачи, НоменклатураНормы, ДатаВыдачи, Количество, КоличествоПотребность, ПериодичностьВыдачи");
	ТаблицаПотребности.Колонки.Добавить("ПолСотрудника", Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица"));
	ТаблицаПотребности[0].ПолСотрудника = ТаблицаПотребности[0].Сотрудник.ФизическоеЛицо.Пол;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПотребности.Сотрудник КАК Сотрудник,
	|	ТаблицаПотребности.ПолСотрудника КАК ПолСотрудника,
	|	ТаблицаПотребности.НормаВыдачи КАК НормаВыдачи,
	|	ТаблицаПотребности.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаПотребности.ДатаВыдачи КАК ДатаВыдачи,
	|	ТаблицаПотребности.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ТаблицаПотребности.Количество КАК Количество,
	|	ТаблицаПотребности.КоличествоПотребность КАК КоличествоПотребность
	|ПОМЕСТИТЬ ВТ_ТаблицаПотребности
	|ИЗ
	|	&ТаблицаПотребности КАК ТаблицаПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРазмеров.Сотрудник КАК Сотрудник,
	|	ТаблицаРазмеров.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаРазмеров.Номенклатура КАК Номенклатура,
	|	ТаблицаРазмеров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаРазмеров.ПолНоменклатуры КАК ПолНоменклатуры,
	|	ТаблицаРазмеров.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ТаблицаРазмеров.ПриоритетСоответствия КАК ПриоритетСоответствия,
	|	ТаблицаРазмеров.Приоритет КАК Приоритет,
	|	ТаблицаРазмеров.ПриоритетРазмера КАК ПриоритетРазмера,
	|	ТаблицаРазмеров.ТолькоДляСотрудника КАК ТолькоДляСотрудника,
	|	ТаблицаРазмеров.ВидАнтропометрии КАК ВидАнтропометрии,
	|	ТаблицаРазмеров.ЗначениеАнтропометрии КАК ЗначениеАнтропометрии,
	|	ТаблицаРазмеров.Рост КАК Рост,
	|	ТаблицаРазмеров.ИспользоватьРост КАК ИспользоватьРост,
	|	ТаблицаРазмеров.ВидСИЗ КАК ВидСИЗ,
	|	ТаблицаРазмеров.Комплект КАК Комплект,
	|	ТаблицаРазмеров.КоличествоВКомплекте КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаРазмеров
	|ИЗ
	|	&ТаблицаРазмеров КАК ТаблицаРазмеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНоменклатурыОстатки.Склад КАК Склад,
	|	ОстаткиНоменклатурыОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ОстаткиНоменклатурыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			&ПериодРасчета,
	|			Организация = &ОрганизацияДляОстатков
	|				И Склад = &Склад) КАК ОстаткиНоменклатурыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатурыОстатки.Склад,
	|	ОстаткиНоменклатурыОстатки.Номенклатура,
	|	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Поставщик КАК Поставщик
	|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ПериодРасчета, Организация = &Организация) КАК ЦеныНоменклатурыСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПотребности.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаПотребности.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаПотребности.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_ТаблицаРазмеров.ХарактеристикаНоменклатуры, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК ХарактеристикаНоменклатуры,
	|	ВТ_ТаблицаПотребности.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ТаблицаПотребности.Количество КАК Количество,
	|	ВТ_ТаблицаПотребности.КоличествоПотребность КАК КоличествоПотребность,
	|	ВТ_ТаблицаРазмеров.ПриоритетСоответствия КАК ПриоритетСоответствия,
	|	ВТ_ТаблицаРазмеров.Приоритет КАК Приоритет,
	|	ВТ_ТаблицаПотребности.ПериодичностьВыдачи КАК ПериодичностьВыдачи
	|ПОМЕСТИТЬ ВТ_ПотребностьСХарактеристикамиНоменклатуры
	|ИЗ
	|	ВТ_ТаблицаПотребности КАК ВТ_ТаблицаПотребности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаРазмеров КАК ВТ_ТаблицаРазмеров
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|			ПО ВТ_ТаблицаРазмеров.Номенклатура = ВТ_Номенклатура.Номенклатура
	|		ПО ВТ_ТаблицаПотребности.Сотрудник = ВТ_ТаблицаРазмеров.Сотрудник
	|			И ВТ_ТаблицаПотребности.НоменклатураНормы = ВТ_ТаблицаРазмеров.НоменклатураНормы
	|ГДЕ
	|	ЕСТЬNULL(ВТ_ТаблицаРазмеров.Количество, 0) = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаПотребности.Сотрудник,
	|	ВТ_ТаблицаПотребности.НормаВыдачи,
	|	ВТ_ТаблицаПотребности.НоменклатураНормы,
	|	ВТ_ТаблицаПотребности.ДатаВыдачи,
	|	ВТ_ТаблицаПотребности.Количество,
	|	ВТ_ТаблицаПотребности.КоличествоПотребность,
	|	ВТ_ТаблицаРазмеров.ПриоритетСоответствия,
	|	ВТ_ТаблицаРазмеров.Приоритет,
	|	ВТ_ТаблицаПотребности.ПериодичностьВыдачи,
	|	ВТ_Номенклатура.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПотребностьСХарактеристикамиНоменклатуры.Сотрудник КАК Сотрудник,
	|	ВТ_ПотребностьСХарактеристикамиНоменклатуры.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ПотребностьСХарактеристикамиНоменклатуры.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ПотребностьСХарактеристикамиНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВТ_ПотребностьСХарактеристикамиНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ПотребностьСХарактеристикамиНоменклатуры.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ПотребностьСХарактеристикамиНоменклатуры.Количество КАК Количество,
	|	ВТ_ПотребностьСХарактеристикамиНоменклатуры.КоличествоПотребность КАК КоличествоПотребность,
	|	ВТ_ПотребностьСХарактеристикамиНоменклатуры.ПриоритетСоответствия КАК ПриоритетСоответствия,
	|	ВТ_ПотребностьСХарактеристикамиНоменклатуры.Приоритет КАК Приоритет,
	|	ЕСТЬNULL(ВТ_ОстаткиНоменклатуры.КоличествоОстаток, 0) КАК Остаток,
	|	ВТ_ПотребностьСХарактеристикамиНоменклатуры.ПериодичностьВыдачи КАК ПериодичностьВыдачи
	|ПОМЕСТИТЬ ВТ_ПотребностьСОстатками
	|ИЗ
	|	ВТ_ПотребностьСХарактеристикамиНоменклатуры КАК ВТ_ПотребностьСХарактеристикамиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНоменклатуры КАК ВТ_ОстаткиНоменклатуры
	|		ПО ВТ_ПотребностьСХарактеристикамиНоменклатуры.Номенклатура = ВТ_ОстаткиНоменклатуры.Номенклатура
	|			И ВТ_ПотребностьСХарактеристикамиНоменклатуры.ХарактеристикаНоменклатуры = ВТ_ОстаткиНоменклатуры.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПотребностьСОстатками.Сотрудник КАК Сотрудник,
	|	ВТ_ПотребностьСОстатками.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ПотребностьСОстатками.НоменклатураНормы КАК НоменклатураНормы,
	|	ВЫБОР
	|		КОГДА ВТ_ПотребностьСОстатками.Остаток = 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ ВТ_ПотребностьСОстатками.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_ПотребностьСОстатками.Остаток = 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ВТ_ПотребностьСОстатками.ХарактеристикаНоменклатуры
	|	КОНЕЦ КАК ХарактеристикаНоменклатуры,
	|	ВТ_ПотребностьСОстатками.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ПотребностьСОстатками.Количество КАК Количество,
	|	ВТ_ПотребностьСОстатками.КоличествоПотребность КАК КоличествоПотребность,
	|	ВТ_ПотребностьСОстатками.ПриоритетСоответствия КАК ПриоритетСоответствия,
	|	ВТ_ПотребностьСОстатками.Приоритет КАК Приоритет,
	|	ВТ_ПотребностьСОстатками.Остаток КАК Остаток,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Цена, 0) * ВТ_ПотребностьСОстатками.Количество КАК Сумма,
	|	ВТ_ПотребностьСОстатками.ПериодичностьВыдачи КАК ПериодичностьВыдачи
	|ИЗ
	|	ВТ_ПотребностьСОстатками КАК ВТ_ПотребностьСОстатками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры
	|		ПО ВТ_ПотребностьСОстатками.Номенклатура = ВТ_ЦеныНоменклатуры.Номенклатура
	|			И ВТ_ПотребностьСОстатками.Номенклатура.Поставщик = ВТ_ЦеныНоменклатуры.Поставщик
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НормаВыдачи,
	|	НоменклатураНормы,
	|	Остаток УБЫВ,
	|	ПриоритетСоответствия,
	|	Приоритет
	|ИТОГИ ПО
	|	Сотрудник,
	|	НормаВыдачи";
	
	Запрос.УстановитьПараметр("ТаблицаПотребности", 	ТаблицаПотребности);
	Запрос.УстановитьПараметр("ТаблицаРазмеров", 		ТаблицаРазмеров);
	Запрос.УстановитьПараметр("ПериодРасчета",			ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(ТекущийОбъект.Ссылка));
	Запрос.УстановитьПараметр("Период",					?(ЗначениеЗаполнено(ТекущийОбъект.Ссылка),ТекущийОбъект.Дата,ТекущаяДата()));
	Запрос.УстановитьПараметр("Организация",			ТекущийОбъект.Организация);
	Запрос.УстановитьПараметр("Склад",					ТекущийОбъект.Склад);
	Запрос.УстановитьПараметр("ОрганизацияДляОстатков",	?(ПолучитьФункциональнуюОпцию("НеВестиУчетОстатковНоменклатурыПоОрганизации"),Справочники.Организации.ПустаяСсылка(),ТекущийОбъект.Организация));
	
	ВыборкаПоСотруднику = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСотруднику.Следующий() Цикл
		
		ВыборкаПоНормеВыдачи = ВыборкаПоСотруднику.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоНормеВыдачи.Следующий() Цикл
			
			ВыборкаПоНоменклатуреНормы = ВыборкаПоНормеВыдачи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоНоменклатуреНормы.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(ТаблицаДокумента[НомерСтрокиТаблицы-1], ВыборкаПоНоменклатуреНормы);
				ТаблицаДокумента[НомерСтрокиТаблицы-1].КоличествоСовпаденийНоменклатурыНормы = 1;
				Прервать;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНоменклатурыНормыНаСервере(ДанныеСтроки) Экспорт 
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	НайденныеСтроки = ДанныеСтроки.НормаВыдачи.СоставНормы.НайтиСтроки(Новый Структура("НоменклатураНормы",ДанныеСтроки.НоменклатураНормы));
	
	ДанныеСтроки.КоличествоПотребность 	= НайденныеСтроки[0].ПериодичностьВыдачи.КоличествоВПериоде;
	ДанныеСтроки.ПериодичностьВыдачи 	= НайденныеСтроки[0].ПериодичностьВыдачи;
	
	ТаблицаДокумента = ТекущийОбъект.Товары.Выгрузить();
	
	ПодобратьНоменклатуруВыдачи(ТаблицаДокумента, ДанныеСтроки.НомерСтроки, ТекущийОбъект);
	
	СтруктураПоиска = Новый Структура("Сотрудник,НоменклатураНормы",ДанныеСтроки.Сотрудник,ДанныеСтроки.НоменклатураНормы);
	
	Если Объект.Организация.СверткаПотребностиПоНоменклатуреНормы Тогда
		
		НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НайденнаяСтрока.КоличествоПотребность	= ДанныеСтроки.КоличествоПотребность;
			НайденнаяСтрока.Количество				= ДанныеСтроки.КоличествоПотребность;
			НайденнаяСтрока.ПериодичностьВыдачи		= ДанныеСтроки.ПериодичностьВыдачи;
			
			Если ДанныеСтроки.НомерСтроки = НайденнаяСтрока.НомерСтроки Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока.Номенклатура 				= ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].Номенклатура;
			НайденнаяСтрока.ХарактеристикаНоменклатуры 	= ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].ХарактеристикаНоменклатуры;
			НайденнаяСтрока.НеВыдано 					= ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].НеВыдано;
			НайденнаяСтрока.НеВыданоПоПричине 			= ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].НеВыданоПоПричине;
			
			Прервать;
			
		КонецЦикла;
			
		ТаблицаДокумента = ПроцедурыРаботыСНормамиСервер.СброситьОптимизацию(ТаблицаДокумента);
		ТаблицаДокумента = ПроцедурыРаботыСНормамиСервер.ПолучитьОптимальнуюТаблицуВыдачи(ТекущийОбъект,ТаблицаДокумента);
		ТаблицаДокумента = ПроцедурыРаботыСНормамиСервер.ПроверитьСовпадающуюНоменклатуруНормы(ТаблицаДокумента);
		
	КонецЕсли;

	//проверка остатков
	Если ЗначениеЗаполнено(ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].Номенклатура) Тогда
		
		ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].КоличествоПотребность 	= ДанныеСтроки.КоличествоПотребность;
		ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].Количество 			= ДанныеСтроки.КоличествоПотребность;
		ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].ПериодичностьВыдачи	= ДанныеСтроки.ПериодичностьВыдачи;
		
		Если НЕ ЕстьОстаткиНоменклатуры(ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].Номенклатура,ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].ХарактеристикаНоменклатуры,ТекущийОбъект) Тогда
			ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].Номенклатура 				= Справочники.Номенклатура.ПустаяСсылка();
			ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].Цена 						= 0;
			ТаблицаДокумента[ДанныеСтроки.НомерСтроки-1].Сумма 						= 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийОбъект.Товары.Загрузить(ТаблицаДокумента);
	ТекущийОбъект.СуммаДокумента = ТекущийОбъект.Товары.Итог("Сумма");
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
КонецПроцедуры

&НаСервере
Функция ЕстьОстаткиНоменклатуры(Номенклатура,ХарактеристикаНоменклатуры,ТекущийОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиНоменклатурыОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			&ПериодРасчета,
	|			Организация = &ОрганизацияДляОстатков
	|				И Склад = &Склад
	|				И Номенклатура = &Номенклатура
	|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ОстаткиНоменклатурыОстатки";
	
	Запрос.УстановитьПараметр("ОрганизацияДляОстатков",		?(ПолучитьФункциональнуюОпцию("НеВестиУчетОстатковНоменклатурыПоОрганизации"),Справочники.Организации.ПустаяСсылка(),ТекущийОбъект.Организация));
	Запрос.УстановитьПараметр("ПериодРасчета",				ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(ТекущийОбъект.Ссылка));
	Запрос.УстановитьПараметр("Склад",						ТекущийОбъект.Склад);
	Запрос.УстановитьПараметр("Номенклатура",				Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",	ХарактеристикаНоменклатуры);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

//обработчики событий табличной части ТОВАРЫ

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//не редактируем отказные строки за исключением номенклатуры выдачи и характеристики
	Если Элемент.ТекущиеДанные.НеВыдано Тогда
		Если НЕ (Элемент.ТекущийЭлемент.Имя = "ТоварыНеВыданоПоПричине" ИЛИ Элемент.ТекущийЭлемент.Имя = "ТоварыНеВыдано" ИЛИ Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" ИЛИ Элемент.ТекущийЭлемент.Имя = "ТоварыХарактеристикаНоменклатуры") Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//запрет редактирования номенклатуры и процента износа для разобранного комплекта
	//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 <<<
	//Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Комплект) И (Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" ИЛИ Элемент.ТекущийЭлемент.Имя = "ТоварыПроцентИзноса") Тогда
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Комплект) И Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
	//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 >>>	
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//процент износа можно выбирать
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыПроцентИзноса" Тогда
		Возврат;
	КонецЕсли;
	
	//для произвольной выдачи запрещаем редактрование строк, в которых не заполнена номенклатура нормы и заполнена номенклатура выдачи
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача") Тогда
		//отсечка убрана 25.09.2018 по просьбе Щербакова Григория (Карелия-Восток-Сервис)
		//для произвольной выдачи запрещаем редактрование строк, в которых не заполнена номенклатура нормы и заполнена номенклатура выдачи
		//за исключением информации о невыдаче
		//Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.НоменклатураНормы) И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
		//	Если НЕ (Элемент.ТекущийЭлемент.Имя = "ТоварыНеВыданоПоПричине" ИЛИ Элемент.ТекущийЭлемент.Имя = "ТоварыНеВыдано") Тогда
		//		Отказ = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		Возврат;
	ИначеЕсли Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача") Тогда //ничего не делаем
		Возврат;
	КонецЕсли;
	
	//далее в зависимости от алгоритма
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.ВыдачаСИЗ_ТоварыПередНачаломИзменения(Элемент, Объект, ЭтаФорма, Отказ)");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Если НЕ Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача") Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Добавление строк разрешено только копированием
	Если НЕ Копирование Тогда
		Если НЕ Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача") Тогда
			Отказ = Истина;
		КонецЕсли;	
	Иначе
		//если комплект разобран, добавление копированием запрещено
		Если НЕ ТекущиеДанные = Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Комплект) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		//АсТБ_Alexey_83572_********************************************************************
		Если НЕ ТекущиеДанные = Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			Если ЭтоКомплект(ТекущиеДанные.Номенклатура) Тогда
				СообщениеПользователю 		= Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Копирование строк, в которых содержится номенклатура выдачи с признаком <<КОМПЛЕКТ>> невозможно!";
				СообщениеПользователю.Сообщить();
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		//АсТБ_Alexey_83572_********************************************************************
		
		//для произвольной выдачи добавление копированием возможно только для строк с заполненной номенклатурой нормы
		Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача") Тогда
			Если НЕ ТекущиеДанные = Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНормы) Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоКомплект(ТекущаяНоменклатура)

	Возврат ТекущаяНоменклатура.Комплект;

КонецФункции

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.КоличествоПотребность = 0; //???
		Элемент.ТекущиеДанные.ДобавленаКопированием = Истина;
	КонецЕсли;
	
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача") ИЛИ Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача") Тогда
		Элемент.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	//+++АСТБ_Горюшин_Алексей_19306
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача") Тогда
		//нет ограничения на удаление	
	ИначеЕсли НЕ Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача") Тогда
	//было
	//Если НЕ Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача") Тогда
	//---АСТБ_Горюшин_Алексей_19306	
		Если НЕ Элемент.ТекущиеДанные.ДобавленаКопированием Тогда
			Отказ = истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;    
	
	//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 <<<	
	//Элементы.Товары.ПодчиненныеЭлементы.ТоварыПроцентИзноса.ТолькоПросмотр = ЗначениеЗаполнено(Элемент.ТекущиеДанные.Комплект);    
	//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 >>>
	
	Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура.ТолькоПросмотр 	= ЗначениеЗаполнено(Элемент.ТекущиеДанные.Комплект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		
		// для упрощенной выдачи список не нужен
		Если НЕ Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача") Тогда
			ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокНоменклатурыВыдачи(ТекущиеДанные.НоменклатураНормы,ТекущиеДанные.Сотрудник));
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатураНормы" Тогда	
		
		//для произвольной и упрощенной выдачи список не нужен
		Если НЕ (Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача") ИЛИ Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача")) Тогда
			//список нужен, если используются группы "ИЛИ"
			Если ПолучитьОпциюОрганизации(Объект.Организация,"ИспользоватьГруппыИЛИ") Тогда
				ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатураНормы.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьСписокНоменклатурыНормыПоНормеВыдачи(ТекущиеДанные.НормаВыдачи));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыПроцентИзноса" Тогда	
		
		Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача") Тогда
			Если ЗначениеЗаполнено(Объект.Организация) 
				И ЗначениеЗаполнено(Объект.ДокументОснование) 
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВыдачиСИЗ.ФактическаяВыдача") Тогда
				ТекущийСклад = Объект.Склад;
			Иначе
				ТекущийСклад = Объект.СкладОтправитель;
			КонецЕсли;
		Иначе
			ТекущийСклад = Объект.Склад;
		КонецЕсли;
		
		//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 <<<
		//ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПроцентИзноса.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьСписокПроцентовИзносаПоОстаткам(ТекущиеДанные.Номенклатура,ТекущиеДанные.ХарактеристикаНоменклатуры,ТекущийСклад,Объект.Организация));
		Если ЗначениеЗаполнено(ТекущиеДанные.Комплект) Тогда //нужно определить доступные остатки с процентом износа для всех комплектующих
			ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПроцентИзноса.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокПроцентовИзносаПоОстаткамДляКомплектующего(ТекущиеДанные.Комплект,ТекущийСклад));
		Иначе //как раньше - определяем остатки для номенклатуры и размера
			ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыПроцентИзноса.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьСписокПроцентовИзносаПоОстаткам(ТекущиеДанные.Номенклатура,ТекущиеДанные.ХарактеристикаНоменклатуры,ТекущийСклад,Объект.Организация));
		КонецЕсли;	
		//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 >>>
		
	КонецЕсли;
	
КонецПроцедуры

//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 <<<

&НаСервере
Функция ПолучитьСписокПроцентовИзносаПоОстаткамДляКомплектующего(ТекущийКомплект, ТекущийСклад)  
	
	Возврат ПроцедурыРаботыСНормамиСервер.ПолучитьСписокПроцентовИзносаПоОстаткамДляКомплектующего(ТекущийКомплект,Объект.Товары.Выгрузить(Новый Структура("Комплект",ТекущийКомплект)),ТекущийСклад,Объект.Организация);
	
КонецФункции	  

//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 >>>

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыСотрудник" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Сотрудник);
		ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаЭлемента", ПараметрыФормы);
	ИначеЕсли Поле.Имя = "ТоварыНормаВыдачи" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.НормаВыдачи) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.НормаВыдачи);
			ОткрытьФорму("Справочник.НормыВыдачиСИЗ.Форма.ФормаЭлемента", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНеВыданоПриИзменении(Элемент)
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.ВыдачаСИЗ_ТоварыНеВыданоПриИзменении(Элемент,Объект,ЭтаФорма)");	
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНеВыданоПоПричинеПриИзменении(Элемент)
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.ВыдачаСИЗ_ТоварыНеВыданоПоПричинеПриИзменении(Элемент,Объект,ЭтаФорма)");
	
	//управление флажком "Не выдано" при изменении причины
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НеВыдано = ЗначениеЗаполнено(ТекущиеДанные.НеВыданоПоПричине);
	
	ТоварыНеВыданоПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНормыПриИзменении(Элемент)
	
	//для упрощенной выдачи ничего не делаем
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача") Тогда
		Возврат;
	КонецЕсли;
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.ВыдачаСИЗ_ТоварыНоменклатураНормыПриИзменении(Элемент,Объект,ЭтаФорма)");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.ВыдачаСИЗ_ТоварыНоменклатураПриИзменении(Элемент,Объект,ЭтаФорма)");
	
	//+++АСТБ_Горюшин_Алексей_26518
	ПроверитьАктуальностьКодовМаркировки();
	//---АСТБ_Горюшин_Алексей_26518
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПроцентИзноса = ПредопределенноеЗначение("Справочник.ПроцентыИзноса.ПустаяСсылка");
	
	//АсТБ_Alexey_54797_********************************************************************
	ТоварыНоменклатураПриИзмененииНаСервере();
	//АсТБ_Alexey_54797_********************************************************************
	
КонецПроцедуры

//АсТБ_Alexey_54797_********************************************************************
&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере()
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
КонецПроцедуры	
//АсТБ_Alexey_54797_********************************************************************

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	//для упрощенной выдачи ничего не делаем
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача") Тогда
		Возврат;
	КонецЕсли;
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.ВыдачаСИЗ_ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент,Объект,ЭтаФорма)");
	
	//+++АСТБ_Горюшин_Алексей_26518
	ПроверитьАктуальностьКодовМаркировки();
	//---АСТБ_Горюшин_Алексей_26518
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПроцентИзноса = ПредопределенноеЗначение("Справочник.ПроцентыИзноса.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.ВыдачаСИЗ_ТоварыКоличествоПриИзменении(Элемент,Объект,ЭтаФорма)");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентИзносаПриИзменении(Элемент)
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.ВыдачаСИЗ_ТоварыПроцентИзносаПриИзменении(Элемент,Объект,ЭтаФорма)");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		
		//для упрощенной выдачи ничего не делаем
		Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача") Тогда
			Возврат;
		КонецЕсли;
	
		Элемент.ПодчиненныеЭлементы.ТоварыНоменклатура.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокНоменклатурыВыдачи(Элемент.ТекущиеДанные.НоменклатураНормы,Элемент.ТекущиеДанные.Сотрудник));
		
	КонецЕсли;
	
	//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 <<<
	//Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Комплект) И Элемент.ТекущийЭлемент.Имя = "ТоварыПроцентИзноса" Тогда
	//	Отказ = Истина;
	//КонецЕсли; 
	//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 >>>
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "СВОЙСТВА"

// СтандартныеПодсистемы.Свойства
 &НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "ПЕЧАТЬ"

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
  УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
  
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
        ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя);
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ...

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьДокументНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаСервере(ВыбранныйСотрудник = Неопределено)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");	
	
	Документы.ВыдачаСредствЗащитыСотруднику.ЗаполнитьТаблицуДокумента(ТекущийОбъект,ВыбранныйСотрудник);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
	ЗаполнитьКолонку_ТипУсловия_Основание();
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
	//***НСК Трегубов А.А.*** -- 90515  --  21.07.2021 <<<
	ЗаполнитьКолонку_НеВыданоПоПричине();
	//***НСК Трегубов А.А.*** -- 90515 --  21.07.2021 >>>
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокНоменклатурыВыдачи(НоменклатураНормы,Сотрудник)
	
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(Сотрудник);
	
	ДатаАнализа = ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Объект.Ссылка);
	
	ТаблицаЗанятыхРМ 			= ПроцедурыРаботыСНормамиСервер.ПолучитьТаблицуЗанятыхРабочихМестСУсловиями(МассивСотрудников,Объект.Организация,ДатаАнализа);
	ТаблицаУстановленныхНорм 	= ПроцедурыРаботыСНормамиСервер.ПолучитьТаблицуУстановленныхНорм(Объект.Организация,ДатаАнализа,ТаблицаЗанятыхРМ.ВыгрузитьКолонку("Подразделение"),ТаблицаЗанятыхРМ.ВыгрузитьКолонку("Должность"));
	ТаблицаСНормами 			= ПроцедурыРаботыСНормамиСервер.ПодобратьНормы(ТаблицаЗанятыхРМ,ТаблицаУстановленныхНорм.Скопировать(НОВЫЙ Структура("НоменклатураНормы",НоменклатураНормы)),Объект.Организация,ДатаАнализа,"Сотрудник,Подразделение,Должность,НоменклатураНормы,Использовать");
	
	ТаблицаСоответствия = ПроцедурыРаботыСНормамиСервер.ПолучитьСоответствияНоменклатурыДляСотрудника(ТаблицаСНормами,?(ЗначениеЗаполнено(Объект.Ссылка),ДатаАнализа,ТекущаяДата()),НоменклатураНормы);
	
	Возврат ТаблицаСоответствия.ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

&НаСервере
Процедура СкорректироватьСовпадающиеСтроки(ДанныеСтроки,КорректироватьКоличество,ИскатьНоменклатуруВыдачи = Истина) Экспорт
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ИскатьНоменклатуруВыдачи Тогда
		СтруктураПоиска = Новый Структура("Сотрудник, НоменклатураНормы, Номенклатура", ДанныеСтроки.Сотрудник, ДанныеСтроки.НоменклатураНормы, ДанныеСтроки.Номенклатура);
	Иначе
		СтруктураПоиска = Новый Структура("Сотрудник, НоменклатураНормы", ДанныеСтроки.Сотрудник, ДанныеСтроки.НоменклатураНормы);
	КонецЕсли;
		
	НайденныеСтроки = ТекущийОбъект.Товары.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если НайденнаяСтрока.НомерСтроки = ДанныеСтроки.НомерСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НайденнаяСтрока,ДанныеСтроки,,"НормаВыдачи,Количество,КоличествоПотребность,ДатаВыдачи");
		Если КорректироватьКоличество Тогда
			НайденнаяСтрока.Количество = 0;
			НайденнаяСтрока.Сумма = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	АдресВременногоХранилища = ВЫгрузитьТаблицуДокументаВоВременноеХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ",							Объект.Ссылка);
	ПараметрыФормы.Вставить("АдресВременногоХранилищаТаблицы",	АдресВременногоХранилища);
	ПараметрыФормы.Вставить("Склад",							Объект.Склад);
	ПараметрыФормы.Вставить("Дата",								?(ЗначениеЗаполнено(Объект.Ссылка),Объект.Дата,ТекущаяДата()));
	ПараметрыФормы.Вставить("Сотрудник",						Объект.Сотрудник);
	ПараметрыФормы.Вставить("Организация",						Объект.Организация);
	ПараметрыФормы.Вставить("ВидВыдачиСИЗ",						Объект.ВидВыдачиСИЗ);
	
	ОткрытьФорму("Обработка.ПодборНоменклатурыВыдачи.Форма.Форма",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ВЫгрузитьТаблицуДокументаВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(),ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатурыВыдачи.Форма.Форма" Тогда
		
		ПолучитьРезультатПодбораИзХранилища(ВыбранноеЗначение.АдресРезультатаПодбораВХранилище);
		
		ОбработатьПодборНаСервере();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатурыВыдачи.Форма.ФормаПодбораВСтроке" Тогда
		
		НомерВыбраннойСтроки = Элементы.Товары.ТекущиеДанные.НомерСтроки;
		
		СкорректироватьТекущуюСтроку(ВыбранноеЗначение.АдресРезультатаПодбораВХранилище,НомерВыбраннойСтроки);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Сотрудники.Форма.ФормаВыбора" Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			
			ЗаполнитьДокументНаСервере(ВыбранноеЗначение);
			
		КонецЕсли;
	//АсТБ_Alexey_102437_********************************************************************	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ПричиныНевыдачиСИЗ.Форма.ФормаВыбора" Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			
			ЗаполнитьПричиныНевыдачиСИЗ(ВыбранноеЗначение);
			
		КонецЕсли;	
	//АсТБ_Alexey_102437_********************************************************************	
	//+++АСТБ_Горюшин_Алексей_19306
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатурыВыдачи.Форма.ФормаПодбора" Тогда
		
		ПолучитьРезультатПодбораИзХранилищаФормаПодбора(ВыбранноеЗначение.АдресРезультатаПодбораВХранилище);
	//---АСТБ_Горюшин_Алексей_19306
	
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

	Модифицированность = Истина;
	
	//+++АСТБ_Горюшин_Алексей_26518
	ПроверитьАктуальностьКодовМаркировки();
	//---АСТБ_Горюшин_Алексей_26518
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаДокумента = ТекущийОбъект.Товары.Выгрузить();
	
	//+++АСТБ_Горюшин_Алексей_24341
	//было
	//ТаблицаДокумента = ПроцедурыРаботыСНормамиСервер.СброситьОптимизацию(ТаблицаДокумента);
	//ТаблицаДокумента = ПроцедурыРаботыСНормамиСервер.ПолучитьОптимальнуюТаблицуВыдачи(ТекущийОбъект,ТаблицаДокумента);
	//ТаблицаДокумента = ПроцедурыРаботыСНормамиСервер.ПроверитьСовпадающуюНоменклатуруНормы(ТаблицаДокумента);
	//---АСТБ_Горюшин_Алексей_24341
	
	ТекущийОбъект.Товары.Загрузить(ТаблицаДокумента);
	ТекущийОбъект.СуммаДокумента = ТекущийОбъект.Товары.Итог("Сумма");
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
	ЗаполнитьКолонку_ТипУсловия_Основание();
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьТекущуюСтроку(АдресРезультатаПодбораВХранилище,НомерВыбраннойСтроки)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(ТекущийОбъект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Сервер.ВыдачаСИЗ_СкорректироватьТекущуюСтроку(ТекущийОбъект,АдресРезультатаПодбораВХранилище,НомерВыбраннойСтроки)");
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
	ЗаполнитьКолонку_ТипУсловия_Основание();
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРезультатПодбораИзХранилища(АдресРезультатаПодбораВХранилище)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаПодбора = ПолучитьИзВременногоХранилища(АдресРезультатаПодбораВХранилище);
	
	Для Каждого СтрокаТаблицыПодбора Из ТаблицаПодбора Цикл
		
		СтрокаДокумента = ТекущийОбъект.Товары[СтрокаТаблицыПодбора.НомерСтрокиДокумента-1];
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента,СтрокаТаблицыПодбора);
		
		СтрокаДокумента.Сумма = СтрокаДокумента.Количество * СтрокаДокумента.Цена;
		
	КонецЦикла;	
	
	ТекущийОбъект.СуммаДокумента = ТекущийОбъект.Товары.Итог("Сумма");
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача") Тогда
		
		Если ЕстьПотребность(Объект.Сотрудник) Тогда
			
			Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача");
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле = "ВидВыдачиСИЗ";
			Сообщение.Текст = "У выбранного сотрудника уже сформирована потребность. Упрощенная выдача невозможна!";
			Сообщение.Сообщить(); 
			
			УправлениеВидимостьюЭлементовФормы();
			УправлениеДоступностьюЭлементовФормы();
			УправлениеСвойствамиЭлементовФормы();
	
		КонецЕсли;	
			
	КонецЕсли;	
	
	УстановитьЗаголовокФормы();
	
	Объект.Товары.Очистить();
	//АСТБ_ALEXEY_72838_**************************************************************
	Объект.ШтрихкодыНоменклатуры.Очистить();
	Объект.КодыМаркировки.Очистить();
	//АСТБ_ALEXEY_72838_**************************************************************
	СформироватьИнформациюОбОсновномМестеРаботы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПотребность(ТекущийСотрудник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(, Сотрудник = &Сотрудник) КАК ПотребностьВыдачиСИЗОстатки";
	Запрос.УстановитьПараметр("Сотрудник",ТекущийСотрудник);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции	

&НаКлиенте
Процедура РазобратьВсеКомплекты(Команда)
	
	РазобратьВсеКомплектыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РазобратьВсеКомплектыНаСервере()
	
	ТаблицаДокумента = Объект.Товары.Выгрузить();
	ТаблицаДокумента.Очистить();
	
	ЕстьКомплеты = Ложь;
	
	Для Каждого СтрокаДокумента Из Объект.Товары Цикл
		
		//для произвольной выдачи проверяем заполнение номенклатуры нормы
		//АсТБ_Alexey_69695_*******************************************************************
		//Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача И НЕ ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНормы) Тогда
		//	ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
		//	Продолжить;
		//КонецЕсли;
		//АсТБ_Alexey_69695_*******************************************************************
		
		Если СтрокаДокумента.Номенклатура.Комплект Тогда
			ЕстьКомплеты = Истина;
			Для Каждого СтрокаКомплектующих Из СтрокаДокумента.Номенклатура.Комплектующие Цикл
				НоваяСтрока = ТаблицаДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
				НоваяСтрока.Комплект 					= СтрокаДокумента.Номенклатура;
				НоваяСтрока.Номенклатура 				= СтрокаКомплектующих.Номенклатура;
				//АсТБ_Alexey_103065_*******************************************************************
				Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача Тогда
					Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатуры) Тогда
						НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("Метрика",СтрокаДокумента.ХарактеристикаНоменклатуры.Метрика,,СтрокаКомплектующих.Номенклатура);
					Иначе
						НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					КонецЕсли;	
				Иначе	
					НоваяСтрока.ХарактеристикаНоменклатуры = ПроцедурыРаботыСНормамиСервер.ПолучитьХарактеристикуПоАнтропометрии(СтрокаКомплектующих.Номенклатура,Объект.Сотрудник);
				КонецЕсли;	
				//АсТБ_Alexey_103065_*******************************************************************
				НоваяСтрока.КоличествоВКомплекте 		= СтрокаКомплектующих.Количество;
				НоваяСтрока.Цена 						= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(СтрокаКомплектующих.Номенклатура,Объект.Организация,Объект.Дата);
				НоваяСтрока.Сумма 						= НоваяСтрока.Количество * НоваяСтрока.Цена * НоваяСтрока.КоличествоВКомплекте;
				НоваяСтрока.ПроцентИзноса 				= Справочники.ПроцентыИзноса.ПустаяСсылка();
				//АсТБ_Alexey_103065_*******************************************************************
				НоваяСтрока.НомерСтрокиКомплекта		= СтрокаДокумента.НомерСтроки;
				//АсТБ_Alexey_103065_*******************************************************************
			КонецЦикла;
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
		КонецЕсли;
	
	КонецЦикла;
	
	ЗаполнитьКолонку_ТипУсловия_Основание();
	
	Если ЕстьКомплеты Тогда
		Объект.Товары.Загрузить(ТаблицаДокумента);
		Объект.СуммаДокумента 		= Объект.Товары.Итог("Сумма");
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		Сообщить("Комплекты в документе не найдены.");
	КонецЕсли;
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
	//+++АСТБ_Горюшин_Алексей_26518
	ПроверитьАктуальностьКодовМаркировки();
	//---АСТБ_Горюшин_Алексей_26518

КонецПроцедуры

&НаКлиенте
Процедура РазобратьВыбранныйКомплект(Команда)
	
	МассивВыделенныхСтрок = ЭтаФорма.Элементы.Товары.ВыделенныеСтроки;
	
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Сообщить("Не выбраны строки документа.");
		Возврат;
	КонецЕсли;

	РазобратьВыбранныйКомплектНаСервере(МассивВыделенныхСтрок);
	
КонецПроцедуры

&НаСервере
Процедура РазобратьВыбранныйКомплектНаСервере(МассивНомеровСтрок)
	
	ТаблицаДокумента = Объект.Товары.Выгрузить();
	ТаблицаДокумента.Очистить();
	
	ЕстьКомплеты = Ложь;
	
	МассивРазворачиваемыхСотрудников 		= Новый Массив;
	МассивРазворачиваемыхКомплектов 		= Новый Массив;
	МассивРазворачиваемыхНормВыдачи 		= Новый Массив;
	МассивРазворачиваемыхНоменклатурНорм 	= Новый Массив;
	МассивРазворачиваемыхДатВыдачи 			= Новый Массив;
	
	Для Каждого ЭлементМассива Из МассивНомеровСтрок Цикл
		
		ДанныеСтроки = Объект.Товары.НайтиПоидентификатору(ЭлементМассива);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) или не ДанныеСтроки.Номенклатура.Комплект Тогда
			Продолжить;
		КонецЕсли;                                             
		
		//для произвольной выдачи проверяем заполнение номенклатуры нормы
		//АсТБ_Alexey_69695_*******************************************************************
		//Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача И НЕ ЗначениеЗаполнено(ДанныеСтроки.НоменклатураНормы) Тогда
		//	Продолжить;
		//КонецЕсли;
		//АсТБ_Alexey_69695_*******************************************************************
		
		Если МассивРазворачиваемыхКомплектов.Найти(ДанныеСтроки.Номенклатура) = неопределено Тогда
			МассивРазворачиваемыхКомплектов.Добавить(ДанныеСтроки.Номенклатура);
		КонецЕсли;
		
		Если МассивРазворачиваемыхНормВыдачи.Найти(ДанныеСтроки.НормаВыдачи) = неопределено Тогда
			МассивРазворачиваемыхНормВыдачи.Добавить(ДанныеСтроки.НормаВыдачи);
		КонецЕсли;
		
		Если МассивРазворачиваемыхСотрудников.Найти(ДанныеСтроки.Сотрудник) = неопределено Тогда
			МассивРазворачиваемыхСотрудников.Добавить(ДанныеСтроки.Сотрудник);
		КонецЕсли;
		
		Если МассивРазворачиваемыхНоменклатурНорм.Найти(ДанныеСтроки.НоменклатураНормы) = неопределено Тогда
			МассивРазворачиваемыхНоменклатурНорм.Добавить(ДанныеСтроки.НоменклатураНормы);
		КонецЕсли;
		
		Если МассивРазворачиваемыхДатВыдачи.Найти(ДанныеСтроки.ДатаВыдачи) = неопределено Тогда
			МассивРазворачиваемыхДатВыдачи.Добавить(ДанныеСтроки.ДатаВыдачи);
		КонецЕсли;
		
	КонецЦикла;
	                                                           
	СверткаПотребностиПоНоменклатуреНормы = ПолучитьОпциюОрганизации(Объект.Организация,"СверткаПотребностиПоНоменклатуреНормы");
	
	Для Каждого СтрокаДокумента Из Объект.Товары Цикл
		
		Если НЕ МассивРазворачиваемыхКомплектов.Найти(СтрокаДокумента.Номенклатура) = Неопределено Тогда
			
			Если НЕ МассивРазворачиваемыхСотрудников.Найти(СтрокаДокумента.Сотрудник) = Неопределено Тогда
				
				Если НЕ МассивРазворачиваемыхНормВыдачи.Найти(СтрокаДокумента.НормаВыдачи) = Неопределено И НЕ МассивРазворачиваемыхДатВыдачи.Найти(СтрокаДокумента.ДатаВыдачи) = Неопределено Тогда
					
					ЕстьКомплеты = Истина;
					Для Каждого СтрокаКомплектующих Из СтрокаДокумента.Номенклатура.Комплектующие Цикл
						НоваяСтрока = ТаблицаДокумента.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
						НоваяСтрока.Комплект 					= СтрокаДокумента.Номенклатура;
						НоваяСтрока.Номенклатура 				= СтрокаКомплектующих.Номенклатура;
						//АсТБ_Alexey_103065_*******************************************************************
						Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача Тогда
							Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатуры) Тогда
								НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("Метрика",СтрокаДокумента.ХарактеристикаНоменклатуры.Метрика,,СтрокаКомплектующих.Номенклатура);
							Иначе
								НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
							КонецЕсли;	
						Иначе	
							НоваяСтрока.ХарактеристикаНоменклатуры = ПроцедурыРаботыСНормамиСервер.ПолучитьХарактеристикуПоАнтропометрии(СтрокаКомплектующих.Номенклатура,Объект.Сотрудник);
						КонецЕсли;
						//АсТБ_Alexey_103065_*******************************************************************
						НоваяСтрока.КоличествоВКомплекте 		= СтрокаКомплектующих.Количество;
						НоваяСтрока.Цена 						= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(СтрокаКомплектующих.Номенклатура,Объект.Организация,Объект.Дата);
						НоваяСтрока.Сумма 						= НоваяСтрока.Количество * НоваяСтрока.Цена * НоваяСтрока.КоличествоВКомплекте;
						НоваяСтрока.ПроцентИзноса 				= Справочники.ПроцентыИзноса.ПустаяСсылка();
						//АсТБ_Alexey_103065_*******************************************************************
						НоваяСтрока.НомерСтрокиКомплекта		= СтрокаДокумента.НомерСтроки;
						//АсТБ_Alexey_103065_*******************************************************************
					КонецЦикла;
					
				Иначе	
					
					Если СверткаПотребностиПоНоменклатуреНормы И НЕ МассивРазворачиваемыхНоменклатурНорм.Найти(СтрокаДокумента.НоменклатураНормы) = Неопределено И НЕ МассивРазворачиваемыхДатВыдачи.Найти(СтрокаДокумента.ДатаВыдачи) = Неопределено Тогда
						
						ЕстьКомплеты = Истина;
						Для Каждого СтрокаКомплектующих Из СтрокаДокумента.Номенклатура.Комплектующие Цикл
							НоваяСтрока = ТаблицаДокумента.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
							НоваяСтрока.Комплект 					= СтрокаДокумента.Номенклатура;
							НоваяСтрока.Номенклатура 				= СтрокаКомплектующих.Номенклатура;
							//АсТБ_Alexey_103065_*******************************************************************
							Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача Тогда
								Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатуры) Тогда
									НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("Метрика",СтрокаДокумента.ХарактеристикаНоменклатуры.Метрика,,СтрокаКомплектующих.Номенклатура);
								Иначе
									НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
								КонецЕсли;	
							Иначе	
								НоваяСтрока.ХарактеристикаНоменклатуры = ПроцедурыРаботыСНормамиСервер.ПолучитьХарактеристикуПоАнтропометрии(СтрокаКомплектующих.Номенклатура,Объект.Сотрудник);
							КонецЕсли;
							//АсТБ_Alexey_103065_*******************************************************************
							НоваяСтрока.КоличествоВКомплекте 		= СтрокаКомплектующих.Количество;
							НоваяСтрока.Цена 						= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(СтрокаКомплектующих.Номенклатура,Объект.Организация,Объект.Дата);
							НоваяСтрока.Сумма 						= НоваяСтрока.Количество * НоваяСтрока.Цена * НоваяСтрока.КоличествоВКомплекте;
							НоваяСтрока.ПроцентИзноса 				= Справочники.ПроцентыИзноса.ПустаяСсылка();
							//АсТБ_Alexey_103065_*******************************************************************
							НоваяСтрока.НомерСтрокиКомплекта		= СтрокаДокумента.НомерСтроки;
							//АсТБ_Alexey_103065_*******************************************************************
						КонецЦикла;
						
					Иначе
						
						ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
						
					КонецЕсли;
				
				КонецЕсли;
				
			Иначе	
				
				ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
				
			КонецЕсли;
			
		Иначе	
			
			ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ЗаполнитьКолонку_ТипУсловия_Основание();
	
	Если ЕстьКомплеты Тогда
		Объект.Товары.Загрузить(ТаблицаДокумента);
		Объект.СуммаДокумента 		= Объект.Товары.Итог("Сумма");
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		Сообщить("Комплекты в выбранных строках не найдены.");
	КонецЕсли;
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
	//+++АСТБ_Горюшин_Алексей_26518
	ПроверитьАктуальностьКодовМаркировки();
	//---АСТБ_Горюшин_Алексей_26518

КонецПроцедуры

&НаКлиенте
Процедура СобратьВсеКомплекты(Команда)
	
	СобратьВсеКомплектыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СобратьВсеКомплектыНаСервере()
	
	ТаблицаДокумента = Объект.Товары.Выгрузить();
	ТаблицаДокумента.Очистить();
	
	ЕстьКомплеты = Ложь;
	
	ТаблицаОбработанныхКомплектов = Новый ТаблицаЗначений;
	ТаблицаОбработанныхКомплектов.Колонки.Добавить("Комплект");
	ТаблицаОбработанныхКомплектов.Колонки.Добавить("НормаВыдачи");
	ТаблицаОбработанныхКомплектов.Колонки.Добавить("ДатаВыдачи");
	//АсТБ_Alexey_103065_*******************************************************************
	ТаблицаОбработанныхКомплектов.Колонки.Добавить("НомерСтрокиКомплекта");
	//СтруктураПоиска = Новый Структура("Комплект,НормаВыдачи,ДатаВыдачи");
	СтруктураПоиска = Новый Структура("Комплект,НормаВыдачи,ДатаВыдачи,НомерСтрокиКомплекта");
	//АсТБ_Alexey_103065_*******************************************************************
	
	Для Каждого СтрокаДокумента Из Объект.Товары Цикл
		
		//для произвольной выдачи проверяем заполнение номенклатуры нормы
		//АсТБ_Alexey_69695_*******************************************************************
		//Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача И НЕ ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНормы) Тогда
		//	СтрокаДокумента.ПроцентИзноса = Справочники.ПроцентыИзноса.ПустаяСсылка();
		//	ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
		//	Продолжить;
		//КонецЕсли;
		//АсТБ_Alexey_69695_*******************************************************************
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Комплект) Тогда
			ЕстьКомплеты = Истина;
			СтруктураПоиска.Комплект = СтрокаДокумента.Комплект;
			СтруктураПоиска.НормаВыдачи = СтрокаДокумента.НормаВыдачи;
			СтруктураПоиска.ДатаВыдачи 	= СтрокаДокумента.ДатаВыдачи;
			//АсТБ_Alexey_103065_*******************************************************************
			СтруктураПоиска.НомерСтрокиКомплекта = СтрокаДокумента.НомерСтрокиКомплекта;
			//АсТБ_Alexey_103065_*******************************************************************
			
			СтрокаТаблицыКомплекта = ТаблицаОбработанныхКомплектов.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокаТаблицыКомплекта.Количество() = 0 Тогда
				
				НоваяСтрока = ТаблицаДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
				//АсТБ_Alexey_96460_*******************************************************************
				//НоваяСтрока.НеВыдано					= Ложь;
				//НоваяСтрока.НеВыданоПоПричине           = "";
				//АсТБ_Alexey_96460_*******************************************************************
				НоваяСтрока.Номенклатура 				= СтрокаДокумента.Комплект;
				//АсТБ_Alexey_103065_*******************************************************************
				Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача Тогда
					Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатуры) Тогда
						НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("Метрика",СтрокаДокумента.ХарактеристикаНоменклатуры.Метрика,,НоваяСтрока.Номенклатура);
					Иначе
						НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					КонецЕсли;	
				Иначе	
					НоваяСтрока.ХарактеристикаНоменклатуры = ПроцедурыРаботыСНормамиСервер.ПолучитьХарактеристикуПоАнтропометрии(НоваяСтрока.Номенклатура,Объект.Сотрудник);
				КонецЕсли;
				//АсТБ_Alexey_103065_*******************************************************************
				НоваяСтрока.КоличествоВКомплекте 		= 0;
				НоваяСтрока.Комплект 					= Справочники.Номенклатура.ПустаяСсылка();
				НоваяСтрока.Цена 						= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НоваяСтрока.Номенклатура,Объект.Организация,Объект.Дата);
				НоваяСтрока.Сумма 						= НоваяСтрока.Количество * НоваяСтрока.Цена;
				НоваяСтрока.ПроцентИзноса 				= Справочники.ПроцентыИзноса.ПустаяСсылка();
				СтрокаКомплекта = ТаблицаОбработанныхКомплектов.Добавить();
				СтрокаКомплекта.Комплект = СтрокаДокумента.Комплект;
				СтрокаКомплекта.НормаВыдачи = СтрокаДокумента.НормаВыдачи;
				СтрокаКомплекта.ДатаВыдачи 	= СтрокаДокумента.ДатаВыдачи;
				//АсТБ_Alexey_103065_*******************************************************************
				СтрокаКомплекта.НомерСтрокиКомплекта = СтрокаДокумента.НомерСтрокиКомплекта;
				//АсТБ_Alexey_103065_*******************************************************************
				
			КонецЕсли;
		Иначе	
			ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
		КонецЕсли;
	
	КонецЦикла;
	
	ЗаполнитьКолонку_ТипУсловия_Основание();
	
	Если ЕстьКомплеты Тогда
		Объект.Товары.Загрузить(ТаблицаДокумента);
		Объект.СуммаДокумента 		= Объект.Товары.Итог("Сумма");
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		Сообщить("Комплекты в документе не найдены.");
	КонецЕсли;
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
	//+++АСТБ_Горюшин_Алексей_26518
	ПроверитьАктуальностьКодовМаркировки();
	//---АСТБ_Горюшин_Алексей_26518
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьВыбранныйКомплект(Команда)
	
	МассивВыделенныхСтрок = ЭтаФорма.Элементы.Товары.ВыделенныеСтроки;
	
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Сообщить("Не выбраны строки документа.");
		Возврат;
	КонецЕсли;
	
	СверткаПотребностиПоНоменклатуреНормы = ПолучитьОпциюОрганизации(Объект.Организация,"СверткаПотребностиПоНоменклатуреНормы");
	
	Если СверткаПотребностиПоНоменклатуреНормы Тогда
		
		ДополнитьМассивВыделенныхСтрок(МассивВыделенныхСтрок);
		
	КонецЕсли;
	
	СобратьВыбранныйКомплектНаСервере(МассивВыделенныхСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьМассивВыделенныхСтрок(МассивВыделенныхСтрок)
	
	ТаблицаДанныхДляОбработки = Новый ТаблицаЗначений;
	ТаблицаДанныхДляОбработки.Колонки.Добавить("Сотрудник");
	ТаблицаДанныхДляОбработки.Колонки.Добавить("НоменклатураНормы");
	
	Для Каждого ЭлементМассива Из МассивВыделенныхСтрок Цикл
		
		ДанныеСтроки = Объект.Товары.НайтиПоидентификатору(ЭлементМассива);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Комплект) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока 					= ТаблицаДанныхДляОбработки.Добавить();
		НоваяСтрока.Сотрудник 			= ДанныеСтроки.Сотрудник;
		НоваяСтрока.НоменклатураНормы 	= ДанныеСтроки.НоменклатураНормы;
		
	КонецЦикла;
	
	Если ТаблицаДанныхДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ЭтаФорма.Объект.Товары Цикл
		
		СтрутураПоиска 	= Новый Структура("Сотрудник, НоменклатураНормы", СтрокаТаблицы.Сотрудник, СтрокаТаблицы.НоменклатураНормы);
		НайденныеСтроки = ТаблицаДанныхДляОбработки.НайтиСтроки(СтрутураПоиска);
		
		Если НЕ НайденныеСтроки.Количество() = 0 Тогда
			МассивВыделенныхСтрок.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторСтрокиСМаксимальнойПотребностью(ИдентификаторСтроки) Экспорт
	
	ИдентификаторСтрокиСМаксимальнойПотребностью = ИдентификаторСтроки;
	
	ДанныеСтроки = Объект.Товары.НайтиПоидентификатору(ИдентификаторСтрокиСМаксимальнойПотребностью);
	
	ТекущаяПотребность = ДанныеСтроки.КоличествоПотребность;
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если СтрокаТаблицы.Сотрудник = ДанныеСтроки.Сотрудник 
			И СтрокаТаблицы.НоменклатураНормы = ДанныеСтроки.НоменклатураНормы 
			И СтрокаТаблицы.КоличествоПотребность > ТекущаяПотребность 
			И НЕ ТекущаяПотребность = 0 Тогда
			
			ТекущаяПотребность 								= СтрокаТаблицы.КоличествоПотребность;
			ИдентификаторСтрокиСМаксимальнойПотребностью 	= СтрокаТаблицы.ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИдентификаторСтрокиСМаксимальнойПотребностью;
	
КонецФункции

&НаСервере
Процедура СобратьВыбранныйКомплектНаСервере(МассивВыделенныхСтрок)
	
	ТаблицаДокумента = Объект.Товары.Выгрузить();
	ТаблицаДокумента.Очистить();
	
	//создаем таблицу сворачиваемого комплекта
	
	ТаблицаКомплектовДляОбработки = Новый ТаблицаЗначений;
	ТаблицаКомплектовДляОбработки.Колонки.Добавить("Комплект");
	ТаблицаКомплектовДляОбработки.Колонки.Добавить("НормаВыдачи");
	ТаблицаКомплектовДляОбработки.Колонки.Добавить("ДатаВыдачи");
	//АсТБ_Alexey_103065_*******************************************************************
	ТаблицаКомплектовДляОбработки.Колонки.Добавить("НомерСтрокиКомплекта");
	//АсТБ_Alexey_103065_*******************************************************************
	ТаблицаКомплектовДляОбработки.Колонки.Добавить("Обработан");
	
	//АсТБ_Alexey_103065_*******************************************************************
	СтруктураПоиска = Новый Структура("Комплект,НормаВыдачи,ДатаВыдачи,НомерСтрокиКомплекта");
	//СтруктураПоиска = Новый Структура("Комплект,НормаВыдачи,ДатаВыдачи");
	//АсТБ_Alexey_103065_*******************************************************************
	
	Для Каждого ЭлементМассива Из МассивВыделенныхСтрок Цикл
		
		ДанныеСтроки = Объект.Товары.НайтиПоидентификатору(ЭлементМассива);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Комплект) Тогда
			Продолжить;
		КонецЕсли;
		
		//для произвольной выдачи проверяем заполнение номенклатуры нормы
		//АсТБ_Alexey_69695_*******************************************************************
		//Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача И НЕ ЗначениеЗаполнено(ДанныеСтроки.НоменклатураНормы) Тогда
		//	Продолжить;
		//КонецЕсли;
		//АсТБ_Alexey_69695_*******************************************************************
		
		СтруктураПоиска.Комплект 	= ДанныеСтроки.Комплект;
		СтруктураПоиска.НормаВыдачи = ДанныеСтроки.НормаВыдачи;
		СтруктураПоиска.ДатаВыдачи 	= ДанныеСтроки.ДатаВыдачи;
		//АсТБ_Alexey_103065_*******************************************************************
		СтруктураПоиска.НомерСтрокиКомплекта = ДанныеСтроки.НомерСтрокиКомплекта;
		//АсТБ_Alexey_103065_*******************************************************************
		
		Если ТаблицаКомплектовДляОбработки.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			
			НоваяСтрока 			= ТаблицаКомплектовДляОбработки.Добавить();
			НоваяСтрока.Комплект 	= ДанныеСтроки.Комплект;
			НоваяСтрока.НормаВыдачи = ДанныеСтроки.НормаВыдачи;
			НоваяСтрока.ДатаВыдачи 	= ДанныеСтроки.ДатаВыдачи;
			//АсТБ_Alexey_103065_*******************************************************************
			НоваяСтрока.НомерСтрокиКомплекта = ДанныеСтроки.НомерСтрокиКомплекта;
			//АсТБ_Alexey_103065_*******************************************************************
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьКомплекты = Ложь;
	
	Для Каждого СтрокаДокумента Из Объект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Комплект) Тогда
			
			СтруктураПоиска.НормаВыдачи = СтрокаДокумента.НормаВыдачи;
			СтруктураПоиска.ДатаВыдачи 	= СтрокаДокумента.ДатаВыдачи;
			СтруктураПоиска.Комплект 	= СтрокаДокумента.Комплект;
			//АсТБ_Alexey_103065_*******************************************************************
			СтруктураПоиска.НомерСтрокиКомплекта = СтрокаДокумента.НомерСтрокиКомплекта;
			//АсТБ_Alexey_103065_*******************************************************************
			
			СтрокаТаблицыКомплекта = ТаблицаКомплектовДляОбработки.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокаТаблицыКомплекта.Количество() > 0 Тогда
				ЕстьКомплекты = Истина;
				СтруктураПоиска.НормаВыдачи = СтрокаДокумента.НормаВыдачи;
				СтруктураПоиска.ДатаВыдачи 	= СтрокаДокумента.ДатаВыдачи;
				//АсТБ_Alexey_103065_*******************************************************************
				СтруктураПоиска.НомерСтрокиКомплекта = СтрокаДокумента.НомерСтрокиКомплекта;
				//АсТБ_Alexey_103065_*******************************************************************
				УточненнаяСтрокаТаблицыКомплекта = ТаблицаКомплектовДляОбработки.НайтиСтроки(СтруктураПоиска);
				Если УточненнаяСтрокаТаблицыКомплекта.Количество() = 0 Тогда
					НоваяСтрока = ТаблицаКомплектовДляОбработки.Добавить();
					НоваяСтрока.Комплект 	= СтрокаДокумента.Комплект;
					НоваяСтрока.НормаВыдачи = СтрокаДокумента.НормаВыдачи;
					НоваяСтрока.ДатаВыдачи 	= СтрокаДокумента.ДатаВыдачи;
					//АсТБ_Alexey_103065_*******************************************************************
					НоваяСтрока.НомерСтрокиКомплекта = СтрокаДокумента.НомерСтрокиКомплекта;
					//АсТБ_Alexey_103065_*******************************************************************
					УточненнаяСтрокаТаблицыКомплекта = НоваяСтрока;
				Иначе 
					УточненнаяСтрокаТаблицыКомплекта = УточненнаяСтрокаТаблицыКомплекта[0];
				КонецЕсли;	
					
				Если не УточненнаяСтрокаТаблицыКомплекта.Обработан = Истина Тогда
					НоваяСтрока = ТаблицаДокумента.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДокумента);
					//АсТБ_Alexey_96460_*******************************************************************
					//НоваяСтрока.НеВыдано					= Ложь;
					//НоваяСтрока.НеВыданоПоПричине           = "";
					//АсТБ_Alexey_96460_*******************************************************************
					НоваяСтрока.Номенклатура 				= СтрокаДокумента.Комплект;
					//АсТБ_Alexey_103065_*******************************************************************
					Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача Тогда
						Если ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатуры) Тогда
							НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("Метрика",СтрокаДокумента.ХарактеристикаНоменклатуры.Метрика,,НоваяСтрока.Номенклатура);
						Иначе
							НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
						КонецЕсли;	
					Иначе	
						НоваяСтрока.ХарактеристикаНоменклатуры = ПроцедурыРаботыСНормамиСервер.ПолучитьХарактеристикуПоАнтропометрии(НоваяСтрока.Номенклатура,Объект.Сотрудник);
					КонецЕсли;
					//АсТБ_Alexey_103065_*******************************************************************
					НоваяСтрока.КоличествоВКомплекте 		= 0;
					НоваяСтрока.Комплект 					= Справочники.Номенклатура.ПустаяСсылка();
					НоваяСтрока.Цена 						= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НоваяСтрока.Номенклатура,Объект.Организация,Объект.Дата);
					НоваяСтрока.Сумма 						= НоваяСтрока.Количество * НоваяСтрока.Цена;
					НоваяСтрока.ПроцентИзноса 				= Справочники.ПроцентыИзноса.ПустаяСсылка();
					УточненнаяСтрокаТаблицыКомплекта.Обработан = Истина;
				КонецЕсли;
			Иначе
				ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
			КонецЕсли;
		Иначе	
			ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(),СтрокаДокумента);
		КонецЕсли;

	КонецЦикла;
	
	ЗаполнитьКолонку_ТипУсловия_Основание();
	
	Если ЕстьКомплекты Тогда
		Объект.Товары.Загрузить(ТаблицаДокумента);
		Объект.СуммаДокумента 		= Объект.Товары.Итог("Сумма");
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		Сообщить("Комплекты в выбранных строках не найдены.");
	КонецЕсли;
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
	//+++АСТБ_Горюшин_Алексей_26518
	ПроверитьАктуальностьКодовМаркировки();
	//---АСТБ_Горюшин_Алексей_26518
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВыдачиСИЗПриИзменении(Элемент)
	
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача") Тогда
		
		Если ЕстьПотребность(Объект.Сотрудник) Тогда
			
			Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача");
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле = "ВидВыдачиСИЗ";
			Сообщение.Текст = "У выбранного сотрудника уже сформирована потребность. Упрощенная выдача невозможна!";
			Сообщение.Сообщить(); 
			
		КонецЕсли;	
			
	КонецЕсли;
	
	Объект.Товары.Очистить();
	//АСТБ_ALEXEY_72838_**************************************************************
	Объект.ШтрихкодыНоменклатуры.Очистить();
	Объект.КодыМаркировки.Очистить();
	//АСТБ_ALEXEY_72838_**************************************************************
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача") Тогда
		ИспользоватьПредварительныеЗаявкиНаКоллективнуюВыдачу = ПолучитьОпциюОрганизации(Объект.Организация,"ИспользоватьПредварительныеЗаявкиНаКоллективнуюВыдачу");
		Если ИспользоватьПредварительныеЗаявкиНаКоллективнуюВыдачу Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВыдачиСИЗ.ПредварительнаяЗаявка");
		Иначе
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВыдачиСИЗ.ФактическаяВыдача");
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			Объект.Сотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		КонецЕсли;
		//АСТБ_ALEXEY_69654_**************************************************************
		Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) И ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.СкладОтправитель 	= ПроцедурыРаботыСНормамиСервер.ПолучитьСкладОрганизации(Объект.Организация);
			//АСТБ_ALEXEY_70409**************************************************************
			//Объект.МОЛСкладаОтправителя	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.СкладОтправитель,Объект.Организация);
			Объект.МОЛСкладаОтправителя	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.СкладОтправитель,Объект.Организация,Объект.СоздательДокумента);
			//АСТБ_ALEXEY_70409**************************************************************
			Элементы.МОЛСкладаОтправителя.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.СкладОтправитель,Объект.Организация));
		Конецесли;
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад 	= ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			Объект.МОЛ 		= ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			Элементы.МОЛ.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.Склад,Объект.Организация));
		КонецЕсли;
		//АСТБ_ALEXEY_69654_**************************************************************
	Иначе
		//АСТБ_ALEXEY_69654_**************************************************************
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Склад 	= ПроцедурыРаботыСНормамиСервер.ПолучитьСкладОрганизации(Объект.Организация);
			//АСТБ_ALEXEY_70409**************************************************************
			//Объект.МОЛ 		= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация);
			Объект.МОЛ 		= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация,Объект.СоздательДокумента);
			//АСТБ_ALEXEY_70409**************************************************************
			Элементы.МОЛ.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.Склад,Объект.Организация));
		КонецЕсли;
		//АСТБ_ALEXEY_69654_**************************************************************
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВыдачиСИЗ.ФактическаяВыдача");
	КонецЕсли;	
	
	СформироватьИнформациюОбОсновномМестеРаботы();
	
	УправлениеВидимостьюЭлементовФормы();
	УправлениеДоступностьюЭлементовФормы();
	УправлениеСвойствамиЭлементовФормы();
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьКомплекты(СтруктураТекущихДанных) Экспорт
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	МассивНормыВыдачи = Новый Массив;
		
	Если ТекущийОбъект.Организация.СверткаПотребностиПоНоменклатуреНормы Тогда //могут быть строки с отличной от текущей нормой выдачи, их тоже нужно обработать
	    НайденныеСтроки = ТекущийОбъект.Товары.НайтиСтроки(Новый Структура("НоменклатураНормы",СтруктураТекущихДанных.НоменклатураНормы));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если МассивНормыВыдачи.Найти(НайденнаяСтрока.НормаВыдачи) = Неопределено Тогда
				МассивНормыВыдачи.Добавить(НайденнаяСтрока.НормаВыдачи);
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивНормыВыдачи.Добавить(СтруктураТекущихДанных.НормаВыдачи);
	КонецЕсли;
	
	Для Каждого НормаВыдачи Из МассивНормыВыдачи Цикл
		
		//АсТБ_Alexey_57621_********************************************************************
		//СтруктураПоиска = Новый Структура("Сотрудник, НормаВыдачи, НоменклатураНормы, Комплект", СтруктураТекущихДанных.Сотрудник, НормаВыдачи, СтруктураТекущихДанных.НоменклатураНормы, СтруктураТекущихДанных.Комплект);
		СтруктураПоиска = Новый Структура("Сотрудник, НормаВыдачи, НоменклатураНормы, Комплект, ДатаВыдачи", СтруктураТекущихДанных.Сотрудник, НормаВыдачи, СтруктураТекущихДанных.НоменклатураНормы, СтруктураТекущихДанных.Комплект, СтруктураТекущихДанных.ДатаВыдачи);
		//АсТБ_Alexey_57621_********************************************************************
		
		НайденныеСтроки = ТекущийОбъект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Если СтруктураТекущихДанных.НеВыдано Тогда
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.НомерСтроки = СтруктураТекущихДанных.НомерСтроки Тогда
					Продолжить;
				КонецЕсли;
				
				НайденнаяСтрока.НеВыдано					= Истина;
				НайденнаяСтрока.НеВыданоПоПричине			= СтруктураТекущихДанных.НеВыданоПоПричине;
				НайденнаяСтрока.Номенклатура 				= Справочники.Номенклатура.ПустаяСсылка();
				НайденнаяСтрока.ХарактеристикаНоменклатуры 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				НайденнаяСтрока.Цена 						= 0;
				НайденнаяСтрока.Сумма 						= 0;
				НайденнаяСтрока.Количество					= 0;
				НайденнаяСтрока.КоличествоВКомплекте		= 0; 
				
				//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 <<<
				НайденнаяСтрока.ПроцентИзноса				= Справочники.ПроцентыИзноса.ПустаяСсылка();
				//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 >>>
				
			КонецЦикла;
			
		Иначе
			
			ТаблицаКомплектующих = СтруктураТекущихДанных.Комплект.Комплектующие.Выгрузить();
			
			Сч = 0;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				                                                              
				НайденнаяСтрока.НеВыдано					= Ложь;
				НайденнаяСтрока.НеВыданоПоПричине			= "";
				НайденнаяСтрока.Номенклатура 				= ТаблицаКомплектующих[Сч].Номенклатура;
				//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 <<<
				Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.ХарактеристикаНоменклатуры) Тогда
				    НайденнаяСтрока.ХарактеристикаНоменклатуры 	= ПроцедурыРаботыСНормамиСервер.ПолучитьХарактеристикуПоАнтропометрии(НайденнаяСтрока.Номенклатура,НайденнаяСтрока.Сотрудник);
				КонецЕсли;	
				//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 >>>
				НайденнаяСтрока.Цена 						= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НайденнаяСтрока.Номенклатура,Объект.Организация,Объект.Дата);
				//ненулевое количество устанавливаем в строке с максимальной периодичностью
				Если НайденнаяСтрока.ПериодичностьВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьПериодичностьВыдачиНоменклатурыНормы(НормаВыдачи,СтруктураТекущихДанных.НоменклатураНормы) Тогда
				   	НайденнаяСтрока.Количество				= НайденнаяСтрока.КоличествоПотребность;
				Иначе
					НайденнаяСтрока.Количество				= 0;
				КонецЕсли;
				НайденнаяСтрока.КоличествоВКомплекте		= ТаблицаКомплектующих[Сч].Количество;
				НайденнаяСтрока.Сумма						= НайденнаяСтрока.Количество * НайденнаяСтрока.Цена * НайденнаяСтрока.КоличествоВКомплекте;
				
				//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 <<<
				НайденнаяСтрока.ПроцентИзноса				= СтруктураТекущихДанных.ПроцентИзноса;
				//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 >>>
				
				Сч = Сч + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИнформациюОбОсновномМестеРаботы()
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		Элементы.ИнформацияОбОсновномМестеРаботы.Заголовок = ПроцедурыРаботыСНормамиСервер.СформироватьИнформациюОбОсновномМестеРаботыНаСервере(Объект.Сотрудник);
		
	Иначе	
		
		Элементы.ИнформацияОбОсновномМестеРаботы.Заголовок = "Основное место работы не определено";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДвоичныеДанныеКомпоненты()
	
	Возврат ПолучитьОбщийМакет("КомпонентаAddInNative");
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//10.04.2020 отключено принулительное переключение раскладки на латиницу
	//МакетКомпоненты = ПолучитьДвоичныеДанныеКомпоненты();
	//МакетКомпоненты.Записать("C:\Temp\AddInNative.dll");
	//
	////принудительное переключение раскладки на латиницу
	//ВККонтекст = Неопределено;
	//
	//Попытка
	//	
	//	ПодключитьВнешнююКомпоненту("C:\Temp\AddInNative.dll","kbd", ТипВнешнейКомпоненты.Native);
	//	//ПодключитьВнешнююКомпоненту("E:\Install_old\PUBID_292148-AddInNative\AddInNative.dll","kbd", ТипВнешнейКомпоненты.Native);
	//	ВККонтекст = Новый("AddIn.kbd.KeyboardLayout");
	//	
	//Исключение
	//	
	//	СообщениеПользователю = Новый СообщениеПользователю;
	//	СообщениеПользователю.Текст = "Ошибка при инициализации внешней копоненты AddInNative.dll!" + Символы.ПС + ОписаниеОшибки();
	//	СообщениеПользователю.Сообщить();
	//	
	//Конецпопытки;
	//
	//Если не ВККонтекст = неопределено тогда 
	//	//ВККонтекст. УстановитьРаскладкуБезОбработки ("00000419");          //Русская раскладка
	//	ВККонтекст.УстановитьРаскладкуБезОбработки("00000409");          //Латинская раскладка
	//КонецЕсли;
	//
	//ВККонтекст = Неопределено;
	//
	//УдалитьФайлы("C:\Temp\","*.dll");
	
	СформироватьИнформациюОбОсновномМестеРаботы();
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача") Тогда
		ЭтаФорма.Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаПодписатьДокумент.Видимость = Ложь;
	Иначе
		ЭтаФорма.Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаПодписатьДокумент.Видимость = МожноПодписыватьДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:
				|""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборВСтроке(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//АСТБ_ALEXEY_96460**************************************************************
	//+++было
	//АСТБ_ALEXEY_72015**************************************************************
	//Если ЗначениеЗаполнено(ТекущиеДанные.Комплект) Тогда //комплект разобран - подбор должен быть отключен
	//	СообщениеПользователю = Новый СообщениеПользователю;
	//	СообщениеПользователю.Текст = "Подбор номенклатуры для разобранного комплекта запрещен!";
	//	СообщениеПользователю.Сообщить();
	//	Возврат;
	//КонецЕсли;	
	//АСТБ_ALEXEY_72015**************************************************************
	//---было
	Если ЗначениеЗаполнено(ТекущиеДанные.Комплект) И НЕ ТекущиеДанные.НеВыдано Тогда //комплект разобран, отказа нет - подбор должен быть отключен
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Подбор номенклатуры для разобранного комплекта запрещен!";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	//АСТБ_ALEXEY_96460**************************************************************
	
	СтруктураТекущихДанных = ПроцедурыРаботыСНормамиКлиент.ПеренестиТекущиеДанныеВыдачиВСтруктуру(ТекущиеДанные);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураТекущихДанных",	СтруктураТекущихДанных);
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача") 
		ИЛИ Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача") Тогда
		ПараметрыФормы.Вставить("Склад",				Объект.Склад);
	Иначе
		ПараметрыФормы.Вставить("Склад",				Объект.СкладОтправитель);
	КонецЕсли;
	ПараметрыФормы.Вставить("Дата",						?(ЗначениеЗаполнено(Объект.Ссылка),Объект.Дата,ТекущаяДата()));
	ПараметрыФормы.Вставить("Организация",				Объект.Организация);
	
	ОткрытьФорму("Обработка.ПодборНоменклатурыВыдачи.Форма.ФормаПодбораВСтроке",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОпциюОрганизации(Организация,НаименованиеОпции)
	
	Возврат Организация[НаименованиеОпции];
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоСотруднику(Команда)
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормыВыбора.Вставить("Отбор",              Новый Структура("Владелец", Объект.Организация));
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",ПараметрыФормыВыбора,ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюНаСервере()
	
	Документы.ВыдачаСредствЗащитыСотруднику.ЗаполнитьДокумент(Объект.ДокументОснование,Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	ЗаполнитьПоОснованиюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Если ТекущийОбъект.Проведен Тогда //нужно записать максимальное значение штрихкода
		
		МаксимальныйШтрихкодПоДокументу = ПроцедурыРаботыСНормамиСервер.ПолучитьМаксимальныйШтрихкодДокументаЧислом(ТекущийОбъект.Ссылка);
		
		Если МаксимальныйШтрихкодПоДокументу > Объект.Организация.МаксимальноеЗначениеШтрихкода Тогда
			ОрганизацияОбъект = Объект.Организация.ПолучитьОбъект();
			ОрганизацияОбъект.МаксимальноеЗначениеШтрихкода = МаксимальныйШтрихкодПоДокументу;
			ОрганизацияОбъект.Записать();
		КонецЕсли;
		
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОбращениеНаСклад") Тогда
			
			ОснованиеОбъект = Объект.ДокументОснование.ПолучитьОбъект();
			ОснованиеОбъект.СтатусОбращения  = Перечисления.СтатусыОбращенийНаСклад.Закрыто;
			ОснованиеОбъект.СодержаниеОтвета = "Заявка на получение обработана";
			
			Попытка
				ОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ОтправитьУведомление(ОснованиеОбъект);
			Исключение
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ОписаниеОшибки();
				СообщениеПользователю.Сообщить();
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ЗаполнитьКолонку_ТипУсловия_Основание();
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
	//***НСК Трегубов А.А.*** -- АдресноеХранение --  03.09.2019 <<<
	АХ_ПослеЗаписиНаСервере(ТекущийОбъект,ПараметрыЗаписи);	
	//***НСК Трегубов А.А.*** -- АдресноеХранение --  03.09.2019 >>>
	
	Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача Тогда
		
		//фиксируем создание документа
		НаборЗаписей = РегистрыСведений.ТочкиОбслуживанияСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументВыдачи.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись 							= НаборЗаписей.Добавить();
			НоваяЗапись.ДокументВыдачи 				= Объект.Ссылка;
			НоваяЗапись.ПринятВРаботу				= Объект.Дата;
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	УправлениеВидимостьюЭлементовФормы();
	УправлениеДоступностьюЭлементовФормы();
	
	//костыль - защита от дурака - с 18.03.2021 (релиз 110) используем типовой механизм БСП
	//Если Объект.Проведен И Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача Тогда
	//	Элементы.Организация.Доступность = Ложь;
	//	Элементы.Сотрудник.Доступность = Ложь;
	//КонецЕсли;
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
			
КонецПроцедуры

&НаСервере
Процедура ОтправитьУведомление(ОснованиеОбъект)
	
	Если ТипЗнч(ОснованиеОбъект.СоздательДокумента) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		ОтправитьУведомление = (ПолучитьНастройкуУведомленияОбОбработкеОбращений(ОснованиеОбъект.СоздательДокумента) И ОтправкаPUSHВызовСервера.МожноОтправлятьУведомления(ОснованиеОбъект.СоздательДокумента));
		
	Иначе
		
		ОтправитьУведомление = Ложь;
		
	КонецЕсли;
	
	Если ОтправитьУведомление Тогда
		
		Уведомление = Новый ДоставляемоеУведомление;
		Уведомление.Данные = "ОбратнаяСвязь";
		Уведомление.Текст = "Обработано Ваше обращение №" + ОснованиеОбъект.Номер + " от " + Формат(ОснованиеОбъект.Дата,"ДФ=dd.MM.yyyy");
		ОтправкаPUSHВызовСервера.ОтправитьУведомление(Уведомление,ОснованиеОбъект.СоздательДокумента.ОбъектАвторизации,Перечисления.ВидыУведомлений.ОбработкаОбращения);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьНастройкуУведомленияОбОбработкеОбращений(ВнешнийПользователь)
	
	Если ЗначениеЗаполнено(ВнешнийПользователь.ОбъектАвторизации) Тогда
		
		Возврат ВнешнийПользователь.ОбъектАвторизации.УведомлятьОбОбработкеОбращений;
		
	Иначе
		
	    Возврат Ложь;
		
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если НЕ Объект.Товары.Количество() = 0 Тогда
		Объект.Товары.Очистить();
		//АСТБ_ALEXEY_72838_**************************************************************
		Объект.ШтрихкодыНоменклатуры.Очистить();
		Объект.КодыМаркировки.Очистить();
		//АСТБ_ALEXEY_72838_**************************************************************
	КонецЕсли;	
	
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
			Объект.СкладОтправитель = ПолучитьСкладОтправитель(Объект.Склад);
			//АСТБ_ALEXEY_70409**************************************************************
			//Объект.МОЛСкладаОтправителя = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.СкладОтправитель,Объект.Организация);
			Объект.МОЛСкладаОтправителя = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.СкладОтправитель,Объект.Организация,Объект.СоздательДокумента);
			//АСТБ_ALEXEY_70409**************************************************************
			Элементы.МОЛСкладаОтправителя.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.СкладОтправитель,Объект.Организация));
		Конецесли;
	Конецесли;
	
	//АСТБ_ALEXEY_70409**************************************************************
	//Объект.МОЛ = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация);
	Объект.МОЛ = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.Склад,Объект.Организация,Объект.СоздательДокумента);
	//АСТБ_ALEXEY_70409**************************************************************
	Элементы.МОЛ.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.Склад,Объект.Организация));
	
	УправлениеВидимостьюЭлементовФормы();
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСкладОтправитель(Склад)
	
	Возврат Склад.СкладОтправитель;
	
КонецФункции	

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	Если НЕ Объект.Товары.Количество() = 0 Тогда
		Объект.Товары.Очистить();
		//АСТБ_ALEXEY_72838_**************************************************************
		Объект.ШтрихкодыНоменклатуры.Очистить();
		Объект.КодыМаркировки.Очистить();
		//АСТБ_ALEXEY_72838_**************************************************************
	КонецЕсли;
	
	//АСТБ_ALEXEY_70409**************************************************************
	//Объект.МОЛСкладаОтправителя = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.СкладОтправитель,Объект.Организация);
	Объект.МОЛСкладаОтправителя = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(Объект.СкладОтправитель,Объект.Организация,Объект.СоздательДокумента);
	//АСТБ_ALEXEY_70409**************************************************************
	Элементы.МОЛСкладаОтправителя.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРаботыСНормамиСервер.ПолучитьМассивМОЛСклада(Объект.СкладОтправитель,Объект.Организация));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДСИЗНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");	
	
	Документы.ВыдачаСредствЗащитыСотруднику.ЗаполнитьТаблицуДокумента(ТекущийОбъект,,ИСТИНА);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
	ЗаполнитьКолонку_ТипУсловия_Основание();
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
	Модифицированность = Истина;
	
	//+++АСТБ_Горюшин_Алексей_26518
	ПроверитьАктуальностьКодовМаркировки();
	//---АСТБ_Горюшин_Алексей_26518
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДСИЗ(Команда)
	
	ЗаполнитьПоДСИЗНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	Элементы.Товары.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.УпрощеннаяВыдача") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.Склады.ФормаВыбора",Новый Структура("СписокСкладов", ПолучитьСписокДопустимыхСкладов()),Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДопустимыхСкладов()
	
	Запрос = НОвый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СкладыВыдачиСредствЗащиты.Склад КАК Склад
	|ИЗ
	|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
	|ГДЕ
	|	СкладыВыдачиСредствЗащиты.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		МассивСкладов = Новый Массив;
		МассивСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
	Иначе
		МассивСкладов = Результат.Выгрузить().ВыгрузитьКолонку("Склад");
	КонецЕсли;
	
	Возврат МассивСкладов;
	
КонецФункции

&НаСервере
Процедура УточнитьПотребностьНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");	
	
	Документы.ВыдачаСредствЗащитыСотруднику.УточнитьПотребностьПоКоллективнойВыдаче(ТекущийОбъект);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
	ЗаполнитьКолонку_ТипУсловия_Основание();
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
	Модифицированность = Истина;	
	
	//+++АСТБ_Горюшин_Алексей_26518
	ПроверитьАктуальностьКодовМаркировки();
	//---АСТБ_Горюшин_Алексей_26518
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьПотребность(Команда)
	
	УточнитьПотребностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныйФайлОткрытие(Элемент, СтандартнаяОбработка)
	
	ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ПрисоединенныйФайлМБ7, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныйФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПрисоединенныеФайлыКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьДокументНаСервере(ТабличныйДокумент)
	
	ТабличныйДокумент = Документы.ВыдачаСредствЗащитыСотруднику.СформироватьПечатнуюФормуМБ7ДляПланшета(Объект.Ссылка);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФИОСотрудника(Сотрудник)
	Возврат ФизическиеЛица.ФамилияИнициалыФизЛица(Сотрудник.ФизическоеЛицо);
КонецФункции

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	//#Если ВебКлиент Тогда
	//	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
	//		НачатьУстановкуРасширенияРаботыСФайлами();
	//		ПодключитьРасширениеРаботыСФайлами();          
	//	КонецЕсли;
	//#КонецЕсли

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПодписатьДокументНаСервере(ТабличныйДокумент);
	
	ИмяФайла = "C:\Temp\mb7.pdf";
	
	ТабличныйДокумент.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.PDF);
	
	ФиоСотрудника = ПолучитьФИОСотрудника(Объект.Сотрудник);
	
	//корректировка XML-насроек
	wss = новый comОбъект("wscript.network");
	ИмяПользователя = wss.username;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать("c:\Users\" + ИмяПользователя + "\AppData\Roaming\Wacom\signpro\signpro.xml", КодировкаТекста.UTF8);
	ТекстXML = ТекстовыйДокумент.ПолучитьТекст();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстXML);
	//идентификация подписи
	ТекстовыйДокумент.ЗаменитьСтроку(16, "<entry key=""user_name"">" + ФиоСотрудника + "</entry>");
	ТекстовыйДокумент.ЗаменитьСтроку(21, "<entry key=""signing_reason"">" + "Получение средств защиты" + "</entry>");
	//область подписи
	ТекстовыйДокумент.ЗаменитьСтроку(15, "<entry key=""positioning_method"">" + "KEYWORD" + "</entry>");
	ТекстовыйДокумент.ЗаменитьСтроку(42, "<entry key=""position_keyword"">" + "(подпись работника)" + "</entry>");
	ТекстовыйДокумент.ЗаменитьСтроку(19, "<entry key=""keyword_vertical_offset"">" + "1.0" + "</entry>");
	ТекстовыйДокумент.ЗаменитьСтроку(41, "<entry key=""keyword_horizontal_offset"">" + "-5.0" + "</entry>");
	ТекстовыйДокумент.ЗаменитьСтроку(50, "<entry key=""signature_width"">" + "30.0" + "</entry>");
	ТекстовыйДокумент.ЗаменитьСтроку(55, "<entry key=""signature_height"">" + "10.0" + "</entry>");	
	ТекстовыйДокумент.Записать("c:\Users\" + ИмяПользователя + "\AppData\Roaming\Wacom\signpro\signpro.xml", КодировкаТекста.UTF8);
	
	//определяем разрядность винды
	Файл_х64 = Новый Файл("C:\Program Files (x86)\Wacom sign pro PDF\signPro_Application_Launcher.exe");
	Файл_х86 = Новый Файл("C:\Program Files\Wacom sign pro PDF\signPro_Application_Launcher.exe");
	
	Если Файл_х64.Существует() Тогда
		ИмяМакета = "Wacom_x64";
	Иначе
		ИмяМакета = "Wacom_x86";
	КонецЕсли;
	
	МакетДанных = ПолучитьДвоичныеДанныеИзМакета(ИмяМакета);
	МакетДанных.Записать("C:\Temp\wacom.bat");
	
	ЗапуститьПриложение("C:\Temp\wacom.bat",,Истина,);
	
	//присоединяем файл
	ОбщиеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	
	Файл = Новый Файл(ИмяФайла);
	
	Если ОбщиеНастройки.ИзвлекатьТекстыФайловНаСервере Тогда
		АдресВременногоХранилищаТекста = "";
	Иначе
		АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ИмяФайла, );
	КонецЕсли;
	
	ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
	
	АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	
	ПрисоединенныйФайл = ПрисоединенныеФайлыСлужебныйВызовСервера.ДобавитьФайл(Объект.Ссылка,"Форма МБ7 №" + Объект.Номер + " от " + Формат(Объект.Дата,"ДЛФ=DD"),
													ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение),,
													ВремяИзмененияУниверсальное,АдресВременногоХранилищаФайла,АдресВременногоХранилищаТекста);
													
	Объект.ПрисоединенныйФайлМБ7 = ПрисоединенныйФайл;
	
	Модифицированность = Истина;
	
	УдалитьФайлы("C:\Temp\","*.bat");
	УдалитьФайлы("C:\Temp\","*.pdf");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДвоичныеДанныеИзМакета(ИмяМакета)
	
	Возврат Документы.ВыдачаСредствЗащитыСотруднику.ПолучитьМакет(ИмяМакета);
	
КонецФункции	

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача") Тогда
		ЭтаФорма.Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаПодписатьДокумент.Видимость = Ложь;
	Иначе
		ЭтаФорма.Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаПодписатьДокумент.Видимость = МожноПодписыватьДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриИзмененииНаСервере()
	
	ЗаполнитьКолонку_ТипУсловия_Основание();
	
	ЗаполнитьКолонку_ОбязательнаяМаркировка();
	
	//+++АСТБ_Горюшин_Алексей_26518
	ПроверитьАктуальностьКодовМаркировки();
	//---АСТБ_Горюшин_Алексей_26518

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТоварыПриИзмененииНаСервере();
	
КонецПроцедуры

#Область АдресноеХранение

//ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
///////////////////////////

&НаСервере
Процедура АХ_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АХ_ОбновитьПринадлежностьДокументаКАдреснойПодсистеме();
	АХ_СброситьВидимостьЭлементов();
	
	//обязательные заглушки
	Если НЕ АХ_ИспользоватьМеханизмыПодсистемы Тогда 
		Возврат;
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(Объект.АХ_СтатусСборки)Тогда
	//	Объект.АХ_СтатусСборки = Перечисления.АХ_СтатусыСборкиТоваров.ВСборке;
	//КонецЕсли;
	
	АХ_ЗаполнитьСписокСтатусаСборки();
	АХ_УстановитьДоступностьСлотНаСервере(Истина);	
	
	//блокируем форму от использования другими сеансами
	ЗаблокироватьДанныеФормыДляРедактирования();
	
КонецПроцедуры

&НаСервере
Процедура АХ_ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	АХ_ОбновитьПринадлежностьДокументаКАдреснойПодсистеме();
	АХ_СброситьВидимостьЭлементов();

	//обязательные заглушки
	Если НЕ АХ_ИспользоватьМеханизмыПодсистемы Тогда 
		Возврат;
	КонецЕсли;
	
	АХ_ЗаполнитьСписокСтатусаСборки();
	АХ_УстановитьДоступностьСлотНаСервере();
	
КонецПроцедуры

// КОМАНДЫ ФОРМЫ
////////////////

&НаКлиенте
Процедура АХ_ЗавершитьСборку(Команда)	
	
	Если Модифицированность Тогда
		
		ТекстСообщения = нСтр("ru='Документ модифицирован. Необходимо записать или провести.'", "ru");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураОбработкиОшибок = АХ_ОбменКлиент.ИнициализироватьСтруктуруОбработкиОшибок();
	СтруктураОбработкиОшибок.ТекстСообщенияУспешнойОтправки = нСтр("ru='Сформирован документ ""Снятие номенклатуры"" в базе адресного хранения'", "ru");
	
	АХ_ЗавершитьСборкуНаСервере(СтруктураОбработкиОшибок);		
	АХ_ОбменКлиент.РазобратьСтруктуруОбработкиОшибок(СтруктураОбработкиОшибок);	
	
КонецПроцедуры

&НаКлиенте
Процедура АХ_ОтменитьВыдачу(Команда)
	
	Если Модифицированность Тогда
		
		ТекстСообщения = нСтр("ru='Документ модифицирован. Необходимо записать или провести.'", "ru");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	иначе
		
		ЭтоПерсональнаяВыдача = (Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача") ИЛИ Объект.ВидВыдачиСИЗ = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача")); 

		Если ЭтоПерсональнаяВыдача Тогда
			
			//Если Объект.АХ_СтатусСборки = ПредопределенноеЗначение("Перечисление.АХ_СтатусыСборкиТоваров.Подготовлено") Тогда
			//	
			//	//по нажатию кнопки
			//	//1. делаем перемещение по товарному составу документа со склада предварительной сборки на склад, передаем на склад адресного хранения
			//	//2. меняем статус документа на в сборке
			//	
			//	СтруктураОбработкиОшибок = АХ_ОбменКлиент.ИнициализироватьСтруктуруОбработкиОшибок();				
			//	АХ_ОтменитьПредварительнуюВыдачуПослеНаСервере(СтруктураОбработкиОшибок);		
			//	АХ_ОбменКлиент.РазобратьСтруктуруОбработкиОшибок(СтруктураОбработкиОшибок);
			
			//иначе			
			Соответствие = Новый Соответствие;	
			Соответствие.Вставить("ОтменаУправленческогоДокумента",Объект.Ссылка);
			
			МассивДанных = Новый Массив;
			МассивДанных.Добавить(Соответствие);
			
			СтруктураОбработкиОшибок = АХ_ОбменКлиент.ИнициализироватьСтруктуруОбработкиОшибок();
			СтруктураОбработкиОшибок.ТекстСообщенияУспешнойОтправки = нСтр("ru='Отмена документов в адресном хранении прошла успешно.'", "ru");
			
			АХ_ОбменКлиент.ПередатьДанныеВАдресноеХранение(МассивДанных,ЭтотОбъект.Модифицированность,СтруктураОбработкиОшибок,Объект.Ссылка);
			
			//КонецЕсли;
			
			АХ_ЗаполнитьСписокСтатусаСборки();
			АХ_УстановитьДоступностьСлотНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура АХ_ОтменитьЗавершениеСборки(Команда)
	
	Если Модифицированность Тогда          
		
		ТекстСообщения = нСтр("ru='Документ модифицирован. Необходимо записать или провести.'", "ru");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		АХ_ОтменитьЗавершениеСборкиПослеНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АХ_ПередатьНаСклад(Команда)
	
	Если Модифицированность Тогда
		
		ТекстСообщения = нСтр("ru='Документ модифицирован. Необходимо записать или провести.'", "ru");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.АХ_СтатусСборки = ПредопределенноеЗначение("Перечисление.АХ_СтатусыСборкиТоваров.Подготовлено") Тогда
		
		////по нажатию кнопки
		////1. делаем перемещение по товарному составу документа со склада предварительной сборки на склад, передаем на склад адресного хранения
		////2. меняем статус документа на в сборке, проводим документ
		////3. передаем на склад как обычную выдачу
		//
		//СтруктураОбработкиОшибок = АХ_ОбменКлиент.ИнициализироватьСтруктуруОбработкиОшибок();				
		//АХ_СформироватьПредварительнуюВыдачуНаСервере(СтруктураОбработкиОшибок);				
		//АХ_ОбменКлиент.РазобратьСтруктуруОбработкиОшибок(СтруктураОбработкиОшибок,Объект.Ссылка);
		
		
		//алгоритм №2
		
		//по нажатию кнопки;
		//1. меняем статус документа на статус подготовлено, без перепроведения документа
		//2. получаем по данным адресного хранения результат сборки
		//3. Пишем в регистр "Данные в адресном хранении" те позиции, которые собрали.
		
		ТабличныйДокумент = АХ_ЗавершитьПредварительнуюСборку();
		Если ТабличныйДокумент <> Неопределено Тогда
			
			КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("результатПредварительнойСборки");		
			КоллекцияПечатныхФорм[0].Табличныйдокумент = ТабличныйДокумент;
			
			УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Новый СписокЗначений);
			
		КонецЕсли;
		
	Иначе 
		
		Соответствие = Новый Соответствие;	
		Соответствие.Вставить("ПланСнятия",Объект.Ссылка);
		
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(Соответствие);
		
		СтруктураОбработкиОшибок = АХ_ОбменКлиент.ИнициализироватьСтруктуруОбработкиОшибок();
		АХ_ОбменКлиент.ПередатьДанныеВАдресноеХранение(МассивДанных,ЭтотОбъект.Модифицированность,СтруктураОбработкиОшибок,Объект.Ссылка);	
		
	КонецЕсли;
	
	АХ_ЗаполнитьСписокСтатусаСборки();
	АХ_УстановитьДоступностьСлотНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура АХ_ПередатьСМезонина(Команда)
	
	ОповещениеЗакрытияФормы = Новый ОписаниеОповещения("АХ_ПередатьСМезонинаЗавершение",ЭтаФорма);
	
	ПараметрыОткрытия = Новый Структура("Документ",Объект.Ссылка);	
	ОткрытьФорму("Обработка.АХ_КомплекснаяОбработкаДанных.Форма.ФормаСнятияСЯчеек",ПараметрыОткрытия,ЭтаФорма,,,,ОповещениеЗакрытияФормы);
	
КонецПроцедуры

//СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////

&НаКлиенте
Процедура АХ_ПередатьСМезонинаЗавершение(Результат,ДополнительныеПараметры) экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	Элементы,
	"АХ_ПередатьСМезонина",
	"Доступность",	
	АХ_ОбменВызовСервера.ЕстьТоварыВМезонине(Объект.Ссылка));
	
КонецПроцедуры

&НаСервере
Процедура АХ_ЗавершитьСборкуНаСервере(СтруктураОбработкиОшибок)
	
	Попытка
		
		НачатьТранзакцию();
		
		ОбъектДокумента = РеквизитФормыВЗначение("Объект");
		
		ОбъектДокумента.АХ_СтатусСборки = Перечисления.АХ_СтатусыСборкиТоваров.СборкаЗавершена;
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
		
		ЗначениеВРеквизитФормы(ОбъектДокумента,"Объект");
		
		АХ_ЗарегистрироватьНезавершенныеТоварыВМезонине(Объект.Ссылка);
		АХ_ОчиститьЗаписиРегистраАХ_ПечатныеФормы(Объект.Ссылка);
		
		СоответствиеСнятие = Новый Соответствие;
		СоответствиеСнятие.Вставить("Снятие",Объект.Ссылка);
				
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СоответствиеСнятие);
		
		АХ_ОбменВызовСервера.ПередатьДанныеВАдресноеХранение(МассивДанных,СтруктураОбработкиОшибок);
		
		Если СтруктураОбработкиОшибок.ЕстьОшибки Тогда
			
			Если ТранзакцияАктивна() Тогда 
				ОтменитьТранзакцию();
			конецЕсли;
			
			Прочитать();
			
		иначе
			
			ЗафиксироватьТранзакцию();
			
			АХ_ЗаполнитьСписокСтатусаСборки();
			АХ_УстановитьДоступностьСлотНаСервере();
			
		КонецЕсли;
		
	Исключение
		
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		
		Если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
		Прочитать();		
		
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура АХ_УстановитьДоступностьСлотНаСервере(ОткрытиеФормы = Ложь)
		
	Элементы.АХ_ПодменюОтмены.Видимость  = Истина;
	
	ЭтоПерсональнаяВыдача = (Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача ИЛИ Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача); 
	
	Элементы.АХ_ЗавершитьСборку.Видимость   		   = ЭтоПерсональнаяВыдача;	
	Элементы.АХ_ПередатьСМезонина.Видимость 		   = ЭтоПерсональнаяВыдача;	
	Элементы.АХ_ОтменитьВыдачу.Видимость    		   = ЭтоПерсональнаяВыдача;	
	Элементы.АХ_ОтменитьЗавершениеСборки.Видимость     = ЭтоПерсональнаяВыдача;	
	Элементы.АХ_СтатусСборки.Видимость                 = ЭтоПерсональнаяВыдача;
	
	Элементы.АХ_ЗавершитьСборку.Доступность   	 	   = Ложь;		
	Элементы.АХ_ПередатьСМезонина.Доступность 	       = Ложь;	
	Элементы.АХ_ОтменитьВыдачу.Доступность     	       = Ложь;
	Элементы.АХ_ПередатьНаСклад.Доступность            = Ложь;
	Элементы.АХ_ОтменитьЗавершениеСборки.Доступность   = Ложь;
	
	//управление заголовком кнопки
	
	Элементы.АХ_ПередатьНаСклад.Заголовок = "(АХ) Передать на склад";
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОткрытиеФормы и ЭтаФорма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоПерсональнаяВыдача Тогда
				
		НайденыДокументыСнятия = АХ_ОбменВызовСервера.НайтиПодчиненныйДокумент(Объект.Ссылка,ПредопределенноеЗначение("Перечисление.АХ_ВидыДокументовАдресногоХранения.Снятие"));	
		СтатусПодготовлено	   = Объект.АХ_СтатусСборки = Перечисления.АХ_СтатусыСборкиТоваров.Подготовлено;
		
		Элементы.АХ_ОтменитьЗавершениеСборки.Доступность  = НайденыДокументыСнятия;

		Если СтатусПодготовлено ИЛИ НайденыДокументыСнятия Тогда 
			
			Элементы.АХ_ПередатьНаСклад.Доступность   = СтатусПодготовлено;
			ЭтаФорма.ТолькоПросмотр 				  = Истина;

			Если СтатусПодготовлено Тогда
				Элементы.АХ_ПередатьНаСклад.Заголовок = "(АХ) Результат предв.сборки ";
			КонецЕсли;
					
		иначе
			
			//отмена выдачи, отмена завершения, передать с мезонина			
			ЭтаФорма.ТолькоПросмотр = Ложь;
						
			НайденыПодчиненныеДокументы  = АХ_ОбменВызовСервера.НайтиПодчиненныйДокумент(Объект.Ссылка);				
			Элементы.АХ_ОтменитьВыдачу.Доступность = НайденыПодчиненныеДокументы И НЕ НайденыДокументыСнятия;
			
			СтруктураСвойствОформления = АХ_ОбменВызовСервера.МожноСформироватьПланСнятия(Объект);			
			Для Каждого Свойство из СтруктураСвойствОформления Цикл
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"АХ_ПередатьНаСклад",
				Свойство.Ключ,	
				Свойство.Значение);
				
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"АХ_ПередатьСМезонина",
			"Доступность",	
			АХ_ОбменВызовСервера.ЕстьТоварыВМезонине(Объект.Ссылка));			
			
			СтруктураСвойствОформления = АХ_ОбменВызовСервера.МожноСформироватьСнятие(Объект);			
			Для Каждого Свойство из СтруктураСвойствОформления Цикл
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"АХ_ЗавершитьСборку",
				Свойство.Ключ,	
				Свойство.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе		
		
		СтруктураСвойствОформления = АХ_ОбменВызовСервера.МожноСформироватьПланСнятия(Объект);			
		Для Каждого Свойство из СтруктураСвойствОформления Цикл
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"АХ_ПередатьНаСклад",
			Свойство.Ключ,	
			Свойство.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АХ_СформироватьПредварительнуюВыдачуНаСервере(СтруктураОбработкиОшибок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаСредствЗащитыСотрудникуТовары.Номенклатура КАК Номенклатура,
	|	ВыдачаСредствЗащитыСотрудникуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ВыдачаСредствЗащитыСотрудникуТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ВыдачаСредствЗащитыСотруднику.Товары КАК ВыдачаСредствЗащитыСотрудникуТовары
	|ГДЕ
	|	ВыдачаСредствЗащитыСотрудникуТовары.Ссылка = &Ссылка
	|	И НЕ ВыдачаСредствЗащитыСотрудникуТовары.НеВыдано
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыдачаСредствЗащитыСотрудникуТовары.Номенклатура,
	|	ВыдачаСредствЗащитыСотрудникуТовары.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Товары.Количество КАК Количество
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(нСтр("ru='Нет данных для передачи'", "ru"),,,,СтруктураОбработкиОшибок.Естьошибки);	
		Возврат;
	КонецЕсли;
	
	Попытка  
		
		НачатьТранзакцию();    
		
		СкладОтправитель 	= Константы.АХ_СкладПредварительнойСборки.Получить();
		ПараметрОрганизация = ?(ПолучитьФункциональнуюОпцию("НеВестиУчетОстатковНоменклатурыПоОрганизации"),Справочники.Организации.ПустаяСсылка(),Объект.Организация);		
		МассивДанных        = Новый Массив;
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОстаткиНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;		
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура"				, "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");		
		ЭлементБлокировки.УстановитьЗначение("Организация",ПараметрОрганизация);
		ЭлементБлокировки.УстановитьЗначение("Склад",СкладОтправитель);
		
		Блокировка.Заблокировать();		
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ОстаткиНоменклатурыОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ_Товары.Количество КАК Количество
		|ИЗ
		|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
		|			,
		|			(Номенклатура, ХарактеристикаНоменклатуры) В
		|					(ВЫБРАТЬ
		|						ВТ_Товары.Номенклатура,
		|						ВТ_Товары.ХарактеристикаНоменклатуры
		|					ИЗ
		|						ВТ_Товары КАК ВТ_Товары)
		|				И Организация = &Организация
		|				И Склад = &Склад) КАК ОстаткиНоменклатурыОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
		|		ПО ОстаткиНоменклатурыОстатки.Номенклатура = ВТ_Товары.Номенклатура
		|			И ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры = ВТ_Товары.ХарактеристикаНоменклатуры
		|			И (ОстаткиНоменклатурыОстатки.КоличествоОстаток > 0)"; 
		
		Запрос.УстановитьПараметр("Склад"	   ,СкладОтправитель);
		Запрос.УстановитьПараметр("Организация",ПараметрОрганизация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		//если нечего перемещать, пробуем просто провести документ
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			// формируем перемещение		
			ДокументПеремещения = Документы.ПеремещениеНоменклатуры.СоздатьДокумент();
			ДокументПеремещения.Дата = ТекущаяДата();
			ДокументПеремещения.Заполнить(Неопределено);
			//АСТБ_ALEXEY_70409**************************************************************
			ДокументПеремещения.Организация 			= Объект.Организация;
			ДокументПеремещения.СкладОтправитель 		= СкладОтправитель;
			ДокументПеремещения.СкладПолучатель 		= Объект.Склад;
			ДокументПеремещения.МОЛСкладаОтправителя 	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(ДокументПеремещения.СкладОтправитель,ДокументПеремещения.Организация,ДокументПеремещения.СоздательДокумента);
			ДокументПеремещения.МОЛСкладаПолучателя 	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(ДокументПеремещения.СкладПолучатель,ДокументПеремещения.Организация,ДокументПеремещения.СоздательДокумента);
			//АСТБ_ALEXEY_70409**************************************************************
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				//если остаток больше количества в документе и наоборот, перемещаем минимальное
				Перемещаем = Мин(Выборка.Количество,Выборка.КоличествоОстаток);
				
				НоваяСтрокаПеремещения = ДокументПеремещения.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПеремещения,Выборка);
				НоваяСтрокаПеремещения.Количество = Перемещаем;
				
			КонецЦикла;
			
			Попытка
				ДокументПеремещения.Записать(РежимЗаписиДокумента.Проведение);
				
				ДанныеПоПеремещению = Новый Соответствие;
				ДанныеПоПеремещению.Вставить("ПланСнятияИПоступление",ДокументПеремещения.Ссылка);
				
				МассивДанных.Добавить(ДанныеПоПеремещению);
				
			исключение КонецПопытки;
			
		КонецЕсли;
		
		ОбъектДокумента = РеквизитФормыВЗначение("Объект");
		ОбъектДокумента.АХ_СтатусСборки = Перечисления.АХ_СтатусыСборкиТоваров.ВСборке;
		ОбъектДокумента.Комментарий     = "ПРЕДВАРИТЕЛЬНАЯ СБОРКА";
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(ОбъектДокумента,"Объект");
		
		//сначала все делаем на стороне АСТБ , потом в адресе
		
		ДанныеПоВыдаче = Новый Соответствие;
		ДанныеПоВыдаче.Вставить("ПланСнятия",Объект.Ссылка);
		
		МассивДанных.Добавить(ДанныеПоВыдаче);
		
		АХ_ОбменВызовСервера.ПередатьДанныеВАдресноеХранение(МассивДанных,СтруктураОбработкиОшибок);
		
		Если СтруктураОбработкиОшибок.ЕстьОшибки Тогда
			ОтменитьТранзакцию();
			Прочитать();
		иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		ОтменитьТранзакцию();
		Прочитать();		
		
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура АХ_ОтменитьПредварительнуюВыдачуПослеНаСервере(СтруктураОбработкиОшибок)	
	
	Попытка  
		
		НачатьТранзакцию();    
		
		СкладОтправитель 	= Константы.АХ_СкладПредварительнойСборки.Получить();
		ПараметрОрганизация = ?(ПолучитьФункциональнуюОпцию("НеВестиУчетОстатковНоменклатурыПоОрганизации"),Справочники.Организации.ПустаяСсылка(),Объект.Организация);		
		МассивДанных        = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВыдачаСредствЗащитыСотрудникуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ВыдачаСредствЗащитыСотрудникуТовары.Количество) КАК Количество,
		|	ВыдачаСредствЗащитыСотрудникуТовары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	Документ.ВыдачаСредствЗащитыСотруднику.Товары КАК ВыдачаСредствЗащитыСотрудникуТовары
		|ГДЕ
		|	ВыдачаСредствЗащитыСотрудникуТовары.Ссылка = &Ссылка
		|	И НЕ ВыдачаСредствЗащитыСотрудникуТовары.НеВыдано
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыдачаСредствЗащитыСотрудникуТовары.ХарактеристикаНоменклатуры,
		|	ВыдачаСредствЗащитыСотрудникуТовары.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ_Товары.Количество КАК Количество,
		|	ВТ_Товары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары"; 
		
		
		Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОстаткиНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;		
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура"				, "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");		
		ЭлементБлокировки.УстановитьЗначение("Организация",ПараметрОрганизация);
		ЭлементБлокировки.УстановитьЗначение("Склад",СкладОтправитель);
		
		Блокировка.Заблокировать();		
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ОстаткиНоменклатурыОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВТ_Товары.Количество КАК Количество
		|ИЗ
		|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
		|			,
		|			(Номенклатура, ХарактеристикаНоменклатуры) В
		|					(ВЫБРАТЬ
		|						ВТ_Товары.Номенклатура,
		|						ВТ_Товары.ХарактеристикаНоменклатуры
		|					ИЗ
		|						ВТ_Товары КАК ВТ_Товары)
		|				И Организация = &Организация
		|				И Склад = &Склад) КАК ОстаткиНоменклатурыОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
		|		ПО ОстаткиНоменклатурыОстатки.Номенклатура = ВТ_Товары.Номенклатура
		|			И ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры = ВТ_Товары.ХарактеристикаНоменклатуры
		|			И (ОстаткиНоменклатурыОстатки.КоличествоОстаток > 0)"; 
		
		Запрос.УстановитьПараметр("Склад"	   ,СкладОтправитель);
		Запрос.УстановитьПараметр("Организация",ПараметрОрганизация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		//если нечего перемещать, пробуем просто провести документ
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			// формируем перемещение		
			ДокументПеремещения = Документы.ПеремещениеНоменклатуры.СоздатьДокумент();
			ДокументПеремещения.Дата = ТекущаяДата();
			ДокументПеремещения.Заполнить(Неопределено);
			//АСТБ_ALEXEY_70409**************************************************************
			ДокументПеремещения.Организация 			= Объект.Организация;
			ДокументПеремещения.СкладОтправитель 		= СкладОтправитель;
			ДокументПеремещения.СкладПолучатель 		= Объект.Склад;
			ДокументПеремещения.МОЛСкладаОтправителя 	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(ДокументПеремещения.СкладОтправитель,ДокументПеремещения.Организация,ДокументПеремещения.СоздательДокумента);
			ДокументПеремещения.МОЛСкладаПолучателя 	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(ДокументПеремещения.СкладПолучатель,ДокументПеремещения.Организация,ДокументПеремещения.СоздательДокумента);
			//АСТБ_ALEXEY_70409**************************************************************
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				//если остаток больше количества в документе и наоборот, перемещаем минимальное
				Перемещаем = Мин(Выборка.Количество,Выборка.КоличествоОстаток);
				
				НоваяСтрокаПеремещения = ДокументПеремещения.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПеремещения,Выборка);
				НоваяСтрокаПеремещения.Количество = Перемещаем;
				
			КонецЦикла;
			
			Попытка
				
				ДокументПеремещения.Записать(РежимЗаписиДокумента.Проведение);
				
				ДанныеПоПеремещению = Новый Соответствие;
				ДанныеПоПеремещению.Вставить("ПланСнятияИПоступление",ДокументПеремещения.Ссылка);
				
				МассивДанных.Добавить(ДанныеПоПеремещению);
				
			исключение КонецПопытки;
			
		КонецЕсли;
		
		ОбъектДокумента = РеквизитФормыВЗначение("Объект");
		ОбъектДокумента.АХ_СтатусСборки = Перечисления.АХ_СтатусыСборкиТоваров.ПредварительнаяСборка;
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
		ЗначениеВРеквизитФормы(ОбъектДокумента,"Объект");
		
		//сначала все делаем на стороне АСТБ , потом в адресе
		
		Если МассивДанных.Количество() > 0 Тогда
			АХ_ОбменВызовСервера.ПередатьДанныеВАдресноеХранение(МассивДанных,СтруктураОбработкиОшибок);
		иначе
			//ничего не отправляем, ничего не сообщаем
			СтруктураОбработкиОшибок.ОповещатьОбУспешнойОтправке = Ложь;
		КонецЕсли;
		
		Если СтруктураОбработкиОшибок.ЕстьОшибки Тогда
			ОтменитьТранзакцию();
			Прочитать();
		иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		ОтменитьТранзакцию();
		Прочитать();		
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура АХ_ЗаполнитьСписокСтатусаСборки()
	
	МассивЗначений = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("АХ_ИспользоватьМеханизмПредварительнойСборки")Тогда 
		
		Если Объект.АХ_СтатусСборки = Перечисления.АХ_СтатусыСборкиТоваров.Подготовлено Тогда 	
			МассивЗначений.Добавить(Перечисления.АХ_СтатусыСборкиТоваров.Подготовлено);
		Иначе
			
			МассивЗначений.Добавить(Перечисления.АХ_СтатусыСборкиТоваров.ВСборке);
			
			Если НЕ АХ_ОбменВызовСервера.НайтиПодчиненныйДокумент(Объект.Ссылка) тогда
				МассивЗначений.Добавить(Перечисления.АХ_СтатусыСборкиТоваров.ПредварительнаяСборка);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		МассивЗначений.Добавить(Перечисления.АХ_СтатусыСборкиТоваров.ВСборке);
	КонецЕсли;
	
	Если Объект.АХ_СтатусСборки = Перечисления.АХ_СтатусыСборкиТоваров.СборкаЗавершена Тогда 	
		МассивЗначений.Добавить(Перечисления.АХ_СтатусыСборкиТоваров.СборкаЗавершена);
	КонецЕсли;
	
	Элементы.АХ_СтатусСборки.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	
КонецПроцедуры

&НаСервере
Процедура АХ_ОтменитьЗавершениеСборкиПослеНаСервере()
	
	СтруктураОбработкиОшибок = АХ_ОбменВызовСервера.ИнициализироватьСтруктуруОбработкиОшибок();
	
	Прокси = АХ_ОбменВызовСервера.ПолучитьПрокси(СтруктураОбработкиОшибок);
	Если Прокси = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Попытка
		
		НачатьТранзакцию();
		
		//убираем снятие с регистра адресного хранения
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АХ_ДанныеВАдресномХранении.Номенклатура КАК Номенклатура,
		|	АХ_ДанныеВАдресномХранении.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	АХ_ДанныеВАдресномХранении.Заказ КАК Заказ,
		|	АХ_ДанныеВАдресномХранении.ВидАдресногоДокумента КАК ВидАдресногоДокумента,
		|	АХ_ДанныеВАдресномХранении.Количество КАК Количество,
		|	АХ_ДанныеВАдресномХранении.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.АХ_ДанныеВАдресномХранении КАК АХ_ДанныеВАдресномХранении
		|ГДЕ
		|	АХ_ДанныеВАдресномХранении.Документ = &Документ
		|	И АХ_ДанныеВАдресномХранении.ВидАдресногоДокумента <> &ВидАдресногоДокумента";
		
		Запрос.УстановитьПараметр("ВидАдресногоДокумента", Перечисления.АХ_ВидыДокументовАдресногоХранения.Снятие);
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(РезультатЗапроса.Выгрузить(),Объект.Ссылка,Истина);		
		
		//меняем статус документа, без перепроведения
		ОбъектДокумента = РеквизитФормыВЗначение("Объект");
		ОбъектДокумента.АХ_СтатусСБорки = Перечисления.АХ_СтатусыСборкиТоваров.ВСборке;
		ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
		
		СтруктураОтвета = Прокси.ОтменаАдресногоДокументаПоУправленческому(Строка(Объект.Ссылка.УникальныйИдентификатор()),
		Объект.Ссылка.Метаданные().Имя,
		"АХ_Снятие");	
		
		СтруктураОтвета = СериализаторXDTO.ПрочитатьXDTO(СтруктураОтвета);
				
		Если СтруктураОтвета.Результат Тогда				
			ЗафиксироватьТранзакцию();
			Прочитать();
			АХ_УстановитьДоступностьСлотНаСервере(Ложь);
			АХ_ЗаполнитьСписокСтатусаСборки();
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(нСтр("ru='" + СтруктураОтвета.СообщениеОбОшибке + "'", "ru"));
			ОтменитьТранзакцию();
			//Прочитать();
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();		
		//Прочитать();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АХ_ЗарегистрироватьНезавершенныеТоварыВМезонине(Ссылка)
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия);
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПустаяСсылка());
	
	ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные");			
	
	ТаблицаРасхождений.Колонки.Добавить ("ВидАдресногоДокумента",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ВидАдресногоДокумента"));
	ТаблицаРасхождений.ЗаполнитьЗначения(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПустаяСсылка(),"ВидАдресногоДокумента");
	
	АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(ТаблицаРасхождений,Ссылка);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура АХ_ОчиститьЗаписиРегистраАХ_ПечатныеФормы(Ссылка)
	
	НаборЗаписей = РегистрыСведений.АХ_ПечатныеФормы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Записать();

КонецПроцедуры

//Процедура предназначена для установки признака использование алгоритмов адресной подсистемы в документе.
//
&НаСервере
Процедура АХ_ОбновитьПринадлежностьДокументаКАдреснойПодсистеме()		
	АХ_ИспользоватьМеханизмыПодсистемы = АХ_ОбменВызовСервера.НужноИспользоватьАдресныеМеханизмыВДокументе(Объект);
КонецПроцедуры

&НаСервере
Процедура АХ_СброситьВидимостьЭлементов()
	
	Элементы.АХ_ПередатьНаСклад.Видимость          = Ложь;	
	Элементы.АХ_ЗавершитьСборку.Видимость          = Ложь;	
	Элементы.АХ_ПередатьСМезонина.Видимость 	   = Ложь;	
	Элементы.АХ_ОтменитьВыдачу.Видимость    	   = Ложь;	
	Элементы.АХ_ОтменитьЗавершениеСборки.Видимость = Ложь;			
	Элементы.АХ_СтатусСборки.Видимость             = Ложь;
	Элементы.АХ_ПодменюОтмены.Видимость            = Ложь;	
	
КонецПроцедуры

&НаСервере
Функция АХ_ЗавершитьПредварительнуюСборку()
	
	СтруктураОбработкиОшибок = АХ_ОбменВызовСервера.ИнициализироватьСтруктуруОбработкиОшибок();
	
	Прокси = АХ_ОбменВызовСервера.ПолучитьПрокси(СтруктураОбработкиОшибок);
	Если Прокси = Неопределено Тогда 
		Возврат неопределено;
	КонецЕсли;
	
	//получаем данные только по собранным товарам
	
	ТолькоИнформацияПоСобраннымТоварам = Истина;
	
	СтруктураОтвета = Прокси.ЗавершитьПредварительнуюСборку(Строка(Объект.Ссылка.УникальныйИдентификатор()),Объект.Ссылка.Метаданные().Имя,ТолькоИнформацияПоСобраннымТоварам);			
	СтруктураОтвета = СериализаторXDTO.ПрочитатьXDTO(СтруктураОтвета);
	
	Если СтруктураОтвета.Результат Тогда
		
		Попытка
			
			НачатьТранзакцию();
			
			//меняем статус документа, без перепроведения
			ОбъектДокумента = РеквизитФормыВЗначение("Объект");
			ОбъектДокумента.АХ_СтатусСБорки = Перечисления.АХ_СтатусыСборкиТоваров.ВСборке;
			ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
			
			КЧ = Новый КвалификаторыЧисла(15,3);
			Массив = Новый Массив;
			Массив.Добавить(Тип("Число"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
			
			ТаблицаТоваров = Новый ТаблицаЗначений;
			ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
			ТаблицаТоваров.Колонки.Добавить("Количество",ОписаниеТиповЧ);
			
			Для Каждого СтрокаТаблицыИдентификаторов из СтруктураОтвета.ТаблицаИдентификаторов цикл
				
				НоваяСтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
				НоваяСтрокаТаблицыТоваров.Номенклатура 				 = АХ_ОбменПравилаЗагрузки.ДесериализоватьСсылкуНаСправочник(СтрокаТаблицыИдентификаторов.Номенклатура,"Номенклатура");
				НоваяСтрокаТаблицыТоваров.ХарактеристикаНоменклатуры = АХ_ОбменПравилаЗагрузки.ДесериализоватьСсылкуНаСправочник(СтрокаТаблицыИдентификаторов.ХарактеристикаНоменклатуры,"ХарактеристикиНоменклатуры");
				НоваяСтрокаТаблицыТоваров.Количество			     = СтрокаТаблицыИдентификаторов.Количество;		
				
			КонецЦикла;		
			
			ТаблицаТоваров.Колонки.Добавить("Документ", Новый ОписаниеТипов(Документы.ТипВсеСсылки().Типы()));			
			ТаблицаТоваров.Колонки.Добавить("ВидАдресногоДокумента",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ВидАдресногоДокумента"));
			ТаблицаТоваров.Колонки.Добавить("Заказ",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Заказ"));
			
			ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПустаяСсылка(),"ВидАдресногоДокумента");
			ТаблицаТоваров.ЗаполнитьЗначения(Объект.Ссылка,"Документ");
			
			//регистрируем собранные товары
			АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(ТаблицаТоваров,Объект.Ссылка,Истина);
			
			//делаем перемещение в мезонин, закрываем незакрытые планы снятия и т.д.
			
			ТолькоИнформацияПоСобраннымТоварам = Ложь;
			СтруктураОтвета = Прокси.ЗавершитьПредварительнуюСборку(Строка(Объект.Ссылка.УникальныйИдентификатор()),Объект.Ссылка.Метаданные().Имя,ТолькоИнформацияПоСобраннымТоварам);			
			СтруктураОтвета = СериализаторXDTO.ПрочитатьXDTO(СтруктураОтвета);
			
			Если СтруктураОтвета.Результат Тогда 
				
				ЗафиксироватьТранзакцию();
				Прочитать();
				АХ_УстановитьДоступностьСлотНаСервере(Ложь);
				АХ_ЗаполнитьСписокСтатусаСборки();
				
				Возврат СтруктураОтвета.ТабличныйДокумент;
				
			Иначе				
				ОтменитьТранзакцию();
			КонецЕсли;
			
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;		
		
	иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураОтвета.СообщениеОбОшибке);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура КодыМаркировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
		ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);    
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриОтключении, УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'" );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКодаМаркировки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);	
	
	ПоказатьВводСтроки(Оповещение, , НСтр("ru = 'Введите код маркировки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(КодМаркировки, ДополнительныеПараметры) Экспорт
	
	Если КодМаркировки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьШтрихкоды(КодМаркировки);
	
КонецПроцедуры

//+++АСТБ_Горюшин_Алексей_19306
&НаСервере
Функция ЭтоУпрощеннаяВыдача()
	
	Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.УпрощеннаяВыдача Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции //---АСТБ_Горюшин_Алексей_19306

//+++АСТБ_Горюшин_Алексей_19306
&НаСервере
Процедура ПолучитьРезультатПодбораИзХранилищаФормаПодбора(АдресРезультатаПодбораВХранилище)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаПодбора = ПолучитьИзВременногоХранилища(АдресРезультатаПодбораВХранилище);
	
	ТекущийОбъект.Товары.Загрузить(ТаблицаПодбора);	
	
	ТекущийОбъект.СуммаДокумента = ТекущийОбъект.Товары.Итог("Сумма");
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
КонецПроцедуры //---АСТБ_Горюшин_Алексей_19306

//+++АСТБ_Горюшин_Алексей_19306
&НаКлиенте
Процедура ПодборНоменклатурыВыдачи(Команда)
	
	АдресВременногоХранилища = ВЫгрузитьТаблицуДокументаВоВременноеХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ",							Объект.Ссылка);
	ПараметрыФормы.Вставить("АдресВременногоХранилищаТаблицы",	АдресВременногоХранилища);
	ПараметрыФормы.Вставить("Склад",							Объект.Склад);
	ПараметрыФормы.Вставить("Сотрудник",						Объект.Сотрудник);
	ПараметрыФормы.Вставить("Организация",						Объект.Организация);
	
	ОткрытьФорму("Обработка.ПодборНоменклатурыВыдачи.Форма.ФормаПодбора",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры //---АСТБ_Горюшин_Алексей_19306

//+++АСТБ_Горюшин_Алексей_19442
&НаСервереБезКонтекста
Функция УказанВидМаркированнойНоменклатуры(Номенклатура)
	
	Если ЗначениеЗаполнено(Номенклатура.ВидМаркированнойНоменклатуры) Тогда
		Возврат Истина;
	Иначе
		ТекстСообщения = "Для номенклатуры ""%1"" не требуется считывать код маркировки.";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Номенклатура);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции //---АСТБ_Горюшин_Алексей_19442

//+++АСТБ_Горюшин_Алексей_26518
&НаСервере
Процедура ПроверитьАктуальностьКодовМаркировки()
	
	УдаляемыеСтроки = Новый Массив();
	
	Для Каждого СтрокаКодовМарикровки ИЗ Объект.КодыМаркировки Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", СтрокаКодовМарикровки.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаКодовМарикровки.ХарактеристикаНоменклатуры);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаКодовМарикровки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока ИЗ УдаляемыеСтроки Цикл
		Объект.КодыМаркировки.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры //---АСТБ_Горюшин_Алексей_26518

&НаСервере
Процедура ПереданВПримеркуПриИзмененииНаСервере()
	
	Если НЕ ПереданВПримерку Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	//фиксируем передачу в примерку
	НаборЗаписей = РегистрыСведений.ТочкиОбслуживанияСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументВыдачи.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НоваяЗапись 					= НаборЗаписей.Добавить();
		НоваяЗапись.ДокументВыдачи 		= Объект.Ссылка;
		НоваяЗапись.ПринятВРаботу 		= Объект.Дата;
		НоваяЗапись.ПереданВПримерку	= ТекущаяДата();
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(НаборЗаписей[0].ПереданВПримерку) Тогда
			НаборЗаписей[0].ПереданВПримерку = ТекущаяДата();
		КонецЕсли;	
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	УправлениеВидимостьюЭлементовФормы();
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданВПримеркуПриИзменении(Элемент)
	
	ПереданВПримеркуПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(ЭтотОбъект);
	
	Если ЗаблокированныеРеквизиты.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыФормы.Вставить("ЗаблокированныеРеквизиты", ЗаблокированныеРеквизиты);
		
		ОткрытьФорму("Документ.ВыдачаСредствЗащитыСотруднику.Форма.РазблокированиеРеквизитов", ПараметрыФормы,
			ЭтотОбъект,,,, Новый ОписаниеОповещения("ПослеВыбораРеквизитовДляРазблокирования", ЭтотОбъект));
	Иначе
		ЗапретРедактированияРеквизитовОбъектовКлиент.ПоказатьПредупреждениеВсеВидимыеРеквизитыРазблокированы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораРеквизитовДляРазблокирования(РазблокируемыеРеквизиты, Контекст) Экспорт
	
	Если ТипЗнч(РазблокируемыеРеквизиты) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект,РазблокируемыеРеквизиты);
	
КонецПроцедуры

//АсТБ_Alexey_72279_********************************************************************

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьТаблицуШтрихкодов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуШтрихкодов()
	
	ТаблицаШрихкодов = Объект.ШтрихкодыНоменклатуры.Выгрузить();
	ТаблицаШрихкодов.ЗаполнитьЗначения(Объект.Дата,"ДатаВыдачи");
	Объект.ШтрихкодыНоменклатуры.Загрузить(ТаблицаШрихкодов);
	
КонецПроцедуры	

//АсТБ_Alexey_72279_********************************************************************

//***НСК Трегубов А.А.*** -- №90515 --  28.06.2021 <<<
&НаКлиенте
Процедура УстановитьУсловия(Команда)	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросЗаписиДокументаЗавершение",ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения,"Для продолжения необходимо записать документ, продолжить?",РежимДиалогаВопрос.ДаНетОтмена,,,"Выполнить запись документа?");
		
	Иначе
		
		НачатьУстановкуУсловий();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросЗаписиДокументаЗавершение(РезультатВопроса,ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));	
	
	НачатьУстановкуУсловий();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуУсловий()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МассивСотрудников",МассивСотрудниковДокумента());
	ПараметрыОткрытия.Вставить("ДокументОснование",Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Организация",Объект.Организация);
	ПараметрыОткрытия.Вставить("ВидВыдачиСИЗ",Объект.ВидВыдачиСИЗ);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаУсловийЗавершение",ЭтаФорма); 
	
	ОткрытьФорму("Документ.УстановкаУсловийРаботыСотрудника.Форма.ФормаУстановкиУсловий",ПараметрыОткрытия,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура УстановкаУсловийЗавершение(Результат,ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия из Результат Цикл 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для сотрудника: " + ЭлементСоответствия.Ключ + " создан документ: " + ЭлементСоответствия.Значение,ЭлементСоответствия.Значение);		
		
	КонецЦикла;
	
	//Перезаполняем тч
	ЗаполнитьДокументНаСервере(Объект.Товары.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"));
	
КонецПроцедуры

&НаСервере
Функция МассивСотрудниковДокумента()
	
	МассивСотрудников = Объект.Товары.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник");
	Возврат МассивСотрудников;
	
КонецФункции // АдресТаблицыДанныхДляУстановкиУсловий()

&НаСервере
Процедура ЗаполнитьКолонку_НеВыданоПоПричине()
	
	Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача ИЛИ Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача Тогда 
		
		ТаблицаУстановленныхУсловий = Документы.УстановкаУсловийРаботыСотрудника.ПолучитьУсловияРаботыСотрудников(
		Объект.Товары.Выгрузить(,"Сотрудник"),
		?(ЗначениеЗаполнено(Объект.Ссылка),Объект.Дата,ТекущаяДата()));
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Условие КАК Справочник.УсловияНорм) КАК Условие
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУстановленныхУсловий.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(ТаблицаУстановленныхУсловий.Условие КАК Справочник.УсловияНорм) КАК Условие,
		|	ТаблицаУстановленныхУсловий.Использовать КАК Использовать
		|ПОМЕСТИТЬ ВТ_УстановленныеУсловия
		|ИЗ
		|	&ТаблицаУстановленныхУсловий КАК ТаблицаУстановленныхУсловий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
		|	ВложенныйЗапрос.КоличествоУстановленныхУсловий КАК КоличествоУстановленныхУсловий,
		|	ВложенныйЗапрос.ГруппаУсловия КАК ГруппаУсловия
		|ПОМЕСТИТЬ ВТ_ГруппыУсловийСМножественнойУстановкой
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_УстановленныеУсловия.Сотрудник КАК Сотрудник,
		|		ВТ_УстановленныеУсловия.Условие.ГруппаУсловия КАК ГруппаУсловия,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_УстановленныеУсловия.Условие) КАК КоличествоУстановленныхУсловий
		|	ИЗ
		|		ВТ_УстановленныеУсловия КАК ВТ_УстановленныеУсловия
		|	ГДЕ
		|		ВТ_УстановленныеУсловия.Использовать
		|		И ВТ_УстановленныеУсловия.Условие.ГруппаУсловия <> ЗНАЧЕНИЕ(Справочник.ГруппыУсловийНорм.ПустаяСсылка)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_УстановленныеУсловия.Сотрудник,
		|		ВТ_УстановленныеУсловия.Условие.ГруппаУсловия) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.КоличествоУстановленныхУсловий > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
		|	ВТ_Товары.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГруппыУсловийСМножественнойУстановкой КАК ВТ_ГруппыУсловийСМножественнойУстановкой
		|		ПО ВТ_Товары.Сотрудник = ВТ_ГруппыУсловийСМножественнойУстановкой.Сотрудник
		|			И ВТ_Товары.Условие.ГруппаУсловия = ВТ_ГруппыУсловийСМножественнойУстановкой.ГруппаУсловия";
		
		Запрос.УстановитьПараметр("ТаблицаТовары",Объект.Товары.Выгрузить(,"НомерСтроки,Сотрудник,Условие"));
		Запрос.УстановитьПараметр("ТаблицаУстановленныхУсловий",ТаблицаУстановленныхУсловий);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			СтрокаТабличнойЧасти = Объект.Товары[Выборка.НомерСтроки-1];
			СтрокаТабличнойЧасти.НеВыдано = Истина;
			СтрокаТабличнойЧасти.НеВыданоПоПричине = Справочники.ПричиныНевыдачиСИЗ.ВключеноБолееОдногоУсловияВГруппе;
			
			СтрокаТабличнойЧасти.Количество								= 0;
			СтрокаТабличнойЧасти.Номенклатура 							= Справочники.Номенклатура.ПустаяСсылка();
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры 			= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			СтрокаТабличнойЧасти.Цена 									= 0;
			СтрокаТабличнойЧасти.Сумма 									= 0;
			
		КонецЦикла;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда 
			Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//***НСК Трегубов А.А.*** -- №90515 --  28.06.2021 >>>

//АсТБ_Alexey_102437_********************************************************************

&НаКлиенте
Процедура ЗаполнитьПричиныНевыдачиСИЗ(ВыбранноеЗначение)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;	
	
	//устанавливаем "Не выдано"
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.НеВыдано = Истина;
		ОбработатьСтрокуПоНевыдано(СтрокаТаблицы);
	КонецЦикла;	
	
	//устанавливаем причину
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.НеВыданоПоПричине = ВыбранноеЗначение;
	КонецЦикла;
	
	ТоварыПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуПоНевыдано(СтрокаТаблицы)
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.ВыдачаСИЗ_ОбработатьСтрокуПоНевыдано(СтрокаТаблицы,Объект,ЭтаФорма)");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщаяПричинаНевыдачи(Команда)
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	
	ОткрытьФорму("Справочник.ПричиныНевыдачиСИЗ.ФормаВыбора",ПараметрыФормыВыбора,ЭтаФорма,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//АсТБ_Alexey_102437_********************************************************************

//Танцюра А.Н. -- №129655 BUG: одновременная установка штрихкодов -- 02.11.2021 <<<

&НаСервере
Процедура ПерезаполнитьШтрихкодыНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекущийОбъект.ШтрихкодыНоменклатуры.Очистить();
	
	Документы.ВыдачаСредствЗащитыСотруднику.ЗаполнитьШтрихкоды(ТекущийОбъект);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьШтрихкоды(Команда)
	
	Если Объект.ШтрихкодыНоменклатуры.Количество() > 0 Тогда

		Текст = "ru = ""Табличная часть будет очищена! Продолжить выполнение операции?"";";
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры);
		
		ПоказатьВопрос(Оповещение,НСтр(Текст),РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

    ПерезаполнитьШтрихкодыНаСервере();
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

//Танцюра А.Н. -- №129655 BUG: одновременная установка штрихкодов -- 02.11.2021 >>>