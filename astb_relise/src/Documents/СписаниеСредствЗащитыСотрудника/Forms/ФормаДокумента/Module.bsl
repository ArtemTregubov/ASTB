////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	// СтандартныеПодсистемы.Свойства
 	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект,НОВЫЙ Структура("ИмяЭлементаДляРазмещения","ГруппаДополнительныеРеквизиты"));
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвратСИЗ = Документы.СписаниеСредствЗащитыСотрудника.ПолучитьВозвратСИЗ(Объект.Ссылка,Документы.ВозвратСредствЗащитыОтСотрудника.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ВозвратСИЗ) Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		ЭтаФорма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыЗаполнить.Видимость = Ложь;
		ЭтаФорма.Элементы.ГруппаПредупреждение.ПодчиненныеЭлементы.ПолеТекстПредупреждения.Заголовок = "Документ заблокирован, т.к. на его основании проведен документ <<Возврат средств защиты от сотрудника>>!";
		ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость = Истина;
	Иначе	
		ЭтаФорма.Элементы.ГруппаПредупреждение.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьКолонок();

	УстановитьВидимостьЭлементов();
	
	Если НЕ ЗначениеЗаполнено(ВозвратСИЗ) Тогда
		ЗаполнитьКлючи();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеСпр_УточненныеПричиныСписания") Тогда	
		Если Объект.ПричинаСписания = Перечисления.ПричиныСписания.Брак ИЛИ Объект.ПричинаСписания = Перечисления.ПричиныСписания.Износ Тогда
			Элементы.УточненныеПричиныСписания.Видимость = Истина;
		Иначе
			Элементы.УточненныеПричиныСписания.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКлючи()
	
	Если НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеСпр_УточненныеПричиныСписания")) Тогда
		Возврат;
	КонецЕсли;	
		
	Если НЕ Объект.УточненныеПричиныСписания.Количество() = 0 ИЛИ Параметры.Ключ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (Объект.ПричинаСписания = Перечисления.ПричиныСписания.Брак ИЛИ Объект.ПричинаСписания = Перечисления.ПричиныСписания.Износ) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.Ключ) Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаТовары.Ключ = СтрокаТовары.НомерСтроки;
		Модифицированность = Истина;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
 	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	//присоединенный файл
	Если ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		Объект.ПрисоединенныйФайлМБ7 	= Источник;
		Модифицированность 				= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если Элемент.ТекущийЭлемент.Имя = "ТоварыКоличество" Тогда
			Элемент.ТекущиеДанные.Сумма = Элемент.ТекущиеДанные.Количество * Элемент.ТекущиеДанные.Цена;
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
			Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
				Элемент.ТекущиеДанные.Цена = ПолучитьЦенуСервер(Элемент.ТекущиеДанные.Номенклатура);
				Элемент.ТекущиеДанные.Сумма = Элемент.ТекущиеДанные.Количество * Элемент.ТекущиеДанные.Цена;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "СВОЙСТВА"

// СтандартныеПодсистемы.Свойства
 &НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "ПЕЧАТЬ"

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
  УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
  
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ...

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЦенуСервер(Номенклатура)
	Цена = ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(Номенклатура,Объект.Организация,Объект.Дата);
	Возврат Цена;
КонецФункции

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");	
	
	Документы.СписаниеСредствЗащитыСотрудника.ЗаполнитьДокумент(ТекущийОбъект.Сотрудник,ТекущийОбъект);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаСписанияПриИзменении(Элемент)
	
	Объект.Товары.Очистить();
	Объект.УточненныеПричиныСписания.Очистить();
	
	Если Объект.ПричинаСписания = ПредопределенноеЗначение("Перечисление.ПричиныСписания.Увольнение") Тогда	
		//отсечка убрана 13.06.2019 по требованию И. Озеровой
		//ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличество.ТолькоПросмотр 		= Истина;
		//АсТБ_Alexey_70746********************************************************************
		//ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаВыдачи.Видимость 			= Ложь;
		//АсТБ_Alexey_70746********************************************************************
	Иначе
		//отсечка убрана 13.06.2019 по требованию И. Озеровой
		//ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличество.ТолькоПросмотр 		= Ложь;
		//АсТБ_Alexey_70746********************************************************************
		//ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаВыдачи.Видимость 			= Истина;
		//АсТБ_Alexey_70746********************************************************************
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонок()
	
	Если Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача Тогда
		//АсТБ_Alexey_70746********************************************************************
		//ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаВыдачи.Видимость 	= ИСТИНА;
		//АсТБ_Alexey_70746********************************************************************
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНормаВыдачи.Видимость	= Истина;
	ИначеЕсли Объект.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача Тогда
		Если Объект.ПричинаСписания = Перечисления.ПричиныСписания.Увольнение Тогда	
			//АсТБ_Alexey_70746********************************************************************
			//ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаВыдачи.Видимость = Ложь;
			//АсТБ_Alexey_70746********************************************************************
		Иначе
			//АсТБ_Alexey_70746********************************************************************
			//ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаВыдачи.Видимость = Истина;
			//АсТБ_Alexey_70746********************************************************************
		КонецЕсли;
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНормаВыдачи.Видимость	= Истина;
	Иначе //произвольная или упрощенная выдача
		//АсТБ_Alexey_70746********************************************************************
		//ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыДатаВыдачи.Видимость 	= ИСТИНА;
		//АсТБ_Alexey_70746********************************************************************
		ЭтаФорма.Элементы.Товары.ПодчиненныеЭлементы.ТоварыНормаВыдачи.Видимость	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВыдачиСИЗПриИзменении(Элемент)
	
	Объект.Товары.Очистить();
	Объект.УточненныеПричиныСписания.Очистить();
	
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;                                               
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.СписаниеСИЗ_УправлениеДоступностью(ЭтаФорма)");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	Объект.Товары.Очистить();
	Объект.УточненныеПричиныСписания.Очистить();
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(Объект.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;                                               
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Клиент.СписаниеСИЗ_УправлениеДоступностью(ЭтаФорма)");
	
КонецПроцедуры

&НаКлиенте
Процедура УточненныеПричиныСписанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанныеТовары = ЭтаФорма.Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанныеТовары = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УточненныеПричиныСписанияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КлючТовары = ЭтаФорма.Элементы.Товары.ТекущиеДанные.Ключ;
	
	ТекущиеДанные = ЭтаФорма.Элементы.УточненныеПричиныСписания.ТекущиеДанные;
	ТекущиеДанные.Ключ = КлючТовары;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанныеТовары = ЭтаФорма.Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанныеТовары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Элементы.УточненныеПричиныСписания.ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ",ТекущиеДанныеТовары.Ключ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанныеТовары = ЭтаФорма.Элементы.Товары.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанныеТовары.Ключ = ТекущиеДанныеТовары.НомерСтроки;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныйФайлМБ7НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПрисоединенныеФайлыКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныйФайлМБ7Открытие(Элемент, СтандартнаяОбработка)
	
	ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ПрисоединенныйФайлМБ7, СтандартнаяОбработка);
	
КонецПроцедуры

//+++АСТБ_Горюшин_Алексей_20510
// Поле ПричинаСписания: добавлен вариант ТехническоеСписание в список выбора
//---АСТБ_Горюшин_Алексей_20510
