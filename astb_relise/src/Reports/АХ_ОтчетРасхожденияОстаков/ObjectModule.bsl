
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Получаем схему
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//...и настройки
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//проверяем необходимые настройки
	
	// << Период
	ПараметрПериод = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если НЕ ПараметрПериод.Использование Тогда
		Период = Неопределено;
	Иначе
		Период = КонецДня(ПараметрПериод.Значение);
	КонецЕсли;
	// Период >>
	
	// << Организация
	ПараметрОрганизация = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	Если НЕ ПараметрОрганизация.Использование Тогда
		Организация = Неопределено;
	Иначе
		Организация = ПараметрОрганизация.Значение;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("НеВестиУчетОстатковНоменклатурыПоОрганизации") Тогда
		Организация = Справочники.Организации.ПустаяСсылка();		
	ИначеЕсли Организация = Неопределено ИЛИ Организация = Справочники.Организации.ПустаяСсылка() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(нСтр("ru='Параметр ""Организация"" должен быть заполнен'", "ru"));
		Возврат;
	КонецЕсли;	
	// Организация >>
	
	// << Склад 
	ПараметрСклад = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Склад"));	
    Склад = ПараметрСклад.Значение;
		
	Если НЕ ПараметрСклад.Использование ИЛИ Склад = Неопределено Тогда		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(нСтр("ru='Параметр ""склад"" должен быть заполнен'", "ru"));
		Возврат;		
		
	КонецЕсли;
	
	Если НЕ Склад.АХ_СлотовыйУчетПоСкладу Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Невозможно сформировать отчет, т.к. склад не является слотовым ");
		Возврат;
		
	КонецЕсли;
	
	МассивКодовУзловТочекХранения = Новый Массив;
	МассивКодовУзловТочекХранения.Добавить(Склад.АХ_КодУзлаТочкиХранения);
	
	// Склад >>	
	
	СтруктураОбработкиОшибок = АХ_ОбменВызовСервера.ИнициализироватьСтруктуруОбработкиОшибок();
	
	Прокси = АХ_ОбменВызовСервера.ПолучитьПрокси(СтруктураОбработкиОшибок);
	Если Прокси = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаИдентификаторовXDTO = Прокси.ПолучитьОстаткиНоменклатуры(?(Период = Неопределено,Дата("39991231"),Период),Неопределено,СериализаторXDTO.ЗаписатьXDTO(МассивКодовУзловТочекХранения));
	
	ТаблицаИдентификаторов = СериализаторXDTO.ПрочитатьXDTO(ТаблицаИдентификаторовXDTO);	
	
	КЧ = Новый КвалификаторыЧисла(15,3);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("КоличествоОстаток",ОписаниеТиповЧ);
	
	Для Каждого СтрокаТаблицыИдентификаторов из ТаблицаИдентификаторов цикл
		
		НоваяСтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
		НоваяСтрокаТаблицыТоваров.Номенклатура 				 = АХ_ОбменПравилаЗагрузки.ДесериализоватьСсылкуНаСправочник(СтрокаТаблицыИдентификаторов.Номенклатура,"Номенклатура");
		НоваяСтрокаТаблицыТоваров.ХарактеристикаНоменклатуры = АХ_ОбменПравилаЗагрузки.ДесериализоватьСсылкуНаСправочник(СтрокаТаблицыИдентификаторов.ХарактеристикаНоменклатуры,"ХарактеристикиНоменклатуры");
		НоваяСтрокаТаблицыТоваров.КоличествоОстаток			 = СтрокаТаблицыИдентификаторов.КоличествоОстаток;		
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаТоваров.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&Склад КАК Склад,
	|	ВТ_ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.ПроцентыИзноса.ПустаяСсылка) КАК ПроцентИзноса,
	|	ВТ_ТаблицаТоваров.КоличествоОстаток КАК КоличествоФакт,
	|	0 КАК КоличествоУчет
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	ВТ_ТаблицаТоваров КАК ВТ_ТаблицаТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиНоменклатурыОстатки.Организация,
	|	ОстаткиНоменклатурыОстатки.Склад,
	|	ОстаткиНоменклатурыОстатки.Номенклатура,
	|	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры,
	|	ОстаткиНоменклатурыОстатки.ПроцентИзноса,
	|	0,
	|	ОстаткиНоменклатурыОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			&период,
	|			Организация = &Организация
	|				И Склад = &Склад) КАК ОстаткиНоменклатурыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Организация КАК Организация,
	|	ВТ_Остатки.Склад КАК Склад,
	|	ВТ_Остатки.Номенклатура КАК Номенклатура,
	|	ВТ_Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Остатки.ПроцентИзноса КАК ПроцентИзноса,
	|	СУММА(ВТ_Остатки.КоличествоФакт) КАК КоличествоФакт,
	|	СУММА(ВТ_Остатки.КоличествоУчет) КАК КоличествоУчет
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.Организация,
	|	ВТ_Остатки.Склад,
	|	ВТ_Остатки.Номенклатура,
	|	ВТ_Остатки.ХарактеристикаНоменклатуры,
	|	ВТ_Остатки.ПроцентИзноса";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Период", 	    Период);
	Запрос.УстановитьПараметр("Склад",  	    Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Создаем компоновщик макета и получаем макет компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, ДанныеРасшифровки);
	
	СтруктураВнешегоНабора = Новый Структура;
	СтруктураВнешегоНабора.Вставить("ТаблицаТоваров",РезультатЗапроса.Выгрузить());
	
	//Инициализируем процессор компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, СтруктураВнешегоНабора, ДанныеРасшифровки, Истина);
	
	//Очищаем документ результата
	ДокументРезультат.Очистить();
	
	//Выводим отчет в документ
	ПроцессорВывода = Новый
	ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
КонецПроцедуры
