Процедура ПередЗаписью(Отказ, Замещение)

	Если ОбменДанными.Загрузка Или Не ПроведениеСервер.РассчитыватьИзменения(ДополнительныеСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяКонтроль = Истина;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	БлокироватьДляИзменения = Истина;

	// Текущее состояние набора помещается во временную таблицу "ДвиженияЗанятыеРабочиеМестаПередЗаписью",
	// чтобы при записи получить изменение нового набора относительно текущего.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ЭтоНовый",    ДополнительныеСвойства.ЭтоНовый);
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Организация КАК Организация,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.Должность КАК Должность,
	|	Таблица.РабочееМесто КАК РабочееМесто,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА Таблица.Количество
	|		ИНАЧЕ -Таблица.Количество
	|	КОНЕЦ КАК КоличествоПередЗаписью
	|ПОМЕСТИТЬ ДвиженияЗанятыеРабочиеМестаПередЗаписью
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста КАК Таблица
	|ГДЕ
	|	Таблица.Регистратор = &Регистратор
	|	И (НЕ &ЭтоНовый)";
	Запрос.Выполнить();

КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)

	Если ОбменДанными.Загрузка Или Не ПроведениеСервер.РассчитыватьИзменения(ДополнительныеСвойства) Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;

	// Рассчитывается изменение нового набора относительно текущего с учетом накопленных изменений
	// и помещается во временную таблицу.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИзменений.Организация КАК Организация,
	|	ТаблицаИзменений.Подразделение КАК Подразделение,
	|	ТаблицаИзменений.Должность КАК Должность,
	|	ТаблицаИзменений.РабочееМесто КАК РабочееМесто,
	|	ТаблицаИзменений.Сотрудник КАК Сотрудник,
	|	СУММА(ТаблицаИзменений.КоличествоИзменение) КАК КоличествоИзменение
	|ПОМЕСТИТЬ ДвиженияЗанятыеРабочиеМестаИзменение
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Организация КАК Организация,
	|		Таблица.Подразделение КАК Подразделение,
	|		Таблица.Должность КАК Должность,
	|		Таблица.РабочееМесто КАК РабочееМесто,
	|		Таблица.Сотрудник КАК Сотрудник,
	|		Таблица.КоличествоПередЗаписью КАК КоличествоИзменение	
	|	ИЗ
	|		ДвиженияЗанятыеРабочиеМестаПередЗаписью КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Организация,
	|		Таблица.Подразделение,
	|		Таблица.Должность,
	|		Таблица.РабочееМесто,
	|		Таблица.Сотрудник,
	|		ВЫБОР
	|			КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Таблица.Количество
	|			ИНАЧЕ Таблица.Количество
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗанятыеРабочиеМеста КАК Таблица
	|	ГДЕ
	|		Таблица.Регистратор = &Регистратор) КАК ТаблицаИзменений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.Организация,
	|	ТаблицаИзменений.Подразделение,
	|	ТаблицаИзменений.Должность,
	|	ТаблицаИзменений.РабочееМесто,
	|	ТаблицаИзменений.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ТаблицаИзменений.КоличествоИзменение) > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДвиженияЗанятыеРабочиеМестаПередЗаписью";
	Выборка = Запрос.ВыполнитьПакет()[0].Выбрать();
	Выборка.Следующий();
	
	// Добавляется информация о ее существовании и наличии в ней записей об изменении.
	СтруктураВременныеТаблицы.Вставить("ДвиженияЗанятыеРабочиеМестаИзменение", Выборка.Количество > 0);

КонецПроцедуры
