#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Функция СформироватьШтрихкодEAN13(ПрефиксШтучногоТовара, ПрефиксШтрихкодаНомеклатуры, МаксимальныйКод = 9999999) Экспорт

	Код = Мин(ПолучитьМаксимальноеЗначениеКодаШтрихкодаЧислом(ПрефиксШтучногоТовара, ПрефиксШтрихкодаНомеклатуры) + 1, МаксимальныйКод);

	Возврат ПолучитьШтрихкодПоКоду(Код, ПрефиксШтучногоТовара, ПрефиксШтрихкодаНомеклатуры);

КонецФункции

// Функция возвращает штрихкод, создаваемый из кода с префиксами и контрольным символом
//
// Параметры:
//  Код                         - Число
//  ПрефиксШтучногоТовара       - Строка
//  ПрефиксШтрихкодаНомеклатуры - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьШтрихкодПоКоду(Код, ПрефиксШтучногоТовара, ПрефиксШтрихкодаНомеклатуры) Экспорт

	Штрихкод = "2" + ПрефиксШтучногоТовара + ПрефиксШтрихкодаНомеклатуры + Формат(Код, "ЧЦ=7; ЧВН=; ЧГ=");
	Штрихкод = Штрихкод + КонтрольныйСимволEAN(ШтрихКод);

	Возврат Штрихкод;

КонецФункции

// Функция возвращает максимальное значение штрихкода числом
//
// Параметры:
//  ПрефиксШтучногоТовара       - Строка
//  ПрефиксШтрихкодаНомеклатуры - Строка
//
// Возвращаемое значение:
//  Число
//
Функция ПолучитьМаксимальноеЗначениеКодаШтрихкодаЧислом(ПрефиксШтучногоТовара, ПрефиксШтрихкодаНомеклатуры) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод, 6, 7)) КАК Код
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатурыДляУчетаЧистки КАК ШтрихкодыНоменклатурыДляУчетаЧистки
	|ГДЕ
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод ПОДОБНО ""2" + ПрефиксШтучногоТовара + ПрефиксШтрихкодаНомеклатуры + "________""
	|");

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
	ЗначениеКодаЧислом = ОписаниеТипаЧисла.ПривестиЗначение(Выборка.Код);
	
	Возврат ЗначениеКодаЧислом;

КонецФункции

Функция КонтрольныйСимволEAN(ШтрихКод) Экспорт

	Четн   = 0;
	Нечетн = 0;

	Для Индекс = 1 По 6 Цикл
		Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Четн = Четн * 3;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции

// Функция возращает соответствие с данными штрихкодов
//
// Параметры:
//  Штрихкоды    - Массив штрихкодов
//
// Возвращаемое значение:
//  Соответствие с данными штрихкодов
//
Функция ПолучитьДанныеПоШтрихкодам(Штрихкоды) Экспорт
	
	ДанныеПоШтрихкодам 	= Новый Соответствие;
	МассивШтрихкодов 	= Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ХарактеристикаНоменклатуры,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ДатаВыдачи,
	|	ЕСТЬNULL(ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура.ВесДляУчетаЧистки, 0) КАК Вес
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатурыДляУчетаЧистки КАК ШтрихкодыНоменклатурыДляУчетаЧистки
	|ГДЕ
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод В(&МассивШтрихкодов)";
	
	Для Каждого ТекШтрихкод Из Штрихкоды Цикл
		ДанныеПоШтрихкодам.Вставить(СокрЛП(ТекШтрихкод.Штрихкод), Новый Структура);
		МассивШтрихкодов.Добавить(ТекШтрихкод.Штрихкод);
	КонецЦикла;

	Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекДанные = ДанныеПоШтрихкодам[СокрЛП(Выборка.Штрихкод)];
		ТекДанные.Вставить("Сотрудник",               	Выборка.Сотрудник);
		ТекДанные.Вставить("Номенклатура",            	Выборка.Номенклатура);
		ТекДанные.Вставить("ХарактеристикаНоменклатуры",Выборка.ХарактеристикаНоменклатуры);
		ТекДанные.Вставить("ДатаВыдачи",                Выборка.ДатаВыдачи);
		//ТекДанные.Вставить("ДатаОкончанияИспользования",Выборка.ДатаОкончанияИспользования);
	КонецЦикла;
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

#КонецЕсли