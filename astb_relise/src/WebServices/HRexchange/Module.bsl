Функция Ping()
	Возврат "";
КонецФункции

Функция DownloadMessage(Message)
	
	СтруктураОтвета = Новый Структура("Error,Description",Ложь,"");
	Организация     = Справочники.Организации.ПустаяСсылка();
	
	Попытка
		
		Попытка
					
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(Message.Получить());
			
			ТипОбъектаXDTO  = ФабрикаXDTO.Тип("HRexchange","Objects");
			ТаблицаОбъектов = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			
			СтруктураОтвета.Error = Истина;
			СтруктураОтвета.Description = "В АСТБ не удалось прочитать переданный файл, т.к. сформирован не по формату xsd. Причина ошибки:" + Символы.ПС + ПодробноеПредставлениеОшибки(Инфо);
			
			СформироватьИсториюЗагрузки(Организация,СтруктураОтвета.Error,СтруктураОтвета.Description,Message);
			
			Возврат Новый ХранилищеЗначения(СтруктураОтвета);			
			
		КонецПопытки;
		
		ИНН = ТаблицаОбъектов.Organization.inn;
		КПП = ТаблицаОбъектов.Organization.kpp;
		
		Параметры = ПолучитьПараметрыЗагрузки(ИНН,КПП);
		Если Параметры = Неопределено Тогда 
			
			СтруктураОтвета.Error = Истина;
			СтруктураОтвета.Description = "В АСТБ запрещена загрузка кадровых данных или не заданы параметры загрузки для организации: ИНН - " + ИНН + " КПП - " + КПП;
			
		ИначеЕсли НЕ Параметры.Используется Тогда 
			
			СтруктураОтвета.Error = Истина;
			СтруктураОтвета.Description = "В АСТБ отключена возможность загрузки кадровой информации для организации: ИНН - " + ИНН + " КПП - " + КПП;
			
		Иначе
			
			Организация = Параметры.Организация;
			
			ВыполнитьОтменуДокументов(ТаблицаОбъектов.Docs_cancelation,Параметры);
			
			НачатьТранзакцию();		
			ЗагрузитьОбъекты(ТаблицаОбъектов,Параметры);			
			ЗафиксироватьТранзакцию();
			
			ВыполнитьОтложенноеПроведениеДокументов(Параметры);
			
			СтруктураОтвета.Description = СформироватьОбщуюСтрокуЛога(Параметры.ТаблицаЛогирования); 
			
		КонецЕсли;
		
	Исключение	
		
		Если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Инфо = ИнформацияОбОшибке();
		
		СтруктураОтвета.Error = Истина;		
		СтруктураОтвета.Description = ПодробноеПредставлениеОшибки(Инфо);
		
		//регистрируем ошибку в журнале
		ЗаписьЖурналаРегистрации(нСтр("ru='Ошибка принятия пакета обмена по веб сервису HRexchange '", "ru"),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.WebСервисы.HRexchange,
		,
		ПодробноеПредставлениеОшибки(Инфо));
		
	КонецПопытки;
	
	СформироватьИсториюЗагрузки(Организация,СтруктураОтвета.Error,СтруктураОтвета.Description,Message);
	
	Возврат Новый ХранилищеЗначения(СтруктураОтвета);
	
КонецФункции

Процедура СформироватьИсториюЗагрузки(Организация,Ошибка,Лог,ХранилищеТелаФайла)
	
	МенеджерЗаписи = РегистрыСведений.ИсторияЗагрузкиКадровыхДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период             = ТекущаяДата();
	МенеджерЗаписи.Организация        = Организация;
	МенеджерЗаписи.Ошибка             = Ошибка; 
	МенеджерЗаписи.Лог                = Лог; 
	МенеджерЗаписи.ХранилищеТелаФайла = ХранилищеТелаФайла; 
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура СформироватьСтрокуЛога(ТаблицаЛогирования,Ссылка,Комментарий)
	
	ТипЗначения = ТипЗнч(Ссылка);
	
	Если ТипЗначения = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		Порядок = 0;
		ТипМетаданных = "Справочник";
	иначеЕсли ТипЗначения = Тип("СправочникСсылка.Сотрудники") Тогда 
		Порядок = 1;
		ТипМетаданных = "Справочник";
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Подразделения") Тогда 
		Порядок = 2;
		ТипМетаданных = "Справочник";		
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ДолжностиИПрофессии") Тогда 
		Порядок = 3;
		ТипМетаданных = "Справочник";		
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.РабочиеМеста") Тогда 
		Порядок = 4;
		ТипМетаданных = "Справочник";		
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.МВЗ") Тогда 
		Порядок = 5;
		ТипМетаданных = "Справочник";		
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПриемНаРаботу") Тогда 
		Порядок = 6;		
		ТипМетаданных = "Документ";			
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.КадровоеПеремещение") Тогда 
		Порядок = 7;
		ТипМетаданных = "Документ";					
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.Увольнение") Тогда 
		Порядок = 8;
		ТипМетаданных = "Документ";					
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ОтсутствиеНаРабочемМесте") Тогда 
		Порядок = 9;
		ТипМетаданных = "Документ";					
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.УстановкаМВЗПодразделений") Тогда 
		Порядок = 10;
		ТипМетаданных = "Документ";			
	Иначе
		Порядок = 99;
		ТипМетаданных = "";
	КонецЕсли;
	
	СтрокаЛога = ТаблицаЛогирования.Добавить();
	СтрокаЛога.Ссылка = Ссылка;
	СтрокаЛога.Порядок = Порядок;
	СтрокаЛога.Комментарий = ТипМетаданных + " - " + ТипЗначения + " : " + Ссылка + " - " + Комментарий;
	
КонецПроцедуры

Функция СформироватьОбщуюСтрокуЛога(ТаблицаЛогирования)
	
	ОбщаяСтрокаЛога = "";
	
	ТаблицаЛогирования.Сортировать("Порядок,Ссылка");
	
	Для Каждого СтрокаТаблицы из ТаблицаЛогирования Цикл
		ОбщаяСтрокаЛога = ОбщаяСтрокаЛога + СтрокаТаблицы.Комментарий + Символы.ПС;
	КонецЦикла;
	
	Возврат ОбщаяСтрокаЛога;
	
КонецФункции // СформироватьОбщуюСтрокуЛога()

Функция ПолучитьПараметрыЗагрузки(ИНН,КПП)
	
	Параметры = Неопределено;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗагрузкуКадровыхДанныхЧерезСервис") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыЗагрузкиКадровыхДанных.Организация КАК Организация,
		|	ПараметрыЗагрузкиКадровыхДанных.ПроводитьДокументыПослеЗагрузки КАК ПроводитьДокументыПослеЗагрузки,
		|	ПараметрыЗагрузкиКадровыхДанных.ИсправлятьНаименованияСуществующихПодразделений КАК ИсправлятьНаименованияСуществующихПодразделений,
		|	ПараметрыЗагрузкиКадровыхДанных.ИсправлятьНаименованияСуществующихДолжностей КАК ИсправлятьНаименованияСуществующихДолжностей,
		|	ПараметрыЗагрузкиКадровыхДанных.ИсправлятьНаименованияСуществующихРабочихМест КАК ИсправлятьНаименованияСуществующихРабочихМест,
		|	ПараметрыЗагрузкиКадровыхДанных.Используется КАК Используется,
		|	ПараметрыЗагрузкиКадровыхДанных.РазрешитьОтменятьПриемыНаРаботу КАК РазрешитьОтменятьПриемыНаРаботу,
		|	ПараметрыЗагрузкиКадровыхДанных.РазрешитьОтменятьКадровыеПеремещения КАК РазрешитьОтменятьКадровыеПеремещения,
		|	ПараметрыЗагрузкиКадровыхДанных.РазрешитьОтменятьОтсутствияНаРабочихМестах КАК РазрешитьОтменятьОтсутствияНаРабочихМестах,
		|	ПараметрыЗагрузкиКадровыхДанных.РазрешитьОтменятьУвольнения КАК РазрешитьОтменятьУвольнения
		|ИЗ
		|	РегистрСведений.ПараметрыЗагрузкиКадровыхДанных КАК ПараметрыЗагрузкиКадровыхДанных
		|ГДЕ
		|	ПараметрыЗагрузкиКадровыхДанных.Организация.ИНН = &ИНН
		|	И ПараметрыЗагрузкиКадровыхДанных.Организация.КПП = &КПП";
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда 
			
			Параметры = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
			
			ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;		
			ДокументыДляОтложенногоПроведения.Колонки.Добавить("Ссылка");
			ДокументыДляОтложенногоПроведения.Колонки.Добавить("ИсходнаяДата",Новый ОписаниеТипов("Дата"));		
			ДокументыДляОтложенногоПроведения.Колонки.Добавить("Порядок",Новый ОписаниеТипов("Число"));		
			Параметры.Вставить("ДокументыДляОтложенногоПроведения",ДокументыДляОтложенногоПроведения);
			
			ТаблицаЛогирования = Новый ТаблицаЗначений;		
			ТаблицаЛогирования.Колонки.Добавить("Ссылка");
			ТаблицаЛогирования.Колонки.Добавить("Комментарий");
			ТаблицаЛогирования.Колонки.Добавить("Порядок");		
			Параметры.Вставить("ТаблицаЛогирования",ТаблицаЛогирования);
			
			ТаблицаМВЗПодразделений = Новый ТаблицаЗначений;		
			ТаблицаМВЗПодразделений.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));		
			ТаблицаМВЗПодразделений.Колонки.Добавить("МВЗ",Новый ОписаниеТипов("СправочникСсылка.МВЗ"));		
			Параметры.Вставить("ТаблицаМВЗПодразделений",ТаблицаМВЗПодразделений);
			
			ТаблицаМВЗСотрудников = Новый ТаблицаЗначений;		
			ТаблицаМВЗСотрудников.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			ТаблицаМВЗСотрудников.Колонки.Добавить("МВЗ",Новый ОписаниеТипов("СправочникСсылка.МВЗ"));				
			Параметры.Вставить("ТаблицаМВЗСотрудников",ТаблицаМВЗСотрудников);		
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции // ПолучитьПараметрыЗагрузки()

Функция ПолучитьПорядокДокументаДляПроведения(Ссылка)
	
	ТипЗначения = ТипЗнч(Ссылка);
	
	Если ТипЗначения = Тип("ДокументСсылка.ПриемНаРаботу") Тогда 
		Порядок = 1;
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.КадровоеПеремещение")  Тогда
		Порядок = 2;
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.Увольнение") Тогда 
		Порядок = 3;
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ОтсутствиеНаРабочемМесте") Тогда 
		Порядок = 4;
	Иначе
		Порядок = 9;
	КонецЕсли;
	
	Возврат Порядок;

КонецФункции // ПолучитьПорядокДокументаДляПроведения()

Функция ЗагрузитьОбъекты(Объекты,Параметры)
	
	Если Объекты <> Неопределено Тогда
		
		Для каждого ОбъектXDTO Из Объекты.Object Цикл
			
			Если ОбъектXDTO.Тип().Имя = "Worker" Тогда
				
				ПолучитьСотрудника(Параметры,ОбъектXDTO);
				
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Job" Тогда
				
				ПолучитьДолжность(Параметры,ОбъектXDTO);
				
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Division" Тогда
				
				ПолучитьПодразделение(Параметры,ОбъектXDTO);
				
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Workplace" Тогда
				
				ПолучитьРабочееМесто(Параметры,ОбъектXDTO);				
				
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Mvz" Тогда
				
				ПолучитьМВЗ(Параметры,ОбъектXDTO);
				
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Staff_list" Тогда
				
				ПолучитьШтатноеРасписание(Параметры,ОбъектXDTO);
				
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Doc_recruitment" Тогда
				
				ЗагрузитьДокПриемНаРаботу(Параметры,ОбъектXDTO);
				
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Doc_dismissal" Тогда
				
				ЗагрузитьДокУвольнение(Параметры,ОбъектXDTO);
				
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Doc_moving" Тогда
				
				ЗагрузитьДокПеремещение(Параметры,ОбъектXDTO);
				
			ИначеЕсли ОбъектXDTO.Тип().Имя = "Doc_absence" Тогда
				
				ЗагрузитьДокОтсутствиеНаРабочемМесте(Параметры,ОбъектXDTO);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗагрузитьМВЗСотрудников(Параметры);
	ЗагрузитьМВЗПодразделений(Параметры);

КонецФункции

Процедура ЗагрузитьМВЗСотрудников(Параметры)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаМВЗСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаМВЗСотрудников.МВЗ КАК МВЗ
		|ПОМЕСТИТЬ ВТ_МВЗСотрудников
		|ИЗ
		|	&ТаблицаМВЗСотрудников КАК ТаблицаМВЗСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_МВЗСотрудников.Сотрудник КАК Сотрудник,
		|	ВТ_МВЗСотрудников.МВЗ КАК МВЗ
		|ИЗ
		|	ВТ_МВЗСотрудников КАК ВТ_МВЗСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МВЗСотрудников КАК МВЗСотрудников
		|		ПО ВТ_МВЗСотрудников.Сотрудник = МВЗСотрудников.Сотрудник
		|			И ВТ_МВЗСотрудников.МВЗ = МВЗСотрудников.МВЗ
		|			И (МВЗСотрудников.Организация = &Организация)
		|ГДЕ
		|	МВЗСотрудников.МВЗ ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Организация",Параметры.Организация);
	Запрос.УстановитьПараметр("ТаблицаМВЗСотрудников",Параметры.ТаблицаМВЗСотрудников);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяЗапись 			= РегистрыСведений.МВЗСотрудников.СоздатьМенеджерЗаписи();
		НоваяЗапись.Организация	= Параметры.Организация;
		НоваяЗапись.МВЗ			= Выборка.МВЗ;
		НоваяЗапись.Сотрудник	= Выборка.Сотрудник;
		НоваяЗапись.Записать();		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьМВЗПодразделений(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаМВЗПодразделений.Подразделение КАК Подразделение,
	|	ТаблицаМВЗПодразделений.МВЗ КАК МВЗ
	|ПОМЕСТИТЬ ВТ_МВЗПодразделений
	|ИЗ
	|	&ТаблицаМВЗПодразделений КАК ТаблицаМВЗПодразделений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МВЗПодразделений.Подразделение КАК Подразделение,
	|	ВТ_МВЗПодразделений.МВЗ КАК МВЗ
	|ИЗ
	|	ВТ_МВЗПодразделений КАК ВТ_МВЗПодразделений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МВЗПодразделений.СрезПоследних(
	|				,
	|				(Подразделение, МВЗ) В
	|					(ВЫБРАТЬ
	|						ВТ_МВЗПодразделений.Подразделение,
	|						ВТ_МВЗПодразделений.МВЗ
	|					ИЗ
	|						ВТ_МВЗПодразделений КАК ВТ_МВЗПодразделений)) КАК МВЗПодразделенийСрезПоследних
	|		ПО ВТ_МВЗПодразделений.Подразделение = МВЗПодразделенийСрезПоследних.Подразделение
	|			И ВТ_МВЗПодразделений.МВЗ = МВЗПодразделенийСрезПоследних.МВЗ
	|ГДЕ
	|	НЕ ЕСТЬNULL(МВЗПодразделенийСрезПоследних.Использовать, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Организация",Параметры.Организация);
	Запрос.УстановитьПараметр("ТаблицаМВЗПодразделений",Параметры.ТаблицаМВЗПодразделений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		
		НовыйДокумент = Документы.УстановкаМВЗПодразделений.СоздатьДокумент();
		НовыйДокумент.Комментарий = "Сформирован автоматически загрузчиком кадровых данных.";
		НовыйДокумент.Организация = Параметры.Организация;
				
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока 				= НовыйДокумент.МВЗПодразделений.Добавить();
			НоваяСтрока.Подразделение 	= Выборка.Подразделение;
			НоваяСтрока.МВЗ 			= Выборка.МВЗ;
			НоваяСтрока.Использовать 	= Истина;
			
		КонецЦикла;
		
		НовыйДокумент.УстановитьНовыйНомер();
		
		ЗаписатьДокумент(НовыйДокумент,ТекущаяДата(),Параметры);

	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьШтатноеРасписание(Параметры,ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаШтатки = Новый ТаблицаЗначений;
	ТаблицаШтатки.Колонки.Добавить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТаблицаШтатки.Колонки.Добавить("Должность",Новый ОписаниеТипов("СправочникСсылка.ДолжностиИПрофессии"));
	ТаблицаШтатки.Колонки.Добавить("КоличествоСтавок",Новый ОписаниеТипов("Число"));
	ТаблицаШтатки.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаТаблицы из ОбъектXDTO.staff Цикл
		
		НоваяСтрока = ТаблицаШтатки.Добавить();
		
		НоваяСтрока.Подразделение    = ПолучитьПодразделение(Параметры,СтрокаТаблицы.division);
		НоваяСтрока.Должность 	     = ПолучитьДолжность(Параметры,СтрокаТаблицы.job);
		НоваяСтрока.КоличествоСтавок = СтрокаТаблицы.vacancy;
		НоваяСтрока.Дата             = СтрокаТаблицы.date;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаШтатки.Подразделение КАК Подразделение,
		|	ТаблицаШтатки.Должность КАК Должность,
		|	ТаблицаШтатки.КоличествоСтавок КАК КоличествоСтавок,
		|	ТаблицаШтатки.Дата КАК Дата
		|ПОМЕСТИТЬ ВТ_ТаблицаШтатногоРасписания
		|ИЗ
		|	&ТаблицаШтатки КАК ТаблицаШтатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаШтатногоРасписания.Подразделение КАК Подразделение,
		|	ВТ_ТаблицаШтатногоРасписания.Должность КАК Должность,
		|	ВТ_ТаблицаШтатногоРасписания.КоличествоСтавок КАК КоличествоСтавок,
		|	ВТ_ТаблицаШтатногоРасписания.Дата КАК Дата
		|ИЗ
		|	ВТ_ТаблицаШтатногоРасписания КАК ВТ_ТаблицаШтатногоРасписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписание.СрезПоследних(, Организация = &Организация) КАК ШтатноеРасписаниеСрезПоследних
		|		ПО ВТ_ТаблицаШтатногоРасписания.Подразделение = ШтатноеРасписаниеСрезПоследних.Подразделение
		|			И ВТ_ТаблицаШтатногоРасписания.Должность = ШтатноеРасписаниеСрезПоследних.Должность
		|			И ВТ_ТаблицаШтатногоРасписания.КоличествоСтавок = ШтатноеРасписаниеСрезПоследних.КоличествоСтавок
		|ГДЕ
		|	ШтатноеРасписаниеСрезПоследних.Подразделение ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаШтатки",ТаблицаШтатки);
	Запрос.УстановитьПараметр("Организация",Параметры.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		РегистрШтатноеРасписание = РегистрыСведений.ШтатноеРасписание.СоздатьМенеджерЗаписи();
		РегистрШтатноеРасписание.Период    			= Выборка.Дата;
		РегистрШтатноеРасписание.Организация    	= Параметры.Организация;
		РегистрШтатноеРасписание.Подразделение      = Выборка.Подразделение;
		РегистрШтатноеРасписание.Должность 			= Выборка.Должность;
		РегистрШтатноеРасписание.КоличествоСтавок 	= Выборка.КоличествоСтавок;
		РегистрШтатноеРасписание.Записать();
		
	КонецЦикла;

КонецФункции // ПолучитьШтатноеРасписание()

Функция ПолучитьМВЗ(Параметры,ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.МВЗ.ПустаяСсылка();
	КонецЕсли;
	
	ТекущееМВЗ = Справочники.МВЗ.НайтиПоРеквизиту("КодСинхронизации",ОбъектXDTO.code,,Параметры.Организация);
	
	Если ТекущееМВЗ.Пустая() Тогда
		
		НовоеМВЗ = Справочники.МВЗ.СоздатьЭлемент();
		НовоеМВЗ.Владелец 		  = Параметры.Организация;
		НовоеМВЗ.КодСинхронизации = ОбъектXDTO.code;
		НовоеМВЗ.Наименование     = ОбъектXDTO.name;
		
		НовоеМВЗ.УстановитьНовыйКод();
		
		ЗаписатьСправочник(НовоеМВЗ,Параметры);
		
		ТекущееМВЗ = НовоеМВЗ.Ссылка;
		
	КонецЕсли;
	
	Возврат ТекущееМВЗ;
	
КонецФункции	

Функция ПолучитьСотрудника(Параметры,ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	НаименованиеСотрудника = СокрЛП(ОбъектXDTO.fullname); 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Владелец
	|	И Сотрудники.ФизическоеЛицо.КодСинхронизации = &КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.КодСинхронизации = &КодСинхронизации";
	
	Запрос.УстановитьПараметр("Владелец",			Параметры.Организация);
	Запрос.УстановитьПараметр("КодСинхронизации",	ОбъектXDTO.code);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаСотрудников 		= Результат[0].Выгрузить();
	ТаблицаФизическихЛиц 	= Результат[1].Выгрузить();
	
	Если ТаблицаФизическихЛиц.Количество() = 0 Тогда
		
		НовоеФизЛицо 					= Справочники.ФизическиеЛица.СоздатьЭлемент();
		НовоеФизЛицо.Наименование 		= НаименованиеСотрудника;
		НовоеФизЛицо.ДатаРождения       = ОбъектXDTO.bday;
		НовоеФизЛицо.КодСинхронизации 	= ОбъектXDTO.code;		
		
		Если ОбъектXDTO.sex = "M" Тогда
			НовоеФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской;
		ИначеЕсли ОбъектXDTO.sex = "W" Тогда
			НовоеФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский;
		КонецЕсли;	
				
		НовоеФизЛицо.УстановитьНовыйКод();
		
		ЗаписатьСправочник(НовоеФизЛицо,Параметры);
		
		ФизЛицо = НовоеФизЛицо.Ссылка;
		
		МассивФИО = Новый Массив;
		МассивФИО.Добавить(ОбъектXDTO.surname);
		МассивФИО.Добавить(ОбъектXDTO.name);
		МассивФИО.Добавить(ОбъектXDTO.secondname);

		ФизическиеЛицаПереопределяемый.ЗаписатьФИОФизЛиц(МассивФИО,ФизЛицо);
		
	Иначе
		
		ФизЛицо = ТаблицаФизическихЛиц[0].ФизическоеЛицо;
		
	КонецЕсли;	
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
				
		НовыйСотрудник 					= Справочники.Сотрудники.СоздатьЭлемент();
		НовыйСотрудник.Владелец 		= Параметры.Организация;
		НовыйСотрудник.Наименование		= НаименованиеСотрудника;
		НовыйСотрудник.ТабельныйНомер 	= ОбъектXDTO.personnelnumber;
		НовыйСотрудник.Идентификатор 	= ОбъектXDTO.id;
		НовыйСотрудник.ФизическоеЛицо 	= ФизЛицо;
		НовыйСотрудник.УстановитьНовыйКод();
		
		ЗаписатьСправочник(НовыйСотрудник,Параметры);
		
		ТекущийСотрудник = НовыйСотрудник.Ссылка;
				
	Иначе
		
		ТекущийСотрудник = ТаблицаСотрудников[0].Сотрудник;
		
	КонецЕсли;
		
	//МВЗ
	ТекущееМВЗ = ПолучитьМВЗ(Параметры,ОбъектXDTO.mvz);
	Если ЗначениеЗаполнено(ТекущееМВЗ) Тогда 
		
		СтрокаМВЗ = Параметры.ТаблицаМВЗСотрудников.Добавить();
		СтрокаМВЗ.Сотрудник = ТекущийСотрудник;
		СтрокаМВЗ.МВЗ = ТекущееМВЗ;
		
	КонецЕсли;

	Возврат ТекущийСотрудник;
	
КонецФункции

Функция ПолучитьДолжность(Параметры,ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.ДолжностиИПрофессии.ПустаяСсылка();
	КонецЕсли;
	
	ПоискПоКоду = Ложь;
	
	НаименованиеДолжности = СокрЛП(ОбъектXDTO.name);
	КодСинхронизации 	  = "";
	
	Если ОбъектXDTO.Установлено("code") Тогда 
		ПоискПоКоду = Истина;
		КодСинхронизации = ОбъектXDTO.code.code; 
	КонецЕсли;
	
	Если ПоискПоКоду Тогда 
		ТекущаяДолжность = Справочники.ДолжностиИПрофессии.НайтиПоРеквизиту("КодСинхронизации",КодСинхронизации);
	Иначе
		ТекущаяДолжность = Справочники.ДолжностиИПрофессии.НайтиПоНаименованию(НаименованиеДолжности,Истина);
	КонеЦЕсли;
	
	Если ТекущаяДолжность.Пустая() Тогда
		
		НоваяДолжность 						= Справочники.ДолжностиИПрофессии.СоздатьЭлемент();
		НоваяДолжность.Источник				= Перечисления.ИсточникиДолжностей.ВведеныВручную;
		НоваяДолжность.КодПоОКПДТР 			= ОбъектXDTO.okpdtr;
		НоваяДолжность.Наименование 		= НаименованиеДолжности;
		НоваяДолжность.НаименованиеПолное 	= НаименованиеДолжности;
		НоваяДолжность.КодСинхронизации     = КодСинхронизации;
		
		НоваяДолжность.УстановитьНовыйКод();
		
		ЗаписатьСправочник(НоваяДолжность,Параметры);
		
		ТекущаяДолжность = НоваяДолжность.Ссылка;
		
	Иначе
		
		Если Параметры.ИсправлятьНаименованияСуществующихДолжностей И ТекущаяДолжность.Наименование <> НаименованиеДолжности Тогда 
			
			ТекущаяДолжность = ТекущаяДолжность.ПолучитьОбъект();
			ТекущаяДолжность.Наименование = НаименованиеДолжности;
			
			ЗаписатьСправочник(ТекущаяДолжность,Параметры);
			
			ТекущаяДолжность = ТекущаяДолжность.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущаяДолжность;
	
КонецФункции	
	
Функция ПолучитьПодразделение(Параметры,ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	
	ИдентификаторПодразделения = ОбъектXDTO.code;
	НаименованиеПодразделения  = ОбъектXDTO.name;
	
	ТекущееПодразделение = Справочники.Подразделения.НайтиПоРеквизиту("КодСинхронизации",ИдентификаторПодразделения,,Параметры.Организация);
	
	Если ТекущееПодразделение.Пустая() Тогда 
		
		НовоеПодразделение 						= Справочники.Подразделения.СоздатьЭлемент();
		НовоеПодразделение.Владелец 			= Параметры.Организация;
		НовоеПодразделение.КодСинхронизации 	= ИдентификаторПодразделения;
		НовоеПодразделение.Наименование 		= НаименованиеПодразделения;
		НовоеПодразделение.НаименованиеПолное 	= НаименованиеПодразделения;
		НовоеПодразделение.Родитель 			= ПолучитьПодразделение(Параметры,ОбъектXDTO.owner);
		
		НовоеПодразделение.УстановитьНовыйКод();
		
		ЗаписатьСправочник(НовоеПодразделение,Параметры);
		
		ТекущееПодразделение = НовоеПодразделение.Ссылка;
		
	Иначе 
		
		Если Параметры.ИсправлятьНаименованияСуществующихПодразделений И НаименованиеПодразделения <> ТекущееПодразделение.Наименование  Тогда
			
			ТекущееПодразделение = ТекущееПодразделение.ПолучитьОбъект();
			ТекущееПодразделение.Наименование = НаименованиеПодразделения;
			
			ЗаписатьСправочник(ТекущееПодразделение,Параметры);
			
			ТекущееПодразделение = ТекущееПодразделение.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//МВЗ
	ТекущееМВЗ = ПолучитьМВЗ(Параметры,ОбъектXDTO.mvz);
	
	Если ЗначениеЗаполнено(ТекущееМВЗ) Тогда 
		
		СтрокаМВЗ = Параметры.ТаблицаМВЗПодразделений.Добавить();
		СтрокаМВЗ.Подразделение = ТекущееПодразделение;
		СтрокаМВЗ.МВЗ = ТекущееМВЗ;
		
	КонецЕсли;
	
	Возврат ТекущееПодразделение;
	
КонецФункции	

Функция ПолучитьРабочееМесто(Параметры,ОбъектXDTO)	
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.РабочиеМестаАСТБ.ПустаяСсылка();
	КонецЕсли;
	
	Наименование = ОбъектXDTO.name;
	КодСинхронизации = ОбъектXDTO.code;
	
	ТекущееРабочееМесто = Справочники.РабочиеМестаАСТБ.НайтиПоРеквизиту("КодСинхронизации",КодСинхронизации,,Параметры.Организация);
	
	Если ТекущееРабочееМесто.Пустая() Тогда
		
		НовоеРабочееМесто 					= Справочники.РабочиеМестаАСТБ.СоздатьЭлемент();
		НовоеРабочееМесто.Владелец 			= Параметры.Организация;
		НовоеРабочееМесто.КодСинхронизации 	= КодСинхронизации;
		НовоеРабочееМесто.Наименование 		= Наименование;
		НовоеРабочееМесто.УстановитьНовыйКод();
		
		ЗаписатьСправочник(НовоеРабочееМесто,Параметры);
		
		ТекущееРабочееМесто = НовоеРабочееМесто.Ссылка;
		
	Иначе
		
		Если Параметры.ИсправлятьНаименованияСуществующихРабочихМест И ТекущееРабочееМесто.Наименование <> Наименование Тогда 
			
			ТекущееРабочееМесто = ТекущееРабочееМесто.ПолучитьОбъект();
			ТекущееРабочееМесто.Наименование = Наименование;
			
			ЗаписатьСправочник(ТекущееРабочееМесто,Параметры);
			
			ТекущееРабочееМесто = ТекущееРабочееМесто.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущееРабочееМесто;
	
КонецФункции

Функция ЗагрузитьДокПриемНаРаботу(Параметры,ОбъектXDTO) 
	
	Если ОбъектXDTO = Неопределено Тогда 
		Возврат Документы.ПриемНаРаботу.ПустаяСсылка();
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	
	ЭтоСрезНаДату            = ОбъектXDTO.slice_to_date;
	ДатаВходящегоДокумента   = ?(ЭтоСрезНаДату,КонецДня(ОбъектXDTO.date),ОбъектXDTO.date);
	НомерВходящегоДокумента  = ОбъектXDTO.number; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботу.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.ВходящийНомер = &ВходящийНомер
	|	И ВЫБОР
	|			КОГДА &ЭтоСрезНаДату
	|				ТОГДА ПриемНаРаботу.Дата = &ДатаВходящегоДокумента
	|			ИНАЧЕ ПриемНаРаботу.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	|		КОНЕЦ
	|	И НЕ ПриемНаРаботу.ПометкаУдаления
	|	И ПриемНаРаботу.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ВходящийНомер", 			НомерВходящегоДокумента);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
	Запрос.УстановитьПараметр("ЭтоСрезНаДату", 			ЭтоСрезНаДату);
	Запрос.УстановитьПараметр("Организация", 			Параметры.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 		
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		МассивДокументов.Добавить(Документы.ПриемНаРаботу.ПустаяСсылка());
	КонецЕсли;
	
	Для Каждого Ссылка из МассивДокументов Цикл 
		
		Если Ссылка.Проведен Тогда 
			СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,Ссылка,"Не изменен, т.к. ранее проведен");
			Продолжить;
		КонецЕсли;
		
		Если Ссылка = Документы.ПриемНаРаботу.ПустаяСсылка() Тогда 
			
			ДокументОбъект = Документы.ПриемНаРаботу.СоздатьДокумент();			
		Иначе			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			
		КонецЕсли;
		
		ДокументОбъект.Организация 				= Параметры.Организация;
		ДокументОбъект.ВходящийНомер 			= НомерВходящегоДокумента;
		ДокументОбъект.ДатаВходящегоДокумента 	= ДатаВходящегоДокумента;
		ДокументОбъект.Комментарий 				= ОбъектXDTO.note;
		
		ДокументОбъект.Работники.Очистить();
		
		Для каждого ТекСтрока Из ОбъектXDTO.table Цикл
			
			НоваяСтрока = ДокументОбъект.Работники.Добавить();
			
			НоваяСтрока.Сотрудник  		 = ПолучитьСотрудника(Параметры,ТекСтрока.worker);
			НоваяСтрока.Подразделение    = ПолучитьПодразделение(Параметры,ТекСтрока.division);
			НоваяСтрока.Должность 		 = ПолучитьДолжность(Параметры,ТекСтрока.job);
			НоваяСтрока.РабочееМесто     = ПолучитьРабочееМесто(Параметры,ТекСтрока.workplace);
			НоваяСтрока.ЗанимаемыхСтавок = ТекСтрока.vacancy;
			НоваяСтрока.ДатаОкончания    = ТекСтрока.date_end;
			
		КонецЦикла;
		
		ЗаписатьДокумент(ДокументОбъект,?(ЭтоСрезНаДату,ДатаВходящегоДокумента,ТекущаяДата()),Параметры);
		
	КонецЦикла;
	
КонецФункции

Функция ЗагрузитьДокУвольнение(Параметры,ОбъектXDTO) 
	
	Если ОбъектXDTO = Неопределено Тогда 
		Возврат Документы.Увольнение.ПустаяСсылка();
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	
	ДатаВходящегоДокумента = ОбъектXDTO.date;
	НомерВходящегоДокумента  = ОбъектXDTO.number;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Увольнение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.ВходящийНомер = &ВходящийНомер
	|	И Увольнение.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	|	И НЕ Увольнение.ПометкаУдаления
	|	И Увольнение.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ВходящийНомер", НомерВходящегоДокумента);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 		
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		МассивДокументов.Добавить(Документы.Увольнение.ПустаяСсылка());
	КонецЕсли;
	
	Для Каждого Ссылка из МассивДокументов Цикл 
		
		Если Ссылка.Проведен Тогда 
			СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,Ссылка,"Не изменен, т.к. ранее проведен");
			Продолжить;
		КонецЕсли;

		Если Ссылка = Документы.Увольнение.ПустаяСсылка() Тогда 
			
			ДокументОбъект = Документы.Увольнение.СоздатьДокумент();			
		Иначе			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			
		КонецЕсли;
		
		ДокументОбъект.Организация 				= Параметры.Организация;
		ДокументОбъект.ВходящийНомер 			= НомерВходящегоДокумента;
		ДокументОбъект.ДатаВходящегоДокумента 	= ДатаВходящегоДокумента;
		ДокументОбъект.Комментарий 				= ОбъектXDTO.note;
		
		ДокументОбъект.Работники.Очистить();
		
		Для каждого ТекСтрока Из ОбъектXDTO.table Цикл
			
			НоваяСтрока = ДокументОбъект.Работники.Добавить();
			
			НоваяСтрока.Сотрудник  		 = ПолучитьСотрудника(Параметры,ТекСтрока.worker);
			НоваяСтрока.Подразделение    = ПолучитьПодразделение(Параметры,ТекСтрока.division);
			НоваяСтрока.Должность 		 = ПолучитьДолжность(Параметры,ТекСтрока.job);
			НоваяСтрока.РабочееМесто     = ПолучитьРабочееМесто(Параметры,ТекСтрока.workplace);
			НоваяСтрока.ЗанимаемыхСтавок = ТекСтрока.vacancy;
			
		КонецЦикла;
		
		ЗаписатьДокумент(ДокументОбъект,ТекущаяДата(),Параметры);
		
	КонецЦикла;
	
	
КонецФункции

Функция ЗагрузитьДокПеремещение(Параметры,ОбъектXDTO) 
	
	Если ОбъектXDTO = Неопределено Тогда 
		Возврат Документы.КадровоеПеремещение.ПустаяСсылка();
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	
	ДатаВходящегоДокумента   = ОбъектXDTO.date;
	НомерВходящегоДокумента  = ОбъектXDTO.number;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровоеПеремещение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КадровоеПеремещение КАК КадровоеПеремещение
	|ГДЕ
	|	КадровоеПеремещение.ВходящийНомер = &ВходящийНомер
	|	И КадровоеПеремещение.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	|	И НЕ КадровоеПеремещение.ПометкаУдаления
	|	И КадровоеПеремещение.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ВходящийНомер", НомерВходящегоДокумента);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 		
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		МассивДокументов.Добавить(Документы.КадровоеПеремещение.ПустаяСсылка());
	КонецЕсли;
	
	Для Каждого Ссылка из МассивДокументов Цикл 
		
		Если Ссылка.Проведен Тогда			
			СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,Ссылка,"Не изменен, т.к. ранее проведен");
			Продолжить;
		КонецЕсли;
				
		Если Ссылка = Документы.КадровоеПеремещение.ПустаяСсылка() Тогда 
			
			ДокументОбъект = Документы.КадровоеПеремещение.СоздатьДокумент();			
		Иначе			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			
		КонецЕсли;

		ДокументОбъект.Организация 				= Параметры.Организация;
		ДокументОбъект.ВходящийНомер 			= НомерВходящегоДокумента;
		ДокументОбъект.ДатаВходящегоДокумента 	= ДатаВходящегоДокумента;
		ДокументОбъект.Комментарий 				= ОбъектXDTO.note;
		
		ДокументОбъект.Работники.Очистить();
		
		Для каждого ТекСтрока Из ОбъектXDTO.table Цикл
			
			НоваяСтрока = ДокументОбъект.Работники.Добавить();
			
			НоваяСтрока.Сотрудник  		       = ПолучитьСотрудника(Параметры,ТекСтрока.worker);
			
			НоваяСтрока.ПодразделениеСтарое    = ПолучитьПодразделение(Параметры,ТекСтрока.division_old);
			НоваяСтрока.ДолжностьСтарая 	   = ПолучитьДолжность(Параметры,ТекСтрока.job_old);
			НоваяСтрока.РабочееМестоСтарое     = ПолучитьРабочееМесто(Параметры,ТекСтрока.workplace_old);
			НоваяСтрока.ЗанимаемыхСтавокСтарое = ТекСтрока.vacancy_old;
			
			НоваяСтрока.ПодразделениеНовое     = ПолучитьПодразделение(Параметры,ТекСтрока.division);
			НоваяСтрока.ДолжностьНовая 		   = ПолучитьДолжность(Параметры,ТекСтрока.job);
			НоваяСтрока.РабочееМестоНовое      = ПолучитьРабочееМесто(Параметры,ТекСтрока.workplace);
			НоваяСтрока.ЗанимаемыхСтавокНовое  = ТекСтрока.vacancy;
			НоваяСтрока.ДатаОкончания          = ТекСтрока.date_end;
			
		КонецЦикла;
		
		ЗаписатьДокумент(ДокументОбъект,ТекущаяДата(),Параметры);
				
	КонецЦикла;
	
КонецФункции

Функция ЗагрузитьДокОтсутствиеНаРабочемМесте(Параметры,ОбъектXDTO) 
	
	Если ОбъектXDTO = Неопределено Тогда 
		Возврат Документы.ОтсутствиеНаРабочемМесте.ПустаяСсылка();
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	
	ДатаВходящегоДокумента = ОбъектXDTO.date;
	НомерВходящегоДокумента  = ОбъектXDTO.number;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтсутствиеНаРабочемМесте.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтсутствиеНаРабочемМесте КАК ОтсутствиеНаРабочемМесте
	|ГДЕ
	|	ОтсутствиеНаРабочемМесте.ВходящийНомер = &ВходящийНомер
	|	И ОтсутствиеНаРабочемМесте.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	|	И НЕ ОтсутствиеНаРабочемМесте.ПометкаУдаления
	|	И ОтсутствиеНаРабочемМесте.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("ВходящийНомер", НомерВходящегоДокумента);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 		
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		МассивДокументов.Добавить(Документы.ОтсутствиеНаРабочемМесте.ПустаяСсылка());
	КонецЕсли;
	
	Для Каждого Ссылка из МассивДокументов Цикл 
		
		Если Ссылка.Проведен Тогда 
			СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,Ссылка,"Не изменен, т.к. ранее проведен");
			Продолжить;
		КонецЕсли;
		
		Если Ссылка = Документы.ОтсутствиеНаРабочемМесте.ПустаяСсылка() Тогда 
			
			ДокументОбъект = Документы.ОтсутствиеНаРабочемМесте.СоздатьДокумент();			
		Иначе			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			
		КонецЕсли;
		
		ДокументОбъект.Организация 				= Параметры.Организация;
		ДокументОбъект.ВходящийНомер 			= НомерВходящегоДокумента;
		ДокументОбъект.ДатаВходящегоДокумента 	= ДатаВходящегоДокумента;
		
		ДокументОбъект.Сотрудник  		 = ПолучитьСотрудника(Параметры,ОбъектXDTO.worker);
		ДокументОбъект.ДатаНачала        = ОбъектXDTO.date_begin;
		ДокументОбъект.ДатаОкончания     = ОбъектXDTO.date_end;
		ДокументОбъект.ПричинаОтсутствия = ПолучитьПричинуОстутствия(Параметры,ОбъектXDTO.reason);		
		ДокументОбъект.Комментарий 		 = ОбъектXDTO.note;		
		
		ЗаписатьДокумент(ДокументОбъект,ТекущаяДата(),Параметры);
		
	КонецЦикла;
	
КонецФункции

Процедура ВыполнитьОтложенноеПроведениеДокументов(Параметры)
	
	Если Параметры.ПроводитьДокументыПослеЗагрузки Тогда 
		
		Параметры.ДокументыДляОтложенногоПроведения.Сортировать("ИсходнаяДата,Порядок");
		
		Для Каждого СтрокаТаблицы из Параметры.ДокументыДляОтложенногоПроведения Цикл 
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда 
				Продолжить;
			КонецЕсли;
			
			Объект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			
			Попытка
				
				Если Объект.ПроверитьЗаполнение() Тогда 	
					
					Объект.Записать(РежимЗаписиДокумента.Проведение);
					
					ТекстЛога = "Проведен";		
				Иначе
					ТекстЛога = "Не проведен";
					
				КонецЕсли;
				
			Исключение				
				ТекстЛога = "Не проведен";
				
			КонецПопытки;
			
			СтруктурПоиска = Новый Структура("Ссылка",СтрокаТаблицы.Ссылка);
			МассивНайденныхСтрок = Параметры.ТаблицаЛогирования.НайтиСтроки(СтруктурПоиска);
			Для Каждого НайденнаяСтрока из МассивНайденныхСтрок Цикл 
				
				НайденнаяСтрока.Комментарий = НайденнаяСтрока.Комментарий + "," + ТекстЛога;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьОтложенноеПроведениеДокументов()

Функция ПолучитьПричинуОстутствия(Параметры,ПричинаОтсутствия)
	
	Причина = Справочники.ПричиныОтсутствияНаРаботе.НайтиПоНаименованию(ПричинаОтсутствия);
	
	Если Причина.Пустая() Тогда
		
		НовыйЭлемент 				= Справочники.ПричиныОтсутствияНаРаботе.СоздатьЭлемент();
		НовыйЭлемент.Наименование 	= ПричинаОтсутствия;
		НовыйЭлемент.УстановитьНовыйКод();
		
		ЗаписатьСправочник(НовыйЭлемент,Параметры);
		
		Причина = НовыйЭлемент.Ссылка;
		
	КонецЕсли;
	
	Возврат Причина;

КонецФункции // ПолучитьПричинуОстутствия()

Процедура ЗаписатьСправочник(СправочникОбъект,Параметры) 
	
	Если ЗначениеЗаполнено(СправочникОбъект.Ссылка) Тогда 
		ТекстЛога = "Изменен";
	Иначе
		ТекстЛога = "Создан";
	КонецЕсли;
	
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	СправочникОбъект.Записать();
	
	СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,СправочникОбъект.Ссылка,ТекстЛога);
	
КонецПроцедуры // ЗаписатьДокумент()

Процедура ЗаписатьДокумент(ДокументОбъект,Дата,Параметры) 
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ДокументОбъект.Дата 			  = Дата;			
		ДокументОбъект.Ответственный 	  = ПараметрыСеанса.ТекущийПользователь;
		ДокументОбъект.СоздательДокумента = ПараметрыСеанса.ТекущийПользователь;
		
		ДокументОбъект.УстановитьНовыйНомер();
		
		ТекстЛога = "Создан";
	Иначе
		ТекстЛога = "Изменен";
		
	КонецЕсли;
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	СтрокаОтложенногоПроведения = Параметры.ДокументыДляОтложенногоПроведения.Добавить();
	СтрокаОтложенногоПроведения.Ссылка       = ДокументОбъект.Ссылка;
	СтрокаОтложенногоПроведения.ИсходнаяДата = ?(ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.УстановкаМВЗПодразделений"),ТекущаяДата(),ДокументОбъект.ДатаВходящегоДокумента);
	СтрокаОтложенногоПроведения.Порядок = ПолучитьПорядокДокументаДляПроведения(ДокументОбъект.Ссылка);
	
	СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ДокументОбъект.Ссылка,ТекстЛога);
	
КонецПроцедуры // ЗаписатьДокумент()

Процедура ВыполнитьОтменуДокументов(СписокXDTO,Параметры)
	
	ТаблицаОтмены = Новый ТаблицаЗначений;
	ТаблицаОтмены.Колонки.Добавить("ДатаВходящегоДокумента",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаОтмены.Колонки.Добавить("НомерВходящегоДокумента",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	ТаблицаОтмены.Колонки.Добавить("ТипДокумента",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ТаблицаОтмены.Колонки.Добавить("ПометкаУдаления",Новый ОписаниеТипов("Булево"));
	ТаблицаОтмены.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Для Каждого ОбъектXDTO из СписокXDTO Цикл 
		
		НоваяСтрока = ТаблицаОтмены.Добавить();
		НоваяСтрока.ТипДокумента = ОбъектXDTO.doc_type;
		НоваяСтрока.ДатаВходящегоДокумента = ОбъектXDTO.date;
		НоваяСтрока.НомерВходящегоДокумента = ОбъектXDTO.number;
		НоваяСтрока.ПометкаУдаления = ОбъектXDTO.deletionmark;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОтмены.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ТаблицаОтмены.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ТаблицаОтмены.ТипДокумента КАК ТипДокумента,
	|	ТаблицаОтмены.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ ВТ_ТаблицаОтмены
	|ИЗ
	|	&ТаблицаОтмены КАК ТаблицаОтмены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Увольнение.Ссылка КАК Ссылка,
	|	Увольнение.Проведен КАК Проведен,
	|	Увольнение.ПометкаУдаления КАК ПометкаУдаления,
	|	ВТ_ТаблицаОтмены.ПометкаУдаления КАК ПометкаУдаленияНовая
	|ИЗ
	|	ВТ_ТаблицаОтмены КАК ВТ_ТаблицаОтмены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
	|		ПО ВТ_ТаблицаОтмены.ДатаВходящегоДокумента = Увольнение.ДатаВходящегоДокумента
	|			И ВТ_ТаблицаОтмены.НомерВходящегоДокумента = Увольнение.ВходящийНомер
	|			И (ВТ_ТаблицаОтмены.ТипДокумента = ""Doc_dismissal"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтсутствиеНаРабочемМесте.Ссылка КАК Ссылка,
	|	ОтсутствиеНаРабочемМесте.Проведен КАК Проведен,
	|	ОтсутствиеНаРабочемМесте.ПометкаУдаления КАК ПометкаУдаления,
	|	ВТ_ТаблицаОтмены.ПометкаУдаления КАК ПометкаУдаленияНовая
	|ИЗ
	|	ВТ_ТаблицаОтмены КАК ВТ_ТаблицаОтмены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтсутствиеНаРабочемМесте КАК ОтсутствиеНаРабочемМесте
	|		ПО ВТ_ТаблицаОтмены.ДатаВходящегоДокумента = ОтсутствиеНаРабочемМесте.ДатаВходящегоДокумента
	|			И ВТ_ТаблицаОтмены.НомерВходящегоДокумента = ОтсутствиеНаРабочемМесте.ВходящийНомер
	|			И (ВТ_ТаблицаОтмены.ТипДокумента = ""Doc_absence"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровоеПеремещение.Ссылка КАК Ссылка,
	|	КадровоеПеремещение.Проведен КАК Проведен,
	|	КадровоеПеремещение.ПометкаУдаления КАК ПометкаУдаления,
	|	ВТ_ТаблицаОтмены.ПометкаУдаления КАК ПометкаУдаленияНовая
	|ИЗ
	|	ВТ_ТаблицаОтмены КАК ВТ_ТаблицаОтмены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещение КАК КадровоеПеремещение
	|		ПО ВТ_ТаблицаОтмены.ДатаВходящегоДокумента = КадровоеПеремещение.ДатаВходящегоДокумента
	|			И ВТ_ТаблицаОтмены.НомерВходящегоДокумента = КадровоеПеремещение.ВходящийНомер
	|			И (ВТ_ТаблицаОтмены.ТипДокумента = ""Doc_moving"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриемНаРаботу.Ссылка КАК Ссылка,
	|	ПриемНаРаботу.Проведен КАК Проведен,
	|	ПриемНаРаботу.ПометкаУдаления КАК ПометкаУдаления,
	|	ВТ_ТаблицаОтмены.ПометкаУдаления КАК ПометкаУдаленияНовая
	|ИЗ
	|	ВТ_ТаблицаОтмены КАК ВТ_ТаблицаОтмены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ПО ВТ_ТаблицаОтмены.ДатаВходящегоДокумента = ПриемНаРаботу.ДатаВходящегоДокумента
	|			И ВТ_ТаблицаОтмены.НомерВходящегоДокумента = ПриемНаРаботу.ВходящийНомер
	|			И (ВТ_ТаблицаОтмены.ТипДокумента = ""Doc_recruitment"")";
	
	Запрос.УстановитьПараметр("ТаблицаОтмены",ТаблицаОтмены);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	//отменяем увольнения
	ВыборкаУвольнения = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаУвольнения.Следующий() Цикл
		
		Если Параметры.РазрешитьОтменятьУвольнения Тогда 
			
			Попытка
				
				Если ВыборкаУвольнения.Проведен Тогда 
					
					ОбъектДокумента = ВыборкаУвольнения.Ссылка.ПолучитьОбъект();
					ОбъектДокумента.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					
				КонецЕсли;
				
				Если ВыборкаУвольнения.ПометкаУдаленияНовая И НЕ ВыборкаУвольнения.ПометкаУдаления Тогда 
					
					ОбъектДокумента = ВыборкаУвольнения.Ссылка.ПолучитьОбъект();
					ОбъектДокумента.УстановитьПометкуУдаления(Истина);
					
				КонецЕсли;
				
				СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ВыборкаУвольнения.Ссылка,"Отменен!");				
			Исключение				
				СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ВыборкаУвольнения.Ссылка,"Отменить не удалось!");
				
			КонецПопытки;
			
		Иначе
			СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ВыборкаУвольнения.Ссылка,"Не отменен! В АСТБ запрещено отменять документы увольнений");
		КонецЕсли;
		
	КонецЦикла;
	
	//отменяем отсутствия на раб местах
	ВыборкаОтсутствия = РезультатЗапроса[2].Выбрать();
	Пока ВыборкаОтсутствия.Следующий() Цикл
		
		Если Параметры.РазрешитьОтменятьОтсутствияНаРабочихМестах Тогда 
			
			Попытка
				
				Если ВыборкаОтсутствия.Проведен Тогда 
					
					ОбъектДокумента = ВыборкаОтсутствия.Ссылка.ПолучитьОбъект();
					ОбъектДокумента.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					
				КонецЕсли;
				
				Если ВыборкаОтсутствия.ПометкаУдаленияНовая И НЕ ВыборкаОтсутствия.ПометкаУдаления Тогда 
					
					ОбъектДокумента = ВыборкаОтсутствия.Ссылка.ПолучитьОбъект();
					ОбъектДокумента.УстановитьПометкуУдаления(Истина);
					
				КонецЕсли;
				
				СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ВыборкаОтсутствия.Ссылка,"Отменен!");				
			Исключение				
				СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ВыборкаОтсутствия.Ссылка,"Отменить не удалось!");
				
			КонецПопытки;
			
		Иначе
			СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ВыборкаОтсутствия.Ссылка,"Не отменен! В АСТБ запрещено отменять документы отсутствий на рабочих местах");
		КонецЕсли;
		
	КонецЦикла;
	
	// отменяем кадровое перемещение
	ВыборкаПеремещения = РезультатЗапроса[3].Выбрать();
	Пока ВыборкаПеремещения.Следующий() Цикл
		
		Если Параметры.РазрешитьОтменятьКадровыеПеремещения Тогда 
			
			Попытка
				
				Если ВыборкаПеремещения.Проведен Тогда 
					
					ОбъектДокумента = ВыборкаПеремещения.Ссылка.ПолучитьОбъект();
					ОбъектДокумента.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					
				КонецЕсли;
				
				Если ВыборкаПеремещения.ПометкаУдаленияНовая И НЕ ВыборкаПеремещения.ПометкаУдаления Тогда 
					
					ОбъектДокумента = ВыборкаПеремещения.Ссылка.ПолучитьОбъект();
					ОбъектДокумента.УстановитьПометкуУдаления(Истина);
					
				КонецЕсли;
				
				СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ВыборкаПеремещения.Ссылка,"Отменен!");				
			Исключение				
				СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ВыборкаПеремещения.Ссылка,"Отменить не удалось!");
				
			КонецПопытки;
			
		Иначе
			СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ВыборкаПеремещения.Ссылка,"Не отменен! В АСТБ запрещено отменять документы кадровых перемещений");
		КонецЕсли;
		
	КонецЦикла;
	
	
	//отменяем приемы на работу
	ВыборкаПриемы = РезультатЗапроса[4].Выбрать();
	Пока ВыборкаПриемы.Следующий() Цикл
		
		Если Параметры.РазрешитьОтменятьПриемыНаРаботу Тогда 
			
			Попытка
				
				Если ВыборкаПриемы.Проведен Тогда 
					
					ОбъектДокумента = ВыборкаПриемы.Ссылка.ПолучитьОбъект();
					ОбъектДокумента.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					
				КонецЕсли;
				
				Если ВыборкаПриемы.ПометкаУдаленияНовая И НЕ ВыборкаПриемы.ПометкаУдаления Тогда 
					
					ОбъектДокумента = ВыборкаПриемы.Ссылка.ПолучитьОбъект();
					ОбъектДокумента.УстановитьПометкуУдаления(Истина);
					
				КонецЕсли;
				
				СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ВыборкаПриемы.Ссылка,"Отменен!");				
			Исключение				
				СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ВыборкаПриемы.Ссылка,"Отменить не удалось!");
				
			КонецПопытки;
			
		Иначе
			СформироватьСтрокуЛога(Параметры.ТаблицаЛогирования,ВыборкаПриемы.Ссылка,"Не отменен! В АСТБ запрещено отменять документы приема на работу");
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры


