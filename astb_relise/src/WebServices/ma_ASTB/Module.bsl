//+++Рохин
#Область Доработка_По_задачам
//++ Рохин(76498) задача 
Функция ТекстЗапросаBasicData()
	
	ТекстЗапроса="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Подразделение КАК Подразделение,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Должность КАК Должность,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Организация КАК Организация,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Организация.СкладПоУмолчанию КАК ОрганизацияСкладПоУмолчанию,
	|	СкладыВыдачиСредствЗащиты.Склад КАК ПерсональныйСклад,
	|	СкладыВыдачиСредствЗащиты1.Склад КАК ОсновнойСкладорганизации
	|ПОМЕСТИТЬ ВТ_ОсновныеДанные
	|ИЗ
	|	РегистрСведений.ОсновноеМестоРаботыСотрудника.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК ОсновноеМестоРаботыСотрудникаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
	|		ПО (СкладыВыдачиСредствЗащиты.Получатель = &Сотрудник)
	|			И (СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты1
	|		ПО (СкладыВыдачиСредствЗащиты1.Получатель = &Сотрудник)
	|			И (СкладыВыдачиСредствЗащиты1.Склад = ОсновноеМестоРаботыСотрудникаСрезПоследних.Организация.СкладПоУмолчанию)
	|			И (СкладыВыдачиСредствЗащиты1.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача))
	|ГДЕ
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.ОсновноеМестоРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОсновныеДанные.Подразделение КАК Подразделение,
	|	ВТ_ОсновныеДанные.Должность КАК Должность,
	|	ВТ_ОсновныеДанные.РабочееМесто КАК РабочееМесто,
	|	ВЫБОР
	|		КОГДА ВТ_ОсновныеДанные.ОрганизацияСкладПоУмолчанию.Ссылка <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяССЫЛКА)
	|				И ВТ_ОсновныеДанные.ОсновнойСкладорганизации = ВТ_ОсновныеДанные.ОрганизацияСкладПоУмолчанию.Ссылка
	|			ТОГДА ВТ_ОсновныеДанные.ОсновнойСкладорганизации
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ОсновныеДанные.ОрганизацияСкладПоУмолчанию ЕСТЬ НЕ NULL 
	|						И ВТ_ОсновныеДанные.ОсновнойСкладорганизации ЕСТЬ NULL
	|					ТОГДА ВТ_ОсновныеДанные.ПерсональныйСклад
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяССЫЛКА)
	|			КОНЕЦ
	|	КОНЕЦ КАК МестоХранения
	|ИЗ
	|	ВТ_ОсновныеДанные КАК ВТ_ОсновныеДанные";
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- Рохин(76498) задача 

//++ Рохин(76526) задача 

Функция ПолучитьСправочникВидовуслуг()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыУслуг.Наименование КАК Наименование,
	|	ВидыУслуг.Код КАК Код
	|ИЗ
	|	Справочник.ВидыУслуг КАК ВидыУслуг
	|ГДЕ
	|	НЕ ВидыУслуг.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат результатЗапроса.Выгрузить();
	
КонецФункции

Процедура СоздатьЗаписьКачествоУслуг(ФизЛицо,ВидУслуги,Оценка,Комментарий)
	
	МенеджерЗаписи = РегистрыСведений.ОбратнаяСвязьКачествоУслуг.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	менеджерЗаписи.ФизЛицо = ФизЛицо ;
	МенеджерЗаписи.ВидУслуги = ВидУслуги;
	МенеджерЗаписи.Оценка = Оценка;
	МенеджерЗаписи.Комментарий = Комментарий;
	МенеджерЗАписи.Записать(Истина);
	
КонецПроцедуры


Функция ServiceQuality(Telephone,Service,Quality,Comment,ErrorMessage)
	
	//Трегубов.А.А. 130721
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник 	= ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	Услуга 		= Справочники.ВидыУслуг.НайтиПоКоду(Service);
	
	Если Не ЗначениеЗаполнено(Услуга) Тогда
		ErrorMessage = "Не найдена услуга";
	ИначеЕСли НЕ  ЗначениеЗаполнено(Сотрудник)  Тогда
		ErrorMessage = "Не найден сотрудник";
	Иначе
		ErrorMessage = "";	
	КонецЕСли;
	
	Если ErrorMessage = "" Тогда
		Попытка
			СоздатьЗаписьКачествоУслуг(Сотрудник.ФизическоеЛицо,Услуга,Quality,Comment);
		Исключение
			ErrorMessage = ОписаниеОшибки();
		КонецПопытки;
	КонецЕСли;
	
КонецФункции

Функция GetQualityServices(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Попытка
		ТаблицаДанныхПоУслугам  = ПолучитьСправочникВидовуслуг();
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаДанныхПоУслугам);	
	
КонецФункции

//-- Рохин(76526) задача 

//++ Рохин(76514) задача 
Функция ПолучитьСогласие(Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СогласияНаОбработкуПерсональныхДанныхСрезПоследних.Субъект КАК Субъект,
	|	СогласияНаОбработкуПерсональныхДанныхСрезПоследних.Действует КАК Действует,
	|	СогласияНаОбработкуПерсональныхДанныхСрезПоследних.СрокДействия КАК СрокДействия
	|ИЗ
	|	РегистрСведений.СогласияНаОбработкуПерсональныхДанных.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И Субъект = &Субъект
	|				И Действует) КАК СогласияНаОбработкуПерсональныхДанныхСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Сотрудник.Владелец);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Субъект", Сотрудник.ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция GetApproval(Telephone,ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	Попытка
		Согласие  = ПолучитьСогласие(Сотрудник);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(Согласие);	
	
КонецФункции

Функция УстановитьСогласие(Сотрудник);
	
	ДокументСогласие=Документы.СогласиеНаОбработкуПерсональныхДанных.СоздатьДокумент();
	ДокументСогласие.Дата=ТекущаяДата();
	ДокументСогласие.ДатаПолучения=ТекущаяДата();
	ДокументСогласие.СрокДействия=ТекущаяДата();
	ДокументСогласие.Субъект=Сотрудник.ФизическоеЛицо;
	ДокументСогласие.Организация=Сотрудник.Владелец;
	Попытка 
		ДокументСогласие.Записать(РежимЗаписиДокумента.Проведение);
		Возврат Истина;
	Исключение
		ДокументСогласие.Записать(РежимЗаписиДокумента.Запись);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция SetApproval(Telephone,ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	Согласие  = ПолучитьСогласие(Сотрудник);
	Попытка
		ЕСли Сотрудник<>Справочники.Сотрудники.ПустаяСсылка() и Не Согласие Тогда
			УстановитьСогласие  = УстановитьСогласие(Сотрудник);
		Иначе
			УстановитьСогласие=Ложь;
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(УстановитьСогласие);	
	
КонецФункции

//-- Рохин(76514) задача

//-- Рохин(76476) задача
Функция ПолучитьДанныеПоСкладу(StorageCode,Сотрудник)
	
	СтруктураДанных=Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкладыКонтактнаяИнформация.Ссылка.Наименование КАК Наименование,
	|	СкладыКонтактнаяИнформация.Вид КАК Вид,
	|	СкладыКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	|ГДЕ
	|	СкладыКонтактнаяИнформация.Ссылка.Код = &StorageCode";
	
	Запрос.УстановитьПараметр("StorageCode", StorageCode);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураДанных.Вставить(Строка(ВыборкаДетальныеЗаписи.Вид.ИмяПредопределенныхДанных),Строка(ВыборкаДетальныеЗаписи.Представление));
	КонецЦикла;
	
	СтруктураДанных.Вставить("Наименование",ВыборкаДетальныеЗаписи.Наименование);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция StorageData(Telephone,StorageCode,ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	Попытка
		Склад=ПолучитьДанныеПоСкладу(StorageCode,Сотрудник);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(Склад);
	
КонецФункции
//-- Рохин(76476) задача

Функция  ПолучитьГрафикВыдачиПоСотрудникуРасширенный(Сотрудник,НоменклатураНормы)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Сотрудник.Наименование КАК _Сотрудник,
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Подразделение.Наименование КАК _Подразделение,
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Должность.Наименование КАК _Должность,
		|	СоответствияНоменклатурыВыдачиСрезПоследних.НоменклатураНормыОрганизации.Наименование КАК НоменклатураНормыОрганизации,
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура.Артикул КАК НоменклатураАртикул,
		|	ПРЕДСТАВЛЕНИЕ(СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура.ВидСИЗ.КатегорияВидаСИЗ) КАК НоменклатураВидСИЗКатегорияВидаСИЗ,
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура.Наименование КАК Номенклатура,
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Приоритет КАК Приоритет
		|ИЗ
		|	РегистрСведений.СоответствияНоменклатурыВыдачи.СрезПоследних(
		|			&ДатаВыборки,
		|			НоменклатураНормыОрганизации.Владелец = &Организация
		|				И Сотрудник = &Сотрудник
		|				И НоменклатураНормыОрганизации = &НоменклатураНормы) КАК СоответствияНоменклатурыВыдачиСрезПоследних
		|		Левое СОЕДИНЕНИЕ РегистрСведений.ОценкиНоменклатуры КАК ОценкиНоменклатуры
		|		ПО СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура = ОценкиНоменклатуры.Номенклатура
		|			И СоответствияНоменклатурыВыдачиСрезПоследних.Сотрудник = ОценкиНоменклатуры.Сотрудник
		|ГДЕ
		|	НЕ СоответствияНоменклатурыВыдачиСрезПоследних.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	И НЕ СоответствияНоменклатурыВыдачиСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|	И НЕ СоответствияНоменклатурыВыдачиСрезПоследних.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
		|	И СоответствияНоменклатурыВыдачиСрезПоследних.Использовать
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Сотрудник.Наименование,
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Подразделение.Наименование,
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Должность.Наименование,
		|	СоответствияНоменклатурыВыдачиСрезПоследних.НоменклатураНормыОрганизации.Наименование,
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура.Артикул,
		|	ПРЕДСТАВЛЕНИЕ(СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура.ВидСИЗ.КатегорияВидаСИЗ),
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура.Наименование,
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Приоритет
		|ИЗ
		|	РегистрСведений.СоответствияНоменклатурыВыдачи.СрезПоследних(
		|			&ДатаВыборки,
		|			НоменклатураНормыОрганизации.Владелец = &Организация
		|				И Сотрудник = &Сотрудник) КАК СоответствияНоменклатурыВыдачиСрезПоследних
		|		Левое СОЕДИНЕНИЕ РегистрСведений.ОценкиНоменклатуры КАК ОценкиНоменклатуры
		|		ПО СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура = ОценкиНоменклатуры.Номенклатура
		|			И СоответствияНоменклатурыВыдачиСрезПоследних.Сотрудник = ОценкиНоменклатуры.Сотрудник
		|ГДЕ
		|	СоответствияНоменклатурыВыдачиСрезПоследних.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	И СоответствияНоменклатурыВыдачиСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|	И СоответствияНоменклатурыВыдачиСрезПоследних.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
		|	И СоответствияНоменклатурыВыдачиСрезПоследних.Использовать";
	
	Запрос.УстановитьПараметр("ДатаВыборки", ТекущаяДата());
	Запрос.УстановитьПараметр("НоменклатураНормы", НоменклатураНормы);
	Запрос.УстановитьПараметр("Организация", НоменклатураНормы.Владелец);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат  РезультатЗапроса;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции


Функция DeliveryCalendarExtended(Telephone, UUID, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	Попытка
		НоменклатураНормы = Справочники.НоменклатураНормОрганизации.ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
	ИСключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
		
	ErrorMessage = "";
	
	Попытка
		ГрафикВыдачиРасширенный = ПолучитьГрафикВыдачиПоСотрудникуРасширенный(Сотрудник,НоменклатураНормы);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ГрафикВыдачиРасширенный);
	
КонецФункции

Процедура ПолучитьТаблицуДанныхПоМестамПолученияРасш(ТаблицаДанныхПоМестамПолучения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаПолучения.Код КАК Код,
	|	МестаПолучения.Наименование КАК МестоПолучения
	|ИЗ
	|	Справочник.МестаПолучения КАК МестаПолучения";
	
	ТаблицаДанныхПоМестамПолучения = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры


Функция GetPlacesIssue(ErrorMessage)
	Попытка
	ТаблицаДанныхПоМестамПолучения =Новый ТаблицаЗначений ; 
	ПолучитьТаблицуДанныхПоМестамПолученияРасш(ТаблицаДанныхПоМестамПолучения);
	Исключение
			ErrorMessage = ОписаниеОшибки();
	КонецПопытки;

	Возврат  СериализаторXDTO.ЗаписатьXDTO(ТаблицаДанныхПоМестамПолучения);
	// Вставить содержимое обработчика.
КонецФункции

#КонецОбласти
//---Рохин

Функция DownloadMessage(Category, Message, ErrorMessage)
	
	ErrorMessage 		= "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ЗагрузитьОбращение(ВнешнийПользователь.ОбъектАвторизации, Category, Message);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция DownloadRequest(DateTime, Point, Comment, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ЗагрузитьЗаявкуНаПолучение(ВнешнийПользователь.ОбъектАвторизации, DateTime, Point, Comment);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция GetBasicData(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	СтруктураОсновныхДанных = Новый Структура;
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьОсновныеДанные(ВнешнийПользователь.ОбъектАвторизации,СтруктураОсновныхДанных);
		Если СтруктураОсновныхДанных.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по сотруднику!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СтруктураОсновныхДанных);
	
КонецФункции

Функция GetCleaning(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьДанныеПоЧистке(ВнешнийПользователь.ОбъектАвторизации,ТабличныйДокумент);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТабличныйДокумент);
	
КонецФункции

Функция GetContactsAndSize(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	СтруктураКонтактныхДанныхИАнтропометрии = Новый Структура;
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьКонтактныеДанныеИАнтропометрию(ВнешнийПользователь.ОбъектАвторизации,СтруктураКонтактныхДанныхИАнтропометрии);
		Если СтруктураКонтактныхДанныхИАнтропометрии.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по сотруднику!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СтруктураКонтактныхДанныхИАнтропометрии);
	
КонецФункции

Функция GetGiveNorms(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьНормыВыдачи(ВнешнийПользователь.ОбъектАвторизации,ТабличныйДокумент);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТабличныйДокумент);
	
КонецФункции

Функция GetMessages(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьОбращения(ВнешнийПользователь.ОбъектАвторизации,ТабличныйДокумент);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТабличныйДокумент);
	
КонецФункции

Функция NewSubscriberID(XDTO_ID, Telephone, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	Идентификатор = СериализаторXDTO.ПрочитатьXDTO(XDTO_ID);
	
	ErrorMessage = "";
	
	Попытка
		УстановитьНовыйИдентификатор(Сотрудник.ФизическоеЛицо,Идентификатор);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция DownloadUserSettings(Messages, GetPersonalProtectionGear)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		УстановитьНастройкиУведомлений(ВнешнийПользователь.ОбъектАвторизации,Messages,GetPersonalProtectionGear);
	Исключение
	КонецПопытки;
	
КонецФункции

Процедура ЗагрузитьОбращение(ФизическоеЛицо, Category, Message)
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ФизическоеЛицо);
	
	НовыйДокумент = Документы.ОбращениеНаСклад.СоздатьДокумент();
	НовыйДокумент.Дата 					= ТекущаяДата();
	НовыйДокумент.КатегорияОбращения 	= Справочники.КатегорииОбращенияНаСклад[Category];
	НовыйДокумент.Организация 			= Сотрудник.Владелец;
	НовыйДокумент.СодержаниеОбращения 	= Message;
	НовыйДокумент.СоздательДокумента 	= ВнешниеПользователи.ТекущийВнешнийПользователь();
	НовыйДокумент.Сотрудник 			= Сотрудник;
	НовыйДокумент.СтатусОбращения 		= Перечисления.СтатусыОбращенийНаСклад.Открыто;
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ЗагрузитьЗаявкуНаПолучение(ФизическоеЛицо, DateTime, Point, Comment)
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ФизическоеЛицо);
	
	МестоПолучения = Справочники.МестаПолучения.НайтиПоНаименованию(Point,Истина);
	
	Если МестоПолучения.Пустая() Тогда
		ТекущееМестоПолучения = Point;
	Иначе
		ТекущееМестоПолучения = МестоПолучения.Наименование;
	КонецЕсли;
	
	НовыйДокумент = Документы.ОбращениеНаСклад.СоздатьДокумент();
	НовыйДокумент.Дата 					= ТекущаяДата();
	НовыйДокумент.КатегорияОбращения 	= Справочники.КатегорииОбращенияНаСклад.ЗаявкаНаПолучение;
	НовыйДокумент.Организация 			= Сотрудник.Владелец;
	НовыйДокумент.СодержаниеОбращения 	= "Желаемое место получения средств защиты: < " + ТекущееМестоПолучения + " >";
	НовыйДокумент.СоздательДокумента 	= ВнешниеПользователи.ТекущийВнешнийПользователь();
	НовыйДокумент.Сотрудник 			= Сотрудник;
	НовыйДокумент.СтатусОбращения 		= Перечисления.СтатусыОбращенийНаСклад.Открыто;
	НовыйДокумент.ДатаПолучения			= DateTime;
	НовыйДокумент.МестоПолучения		= МестоПолучения;
	НовыйДокумент.Комментарий			= Comment;
	НовыйДокумент.Склад					= ПроцедурыРаботыСНормамиСервер.ПолучитьСкладВыдачи(Справочники.Подразделения.ПустаяСсылка(),Сотрудник,Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача);
	Документы.ОбращениеНаСклад.ЗаполнитьТаблицуДокумента(НовыйДокумент);
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ПолучитьОсновныеДанные(ФизическоеЛицо,СтруктураОсновныхДанных)
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ФизическоеЛицо);
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		ПредставлениеВнешнегоПользователя = Сотрудник.Владелец.ПредставлениеВнешнегоПользователя;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(, ФизическоеЛицо = &ФизическоеЛицо) КАК ФИОФизическихЛицСрезПоследних";
		
		Запрос.УстановитьПараметр("ФизическоеЛицо",ФизическоеЛицо);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() ИЛИ ПредставлениеВнешнегоПользователя = Перечисления.ПредставлениеВнешнегоПользователя.ТабельныйНомер Тогда
			СтруктураОсновныхДанных.Вставить("Фамилия",	"<Не доступно>");
			СтруктураОсновныхДанных.Вставить("Имя",		"<Не доступно>");
			СтруктураОсновныхДанных.Вставить("Отчество","<Не доступно>");
		Иначе
			ТаблицаЗапроса = Результат.Выгрузить();
			СтруктураОсновныхДанных.Вставить("Фамилия",	ТаблицаЗапроса[0].Фамилия);
			СтруктураОсновныхДанных.Вставить("Имя",		ТаблицаЗапроса[0].Имя);
			СтруктураОсновныхДанных.Вставить("Отчество",ТаблицаЗапроса[0].Отчество);
		КонецЕсли;
		
		СтруктураОсновныхДанных.Вставить("ТабельныйНомер",Сотрудник.ТабельныйНомер);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Подразделение,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Должность,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.РабочееМесто
	|ИЗ
	|	РегистрСведений.ОсновноеМестоРаботыСотрудника.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК ОсновноеМестоРаботыСотрудникаСрезПоследних
	|ГДЕ
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.ОсновноеМестоРаботы";
	
	Запрос.УстановитьПараметр("Период",		ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник",	Сотрудник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		СтруктураОсновныхДанных.Вставить("Организация",		"<Не определено>");
		СтруктураОсновныхДанных.Вставить("Подразделение",	"<Не определено>");
		СтруктураОсновныхДанных.Вставить("Должность",		"<Не определено>");
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтруктураОсновныхДанных.Вставить("Организация",		Сотрудник.Владелец.Наименование);
		СтруктураОсновныхДанных.Вставить("Должность",		Выборка.Должность.Наименование);
		СтруктураОсновныхДанных.Вставить("Подразделение",	Выборка.Подразделение.Наименование);
		СтруктураОсновныхДанных.Вставить("МестоХранения",	?(ЗначениеЗаполнено(Сотрудник.МестоХраненияСИЗ),СокрЛП(Сотрудник.МестоХраненияСИЗ.Код),"<Не определено>"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоЧистке(ФизическоеЛицо,ТабличныйДокумент)
	
	СхемаКомпоновкиДанных = Обработки.РабочийСтолВнешнегоПользователя.ПолучитьМакет("СредстваЗащитыВЧистке");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[1];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры	

Процедура ПолучитьКонтактныеДанныеИАнтропометрию(ФизическоеЛицо,СтруктураКонтактныхДанныхИАнтропометрии)
	
	НайденныеСтрокиСТелефоном = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонФизическиеЛица));
	Если НайденныеСтрокиСТелефоном.Количество() = 0 Тогда
		ПредставлениеТелефона = "не задан";
	Иначе
		ПредставлениеТелефона = НайденныеСтрокиСТелефоном[0].Представление;
	КонецЕсли;	
	
	НайденныеСтрокиСТелефоном = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица));
	Если НайденныеСтрокиСТелефоном.Количество() = 0 Тогда
		ПредставлениеПочты = "не задан";
	Иначе
		ПредставлениеПочты = НайденныеСтрокиСТелефоном[0].Представление;
	КонецЕсли;
	
	СтруктураКонтактныхДанныхИАнтропометрии.Вставить("Телефон",	ПредставлениеТелефона);
	СтруктураКонтактныхДанныхИАнтропометрии.Вставить("Почта",	ПредставлениеПочты);
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ФизическоеЛицо);
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияАнтропометрическихСвойств.ВидСвойства КАК ВидСвойства,
	|	ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК ЗначениеСвойства
	|ПОМЕСТИТЬ ВТ_Антропометрия
	|ИЗ
	|	РегистрСведений.ЗначенияАнтропометрическихСвойств КАК ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ЗначенияАнтропометрическихСвойств.Сотрудник = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыАнтропометрическихСвойств.Ссылка КАК ВидСвойства,
	|	ЕСТЬNULL(ВТ_Антропометрия.ЗначениеСвойства, ""не задан"") КАК ЗначениеСвойства
	|ИЗ
	|	Справочник.ВидыАнтропометрическихСвойств КАК ВидыАнтропометрическихСвойств
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Антропометрия КАК ВТ_Антропометрия
	|		ПО ВидыАнтропометрическихСвойств.Ссылка = ВТ_Антропометрия.ВидСвойства";
	
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураКонтактныхДанныхИАнтропометрии.Вставить("РазмерГоловногоУбора",ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.РазмерГоловногоУбора))[0].ЗначениеСвойства);
	СтруктураКонтактныхДанныхИАнтропометрии.Вставить("РазмерОбуви",			ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.РазмерОбуви))[0].ЗначениеСвойства);
	СтруктураКонтактныхДанныхИАнтропометрии.Вставить("РазмерОдежды",		ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.РазмерОдежды))[0].ЗначениеСвойства);
	СтруктураКонтактныхДанныхИАнтропометрии.Вставить("РазмерПерчаток",		ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.РазмерПерчаток))[0].ЗначениеСвойства);
	СтруктураКонтактныхДанныхИАнтропометрии.Вставить("Рост",				ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.Рост))[0].ЗначениеСвойства);
	
КонецПроцедуры

Процедура ПолучитьНормыВыдачи(ФизическоеЛицо,ТабличныйДокумент)
	
	СхемаКомпоновкиДанных = Обработки.РабочийСтолВнешнегоПользователя.ПолучитьМакет("НормыВыдачиСпецодежды");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[1];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
КонецПроцедуры	

Процедура ПолучитьОбращения(ФизическоеЛицо,ТабличныйДокумент)
	
	СхемаКомпоновкиДанных = Обработки.РабочийСтолВнешнегоПользователя.ПолучитьМакет("ОбращенияСотрудника");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[1];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	
КонецПроцедуры

Процедура УстановитьНовыйИдентификатор(ФизическоеЛицо,Идентификатор)
	
	ФизЛицоОбъект = ФизическоеЛицо.ПолучитьОбъект();
	ФизЛицоОбъект.ИдентификаторПодписчикаДоставляемыхУведомлений = Новый ХранилищеЗначения(Идентификатор);
	ФизЛицоОбъект.Записать();	
	
КонецПроцедуры	

Процедура УстановитьНастройкиУведомлений(ФизическоеЛицо,Messages,GetPersonalProtectionGear)
	
	ФизЛицоОбъект = ФизическоеЛицо.ПолучитьОбъект();
	ФизЛицоОбъект.УведомлятьОбОбработкеОбращений 	= (Messages = "1");
	ФизЛицоОбъект.УведомлятьОПолученииСредствЗащиты = (GetPersonalProtectionGear = "1");
	ФизЛицоОбъект.Записать();	
	
КонецПроцедуры

Функция GetCleaningTable(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаДанныхПоЧистке = Новый ТаблицаЗначений;
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьТаблицуДанныхПоЧистке(ВнешнийПользователь.ОбъектАвторизации,ТаблицаДанныхПоЧистке);
		Если ТаблицаДанныхПоЧистке.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по сотруднику!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаДанныхПоЧистке);	
	
КонецФункции

Процедура ПолучитьТаблицуДанныхПоЧистке(ФизическоеЛицо,ТаблицаДанныхПоЧистке)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СредстваЗащитыВЧисткеОбороты.Контрагент КАК Контрагент,
	|	СредстваЗащитыВЧисткеОбороты.Номенклатура КАК Номенклатура,
	|	СредстваЗащитыВЧисткеОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СредстваЗащитыВЧисткеОбороты.Штрихкод КАК Штрихкод,
	|	СредстваЗащитыВЧисткеОбороты.Период КАК ДатаПередачиВЧистку,
	|	СредстваЗащитыВЧисткеОбороты.Организация КАК Организация,
	|	СредстваЗащитыВЧисткеОбороты.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ПередачаВЧистку
	|ИЗ
	|	РегистрНакопления.СредстваЗащитыВЧистке.Обороты(, , Регистратор, Сотрудник.ФизическоеЛицо = &ФизическоеЛицо) КАК СредстваЗащитыВЧисткеОбороты
	|ГДЕ
	|	НЕ СредстваЗащитыВЧисткеОбороты.КоличествоПриход = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СредстваЗащитыВЧисткеОбороты.Контрагент КАК Контрагент,
	|	СредстваЗащитыВЧисткеОбороты.Номенклатура КАК Номенклатура,
	|	СредстваЗащитыВЧисткеОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СредстваЗащитыВЧисткеОбороты.Штрихкод КАК Штрихкод,
	|	СредстваЗащитыВЧисткеОбороты.Период КАК ДатаВозвратаИзЧистки,
	|	СредстваЗащитыВЧисткеОбороты.Организация КАК Организация,
	|	СредстваЗащитыВЧисткеОбороты.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ВозвратИзЧистки
	|ИЗ
	|	РегистрНакопления.СредстваЗащитыВЧистке.Обороты(, , Регистратор, Сотрудник.ФизическоеЛицо = &ФизическоеЛицо) КАК СредстваЗащитыВЧисткеОбороты
	|ГДЕ
	|	НЕ СредстваЗащитыВЧисткеОбороты.КоличествоРасход = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПередачаВЧистку.Номенклатура КАК Номенклатура,
	|	ВТ_ПередачаВЧистку.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ПередачаВЧистку.Штрихкод КАК Штрихкод,
	|	ВТ_ПередачаВЧистку.ДатаПередачиВЧистку КАК ДатаПередачиВЧистку,
	|	ВЫБОР
	|		КОГДА ВТ_ВозвратИзЧистки.ДатаВозвратаИзЧистки ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ПередачаВЧистку.ДатаПередачиВЧистку > ВТ_ВозвратИзЧистки.ДатаВозвратаИзЧистки
	|					ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИНАЧЕ ВТ_ВозвратИзЧистки.ДатаВозвратаИзЧистки
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаВозвратаИзЧистки,
	|	ВТ_ПередачаВЧистку.Организация КАК Организация,
	|	ВТ_ПередачаВЧистку.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ОборотыПоЧистке
	|ИЗ
	|	ВТ_ПередачаВЧистку КАК ВТ_ПередачаВЧистку
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВозвратИзЧистки КАК ВТ_ВозвратИзЧистки
	|		ПО ВТ_ПередачаВЧистку.Контрагент = ВТ_ВозвратИзЧистки.Контрагент
	|			И ВТ_ПередачаВЧистку.Номенклатура = ВТ_ВозвратИзЧистки.Номенклатура
	|			И ВТ_ПередачаВЧистку.ХарактеристикаНоменклатуры = ВТ_ВозвратИзЧистки.ХарактеристикаНоменклатуры
	|			И ВТ_ПередачаВЧистку.Штрихкод = ВТ_ВозвратИзЧистки.Штрихкод
	|			И ВТ_ПередачаВЧистку.ДатаПередачиВЧистку < ВТ_ВозвратИзЧистки.ДатаВозвратаИзЧистки
	|			И ВТ_ПередачаВЧистку.Организация = ВТ_ВозвратИзЧистки.Организация
	|			И ВТ_ПередачаВЧистку.Сотрудник = ВТ_ВозвратИзЧистки.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКомплектующие.Ссылка КАК Комплект,
	|	НоменклатураКомплектующие.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Комплектующие
	|ИЗ
	|	Справочник.Номенклатура.Комплектующие КАК НоменклатураКомплектующие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО НоменклатураКомплектующие.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НоменклатураКомплектующие.Номенклатура.ИспользоватьШтрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ВыданныеСредстваЗащитыОстатки.Номенклатура.Комплект
	|			ТОГДА ВТ_Комплектующие.Номенклатура
	|		ИНАЧЕ ВыданныеСредстваЗащитыОстатки.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВыданныеСредстваЗащитыОстатки.Организация КАК Организация,
	|	ВыданныеСредстваЗащитыОстатки.Сотрудник КАК Сотрудник,
	|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи КАК ДатаВыдачи,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи
	|ПОМЕСТИТЬ ВТ_ОстаткиПоВыдаче
	|ИЗ
	|	РегистрНакопления.ВыданныеСредстваЗащиты.Остатки(, Сотрудник.ФизическоеЛицо = &ФизическоеЛицо) КАК ВыданныеСредстваЗащитыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|		ПО ВыданныеСредстваЗащитыОстатки.НормаВыдачи = НормыВыдачиСИЗСоставНормы.Ссылка
	|			И ВыданныеСредстваЗащитыОстатки.НоменклатураНормы = НормыВыдачиСИЗСоставНормы.НоменклатураНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Комплектующие КАК ВТ_Комплектующие
	|		ПО ВыданныеСредстваЗащитыОстатки.Номенклатура = ВТ_Комплектующие.Комплект
	|ГДЕ
	|	НЕ НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи ЕСТЬ NULL
	|	И (&ВыводитьВсеШтрихкоды
	|			ИЛИ НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Год)
	|						ТОГДА ДОБАВИТЬКДАТЕ(ВыданныеСредстваЗащитыОстатки.ДатаВыдачи, МЕСЯЦ, НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов * 12)
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ВыданныеСредстваЗащитыОстатки.ДатаВыдачи, МЕСЯЦ, НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов)
	|				КОНЕЦ, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Организация КАК Организация,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник КАК Сотрудник,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ДатаВыдачи КАК ДатаВыдачи
	|ПОМЕСТИТЬ ВТ_ШтрихкодыНоменклатуры
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатурыДляУчетаЧистки КАК ШтрихкодыНоменклатурыДляУчетаЧистки
	|ГДЕ
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник.ФизическоеЛицо = &ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиПоВыдаче.Номенклатура КАК Номенклатура,
	|	ВТ_ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ВТ_ШтрихкодыНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ОстаткиПоВыдаче.Организация КАК Организация,
	|	ВТ_ОстаткиПоВыдаче.Сотрудник КАК Сотрудник,
	|	ВТ_ОстаткиПоВыдаче.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ОстаткиПоВыдаче.ПериодичностьВыдачи КАК ПериодичностьВыдачи
	|ПОМЕСТИТЬ ВТ_ШтрихкодыПоВыдаче
	|ИЗ
	|	ВТ_ОстаткиПоВыдаче КАК ВТ_ОстаткиПоВыдаче
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ШтрихкодыНоменклатуры КАК ВТ_ШтрихкодыНоменклатуры
	|		ПО ВТ_ОстаткиПоВыдаче.Номенклатура = ВТ_ШтрихкодыНоменклатуры.Номенклатура
	|			И ВТ_ОстаткиПоВыдаче.Организация = ВТ_ШтрихкодыНоменклатуры.Организация
	|			И ВТ_ОстаткиПоВыдаче.Сотрудник = ВТ_ШтрихкодыНоменклатуры.Сотрудник
	|			И ВТ_ОстаткиПоВыдаче.ДатаВыдачи = ВТ_ШтрихкодыНоменклатуры.ДатаВыдачи
	|ГДЕ
	|	НЕ ВТ_ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ШтрихкодыПоВыдаче.Штрихкод КАК Штрихкод,
	|	ВТ_ШтрихкодыПоВыдаче.Номенклатура.Наименование КАК Номенклатура,
	|	ВТ_ШтрихкодыПоВыдаче.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(ВТ_ОборотыПоЧистке.ДатаПередачиВЧистку) КАК ДатаПередачиВЧистку,
	|	МАКСИМУМ(ВТ_ОборотыПоЧистке.ДатаВозвратаИзЧистки) КАК ДатаВозвратаИзЧистки,
	|	ВТ_ШтрихкодыПоВыдаче.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ШтрихкодыПоВыдаче.ПериодичностьВыдачи.Наименование КАК ПериодичностьВыдачи
	|ИЗ
	|	ВТ_ШтрихкодыПоВыдаче КАК ВТ_ШтрихкодыПоВыдаче
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыПоЧистке КАК ВТ_ОборотыПоЧистке
	|		ПО ВТ_ШтрихкодыПоВыдаче.Штрихкод = ВТ_ОборотыПоЧистке.Штрихкод
	|			И ВТ_ШтрихкодыПоВыдаче.Организация = ВТ_ОборотыПоЧистке.Организация
	|			И ВТ_ШтрихкодыПоВыдаче.Сотрудник = ВТ_ОборотыПоЧистке.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ШтрихкодыПоВыдаче.Штрихкод,
	|	ВТ_ШтрихкодыПоВыдаче.ДатаВыдачи,
	|	ВТ_ШтрихкодыПоВыдаче.Номенклатура.Наименование,
	|	ВТ_ШтрихкодыПоВыдаче.ХарактеристикаНоменклатуры.Наименование,
	|	ВТ_ШтрихкодыПоВыдаче.ПериодичностьВыдачи.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкод,
	|	ДатаПередачиВЧистку,
	|	ДатаВозвратаИзЧистки";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо",			ФизическоеЛицо);
	Запрос.УстановитьПараметр("ТекущаяДата",			ТекущаяДата());
	Запрос.УстановитьПараметр("ВыводитьВсеШтрихкоды",	ЛОЖЬ);
	
	ТаблицаДанныхПоЧистке = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция GetGiveNormsTable(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаДанныхПоНормам = Новый ТаблицаЗначений;
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьТаблицуДанныхПоНормам(ВнешнийПользователь.ОбъектАвторизации,ТаблицаДанныхПоНормам);
		Если ТаблицаДанныхПоНормам.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по сотруднику!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаДанныхПоНормам);
	
КонецФункции

Процедура ПолучитьТаблицуДанныхПоНормам(ФизическоеЛицо,ТаблицаДанныхПоНормам)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыданныеСредстваЗащитыОстатки.Организация КАК Организация,
	|	ВыданныеСредстваЗащитыОстатки.Сотрудник КАК Сотрудник,
	|	ВыданныеСредстваЗащитыОстатки.НоменклатураНормы КАК НоменклатураНормы,
	|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи КАК ДатаВыдачи,
	|	СУММА(ВыданныеСредстваЗащитыОстатки.КоличествоОстаток) КАК Выдано
	|ПОМЕСТИТЬ ВТ_Выдано_ххх2
	|ИЗ
	|	РегистрНакопления.ВыданныеСредстваЗащиты.Остатки(
	|			,
	|			Организация.ЧастичнаяВыдача = 2
	|				И Сотрудник.ФизическоеЛицо = &ФизическоеЛицо) КАК ВыданныеСредстваЗащитыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыданныеСредстваЗащитыОстатки.Организация,
	|	ВыданныеСредстваЗащитыОстатки.Сотрудник,
	|	ВыданныеСредстваЗащитыОстатки.НоменклатураНормы,
	|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПотребностьВыдачиСИЗОстатки.Организация КАК Организация,
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник КАК Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи КАК НормаВыдачи,
	|	ПотребностьВыдачиСИЗОстатки.НоменклатураНормы КАК НоменклатураНормы,
	|	ПотребностьВыдачиСИЗОстатки.ДатаПотребности КАК ДатаПотребности,
	|	СУММА(ПотребностьВыдачиСИЗОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиПоПотребности
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(
	|			,
	|			НЕ Организация.ИспользоватьГруппыИЛИ
	|				И Сотрудник.ФизическоеЛицо = &ФизическоеЛицо) КАК ПотребностьВыдачиСИЗОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьВыдачиСИЗОстатки.Организация,
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи,
	|	ПотребностьВыдачиСИЗОстатки.НоменклатураНормы,
	|	ПотребностьВыдачиСИЗОстатки.ДатаПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ОстаткиПоПотребности.Организация КАК Организация,
	|	ВТ_ОстаткиПоПотребности.Сотрудник КАК Сотрудник,
	|	ВТ_ОстаткиПоПотребности.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ОстаткиПоПотребности.НоменклатураНормы КАК НоменклатураНормы,
	|	СУММА(ВТ_ОстаткиПоПотребности.КоличествоОстаток) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ВТ_Выдано_ххх2.Выдано, 0) КАК Выдано_ххх2,
	|	ВТ_ОстаткиПоПотребности.ДатаПотребности КАК ДатаПотребности,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоВПериоде КАК КоличествоВПериоде
	|ПОМЕСТИТЬ ВТ_Потребность
	|ИЗ
	|	ВТ_ОстаткиПоПотребности КАК ВТ_ОстаткиПоПотребности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выдано_ххх2 КАК ВТ_Выдано_ххх2
	|		ПО ВТ_ОстаткиПоПотребности.Организация = ВТ_Выдано_ххх2.Организация
	|			И ВТ_ОстаткиПоПотребности.Сотрудник = ВТ_Выдано_ххх2.Сотрудник
	|			И ВТ_ОстаткиПоПотребности.НоменклатураНормы = ВТ_Выдано_ххх2.НоменклатураНормы
	|			И ВТ_ОстаткиПоПотребности.ДатаПотребности = ВТ_Выдано_ххх2.ДатаВыдачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|		ПО ВТ_ОстаткиПоПотребности.НормаВыдачи = НормыВыдачиСИЗСоставНормы.Ссылка
	|			И ВТ_ОстаткиПоПотребности.НоменклатураНормы = НормыВыдачиСИЗСоставНормы.НоменклатураНормы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиПоПотребности.Организация,
	|	ВТ_ОстаткиПоПотребности.Сотрудник,
	|	ВТ_ОстаткиПоПотребности.НормаВыдачи,
	|	ВТ_ОстаткиПоПотребности.НоменклатураНормы,
	|	ЕСТЬNULL(ВТ_Выдано_ххх2.Выдано, 0),
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоВПериоде,
	|	ВТ_ОстаткиПоПотребности.ДатаПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Потребность.НоменклатураНормы.Наименование КАК НоменклатураНормы,
	|	ВТ_Потребность.КоличествоВПериоде КАК КоличествоПоНорме,
	|	СУММА(ВТ_Потребность.КоличествоОстаток - ВТ_Потребность.Выдано_ххх2) КАК КоличествоКВыдаче,
	|	ВТ_Потребность.ДатаПотребности КАК ДатаПолучения,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ВТ_Потребность.ДатаПотребности, МЕСЯЦ) > НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НужноВыдавать
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Потребность.КоличествоВПериоде,
	|	ВТ_Потребность.ДатаПотребности,
	|	ВТ_Потребность.НоменклатураНормы.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПолучения,
	|	ВТ_Потребность.НоменклатураНормы.Наименование";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо",	ФизическоеЛицо);
	Запрос.УстановитьПараметр("ТекущаяДата",	ТекущаяДата());
	
	ТаблицаДанныхПоНормам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

Функция GetMessagesTable(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаДанныхПоОбращениям = Новый ТаблицаЗначений;
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьТаблицуДанныхПоОбращениям(ВнешнийПользователь.ОбъектАвторизации,ТаблицаДанныхПоОбращениям);
		Если ТаблицаДанныхПоОбращениям.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по сотруднику!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаДанныхПоОбращениям);
	
КонецФункции

Процедура ПолучитьТаблицуДанныхПоОбращениям(ФизическоеЛицо,ТаблицаДанныхПоОбращениям)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияОбращенийНаСклад.Период КАК ДатаОбращения,
	|	ИсторияОбращенийНаСклад.КатегорияОбращения.Наименование КАК КатегорияОбращения,
	|	ИсторияОбращенийНаСклад.СодержаниеОбращения КАК СодержаниеОбращения,
	|	ПРЕДСТАВЛЕНИЕ(ИсторияОбращенийНаСклад.СтатусОбращения) КАК СтатусОбращения,
	|	ИсторияОбращенийНаСклад.ДатаОтвета КАК ДатаОтвета,
	|	ИсторияОбращенийНаСклад.СодержаниеОтвета КАК СодержаниеОтвета
	|ИЗ
	|	РегистрСведений.ИсторияОбращенийНаСклад КАК ИсторияОбращенийНаСклад
	|ГДЕ
	|	ИсторияОбращенийНаСклад.Сотрудник.ФизическоеЛицо = &ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОбращения УБЫВ";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо",	ФизическоеЛицо);
	
	ТаблицаДанныхПоОбращениям = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция Get_Service_Using(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	СтруктураПризнака = Новый Структура;
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьПризнакНеобходимостиОценкиСервисногоОбслуживания(ВнешнийПользователь.ОбъектАвторизации,СтруктураПризнака);
		Если СтруктураПризнака.Количество() = 0 Тогда
			ErrorMessage = "Нет информации!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СтруктураПризнака);	
	
КонецФункции

Процедура ПолучитьПризнакНеобходимостиОценкиСервисногоОбслуживания(ФизическоеЛицо,СтруктураПризнака)
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ФизическоеЛицо);
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		ОцениватьСервисноеОбслуживание = Сотрудник.Владелец.ИспользоватьОценкуСервисногоОбслуживания;
		
		Если ОцениватьСервисноеОбслуживание Тогда //проверяем существующие оценки
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОценкиСервисногоОбслуживания.ДатаОценки КАК ДатаОценки,
			|	ОценкиСервисногоОбслуживания.Оценка КАК Оценка
			|ИЗ
			|	РегистрСведений.ОценкиСервисногоОбслуживания КАК ОценкиСервисногоОбслуживания
			|ГДЕ
			|	ОценкиСервисногоОбслуживания.Организация = &Организация
			|	И ОценкиСервисногоОбслуживания.ФизическоеЛицо = &ФизическоеЛицо";
			
			Запрос.УстановитьПараметр("ФизическоеЛицо",	ФизическоеЛицо);
			Запрос.УстановитьПараметр("Организация",	Сотрудник.Владелец);
			
			Результат = Запрос.Выполнить();
			
			ОцениватьСервисноеОбслуживание = Результат.Пустой();
			
		КонецЕсли;
		
	Иначе
		
		ОцениватьСервисноеОбслуживание = Ложь;
		
	КонецЕсли;
	
	СтруктураПризнака.Вставить("ОцениватьСервисноеОбслуживание", ?(ОцениватьСервисноеОбслуживание,"1","0"));
	
КонецПроцедуры

Функция Download_Service_Using(Rating, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ЗагрузитьОценку(ВнешнийПользователь.ОбъектАвторизации, Rating);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;	
	
КонецФункции

Процедура ЗагрузитьОценку(ФизическоеЛицо, Rating)
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ФизическоеЛицо);
	
	НаборЗаписей = РегистрыСведений.ОценкиСервисногоОбслуживания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Сотрудник.Владелец);
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
	НаборЗаписей.Прочитать();
	
	Если НЕ НаборЗаписей.Количество() = 0 Тогда
		
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	НоваяЗапись 				= НаборЗаписей.Добавить();
	НоваяЗапись.Организация 	= Сотрудник.Владелец;
	НоваяЗапись.ФизическоеЛицо 	= ФизическоеЛицо;
	НоваяЗапись.ДатаОценки		= ТекущаяДата();
	Если Rating = "1" Тогда //отлично
		НоваяЗапись.Оценка = Перечисления.УровниСервисногоОбслуживания.Отлично;
	ИначеЕсли Rating = "2" Тогда //нормально
		НоваяЗапись.Оценка = Перечисления.УровниСервисногоОбслуживания.Нормально;
	ИначеЕсли Rating = "3" Тогда //плохо
		НоваяЗапись.Оценка = Перечисления.УровниСервисногоОбслуживания.Плохо;
	КонецЕсли;	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция GetBarcodeTable(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	
	Попытка
		ПолучитьТаблицуШтрихкодов(ТаблицаШтрихкодов);
		Если ТаблицаШтрихкодов.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по штрихкодам!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаШтрихкодов);	
	
КонецФункции

Процедура ПолучитьТаблицуШтрихкодов(ТаблицаШтрихкодов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник.ТабельныйНомер КАК ТабельныйНомер,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник.Наименование КАК ФИОСотрудника,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник.МестоХраненияСИЗ.Код КАК Ячейка,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура.КодСинхронизации КАК КодСинхронизацииНоменклатуры,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ХарактеристикаНоменклатуры.Код КАК КодРазмера,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ХарактеристикаНоменклатуры.Наименование КАК НаименованиеРазмера
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатурыДляУчетаЧистки КАК ШтрихкодыНоменклатурыДляУчетаЧистки";
	
	ТаблицаШтрихкодов = Запрос.Выполнить().Выгрузить();  	
	
КонецПроцедуры	

Функция DownloadCleanIn(BarCodeTable,ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	МассивШтрихкодов = СериализаторXDTO.ПрочитатьXDTO(BarCodeTable);
	
	Попытка
		Если МассивШтрихкодов.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по штрихкодам!";
		Иначе
			ЗагрузитьВозвратИзЧистки(МассивШтрихкодов,ErrorMessage);
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ErrorMessage;
	
КонецФункции

Функция DownloadCleanOut(BarCodeTable,ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	МассивШтрихкодов = СериализаторXDTO.ПрочитатьXDTO(BarCodeTable);
	
	Попытка
		Если МассивШтрихкодов.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по штрихкодам!";
		Иначе
			ЗагрузитьПередачуВЧистку(МассивШтрихкодов,ErrorMessage);
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ErrorMessage;
	
КонецФункции

Процедура ЗагрузитьВозвратИзЧистки(МассивШтрихкодов,ErrorMessage)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Организация КАК Организация,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник КАК Сотрудник,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура.ВесДляУчетаЧистки КАК Вес
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатурыДляУчетаЧистки КАК ШтрихкодыНоменклатурыДляУчетаЧистки
	|ГДЕ
	|	НЕ ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник ЕСТЬ NULL
	|	И ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод В(&МассивШтрихкодов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник.Наименование,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура.Наименование,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ХарактеристикаНоменклатуры.КодSAP
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("МассивШтрихкодов",МассивШтрихкодов);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ErrorMessage = "Нет данных для возврата из чистки.";
		Возврат;
	КонецЕсли;	
	
	ВыборкаПоОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		//***НСК Трегубов А.А.*** -- № 129093 Доработка чистки (контрагенты по молчанию) --  18.10.2021 <<<		
		СтруктураКонтрагентов = РегистрыСведений.СоответствиеКонтрагентовДляУчетаЧистки.КонтрагентыДляУчетаЧисткиСИЗ(ВыборкаПоОрганизации.Организация);
		
		Если НЕ ЗначениеЗаполнено(СтруктураКонтрагентов.ВозвратКонтрагентОтравитель) Тогда 
			СтруктураКонтрагентов.ВозвратКонтрагентОтравитель = Справочники.Контрагенты.ВостокСервис;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтруктураКонтрагентов.ВозвратКонтрагентПолучатель) Тогда 
			СтруктураКонтрагентов.ВозвратКонтрагентПолучатель = Справочники.Контрагенты.ВостокСервис;
		КонецЕсли;
		//***НСК Трегубов А.А.*** -- № 129093 Доработка чистки (контрагенты по молчанию) --  18.10.2021 >>>
		
		ВыборкаПоШтрихкодам = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		НовыйДокумент 						= Документы.ВозвратИзЧистки.СоздатьДокумент();
		НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.Ответственный         = ПараметрыСеанса.ТекущийПользователь;	
		НовыйДокумент.Организация 			= ВыборкаПоОрганизации.Организация; 
		
		//***НСК Трегубов А.А.*** -- № 129093 Доработка чистки (контрагенты по молчанию) --  18.10.2021 <<<
		//НовыйДокумент.Отправитель			= Справочники.Контрагенты.ВостокСервис;
		//НовыйДокумент.Получатель			= Справочники.Контрагенты.ВостокСервис;			
		НовыйДокумент.Отправитель			= СтруктураКонтрагентов.ВозвратКонтрагентОтравитель;
		НовыйДокумент.Получатель			= СтруктураКонтрагентов.ВозвратКонтрагентПолучатель;			
		//***НСК Трегубов А.А.*** -- № 129093 Доработка чистки (контрагенты по молчанию) --  18.10.2021 >>>
				
		НовыйДокумент.Дата					= ТекущаяДата();
		НовыйДокумент.Комментарий			= "Загружен автоматически";
		
		Пока ВыборкаПоШтрихкодам.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент.Товары.Добавить(),ВыборкаПоШтрихкодам);
			
		КонецЦикла;
		
		НовыйДокумент.УстановитьНовыйНомер();
		
		Попытка 
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			
			ErrorMessage = "Сформирован документ: " + НовыйДокумент.Ссылка;
			
		Исключение
			
			ErrorMessage = ОписаниеОшибки();
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			
			ErrorMessage = ErrorMessage + Символы.ПС + "Записан документ: " + НовыйДокумент.Ссылка;
			
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьПередачуВЧистку(МассивШтрихкодов,ErrorMessage)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Организация КАК Организация,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник КАК Сотрудник,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура.ВесДляУчетаЧистки КАК Вес
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатурыДляУчетаЧистки КАК ШтрихкодыНоменклатурыДляУчетаЧистки
	|ГДЕ
	|	НЕ ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник ЕСТЬ NULL
	|	И ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод В(&МассивШтрихкодов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник.Наименование,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура.Наименование,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ХарактеристикаНоменклатуры.КодSAP
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("МассивШтрихкодов",МассивШтрихкодов);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ErrorMessage = "Нет данных для передачи в чистку.";
		Возврат;
	КонецЕсли;	
	
	ВыборкаПоОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		//***НСК Трегубов А.А.*** -- № 129093 Доработка чистки (контрагенты по молчанию) --  18.10.2021 <<<		
		СтруктураКонтрагентов = РегистрыСведений.СоответствиеКонтрагентовДляУчетаЧистки.КонтрагентыДляУчетаЧисткиСИЗ(ВыборкаПоОрганизации.Организация);
		
		Если НЕ ЗначениеЗаполнено(СтруктураКонтрагентов.ПередачаКонтрагентОтравитель) Тогда 
			СтруктураКонтрагентов.ПередачаКонтрагентОтравитель = Справочники.Контрагенты.ВостокСервис;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтруктураКонтрагентов.ПередачаКонтрагентПолучатель) Тогда 
			СтруктураКонтрагентов.ПередачаКонтрагентПолучатель = Справочники.Контрагенты.ВостокСервис;
		КонецЕсли;
		//***НСК Трегубов А.А.*** -- № 129093 Доработка чистки (контрагенты по молчанию) --  18.10.2021 >>>
		
		ВыборкаПоШтрихкодам = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		НовыйДокумент 						= Документы.ПередачаВЧистку.СоздатьДокумент();
		НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.Ответственный         = ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.Организация 			= ВыборкаПоОрганизации.Организация; 
		//***НСК Трегубов А.А.*** -- № 129093 Доработка чистки (контрагенты по молчанию) --  18.10.2021 <<<
		//НовыйДокумент.Отправитель			= Справочники.Контрагенты.ВостокСервис;
		//НовыйДокумент.Получатель			= Справочники.Контрагенты.ВостокСервис;
		НовыйДокумент.Отправитель			= СтруктураКонтрагентов.ПередачаКонтрагентОтравитель;
		НовыйДокумент.Получатель			= СтруктураКонтрагентов.ПередачаКонтрагентПолучатель;	
		//***НСК Трегубов А.А.*** -- № 129093 Доработка чистки (контрагенты по молчанию) --  18.10.2021 >>>
		НовыйДокумент.Дата					= ТекущаяДата();
		НовыйДокумент.Комментарий			= "Загружен автоматически";
		
		Пока ВыборкаПоШтрихкодам.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент.Товары.Добавить(),ВыборкаПоШтрихкодам);
			
		КонецЦикла;
		
		НовыйДокумент.УстановитьНовыйНомер();
		
		Попытка 
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			
			ErrorMessage = "Сформирован документ: " + НовыйДокумент.Ссылка;
			
		Исключение
			
			ErrorMessage = ОписаниеОшибки();
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			
			ErrorMessage = ErrorMessage + Символы.ПС + "Записан документ: " + НовыйДокумент.Ссылка;
			
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция GetTransportTable(DateBegin, DateEnd, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаТранспортныхПоставок = Новый ТаблицаЗначений;
	
	Попытка
		ПолучитьТаблицуТранспортныхПоставок(ТаблицаТранспортныхПоставок, DateBegin, DateEnd);
		Если ТаблицаТранспортныхПоставок.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по транспортным поставкам!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаТранспортныхПоставок);	
	
КонецФункции

Процедура ПолучитьТаблицуТранспортныхПоставок(ТаблицаТранспортныхПоставок, ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос;
	запрос.Текст = 
	"ВЫБРАТЬ
	|	ТочкиХраненияНоменклатуры.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ТочкиХраненияНоменклатуры.ТочкаХранения) КАК ТочкаХранения
	|ПОМЕСТИТЬ ВТ_ТочкиХранения
	|ИЗ
	|	РегистрСведений.ТочкиХраненияНоменклатуры КАК ТочкиХраненияНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ТочкиХраненияНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортнаяПоставкаКороба.Ссылка.Номер КАК НомерТранспортнойПоставки,
	|	ТранспортнаяПоставкаКороба.Ссылка.Дата КАК ДатаТранспортнойПоставки,
	|	ТранспортнаяПоставкаКороба.НомерДокумента КАК НомерДокумента,
	|	ТранспортнаяПоставкаКороба.Короб.Код КАК ШтрихкодКороба,
	|	ТранспортнаяПоставкаТовары.Номенклатура.Наименование КАК Номенклатура,
	|	ТранспортнаяПоставкаТовары.Номенклатура.КодСинхронизации КАК КодОракл,
	|	ТранспортнаяПоставкаТовары.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатуры,
	|	ТранспортнаяПоставкаТовары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТ_ТочкиХранения.ТочкаХранения ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ВТ_ТочкиХранения.ТочкаХранения.Наименование
	|	КОНЕЦ КАК ТочкаХранения
	|ИЗ
	|	Документ.ТранспортнаяПоставка.Короба КАК ТранспортнаяПоставкаКороба
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранспортнаяПоставка.Товары КАК ТранспортнаяПоставкаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТочкиХранения КАК ВТ_ТочкиХранения
	|			ПО ТранспортнаяПоставкаТовары.Номенклатура = ВТ_ТочкиХранения.Номенклатура
	|		ПО ТранспортнаяПоставкаКороба.Короб = ТранспортнаяПоставкаТовары.Короб
	|			И ТранспортнаяПоставкаКороба.Ссылка = ТранспортнаяПоставкаТовары.Ссылка
	|ГДЕ
	|	ТранспортнаяПоставкаКороба.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ ТранспортнаяПоставкаКороба.Ссылка.ПометкаУдаления
	|	И ТранспортнаяПоставкаТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ ТранспортнаяПоставкаТовары.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаТранспортнойПоставки,
	|	НомерТранспортнойПоставки,
	|	НомерДокумента,
	|	ШтрихкодКороба,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецДня(ДатаОкончания));
	
	ТаблицаТранспортныхПоставок = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

Функция DownloadTransportTable(TransportTable, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаТранспортныхПоставок = СериализаторXDTO.ПрочитатьXDTO(TransportTable);
	
	Попытка
		Если ТаблицаТранспортныхПоставок.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по транспортным поставкам!";
		Иначе
			ЗагрузитьТаблицуТранспортныхПоставок(ТаблицаТранспортныхПоставок,ErrorMessage);
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ErrorMessage;
	
КонецФункции

Процедура ЗагрузитьТаблицуТранспортныхПоставок(ТаблицаТранспортныхПоставок,ErrorMessage)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТранспортныхПоставок.НомерТранспортнойПоставки КАК НомерТранспортнойПоставки,
	|	ТаблицаТранспортныхПоставок.ШтрихкодКороба КАК ШтрихкодКороба,
	|	ТаблицаТранспортныхПоставок.НомерДокумента КАК НомерДокумента,
	|	ТаблицаТранспортныхПоставок.Получен КАК Получен,
	|	ТаблицаТранспортныхПоставок.Лишний КАК Лишний,
	|	ТаблицаТранспортныхПоставок.Дубль КАК Дубль
	|ПОМЕСТИТЬ ВТ_ТаблицаТранспортныхПоставок
	|ИЗ
	|	&ТаблицаТранспортныхПоставок КАК ТаблицаТранспортныхПоставок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортнаяПоставка.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаТранспортныхПоставок.Получен КАК Получен,
	|	ВТ_ТаблицаТранспортныхПоставок.Лишний КАК Лишний,
	|	ВТ_ТаблицаТранспортныхПоставок.Дубль КАК Дубль,
	|	ЕСТЬNULL(ТранспортнаяПоставкаКороба.НомерСтроки, 0) КАК НомерСтроки,
	|	ВТ_ТаблицаТранспортныхПоставок.ШтрихкодКороба КАК ШтрихкодКороба
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаТранспортныхПоставок КАК ВТ_ТаблицаТранспортныхПоставок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранспортнаяПоставка.Короба КАК ТранспортнаяПоставкаКороба
	|		ПО ВТ_ТаблицаТранспортныхПоставок.НомерТранспортнойПоставки = ТранспортнаяПоставкаКороба.Ссылка.Номер
	|			И ВТ_ТаблицаТранспортныхПоставок.ШтрихкодКороба = ТранспортнаяПоставкаКороба.Короб.Код
	|			И ВТ_ТаблицаТранспортныхПоставок.НомерДокумента = ТранспортнаяПоставкаКороба.НомерДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранспортнаяПоставка КАК ТранспортнаяПоставка
	|		ПО ВТ_ТаблицаТранспортныхПоставок.НомерТранспортнойПоставки = ТранспортнаяПоставка.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Результат.Ссылка КАК ТранспортнаяПоставка
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Ссылка КАК ТранспортнаяПоставка,
	|	ВТ_Результат.Получен КАК Получен,
	|	ВТ_Результат.Лишний КАК Лишний,
	|	ВТ_Результат.Дубль КАК Дубль,
	|	ВТ_Результат.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	НЕ ВТ_Результат.НомерСтроки = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Результат.Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Получен КАК Получен,
	|	ВТ_Результат.Лишний КАК Лишний,
	|	ВТ_Результат.Дубль КАК Дубль,
	|	ВТ_Результат.ШтрихкодКороба КАК ШтрихкодКороба,
	|	ВТ_Результат.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	ВТ_Результат.НомерСтроки = 0";
	
	Запрос.УстановитьПараметр("ТаблицаТранспортныхПоставок",ТаблицаТранспортныхПоставок);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДокументов 		= Результат[2].Выгрузить();
	ТаблицаКоробовПоставки 	= Результат[3].Выгрузить();
	ТаблицаЛишнихКоробов	= Результат[4].Выгрузить();
	
	Для Каждого СтрокаТаблицыДокументов Из ТаблицаДокументов Цикл
		
		ДокументОбъект = СтрокаТаблицыДокументов.ТранспортнаяПоставка.ПолучитьОбъект();
		
		СтруктураПоиска = Новый Структура("ТранспортнаяПоставка",СтрокаТаблицыДокументов.ТранспортнаяПоставка);
		
		НайденныеСтроки = ТаблицаКоробовПоставки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ДокументОбъект.Короба[НайденнаяСтрока.НомерСтроки - 1].Получен 	= НайденнаяСтрока.Получен;
			ДокументОбъект.Короба[НайденнаяСтрока.НомерСтроки - 1].Лишний 	= НайденнаяСтрока.Лишний;
			ДокументОбъект.Короба[НайденнаяСтрока.НомерСтроки - 1].Дубль 	= НайденнаяСтрока.Дубль;
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицыЛишнихКоробов Из ТаблицаЛишнихКоробов Цикл
			
			Короб = Справочники.Короба.НайтиПоКоду(СтрокаТаблицыЛишнихКоробов.ШтрихкодКороба);
			
			Если Короб.Пустая() Тогда
				
				НовыйКороб 		= Справочники.Короба.СоздатьЭлемент();
				НовыйКороб.Код 	= СтрокаТаблицыЛишнихКоробов.ШтрихкодКороба;
				НовыйКороб.Записать();
				
				Короб = НовыйКороб.Ссылка;
				
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект.Короба.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЛишнихКоробов);
			НоваяСтрока.Короб = Короб;			
			
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры	

Функция GetPointTable(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаДанныхПоМестамПолучения = Новый ТаблицаЗначений;
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьТаблицуДанныхПоМестамПолучения(ТаблицаДанныхПоМестамПолучения);
		Если ТаблицаДанныхПоМестамПолучения.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по местам получения!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаДанныхПоМестамПолучения);	
	
КонецФункции

Процедура ПолучитьТаблицуДанныхПоМестамПолучения(ТаблицаДанныхПоМестамПолучения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаПолучения.Наименование КАК МестоПолучения
	|ИЗ
	|	Справочник.МестаПолучения КАК МестаПолучения";
	
	ТаблицаДанныхПоМестамПолучения = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция ПолучитьСотрудникаПоНомеруТелефона(НомерТелефона)
	
	НомерТелефона = СтрЗаменить(НомерТелефона,"+","");
	НомерТелефона = СтрЗаменить(НомерТелефона,"(","");
	НомерТелефона = СтрЗаменить(НомерТелефона,")","");
	НомерТелефона = СтрЗаменить(НомерТелефона,"-","");
	НомерТелефона = СтрЗаменить(НомерТелефона," ","");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК ФизическоеЛицо,
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
	|ПОМЕСТИТЬ ВТ_ФизическоеЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона = &НомерТелефона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ФизическоеЛицо.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ФизическоеЛицо КАК ВТ_ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ВТ_ФизическоеЛицо.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	|ГДЕ
	|	НЕ Сотрудники.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Результат.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеРабочиеМеста.Остатки КАК ЗанятыеРабочиеМестаОстатки
	|		ПО ВТ_Результат.Сотрудник = ЗанятыеРабочиеМестаОстатки.Сотрудник
	|ГДЕ
	|	НЕ ЗанятыеРабочиеМестаОстатки.Сотрудник ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("НомерТелефона",НомерТелефона);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	Иначе
		Возврат Результат.Выгрузить()[0].Сотрудник;		
	КонецЕсли;
	
КонецФункции

Функция AccessControl(Telephone, ErrorMessage, AccessResult, Worker)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Попытка
		AccessResult = ОпределитьДоступ(Telephone,Worker);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;	
	
КонецФункции

//возвращает значения:
//0 - доступ разрешен
//1 - сотрудник уволен
//2 - сотрудник не определен
Функция ОпределитьДоступ(НомерТелефона,Worker)
	
	Worker = "";
	
	НомерТелефона = СтрЗаменить(НомерТелефона,"+","");
	НомерТелефона = СтрЗаменить(НомерТелефона,"(","");
	НомерТелефона = СтрЗаменить(НомерТелефона,")","");
	НомерТелефона = СтрЗаменить(НомерТелефона,"-","");
	НомерТелефона = СтрЗаменить(НомерТелефона," ","");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона = &НомерТелефона";
	
	Запрос.УстановитьПараметр("НомерТелефона",НомерТелефона);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат "2";
	КонецЕсли;
	
	ФизическоеЛицо = Результат.Выгрузить()[0].ФизическоеЛицо;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо",ФизическоеЛицо);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат "2";
	КонецЕсли;
	
	Сотрудник 	= Результат.Выгрузить()[0].Сотрудник;
	Worker 		= Сотрудник.Наименование;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(, Сотрудник = &Сотрудник) КАК ЗанятыеРабочиеМестаОстатки";
	
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат "1";
	Иначе
		Возврат "0";
	КонецЕсли;  	
	
КонецФункции	

Функция DeliveryCalendar(Telephone, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";
	
	ГрафикВыдачи = Новый ТаблицаЗначений;
	
	Попытка
		ПолучитьГрафикВыдачиПоСотруднику(Сотрудник,ГрафикВыдачи);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	//Рохин
	ГрафикВыдачи.Колонки.Добавить("UUID");
	Для Каждого СтрокаГрафика Из ГрафикВыдачи Цикл
		СтрокаГрафика.UUID=XMLСтрока(СтрокаГрафика.НоменклатураНормыСсылка);
	КонецЦикла;
	
	//Рохин
	Возврат СериализаторXDTO.ЗаписатьXDTO(ГрафикВыдачи);
	
КонецФункции

Процедура ПолучитьГрафикВыдачиПоСотруднику(Сотрудник,ГрафикВыдачи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыданныеСредстваЗащитыОстатки.Организация КАК Организация,
	|	ВыданныеСредстваЗащитыОстатки.Сотрудник КАК Сотрудник,
	|	ВыданныеСредстваЗащитыОстатки.НоменклатураНормы КАК НоменклатураНормы,
	|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи КАК ДатаВыдачи,
	|	СУММА(ВыданныеСредстваЗащитыОстатки.КоличествоОстаток) КАК Выдано
	|ПОМЕСТИТЬ ВТ_Выдано_ххх2
	|ИЗ
	|	РегистрНакопления.ВыданныеСредстваЗащиты.Остатки(
	|			,
	|			Организация.ЧастичнаяВыдача = 2
	|				И Сотрудник = &Сотрудник) КАК ВыданныеСредстваЗащитыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыданныеСредстваЗащитыОстатки.Организация,
	|	ВыданныеСредстваЗащитыОстатки.Сотрудник,
	|	ВыданныеСредстваЗащитыОстатки.НоменклатураНормы,
	|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПотребностьВыдачиСИЗОстатки.Организация КАК Организация,
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник КАК Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи КАК НормаВыдачи,
	|	ПотребностьВыдачиСИЗОстатки.НоменклатураНормы КАК НоменклатураНормы,
	|	ПотребностьВыдачиСИЗОстатки.ДатаПотребности КАК ДатаПотребности,
	|	СУММА(ПотребностьВыдачиСИЗОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиПоПотребности
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(
	|			,
	|			НЕ Организация.ИспользоватьГруппыИЛИ
	|				И Сотрудник = &Сотрудник) КАК ПотребностьВыдачиСИЗОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьВыдачиСИЗОстатки.Организация,
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи,
	|	ПотребностьВыдачиСИЗОстатки.НоменклатураНормы,
	|	ПотребностьВыдачиСИЗОстатки.ДатаПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ОстаткиПоПотребности.Организация КАК Организация,
	|	ВТ_ОстаткиПоПотребности.Сотрудник КАК Сотрудник,
	|	ВТ_ОстаткиПоПотребности.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ОстаткиПоПотребности.НоменклатураНормы КАК НоменклатураНормы,
	|	СУММА(ВТ_ОстаткиПоПотребности.КоличествоОстаток) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ВТ_Выдано_ххх2.Выдано, 0) КАК Выдано_ххх2,
	|	ВТ_ОстаткиПоПотребности.ДатаПотребности КАК ДатаПотребности,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоВПериоде КАК КоличествоВПериоде
	|ПОМЕСТИТЬ ВТ_Потребность
	|ИЗ
	|	ВТ_ОстаткиПоПотребности КАК ВТ_ОстаткиПоПотребности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выдано_ххх2 КАК ВТ_Выдано_ххх2
	|		ПО ВТ_ОстаткиПоПотребности.Организация = ВТ_Выдано_ххх2.Организация
	|			И ВТ_ОстаткиПоПотребности.Сотрудник = ВТ_Выдано_ххх2.Сотрудник
	|			И ВТ_ОстаткиПоПотребности.НоменклатураНормы = ВТ_Выдано_ххх2.НоменклатураНормы
	|			И ВТ_ОстаткиПоПотребности.ДатаПотребности = ВТ_Выдано_ххх2.ДатаВыдачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|		ПО ВТ_ОстаткиПоПотребности.НормаВыдачи = НормыВыдачиСИЗСоставНормы.Ссылка
	|			И ВТ_ОстаткиПоПотребности.НоменклатураНормы = НормыВыдачиСИЗСоставНормы.НоменклатураНормы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиПоПотребности.Организация,
	|	ВТ_ОстаткиПоПотребности.Сотрудник,
	|	ВТ_ОстаткиПоПотребности.НормаВыдачи,
	|	ВТ_ОстаткиПоПотребности.НоменклатураНормы,
	|	ЕСТЬNULL(ВТ_Выдано_ххх2.Выдано, 0),
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоВПериоде,
	|	ВТ_ОстаткиПоПотребности.ДатаПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Потребность.НоменклатураНормы.Наименование КАК НоменклатураНормы,
	|	ВТ_Потребность.КоличествоВПериоде КАК КоличествоПоНорме,
	|	СУММА(ВТ_Потребность.КоличествоОстаток - ВТ_Потребность.Выдано_ххх2) КАК КоличествоКВыдаче,
	|	ВТ_Потребность.ДатаПотребности КАК ДатаПолучения,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ВТ_Потребность.ДатаПотребности, МЕСЯЦ) > НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НужноВыдавать,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Потребность.НоменклатураНормы.ВидСИЗ.КатегорияВидаСИЗ) КАК Категория,
	|	ВТ_Потребность.НоменклатураНормы КАК НоменклатураНормыСсылка
	//|	ВЫРАЗИТЬ("""""""" КАК СТРОКА(50)) КАК UUID
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Потребность.КоличествоВПериоде,
	|	ВТ_Потребность.ДатаПотребности,
	|	ВТ_Потребность.НоменклатураНормы.Наименование,
	|	ВТ_Потребность.НоменклатураНормы,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Потребность.НоменклатураНормы.ВидСИЗ.КатегорияВидаСИЗ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПолучения,
	|	ВТ_Потребность.НоменклатураНормы.Наименование";
	
	Запрос.УстановитьПараметр("Сотрудник",	Сотрудник);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	
	ГрафикВыдачи = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

Функция Received(Telephone, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";
	
	ВыданныеСИЗ = Новый ТаблицаЗначений;
	
	Попытка
		ПолучитьВыданныеСИЗПоСотруднику(Сотрудник,ВыданныеСИЗ);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ВыданныеСИЗ);
	
КонецФункции

Процедура ПолучитьВыданныеСИЗПоСотруднику(Сотрудник,ВыданныеСИЗ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыданныеСредстваЗащитыОстатки.НоменклатураНормы.Наименование КАК НоменклатураНормы,
	|	ВыданныеСредстваЗащитыОстатки.Номенклатура.Наименование КАК Номенклатура,
	|	ВыданныеСредстваЗащитыОстатки.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатуры,
	|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи КАК ДатаВыдачи,
	|	СУММА(ВыданныеСредстваЗащитыОстатки.КоличествоОстаток) КАК Выдано,
	|	ВыданныеСредстваЗащитыОстатки.Номенклатура.Артикул КАК Артикул,
	|	ВыданныеСредстваЗащитыОстатки.Номенклатура.НавигационнаяСсылка КАК НавигационнаяСсылка,
	|	ВЫБОР
	|		КОГДА НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Год)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ВыданныеСредстваЗащитыОстатки.ДатаВыдачи, МЕСЯЦ, НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов * 12)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВыданныеСредстваЗащитыОстатки.ДатаВыдачи, МЕСЯЦ, НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов)
	|			КОНЕЦ
	|	КОНЕЦ КАК ОкончаниеСрокаНоски,
	|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
	|			КОГДА ВыданныеСредстваЗащитыОстатки.НормаВыдачи = ЗНАЧЕНИЕ(Справочник.НормыВыдачиСИЗ.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача)
	|			ИНАЧЕ ВыданныеСредстваЗащитыОстатки.НормаВыдачи.ВидВыдачиСИЗ
	|		КОНЕЦ) КАК ВидВыдачиСИЗ,
	|	ВыданныеСредстваЗащитыОстатки.Номенклатура.КодСинхронизации КАК КодСинхронизации,
	|	ПРЕДСТАВЛЕНИЕ(ВыданныеСредстваЗащитыОстатки.Номенклатура.ВидСИЗ.КатегорияВидаСИЗ) КАК Категория,
	|	ВыданныеСредстваЗащитыОстатки.Номенклатура.Рейтинг КАК Рейтинг
	|ИЗ
	|	РегистрНакопления.ВыданныеСредстваЗащиты.Остатки(, Сотрудник = &Сотрудник) КАК ВыданныеСредстваЗащитыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|		ПО ВыданныеСредстваЗащитыОстатки.НормаВыдачи = НормыВыдачиСИЗСоставНормы.Ссылка
	|			И ВыданныеСредстваЗащитыОстатки.НоменклатураНормы = НормыВыдачиСИЗСоставНормы.НоменклатураНормы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыданныеСредстваЗащитыОстатки.ХарактеристикаНоменклатуры.Наименование,
	|	ВЫБОР
	|		КОГДА НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Год)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ВыданныеСредстваЗащитыОстатки.ДатаВыдачи, МЕСЯЦ, НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов * 12)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВыданныеСредстваЗащитыОстатки.ДатаВыдачи, МЕСЯЦ, НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВыданныеСредстваЗащитыОстатки.НоменклатураНормы.Наименование,
	|	ВыданныеСредстваЗащитыОстатки.Номенклатура.Наименование,
	|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи,
	|	ВыданныеСредстваЗащитыОстатки.Номенклатура.Артикул,
	|	ВыданныеСредстваЗащитыОстатки.Номенклатура.НавигационнаяСсылка,
	|	ВыданныеСредстваЗащитыОстатки.Номенклатура.КодСинхронизации,
	|	ВыданныеСредстваЗащитыОстатки.Номенклатура.Рейтинг,
	|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
	|			КОГДА ВыданныеСредстваЗащитыОстатки.НормаВыдачи = ЗНАЧЕНИЕ(Справочник.НормыВыдачиСИЗ.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача)
	|			ИНАЧЕ ВыданныеСредстваЗащитыОстатки.НормаВыдачи.ВидВыдачиСИЗ
	|		КОНЕЦ),
	|	ПРЕДСТАВЛЕНИЕ(ВыданныеСредстваЗащитыОстатки.Номенклатура.ВидСИЗ.КатегорияВидаСИЗ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачи УБЫВ,
	|	НоменклатураНормы";	
	
	Запрос.УстановитьПараметр("Сотрудник",	Сотрудник);
	
	ВыданныеСИЗ = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

Функция Discarded(Telephone, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";
	
	СписанныеСИЗ = Новый ТаблицаЗначений;
	
	Попытка
		ПолучитьСписанныеСИЗПоСотруднику(Сотрудник,СписанныеСИЗ);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СписанныеСИЗ);
	
КонецФункции

Процедура ПолучитьСписанныеСИЗПоСотруднику(Сотрудник,СписанныеСИЗ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыданныеСредстваЗащитыОбороты.НоменклатураНормы.Наименование КАК НоменклатураНормы,
	|	ВыданныеСредстваЗащитыОбороты.Номенклатура.Наименование КАК Номенклатура,
	|	ВыданныеСредстваЗащитыОбороты.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатуры,
	|	ВыданныеСредстваЗащитыОбороты.ДатаВыдачи КАК ДатаВыдачи,
	|	СУММА(ВыданныеСредстваЗащитыОбороты.КоличествоРасход) КАК Списано,
	|	ВыданныеСредстваЗащитыОбороты.Номенклатура.Артикул КАК Артикул,
	|	ВыданныеСредстваЗащитыОбороты.Номенклатура.НавигационнаяСсылка КАК НавигационнаяСсылка,
	|	ВЫБОР
	|		КОГДА НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Год)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ВыданныеСредстваЗащитыОбороты.ДатаВыдачи, МЕСЯЦ, НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов * 12)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВыданныеСредстваЗащитыОбороты.ДатаВыдачи, МЕСЯЦ, НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов)
	|			КОНЕЦ
	|	КОНЕЦ КАК ОкончаниеСрокаНоски,
	|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
	|			КОГДА ВыданныеСредстваЗащитыОбороты.НормаВыдачи = ЗНАЧЕНИЕ(Справочник.НормыВыдачиСИЗ.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача)
	|			ИНАЧЕ ВыданныеСредстваЗащитыОбороты.НормаВыдачи.ВидВыдачиСИЗ
	|		КОНЕЦ) КАК ВидВыдачиСИЗ,
	|	ПРЕДСТАВЛЕНИЕ(ВыданныеСредстваЗащитыОбороты.Регистратор.ПричинаСписания) КАК ПричинаСписания,
	|	ВыданныеСредстваЗащитыОбороты.Номенклатура.КодСинхронизации КАК КодСинхронизации,
	|	ВыданныеСредстваЗащитыОбороты.Период КАК ДатаСписания,
	|	ВыданныеСредстваЗащитыОбороты.Номенклатура.Рейтинг КАК Рейтинг,
	|	ПРЕДСТАВЛЕНИЕ(ВыданныеСредстваЗащитыОбороты.Номенклатура.ВидСИЗ.КатегорияВидаСИЗ) КАК Категория
	|ИЗ
	|	РегистрНакопления.ВыданныеСредстваЗащиты.Обороты(, , Регистратор, Сотрудник = &Сотрудник) КАК ВыданныеСредстваЗащитыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|		ПО ВыданныеСредстваЗащитыОбороты.НормаВыдачи = НормыВыдачиСИЗСоставНормы.Ссылка
	|			И ВыданныеСредстваЗащитыОбороты.НоменклатураНормы = НормыВыдачиСИЗСоставНормы.НоменклатураНормы
	|ГДЕ
	|	ВыданныеСредстваЗащитыОбороты.Регистратор ССЫЛКА Документ.СписаниеСредствЗащитыСотрудника
	|	И ВыданныеСредстваЗащитыОбороты.Период >= ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыданныеСредстваЗащитыОбороты.Номенклатура.Наименование,
	|	ВыданныеСредстваЗащитыОбороты.ХарактеристикаНоменклатуры.Наименование,
	|	ВыданныеСредстваЗащитыОбороты.Номенклатура.НавигационнаяСсылка,
	|	ВыданныеСредстваЗащитыОбороты.ДатаВыдачи,
	|	ВыданныеСредстваЗащитыОбороты.Номенклатура.Артикул,
	|	ВыданныеСредстваЗащитыОбороты.НоменклатураНормы.Наименование,
	|	ВЫБОР
	|		КОГДА НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Год)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ВыданныеСредстваЗащитыОбороты.ДатаВыдачи, МЕСЯЦ, НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов * 12)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВыданныеСредстваЗащитыОбороты.ДатаВыдачи, МЕСЯЦ, НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВыданныеСредстваЗащитыОбороты.Номенклатура.КодСинхронизации,
	|	ВыданныеСредстваЗащитыОбороты.Период,
	|	ВыданныеСредстваЗащитыОбороты.Номенклатура.Рейтинг,
	|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
	|			КОГДА ВыданныеСредстваЗащитыОбороты.НормаВыдачи = ЗНАЧЕНИЕ(Справочник.НормыВыдачиСИЗ.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача)
	|			ИНАЧЕ ВыданныеСредстваЗащитыОбороты.НормаВыдачи.ВидВыдачиСИЗ
	|		КОНЕЦ),
	|	ПРЕДСТАВЛЕНИЕ(ВыданныеСредстваЗащитыОбороты.Регистратор.ПричинаСписания),
	|	ПРЕДСТАВЛЕНИЕ(ВыданныеСредстваЗащитыОбороты.Номенклатура.ВидСИЗ.КатегорияВидаСИЗ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНормы,
	|	ДатаСписания,
	|	ДатаВыдачи";
	
	Запрос.УстановитьПараметр("Сотрудник",	Сотрудник);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	
	СписанныеСИЗ = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция Cleaning(Telephone, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";
	
	СИЗВЧистке = Новый ТаблицаЗначений;
	
	Попытка
		ПолучитьСИЗВЧисткеПоСотруднику(Сотрудник,СИЗВЧистке);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СИЗВЧистке);
	
КонецФункции

Процедура ПолучитьСИЗВЧисткеПоСотруднику(Сотрудник,СИЗВЧистке)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СредстваЗащитыВЧисткеОбороты.Контрагент КАК Контрагент,
	|	СредстваЗащитыВЧисткеОбороты.Номенклатура КАК Номенклатура,
	|	СредстваЗащитыВЧисткеОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СредстваЗащитыВЧисткеОбороты.Штрихкод КАК Штрихкод,
	|	СредстваЗащитыВЧисткеОбороты.Период КАК ДатаПередачиВЧистку,
	|	СредстваЗащитыВЧисткеОбороты.Организация КАК Организация,
	|	СредстваЗащитыВЧисткеОбороты.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ПередачаВЧистку
	|ИЗ
	|	РегистрНакопления.СредстваЗащитыВЧистке.Обороты(, , Регистратор, Сотрудник = &Сотрудник) КАК СредстваЗащитыВЧисткеОбороты
	|ГДЕ
	|	НЕ СредстваЗащитыВЧисткеОбороты.КоличествоПриход = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СредстваЗащитыВЧисткеОбороты.Контрагент КАК Контрагент,
	|	СредстваЗащитыВЧисткеОбороты.Номенклатура КАК Номенклатура,
	|	СредстваЗащитыВЧисткеОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СредстваЗащитыВЧисткеОбороты.Штрихкод КАК Штрихкод,
	|	СредстваЗащитыВЧисткеОбороты.Период КАК ДатаВозвратаИзЧистки,
	|	СредстваЗащитыВЧисткеОбороты.Организация КАК Организация,
	|	СредстваЗащитыВЧисткеОбороты.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ВозвратИзЧистки
	|ИЗ
	|	РегистрНакопления.СредстваЗащитыВЧистке.Обороты(, , Регистратор, Сотрудник = &Сотрудник) КАК СредстваЗащитыВЧисткеОбороты
	|ГДЕ
	|	НЕ СредстваЗащитыВЧисткеОбороты.КоличествоРасход = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПередачаВЧистку.Номенклатура КАК Номенклатура,
	|	ВТ_ПередачаВЧистку.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ПередачаВЧистку.Штрихкод КАК Штрихкод,
	|	ВТ_ПередачаВЧистку.ДатаПередачиВЧистку КАК ДатаПередачиВЧистку,
	|	ВЫБОР
	|		КОГДА ВТ_ВозвратИзЧистки.ДатаВозвратаИзЧистки ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ПередачаВЧистку.ДатаПередачиВЧистку > ВТ_ВозвратИзЧистки.ДатаВозвратаИзЧистки
	|					ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИНАЧЕ ВТ_ВозвратИзЧистки.ДатаВозвратаИзЧистки
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаВозвратаИзЧистки,
	|	ВТ_ПередачаВЧистку.Организация КАК Организация,
	|	ВТ_ПередачаВЧистку.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ОборотыПоЧистке
	|ИЗ
	|	ВТ_ПередачаВЧистку КАК ВТ_ПередачаВЧистку
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВозвратИзЧистки КАК ВТ_ВозвратИзЧистки
	|		ПО ВТ_ПередачаВЧистку.Контрагент = ВТ_ВозвратИзЧистки.Контрагент
	|			И ВТ_ПередачаВЧистку.Номенклатура = ВТ_ВозвратИзЧистки.Номенклатура
	|			И ВТ_ПередачаВЧистку.ХарактеристикаНоменклатуры = ВТ_ВозвратИзЧистки.ХарактеристикаНоменклатуры
	|			И ВТ_ПередачаВЧистку.Штрихкод = ВТ_ВозвратИзЧистки.Штрихкод
	|			И ВТ_ПередачаВЧистку.ДатаПередачиВЧистку < ВТ_ВозвратИзЧистки.ДатаВозвратаИзЧистки
	|			И ВТ_ПередачаВЧистку.Организация = ВТ_ВозвратИзЧистки.Организация
	|			И ВТ_ПередачаВЧистку.Сотрудник = ВТ_ВозвратИзЧистки.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКомплектующие.Ссылка КАК Комплект,
	|	НоменклатураКомплектующие.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Комплектующие
	|ИЗ
	|	Справочник.Номенклатура.Комплектующие КАК НоменклатураКомплектующие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО НоменклатураКомплектующие.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НоменклатураКомплектующие.Номенклатура.ИспользоватьШтрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ВыданныеСредстваЗащитыОстатки.Номенклатура.Комплект
	|			ТОГДА ВТ_Комплектующие.Номенклатура
	|		ИНАЧЕ ВыданныеСредстваЗащитыОстатки.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВыданныеСредстваЗащитыОстатки.Организация КАК Организация,
	|	ВыданныеСредстваЗащитыОстатки.Сотрудник КАК Сотрудник,
	|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи КАК ДатаВыдачи,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВыданныеСредстваЗащитыОстатки.НоменклатураНормы КАК НоменклатураНормы,
	|	ВЫБОР
	|		КОГДА ВыданныеСредстваЗащитыОстатки.НормаВыдачи = ЗНАЧЕНИЕ(Справочник.НормыВыдачиСИЗ.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача)
	|		ИНАЧЕ ВыданныеСредстваЗащитыОстатки.НормаВыдачи.ВидВыдачиСИЗ
	|	КОНЕЦ КАК ВидВыдачиСИЗ
	|ПОМЕСТИТЬ ВТ_ОстаткиПоВыдаче
	|ИЗ
	|	РегистрНакопления.ВыданныеСредстваЗащиты.Остатки(, Сотрудник = &Сотрудник) КАК ВыданныеСредстваЗащитыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|		ПО ВыданныеСредстваЗащитыОстатки.НормаВыдачи = НормыВыдачиСИЗСоставНормы.Ссылка
	|			И ВыданныеСредстваЗащитыОстатки.НоменклатураНормы = НормыВыдачиСИЗСоставНормы.НоменклатураНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Комплектующие КАК ВТ_Комплектующие
	|		ПО ВыданныеСредстваЗащитыОстатки.Номенклатура = ВТ_Комплектующие.Комплект
	//+++АсТБ_Alexey_117417_********************************************************************
	//|ГДЕ
	//|	НЕ НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи ЕСТЬ NULL
	//---АсТБ_Alexey_117417_********************************************************************
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Организация КАК Организация,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник КАК Сотрудник,
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.ДатаВыдачи КАК ДатаВыдачи
	|ПОМЕСТИТЬ ВТ_ШтрихкодыНоменклатуры
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатурыДляУчетаЧистки КАК ШтрихкодыНоменклатурыДляУчетаЧистки
	|ГДЕ
	|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиПоВыдаче.Номенклатура КАК Номенклатура,
	|	ВТ_ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ВТ_ШтрихкодыНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ОстаткиПоВыдаче.Организация КАК Организация,
	|	ВТ_ОстаткиПоВыдаче.Сотрудник КАК Сотрудник,
	|	ВТ_ОстаткиПоВыдаче.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ОстаткиПоВыдаче.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_ОстаткиПоВыдаче.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ОстаткиПоВыдаче.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ
	|ПОМЕСТИТЬ ВТ_ШтрихкодыПоВыдаче
	|ИЗ
	|	ВТ_ОстаткиПоВыдаче КАК ВТ_ОстаткиПоВыдаче
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ШтрихкодыНоменклатуры КАК ВТ_ШтрихкодыНоменклатуры
	|		ПО ВТ_ОстаткиПоВыдаче.Номенклатура = ВТ_ШтрихкодыНоменклатуры.Номенклатура
	|			И ВТ_ОстаткиПоВыдаче.Организация = ВТ_ШтрихкодыНоменклатуры.Организация
	|			И ВТ_ОстаткиПоВыдаче.Сотрудник = ВТ_ШтрихкодыНоменклатуры.Сотрудник
	|			И ВТ_ОстаткиПоВыдаче.ДатаВыдачи = ВТ_ШтрихкодыНоменклатуры.ДатаВыдачи
	|ГДЕ
	|	НЕ ВТ_ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПередачаВЧистку.Штрихкод КАК Штрихкод,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ПередачаВЧистку.ДатаПередачиВЧистку) КАК КоличествоЧисток
	|ПОМЕСТИТЬ ВТ_КоличествоЧисток
	|ИЗ
	|	ВТ_ПередачаВЧистку КАК ВТ_ПередачаВЧистку
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПередачаВЧистку.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СредстваЗащитыВЧисткеОстатки.Сотрудник КАК Сотрудник,
	|	СредстваЗащитыВЧисткеОстатки.Штрихкод КАК Штрихкод,
	|	СредстваЗащитыВЧисткеОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиПоЧистке
	|ИЗ
	|	РегистрНакопления.СредстваЗащитыВЧистке.Остатки(, Сотрудник = &Сотрудник) КАК СредстваЗащитыВЧисткеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ШтрихкодыПоВыдаче.Штрихкод КАК Штрихкод,
	|	ВТ_ШтрихкодыПоВыдаче.НоменклатураНормы.Наименование КАК НоменклатураНормы,
	|	ВТ_ШтрихкодыПоВыдаче.Номенклатура.Наименование КАК Номенклатура,
	|	ВТ_ШтрихкодыПоВыдаче.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(ВТ_ОборотыПоЧистке.ДатаПередачиВЧистку) КАК ДатаПередачиВЧистку,
	|	МАКСИМУМ(ВТ_ОборотыПоЧистке.ДатаВозвратаИзЧистки) КАК ДатаВозвратаИзЧистки,
	|	ВТ_ШтрихкодыПоВыдаче.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ШтрихкодыПоВыдаче.Номенклатура.Артикул КАК Артикул,
	|	ВТ_ШтрихкодыПоВыдаче.Номенклатура.НавигационнаяСсылка КАК НавигационнаяСсылка,
	|	ВЫБОР
	|		КОГДА ВТ_ШтрихкодыПоВыдаче.ПериодичностьВыдачи ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ШтрихкодыПоВыдаче.ПериодичностьВыдачи.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Год)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ВТ_ШтрихкодыПоВыдаче.ДатаВыдачи, МЕСЯЦ, ВТ_ШтрихкодыПоВыдаче.ПериодичностьВыдачи.КоличествоПериодов * 12)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТ_ШтрихкодыПоВыдаче.ДатаВыдачи, МЕСЯЦ, ВТ_ШтрихкодыПоВыдаче.ПериодичностьВыдачи.КоличествоПериодов)
	|			КОНЕЦ
	|	КОНЕЦ КАК ОкончаниеСрокаНоски,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ШтрихкодыПоВыдаче.ВидВыдачиСИЗ) КАК ВидВыдачиСИЗ,
	|	ВТ_ШтрихкодыПоВыдаче.Номенклатура.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ШтрихкодыПоВыдаче.Номенклатура.Рейтинг КАК Рейтинг,
	|	ВТ_КоличествоЧисток.КоличествоЧисток КАК КоличествоЧисток,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ШтрихкодыПоВыдаче.Номенклатура.ВидСИЗ.КатегорияВидаСИЗ) КАК Категория
	|ИЗ
	|	ВТ_ШтрихкодыПоВыдаче КАК ВТ_ШтрихкодыПоВыдаче
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыПоЧистке КАК ВТ_ОборотыПоЧистке
	|		ПО ВТ_ШтрихкодыПоВыдаче.Штрихкод = ВТ_ОборотыПоЧистке.Штрихкод
	|			И ВТ_ШтрихкодыПоВыдаче.Организация = ВТ_ОборотыПоЧистке.Организация
	|			И ВТ_ШтрихкодыПоВыдаче.Сотрудник = ВТ_ОборотыПоЧистке.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоЧисток КАК ВТ_КоличествоЧисток
	|		ПО ВТ_ШтрихкодыПоВыдаче.Штрихкод = ВТ_КоличествоЧисток.Штрихкод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоЧистке КАК ВТ_ОстаткиПоЧистке
	|		ПО ВТ_ШтрихкодыПоВыдаче.Сотрудник = ВТ_ОстаткиПоЧистке.Сотрудник
	|			И ВТ_ШтрихкодыПоВыдаче.Штрихкод = ВТ_ОстаткиПоЧистке.Штрихкод
	|ГДЕ
	|	НЕ ВТ_ОстаткиПоЧистке.КоличествоОстаток ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ШтрихкодыПоВыдаче.Штрихкод,
	|	ВТ_ШтрихкодыПоВыдаче.ДатаВыдачи,
	|	ВТ_ШтрихкодыПоВыдаче.Номенклатура.Наименование,
	|	ВТ_ШтрихкодыПоВыдаче.ХарактеристикаНоменклатуры.Наименование,
	|	ВТ_ШтрихкодыПоВыдаче.Номенклатура.Артикул,
	|	ВТ_ШтрихкодыПоВыдаче.Номенклатура.НавигационнаяСсылка,
	|	ВЫБОР
	|		КОГДА ВТ_ШтрихкодыПоВыдаче.ПериодичностьВыдачи ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ШтрихкодыПоВыдаче.ПериодичностьВыдачи.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Год)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ВТ_ШтрихкодыПоВыдаче.ДатаВыдачи, МЕСЯЦ, ВТ_ШтрихкодыПоВыдаче.ПериодичностьВыдачи.КоличествоПериодов * 12)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТ_ШтрихкодыПоВыдаче.ДатаВыдачи, МЕСЯЦ, ВТ_ШтрихкодыПоВыдаче.ПериодичностьВыдачи.КоличествоПериодов)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВТ_ШтрихкодыПоВыдаче.НоменклатураНормы.Наименование,
	|	ВТ_ШтрихкодыПоВыдаче.Номенклатура.КодСинхронизации,
	|	ВТ_ШтрихкодыПоВыдаче.Номенклатура.Рейтинг,
	|	ВТ_КоличествоЧисток.КоличествоЧисток,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ШтрихкодыПоВыдаче.ВидВыдачиСИЗ),
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ШтрихкодыПоВыдаче.Номенклатура.ВидСИЗ.КатегорияВидаСИЗ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНормы,
	|	Штрихкод,
	|	ДатаПередачиВЧистку,
	|	ДатаВозвратаИзЧистки";
	
	Запрос.УстановитьПараметр("Сотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("ТекущаяДата",	ТекущаяДата());
	
	СИЗВЧистке = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

Функция PointTable(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаДанныхПоМестамПолучения = Новый ТаблицаЗначений;
	
	Попытка
		ПолучитьТаблицуДанныхПоМестамПолучения(ТаблицаДанныхПоМестамПолучения);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаДанныхПоМестамПолучения);
	
КонецФункции

Функция DeliveryRequest(Telephone, DateTime, Point, Comment, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";
	
	Попытка
		Заявка = СформироватьЗаявкуНаПолучение(Сотрудник, DateTime, Point, Comment);
	Исключение
		Заявка = "";
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Заявка;
	
КонецФункции

Функция СформироватьЗаявкуНаПолучение(Сотрудник, DateTime, Point, Comment)
	
	МестоПолучения = Справочники.МестаПолучения.НайтиПоНаименованию(Point,Истина);
	
	Если МестоПолучения.Пустая() Тогда
		ТекущееМестоПолучения = Point;
	Иначе
		ТекущееМестоПолучения = МестоПолучения.Наименование;
	КонецЕсли;
	
	НовыйДокумент = Документы.ОбращениеНаСклад.СоздатьДокумент();
	НовыйДокумент.Дата 					= ТекущаяДата();
	НовыйДокумент.КатегорияОбращения 	= Справочники.КатегорииОбращенияНаСклад.ЗаявкаНаПолучение;
	НовыйДокумент.Организация 			= Сотрудник.Владелец;
	НовыйДокумент.СодержаниеОбращения 	= "Желаемое место получения средств защиты: < " + ТекущееМестоПолучения + " >";
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.Сотрудник 			= Сотрудник;
	НовыйДокумент.СтатусОбращения 		= Перечисления.СтатусыОбращенийНаСклад.Открыто;
	НовыйДокумент.ДатаПолучения			= DateTime;
	НовыйДокумент.МестоПолучения		= МестоПолучения;
	НовыйДокумент.Комментарий			= Comment;
	НовыйДокумент.Склад					= ПроцедурыРаботыСНормамиСервер.ПолучитьСкладВыдачи(Справочники.Подразделения.ПустаяСсылка(),Сотрудник,Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача);
	Документы.ОбращениеНаСклад.ЗаполнитьТаблицуДокумента(НовыйДокумент);
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат Строка(НовыйДокумент.Ссылка);
	
КонецФункции

Функция Messages(Telephone, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";	
	
	ТаблицаОбращений = Новый ТаблицаЗначений;
	
	Попытка
		ПолучитьТаблицуОбращений(Сотрудник,ТаблицаОбращений);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаОбращений);
	
КонецФункции

Процедура ПолучитьТаблицуОбращений(Сотрудник,ТаблицаОбращений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияОбращенийНаСклад.Период КАК ДатаОбращения,
	|	ИсторияОбращенийНаСклад.КатегорияОбращения.Наименование КАК КатегорияОбращения,
	|	ИсторияОбращенийНаСклад.СодержаниеОбращения КАК СодержаниеОбращения,
	|	ПРЕДСТАВЛЕНИЕ(ИсторияОбращенийНаСклад.СтатусОбращения) КАК СтатусОбращения,
	|	ИсторияОбращенийНаСклад.ДатаОтвета КАК ДатаОтвета,
	|	ИсторияОбращенийНаСклад.СодержаниеОтвета КАК СодержаниеОтвета,
	|	ИсторияОбращенийНаСклад.Регистратор.Номер КАК Номер
	|ИЗ
	|	РегистрСведений.ИсторияОбращенийНаСклад КАК ИсторияОбращенийНаСклад
	|ГДЕ
	|	ИсторияОбращенийНаСклад.Сотрудник = &Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОбращения УБЫВ";
	
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	
	ТаблицаОбращений = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция NewMessage(Telephone, Category, Message, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";
	
	Попытка
		Обращение = СформироватьОбращение(Сотрудник, Category, Message);
	Исключение
		Обращение = "";
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Обращение;
	
КонецФункции

Функция СформироватьОбращение(Сотрудник, Category, Message)
	
	НовыйДокумент = Документы.ОбращениеНаСклад.СоздатьДокумент();
	НовыйДокумент.Дата 					= ТекущаяДата();
	НовыйДокумент.КатегорияОбращения 	= Справочники.КатегорииОбращенияНаСклад[Category];
	НовыйДокумент.Организация 			= Сотрудник.Владелец;
	НовыйДокумент.СодержаниеОбращения 	= Message;
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.Сотрудник 			= Сотрудник;
	НовыйДокумент.СтатусОбращения 		= Перечисления.СтатусыОбращенийНаСклад.Открыто;
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат Строка(НовыйДокумент.Ссылка);
	
КонецФункции

Функция BasicData(Telephone, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";	
	
	СтруктураОсновныхДанных = Новый Структура;
	
	Попытка
		ПолучитьОсновныеДанныеСотрудника(Сотрудник,СтруктураОсновныхДанных);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СтруктураОсновныхДанных);
	
КонецФункции

Процедура ПолучитьОсновныеДанныеСотрудника(Сотрудник,СтруктураОсновныхДанных)
	
	//основные данные
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
	|	ПРЕДСТАВЛЕНИЕ(ФИОФизическихЛицСрезПоследних.ФизическоеЛицо.Пол) КАК Пол,
	//+++АсТБ_Alexey_113864_********************************************************************
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо.Texel_ID КАК Texel_ID
	//---АсТБ_Alexey_113864_********************************************************************
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(, ФизическоеЛицо = &ФизическоеЛицо) КАК ФИОФизическихЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо",Сотрудник.ФизическоеЛицо);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтруктураОсновныхДанных.Вставить("Фамилия",	"<Не доступно>");
		СтруктураОсновныхДанных.Вставить("Имя",		"<Не доступно>");
		СтруктураОсновныхДанных.Вставить("Отчество","<Не доступно>");
		СтруктураОсновныхДанных.Вставить("Пол",		"<Не доступно>");
		//+++АсТБ_Alexey_113864_********************************************************************
		СтруктураОсновныхДанных.Вставить("Texel_ID","<Не доступно>");
		//---АсТБ_Alexey_113864_********************************************************************
	Иначе
		ТаблицаЗапроса = Результат.Выгрузить();
		СтруктураОсновныхДанных.Вставить("Фамилия",	ТаблицаЗапроса[0].Фамилия);
		СтруктураОсновныхДанных.Вставить("Имя",		ТаблицаЗапроса[0].Имя);
		СтруктураОсновныхДанных.Вставить("Отчество",ТаблицаЗапроса[0].Отчество);
		СтруктураОсновныхДанных.Вставить("Пол",		ТаблицаЗапроса[0].Пол);
		//+++АсТБ_Alexey_113864_********************************************************************
		СтруктураОсновныхДанных.Вставить("Texel_ID",ТаблицаЗапроса[0].Texel_ID);
		//---АсТБ_Alexey_113864_********************************************************************
	КонецЕсли;
	
	СтруктураОсновныхДанных.Вставить("ТабельныйНомер",Сотрудник.ТабельныйНомер);
	
	//место работы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Подразделение,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Должность,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.РабочееМесто
	|ИЗ
	|	РегистрСведений.ОсновноеМестоРаботыСотрудника.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК ОсновноеМестоРаботыСотрудникаСрезПоследних
	|ГДЕ
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.ОсновноеМестоРаботы";
	
	//++Рохин Задача (76498)
	Запрос.Текст = ТекстЗапросаBasicData();
	//--Рохин Задача (76498)
	
	Запрос.УстановитьПараметр("Период",		ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник",	Сотрудник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		СтруктураОсновныхДанных.Вставить("Организация",		"<Не определено>");
		СтруктураОсновныхДанных.Вставить("Подразделение",	"<Не определено>");
		СтруктураОсновныхДанных.Вставить("Должность",		"<Не определено>");
		СтруктураОсновныхДанных.Вставить("МестоХранения",	"<Не определено>");
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтруктураОсновныхДанных.Вставить("Организация",		Сотрудник.Владелец.Наименование);
		СтруктураОсновныхДанных.Вставить("Должность",		Выборка.Должность.Наименование);
		СтруктураОсновныхДанных.Вставить("Подразделение",	Выборка.Подразделение.Наименование);
		
		//Рохин Задача (76498)
		Если НЕ ЗначениеЗаполнено(Выборка.МестоХранения) Тогда
			СтруктураОсновныхДанных.Вставить("МестоХранения",	?(ЗначениеЗаполнено(Сотрудник.МестоХраненияСИЗ),СокрЛП(Сотрудник.МестоХраненияСИЗ.Код),"<Не определено>"));
		ИначеЕСли ЗначениеЗаполнено(Выборка.МестоХранения) Тогда
			СтруктураОсновныхДанных.Вставить("МестоХранения",	Выборка.МестоХранения.Код);
			//Рохин Задача (76498)
		Иначе
			СтруктураОсновныхДанных.Вставить("МестоХранения",	"<Не определено>");
		КонецЕсли;
		
	КонецЕсли;
	
	//контактная информация
	НайденныеСтрокиСТелефоном = Сотрудник.ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонФизическиеЛица));
	Если НайденныеСтрокиСТелефоном.Количество() = 0 Тогда
		ПредставлениеТелефона = "<Не задан>";
	Иначе
		ПредставлениеТелефона = НайденныеСтрокиСТелефоном[0].Представление;
	КонецЕсли;	
	
	НайденныеСтрокиСТелефоном = Сотрудник.ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица));
	Если НайденныеСтрокиСТелефоном.Количество() = 0 Тогда
		ПредставлениеПочты = "<Не задан>";
	Иначе
		ПредставлениеПочты = НайденныеСтрокиСТелефоном[0].Представление;
	КонецЕсли;
	
	СтруктураОсновныхДанных.Вставить("Телефон",	ПредставлениеТелефона);
	СтруктураОсновныхДанных.Вставить("Почта",	ПредставлениеПочты);
	
КонецПроцедуры

Функция Sizes(Telephone, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";	
	
	СтруктураАнтропометрии = Новый Структура;
	
	Попытка
		ПолучитьАнтропометрию(Сотрудник,СтруктураАнтропометрии);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СтруктураАнтропометрии);
	
КонецФункции

Процедура ПолучитьАнтропометрию(Сотрудник,СтруктураАнтропометрии)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияАнтропометрическихСвойств.ВидСвойства КАК ВидСвойства,
	|	ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК ЗначениеСвойства
	|ПОМЕСТИТЬ ВТ_Антропометрия
	|ИЗ
	|	РегистрСведений.ЗначенияАнтропометрическихСвойств КАК ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ЗначенияАнтропометрическихСвойств.Сотрудник = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыАнтропометрическихСвойств.Ссылка КАК ВидСвойства,
	|	ЕСТЬNULL(ВТ_Антропометрия.ЗначениеСвойства, """") КАК ЗначениеСвойства
	|ИЗ
	|	Справочник.ВидыАнтропометрическихСвойств КАК ВидыАнтропометрическихСвойств
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Антропометрия КАК ВТ_Антропометрия
	|		ПО ВидыАнтропометрическихСвойств.Ссылка = ВТ_Антропометрия.ВидСвойства";
	
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураАнтропометрии.Вставить("РазмерГоловногоУбора",	ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.РазмерГоловногоУбора))[0].ЗначениеСвойства);
	СтруктураАнтропометрии.Вставить("РазмерОбуви",			ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.РазмерОбуви))[0].ЗначениеСвойства);
	СтруктураАнтропометрии.Вставить("РазмерОдежды",			ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.РазмерОдежды))[0].ЗначениеСвойства);
	СтруктураАнтропометрии.Вставить("РазмерПерчаток",		ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.РазмерПерчаток))[0].ЗначениеСвойства);
	СтруктураАнтропометрии.Вставить("Рост",					ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.Рост))[0].ЗначениеСвойства);
	
КонецПроцедуры

Функция UserSettings(Telephone, Messages, GetPersonalProtectionGear, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";
	
	Попытка
		УстановитьНастройкиУведомлений(Сотрудник.ФизическоеЛицо,Messages,GetPersonalProtectionGear);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция Notifications(Telephone, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";	
	
	ТаблицаУведомлений = Новый ТаблицаЗначений;
	
	Попытка
		ПолучитьТаблицуУведомлений(Сотрудник,ТаблицаУведомлений);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаУведомлений);
	
КонецФункции

Процедура ПолучитьТаблицуУведомлений(Сотрудник,ТаблицаУведомлений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Уведомление.Дата КАК ДатаУведомления,
	|	Уведомление.ТекстУведомления КАК ТекстУведомления,
	|	ПРЕДСТАВЛЕНИЕ(Уведомление.ВидУведомления) КАК ВидУведомления,
	|	ВЫБОР
	|		КОГДА Уведомление.Отправлено
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК Отправлено
	|ИЗ
	|	Документ.Уведомление КАК Уведомление
	|ГДЕ
	|	Уведомление.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	
	ТаблицаУведомлений = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция Rating(Telephone, Value, Code, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";
	
	Попытка
		Рейтинг = УстановитьОценкуНоменклатуры(Сотрудник, Value, Code);
	Исключение
		Рейтинг = 0;
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Рейтинг;
	
КонецФункции

Функция УстановитьОценкуНоменклатуры(Сотрудник, Value, Code)
	
	Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("КодСинхронизации",Code);
	
	Если Номенклатура.Пустая() Тогда 
		Возврат 0;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОценкиНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Сотрудник 		= Сотрудник;
		НоваяЗапись.Номенклатура 	= Номенклатура;
		НоваяЗапись.Оценка 			= Value;
		
	Иначе
		
		НаборЗаписей[0].Оценка = Value;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	Возврат УстановитьРейтингНоменклатуры(Номенклатура);
	
КонецФункции	

Функция УстановитьРейтингНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОценкиНоменклатуры.Номенклатура КАК Номенклатура,
	|	ОценкиНоменклатуры.Оценка КАК Оценка
	|ПОМЕСТИТЬ ВТ_Оценки
	|ИЗ
	|	РегистрСведений.ОценкиНоменклатуры КАК ОценкиНоменклатуры
	|ГДЕ
	|	ОценкиНоменклатуры.Номенклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Оценки.Номенклатура КАК Номенклатура,
	|	СРЕДНЕЕ(ВТ_Оценки.Оценка) КАК Оценка
	|ИЗ
	|	ВТ_Оценки КАК ВТ_Оценки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Оценки.Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	Рейтинг = Запрос.Выполнить().Выгрузить()[0].Оценка;
	
	НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
	НоменклатураОбъект.Рейтинг = Рейтинг;
	НоменклатураОбъект.Записать();	
	
	Возврат НоменклатураОбъект.Ссылка.Рейтинг;
	
КонецФункции	

Функция GetStorageTable(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаДанныхПоСкладамДляЗаписи = Новый ТаблицаЗначений;
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьТаблицуСкладовВыдачи(ТаблицаДанныхПоСкладамДляЗаписи);
		Если ТаблицаДанныхПоСкладамДляЗаписи.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по складам для записи!";
		КонецЕсли;
		Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ВнешнийПользователь.ОбъектАвторизации);
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			СкладВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьСкладВыдачи(Справочники.Подразделения.ПустаяСсылка(),Сотрудник,Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача);
			НайденныеСтроки = ТаблицаДанныхПоСкладамДляЗаписи.НайтиСтроки(Новый Структура("Склад",СкладВыдачи.Наименование));
			Если НЕ НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки[0].ПоУмолчанию = Истина;
			КонецЕсли;
		Иначе
			СкладВыдачи = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;	
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаДанныхПоСкладамДляЗаписи);
	
КонецФункции

Процедура ПолучитьТаблицуСкладовВыдачи(ТаблицаДанныхПоСкладамДляЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикРаботыСклада.Склад.Наименование КАК Склад,
	|	ЛОЖЬ КАК ПоУмолчанию
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСклада КАК ГрафикРаботыСклада
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрафикРаботыСклада.Склад.Наименование";
	
	ТаблицаДанныхПоСкладамДляЗаписи = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция GetCurrentRecord(StorageName, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	СтруктураТекущейЗаписи = Новый Структура;
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьТекущуюЗапись(StorageName,ВнешнийПользователь.ОбъектАвторизации,СтруктураТекущейЗаписи);
		Если СтруктураТекущейЗаписи.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по записи на склад!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СтруктураТекущейЗаписи);
	
КонецФункции

Процедура ПолучитьТекущуюЗапись(StorageName,ФизическоеЛицо,СтруктураТекущейЗаписи)
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ФизическоеЛицо);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиНаСкладСрезПоследних.День КАК День,
	|	ЗаписиНаСкладСрезПоследних.Время КАК Время
	|ИЗ
	|	РегистрСведений.ЗаписиНаСклад.СрезПоследних(
	|			,
	|			Склад.Наименование = &НаименованиеСклада
	|				И Сотрудник = &Сотрудник
	|				И День >= &День) КАК ЗаписиНаСкладСрезПоследних
	|ГДЕ
	|	ЗаписиНаСкладСрезПоследних.Использовать";
	
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	Запрос.УстановитьПараметр("НаименованиеСклада",	StorageName);
	Запрос.УстановитьПараметр("День",				НачалоДня(ТекущаяДата()));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		СтруктураТекущейЗаписи.Вставить("День",	Дата(1,1,1,0,0,0));
		СтруктураТекущейЗаписи.Вставить("Время",Дата(1,1,1,0,0,0));
		
	Иначе
		
		ТаблицаЗапроса = Результат.Выгрузить();
		
		СтруктураТекущейЗаписи.Вставить("День",	ТаблицаЗапроса[0].День);
		СтруктураТекущейЗаписи.Вставить("Время",ТаблицаЗапроса[0].Время);
		
	КонецЕсли;	
	
КонецПроцедуры	

Функция GetDaysTable(StorageName, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаДнейДляЗаписи = Новый ТаблицаЗначений;
	
	Попытка  
		//Танцюра А.Н. -- №141627 Доработка веб-сервисов по записи на склад -- 02.11.2021 <<<
		//ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();  
		//Танцюра А.Н. -- №141627 Доработка веб-сервисов по записи на склад -- 02.11.2021 >>>
		ПолучитьТаблицуДнейДляЗаписи(ТаблицаДнейДляЗаписи,StorageName);
		Если ТаблицаДнейДляЗаписи.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по дням для записи!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаДнейДляЗаписи);
	
КонецФункции

&НаСервере
Процедура ПолучитьТаблицуДнейДляЗаписи(ТаблицаДнейДляЗаписи,StorageName)
	
	СкладДляЗаписи = Справочники.Склады.НайтиПоНаименованию(StorageName,Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикРаботыСклада.День КАК День
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСклада КАК ГрафикРаботыСклада
	|ГДЕ
	|	ГрафикРаботыСклада.Склад = &Склад
	|	И ГрафикРаботыСклада.День МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	День";
	
	Запрос.УстановитьПараметр("Склад",			СкладДляЗаписи);
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецПериода",	НачалоДня(ТекущаяДата()) + СкладДляЗаписи.ГоризонтПланирования * 24 * 3600);
	
	ТаблицаДнейДляЗаписи = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция GetTimeTable(StorageName, Day, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаВремениДляЗаписи = Новый ТаблицаЗначений;
	ТаблицаВремениДляЗаписи.Колонки.Добавить("Время");
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ПолучитьТаблицуВремениДляЗаписи(ТаблицаВремениДляЗаписи, StorageName, Day, ВнешнийПользователь.ОбъектАвторизации);
		Если ТаблицаВремениДляЗаписи.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по времени для записи!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаВремениДляЗаписи);    	
	
КонецФункции

&НаСервере
Процедура ПолучитьТаблицуВремениДляЗаписи(ТаблицаВремениДляЗаписи, StorageName, Day, ФизическоеЛицо)
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ФизическоеЛицо);
	СкладДляЗаписи = Справочники.Склады.НайтиПоНаименованию(StorageName,Истина);
	
	Организация = Сотрудник.Владелец;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикРаботыСклада.День КАК День,
	|	ГрафикРаботыСклада.КоличествоОкон КАК КоличествоОкон,
	|	ГрафикРаботыСклада.ВремяОбслуживания КАК ВремяОбслуживания,
	|	ГрафикРаботыСклада.НачалоРаботы КАК НачалоРаботы,
	|	ГрафикРаботыСклада.ОкончаниеРаботы КАК ОкончаниеРаботы,
	|	ГрафикРаботыСклада.НачалоПерерыва КАК НачалоПерерыва,
	|	ГрафикРаботыСклада.ОкончаниеПерерыва КАК ОкончаниеПерерыва
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСклада КАК ГрафикРаботыСклада
	|ГДЕ
	|	ГрафикРаботыСклада.Склад = &Склад
	|	И ГрафикРаботыСклада.День = &День";
	
	Запрос.УстановитьПараметр("Склад",	СкладДляЗаписи);
	Запрос.УстановитьПараметр("День",	НачалоДня(Day));
	
	ТаблицаГрафикаРаботыСклада = Запрос.Выполнить().Выгрузить();
	
	СеткаРаботыСклада = Новый ТаблицаЗначений;
	СеткаРаботыСклада.Колонки.Добавить("КоличествоОкон", 	ОбщегоНазначения.ОписаниеТипаЧисло(3,0,ДопустимыйЗнак.Неотрицательный));
	СеткаРаботыСклада.Колонки.Добавить("Время", 			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Время));
	
	Для Каждого СтрокаТаблицыГрафикаРаботыСклада Из ТаблицаГрафикаРаботыСклада Цикл
		
		НачалоОбслуживания = Дата(Год(СтрокаТаблицыГрафикаРаботыСклада.День),Месяц(СтрокаТаблицыГрафикаРаботыСклада.День),День(СтрокаТаблицыГрафикаРаботыСклада.День),Час(СтрокаТаблицыГрафикаРаботыСклада.НачалоРаботы),Минута(СтрокаТаблицыГрафикаРаботыСклада.НачалоРаботы),0);
		ОкончаниеОбслуживания = НачалоОбслуживания + СтрокаТаблицыГрафикаРаботыСклада.ВремяОбслуживания * 60;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыГрафикаРаботыСклада.НачалоПерерыва) Тогда
			НачалоПерерыва = Дата(Год(СтрокаТаблицыГрафикаРаботыСклада.День),Месяц(СтрокаТаблицыГрафикаРаботыСклада.День),День(СтрокаТаблицыГрафикаРаботыСклада.День),Час(СтрокаТаблицыГрафикаРаботыСклада.НачалоПерерыва),Минута(СтрокаТаблицыГрафикаРаботыСклада.НачалоПерерыва),0);
		Иначе
			НачалоПерерыва = СтрокаТаблицыГрафикаРаботыСклада.НачалоПерерыва;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеПерерыва) Тогда
			ОкончаниеПерерыва = Дата(Год(СтрокаТаблицыГрафикаРаботыСклада.День),Месяц(СтрокаТаблицыГрафикаРаботыСклада.День),День(СтрокаТаблицыГрафикаРаботыСклада.День),Час(СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеПерерыва),Минута(СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеПерерыва),0);
		Иначе
			ОкончаниеПерерыва = СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеПерерыва;
		КонецЕсли;
		
		КонецРабочегоДня = Дата(Год(СтрокаТаблицыГрафикаРаботыСклада.День),Месяц(СтрокаТаблицыГрафикаРаботыСклада.День),День(СтрокаТаблицыГрафикаРаботыСклада.День),Час(СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеРаботы),Минута(СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеРаботы),0);
		
		Если ЗначениеЗаполнено(НачалоПерерыва) И ЗначениеЗаполнено(ОкончаниеПерерыва) Тогда
			
			Пока НачалоОбслуживания < НачалоПерерыва Цикл
				
				НоваяСтрока 				= СеткаРаботыСклада.Добавить();
				НоваяСтрока.КоличествоОкон 	= СтрокаТаблицыГрафикаРаботыСклада.КоличествоОкон;
				НоваяСтрока.Время 			= Дата(1,1,1,Час(НачалоОбслуживания),Минута(НачалоОбслуживания),0);
				
				НачалоОбслуживания = НачалоОбслуживания + СтрокаТаблицыГрафикаРаботыСклада.ВремяОбслуживания * 60; 
				
			КонецЦикла;
			
			Пока ОкончаниеПерерыва < КонецРабочегоДня Цикл
				
				НоваяСтрока 				= СеткаРаботыСклада.Добавить();
				НоваяСтрока.КоличествоОкон 	= СтрокаТаблицыГрафикаРаботыСклада.КоличествоОкон;
				НоваяСтрока.Время 			= Дата(1,1,1,Час(ОкончаниеПерерыва),Минута(ОкончаниеПерерыва),0);
				
				ОкончаниеПерерыва = ОкончаниеПерерыва + СтрокаТаблицыГрафикаРаботыСклада.ВремяОбслуживания * 60; 
				
			КонецЦикла;
			
		Иначе	
			
			Пока НачалоОбслуживания < КонецРабочегоДня Цикл
				
				НоваяСтрока 				= СеткаРаботыСклада.Добавить();
				НоваяСтрока.КоличествоОкон 	= СтрокаТаблицыГрафикаРаботыСклада.КоличествоОкон;
				НоваяСтрока.Время 			= Дата(1,1,1,Час(НачалоОбслуживания),Минута(НачалоОбслуживания),0);
				
				НачалоОбслуживания = НачалоОбслуживания + СтрокаТаблицыГрафикаРаботыСклада.ВремяОбслуживания * 60; 
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСетки.КоличествоОкон КАК КоличествоОкон,
	|	ТаблицаСетки.Время КАК Время
	|ПОМЕСТИТЬ ВТ_СеткаРаботыСклада
	|ИЗ
	|	&ТаблицаСетки КАК ТаблицаСетки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиНаСкладСрезПоследних.Время КАК Время,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиНаСкладСрезПоследних.Сотрудник) КАК ЗанятоОкон
	|ПОМЕСТИТЬ ВТ_Занятые
	|ИЗ
	|	РегистрСведений.ЗаписиНаСклад.СрезПоследних(
	|			&ПериодАнализа,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И День = &День) КАК ЗаписиНаСкладСрезПоследних
	|ГДЕ
	|	ЗаписиНаСкладСрезПоследних.Организация = &Организация
	|	И ЗаписиНаСкладСрезПоследних.Склад = &Склад
	|	И ЗаписиНаСкладСрезПоследних.Использовать
	|	И ЗаписиНаСкладСрезПоследних.День = &День
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиНаСкладСрезПоследних.Время
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СеткаРаботыСклада.Время КАК Время,
	|	ВТ_СеткаРаботыСклада.КоличествоОкон КАК КоличествоОкон,
	|	ЕСТЬNULL(ВТ_Занятые.ЗанятоОкон, 0) КАК ЗанятоОкон
	|ИЗ
	|	ВТ_СеткаРаботыСклада КАК ВТ_СеткаРаботыСклада
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Занятые КАК ВТ_Занятые
	|		ПО ВТ_СеткаРаботыСклада.Время = ВТ_Занятые.Время
	|
	|УПОРЯДОЧИТЬ ПО
	|	Время";
	
	Запрос.УстановитьПараметр("ПериодАнализа", 	ТекущаяДата());
	Запрос.УстановитьПараметр("ТаблицаСетки", 	СеткаРаботыСклада);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Склад", 			СкладДляЗаписи);
	Запрос.УстановитьПараметр("День", 			Day);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если СтрокаТаблицыЗапроса.КоличествоОкон > СтрокаТаблицыЗапроса.ЗанятоОкон Тогда
			НоваяСтрока 		= ТаблицаВремениДляЗаписи.Добавить();
			НоваяСтрока.Время 	= СтрокаТаблицыЗапроса.Время;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Функция DeleteRecord(StorageName, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		ОтменитьЗаписьНаСклад(ВнешнийПользователь.ОбъектАвторизации, StorageName);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецФункции

Процедура ОтменитьЗаписьНаСклад(ФизическоеЛицо, StorageName);
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ФизическоеЛицо);
	СкладДляЗаписи = Справочники.Склады.НайтиПоНаименованию(StorageName,Истина);
	
	НовыйДокумент = Документы.ЗаписьНаСклад.СоздатьДокумент();
	НовыйДокумент.Организация 	= Сотрудник.Владелец;
	НовыйДокумент.Дата 			= ТекущаяДата();
	Попытка	
		НовыйДокумент.СоздательДокумента = ВнешниеПользователи.ТекущийВнешнийПользователь();
	Исключение	
	КонецПопытки;	
	НовыйДокумент.Сотрудник 	= Сотрудник;
	НовыйДокумент.Склад 		= СкладДляЗаписи;
	НовыйДокумент.Комментарий	= "Сформирован из мобильного приложения.";
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры	

Функция CreateRecord(StorageName, Day, Time, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Попытка
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
		СоздатьЗаписьНаСклад(ВнешнийПользователь.ОбъектАвторизации, Day, Time, StorageName);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Процедура СоздатьЗаписьНаСклад(ФизическоеЛицо, Day, Time, StorageName)
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ФизическоеЛицо);
	СкладДляЗаписи = Справочники.Склады.НайтиПоНаименованию(StorageName,Истина);
	
	НовыйДокумент = Документы.ЗаписьНаСклад.СоздатьДокумент();
	НовыйДокумент.Организация 	= Сотрудник.Владелец;
	НовыйДокумент.Дата 			= ТекущаяДата();
	Попытка	
		НовыйДокумент.СоздательДокумента = ВнешниеПользователи.ТекущийВнешнийПользователь();
	Исключение	
	КонецПопытки;	
	НовыйДокумент.Сотрудник 	= Сотрудник;
	НовыйДокумент.Склад 		= СкладДляЗаписи;
	НовыйДокумент.День			= Day;
	НовыйДокумент.Время			= Time;
	НовыйДокумент.Комментарий	= "Сформирован из мобильного приложения.";
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры	

Функция CurrentRecord(Telephone, StorageName, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	СтруктураТекущейЗаписи = Новый Структура;
	
	Попытка
		ПолучитьТекущуюЗаписьСотрудника(StorageName,Сотрудник,СтруктураТекущейЗаписи);
		Если СтруктураТекущейЗаписи.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по записи на склад!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(СтруктураТекущейЗаписи);
	
КонецФункции

Процедура ПолучитьТекущуюЗаписьСотрудника(StorageName,Сотрудник,СтруктураТекущейЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиНаСкладСрезПоследних.День КАК День,
	|	ЗаписиНаСкладСрезПоследних.Время КАК Время
	|ИЗ
	|	РегистрСведений.ЗаписиНаСклад.СрезПоследних(
	|			,
	|			Склад.Наименование = &НаименованиеСклада
	|				И Сотрудник = &Сотрудник
	|				И День >= &День) КАК ЗаписиНаСкладСрезПоследних
	|ГДЕ
	|	ЗаписиНаСкладСрезПоследних.Использовать";
	
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	Запрос.УстановитьПараметр("НаименованиеСклада",	StorageName);
	Запрос.УстановитьПараметр("День",				НачалоДня(ТекущаяДата()));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		СтруктураТекущейЗаписи.Вставить("День",	Дата(1,1,1,0,0,0));
		СтруктураТекущейЗаписи.Вставить("Время",Дата(1,1,1,0,0,0));
		
	Иначе
		
		ТаблицаЗапроса = Результат.Выгрузить();
		
		СтруктураТекущейЗаписи.Вставить("День",	ТаблицаЗапроса[0].День);
		СтруктураТекущейЗаписи.Вставить("Время",ТаблицаЗапроса[0].Время);
		
	КонецЕсли;	
	
КонецПроцедуры

Функция TimeTable(Telephone, StorageName, Day, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ТаблицаВремениДляЗаписи = Новый ТаблицаЗначений;
	ТаблицаВремениДляЗаписи.Колонки.Добавить("Время");
	
	Попытка
		ПолучитьТаблицуВремениДляЗаписиСотрудника(ТаблицаВремениДляЗаписи, StorageName, Day, Сотрудник);
		Если ТаблицаВремениДляЗаписи.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по времени для записи!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаВремениДляЗаписи);	
	
КонецФункции

&НаСервере
Процедура ПолучитьТаблицуВремениДляЗаписиСотрудника(ТаблицаВремениДляЗаписи, StorageName, Day, Сотрудник)
	
	СкладДляЗаписи = Справочники.Склады.НайтиПоНаименованию(StorageName,Истина);
	
	Организация = Сотрудник.Владелец;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикРаботыСклада.День КАК День,
	|	ГрафикРаботыСклада.КоличествоОкон КАК КоличествоОкон,
	|	ГрафикРаботыСклада.ВремяОбслуживания КАК ВремяОбслуживания,
	|	ГрафикРаботыСклада.НачалоРаботы КАК НачалоРаботы,
	|	ГрафикРаботыСклада.ОкончаниеРаботы КАК ОкончаниеРаботы
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСклада КАК ГрафикРаботыСклада
	|ГДЕ
	|	ГрафикРаботыСклада.Склад = &Склад
	|	И ГрафикРаботыСклада.День = &День";
	
	Запрос.УстановитьПараметр("Склад",	СкладДляЗаписи);
	Запрос.УстановитьПараметр("День",	НачалоДня(Day));
	
	ТаблицаГрафикаРаботыСклада = Запрос.Выполнить().Выгрузить();
	
	СеткаРаботыСклада = Новый ТаблицаЗначений;
	СеткаРаботыСклада.Колонки.Добавить("КоличествоОкон", 	ОбщегоНазначения.ОписаниеТипаЧисло(3,0,ДопустимыйЗнак.Неотрицательный));
	СеткаРаботыСклада.Колонки.Добавить("Время", 			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Время));
	
	Для Каждого СтрокаТаблицыГрафикаРаботыСклада Из ТаблицаГрафикаРаботыСклада Цикл
		
		НачалоОбслуживания = Дата(Год(СтрокаТаблицыГрафикаРаботыСклада.День),Месяц(СтрокаТаблицыГрафикаРаботыСклада.День),День(СтрокаТаблицыГрафикаРаботыСклада.День),Час(СтрокаТаблицыГрафикаРаботыСклада.НачалоРаботы),Минута(СтрокаТаблицыГрафикаРаботыСклада.НачалоРаботы),0);
		ОкончаниеОбслуживания = НачалоОбслуживания + СтрокаТаблицыГрафикаРаботыСклада.ВремяОбслуживания * 60;
		
		КонецРабочегоДня = Дата(Год(СтрокаТаблицыГрафикаРаботыСклада.День),Месяц(СтрокаТаблицыГрафикаРаботыСклада.День),День(СтрокаТаблицыГрафикаРаботыСклада.День),Час(СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеРаботы),Минута(СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеРаботы),0);
		
		Пока НачалоОбслуживания < КонецРабочегоДня Цикл
			
			НоваяСтрока 				= СеткаРаботыСклада.Добавить();
			НоваяСтрока.КоличествоОкон 	= СтрокаТаблицыГрафикаРаботыСклада.КоличествоОкон;
			НоваяСтрока.Время 			= Дата(1,1,1,Час(НачалоОбслуживания),Минута(НачалоОбслуживания),0);
			
			НачалоОбслуживания = НачалоОбслуживания + СтрокаТаблицыГрафикаРаботыСклада.ВремяОбслуживания * 60; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСетки.КоличествоОкон КАК КоличествоОкон,
	|	ТаблицаСетки.Время КАК Время
	|ПОМЕСТИТЬ ВТ_СеткаРаботыСклада
	|ИЗ
	|	&ТаблицаСетки КАК ТаблицаСетки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиНаСкладСрезПоследних.Время КАК Время,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиНаСкладСрезПоследних.Сотрудник) КАК ЗанятоОкон
	|ПОМЕСТИТЬ ВТ_Занятые
	|ИЗ
	|	РегистрСведений.ЗаписиНаСклад.СрезПоследних(
	|			&ПериодАнализа,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И День = &День) КАК ЗаписиНаСкладСрезПоследних
	|ГДЕ
	|	ЗаписиНаСкладСрезПоследних.Организация = &Организация
	|	И ЗаписиНаСкладСрезПоследних.Склад = &Склад
	|	И ЗаписиНаСкладСрезПоследних.Использовать
	|	И ЗаписиНаСкладСрезПоследних.День = &День
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиНаСкладСрезПоследних.Время
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СеткаРаботыСклада.Время КАК Время,
	|	ВТ_СеткаРаботыСклада.КоличествоОкон КАК КоличествоОкон,
	|	ЕСТЬNULL(ВТ_Занятые.ЗанятоОкон, 0) КАК ЗанятоОкон
	|ИЗ
	|	ВТ_СеткаРаботыСклада КАК ВТ_СеткаРаботыСклада
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Занятые КАК ВТ_Занятые
	|		ПО ВТ_СеткаРаботыСклада.Время = ВТ_Занятые.Время
	|
	|УПОРЯДОЧИТЬ ПО
	|	Время";
	
	Запрос.УстановитьПараметр("ПериодАнализа", 	ТекущаяДата());
	Запрос.УстановитьПараметр("ТаблицаСетки", 	СеткаРаботыСклада);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Склад", 			СкладДляЗаписи);
	Запрос.УстановитьПараметр("День", 			Day);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если СтрокаТаблицыЗапроса.КоличествоОкон > СтрокаТаблицыЗапроса.ЗанятоОкон Тогда
			НоваяСтрока 		= ТаблицаВремениДляЗаписи.Добавить();
			НоваяСтрока.Время 	= СтрокаТаблицыЗапроса.Время;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Функция CancelRecord(Telephone, StorageName, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	Попытка
		ОтменитьЗаписьСотрудника(Сотрудник, StorageName);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецФункции

Процедура ОтменитьЗаписьСотрудника(Сотрудник, StorageName);
	
	СкладДляЗаписи = Справочники.Склады.НайтиПоНаименованию(StorageName,Истина);
	
	НовыйДокумент 						= Документы.ЗаписьНаСклад.СоздатьДокумент();
	НовыйДокумент.Организация 			= Сотрудник.Владелец;
	НовыйДокумент.Дата 					= ТекущаяДата();
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.Сотрудник 			= Сотрудник;
	НовыйДокумент.Склад 				= СкладДляЗаписи;
	НовыйДокумент.Комментарий			= "Сформирован из мобильного приложения.";
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция NewRecord(Telephone, StorageName, Day, Time, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	Попытка
		СоздатьЗаписьСотрудника(Сотрудник, Day, Time, StorageName);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Процедура СоздатьЗаписьСотрудника(Сотрудник, Day, Time, StorageName)
	
	СкладДляЗаписи = Справочники.Склады.НайтиПоНаименованию(StorageName,Истина);
	
	НовыйДокумент 						= Документы.ЗаписьНаСклад.СоздатьДокумент();
	НовыйДокумент.Организация 			= Сотрудник.Владелец;
	НовыйДокумент.Дата 					= ТекущаяДата();
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.Сотрудник 			= Сотрудник;
	НовыйДокумент.Склад 				= СкладДляЗаписи;
	НовыйДокумент.День					= Day;
	НовыйДокумент.Время					= Time;
	НовыйДокумент.Комментарий			= "Сформирован из мобильного приложения.";
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция GetRepairTypes(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаВидовРемонта = Новый ТаблицаЗначений;
	
	Попытка
		ПолучитьТаблицуВидовРемонта(ТаблицаВидовРемонта);
		Если ТаблицаВидовРемонта.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по видам ремонта!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаВидовРемонта);
	
КонецФункции

Процедура ПолучитьТаблицуВидовРемонта(ТаблицаВидовРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыРемонтаСИЗ.Наименование КАК ВидРемонта,
	|	ВидыРемонтаСИЗ.Штрихкод КАК Штрихкод,
	|	ВидыРемонтаСИЗ.Код КАК Код
	|ИЗ
	|	Справочник.ВидыРемонтаСИЗ КАК ВидыРемонтаСИЗ";
	
	ТаблицаВидовРемонта = Запрос.Выполнить().Выгрузить();	
	
КонецПроцедуры

Функция DownloadRepair(BarCodeTable, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаШтрихкодов = СериализаторXDTO.ПрочитатьXDTO(BarCodeTable);
	
	Попытка
		Если ТаблицаШтрихкодов.Количество() = 0 Тогда
			ErrorMessage = "Нет информации для загрузки!";
		Иначе
			ЗагрузитьДокументРемонта(ТаблицаШтрихкодов,ErrorMessage);
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ErrorMessage;
	
КонецФункции

Процедура ЗагрузитьДокументРемонта(ТаблицаШтрихкодов,ErrorMessage)
	
	ШтрихкодИзделия = ТаблицаШтрихкодов[0].ШтрихкодИзделия;
	НомерДокумента  = ТаблицаШтрихкодов[0].НомерДокумента;
	
	Если ЗначениеЗаполнено(ШтрихкодИзделия) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатурыДляУчетаЧистки.Организация КАК Организация,
		|	ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник КАК Сотрудник,
		|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатурыДляУчетаЧистки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ШтрихкодыНоменклатурыДляУчетаЧистки.Номенклатура.ВесДляУчетаЧистки КАК Вес
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатурыДляУчетаЧистки КАК ШтрихкодыНоменклатурыДляУчетаЧистки
		|ГДЕ
		|	НЕ ШтрихкодыНоменклатурыДляУчетаЧистки.Сотрудник ЕСТЬ NULL
		|	И ШтрихкодыНоменклатурыДляУчетаЧистки.Штрихкод = &ШтрихкодИзделия";
		
		Запрос.УстановитьПараметр("ШтрихкодИзделия",ШтрихкодИзделия);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ErrorMessage = "Нет данных для ремонта.";
			Возврат;
		КонецЕсли;
		
		ТаблицаЗапроса = Результат.Выгрузить();
		
		ДокументОбъект = Документы.РемонтСредствЗащиты.СоздатьДокумент();
		ДокументОбъект.Организация 			= ТаблицаЗапроса[0].Организация;
		ДокументОбъект.Контрагент 			= Справочники.Контрагенты.ВостокСервис;
		ДокументОбъект.ШтрихкодИзделия 		= ШтрихкодИзделия;
		ДокументОбъект.ВидОперации 			= Перечисления.ВидыОперацийРемонтаСИЗ.Ремонт;
		ДокументОбъект.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
		ДокументОбъект.Ответственный        = ПараметрыСеанса.ТекущийПользователь;	
		ДокументОбъект.Дата					= ТекущаяДата();
		ДокументОбъект.Комментарий			= "Загружен автоматически. (№" + НомерДокумента + ")";
		
	Иначе
		
		ДокументОбъект = Документы.РемонтСредствЗащиты.СоздатьДокумент();
		ДокументОбъект.Организация 			= ПроцедурыРаботыСНормамиСервер.ПолучитьОрганизациюПоУмолчанию();
		ДокументОбъект.Контрагент 			= Справочники.Контрагенты.ВостокСервис;
		ДокументОбъект.ВидОперации 			= Перечисления.ВидыОперацийРемонтаСИЗ.Ремонт;
		ДокументОбъект.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
		ДокументОбъект.Ответственный        = ПараметрыСеанса.ТекущийПользователь;	
		ДокументОбъект.Дата					= ТекущаяДата();
		ДокументОбъект.Комментарий			= "Загружен автоматически. (№" + НомерДокумента + ")";
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыШтрихкодов Из ТаблицаШтрихкодов Цикл
		
		ВидРемонта = Справочники.ВидыРемонтаСИЗ.НайтиПоРеквизиту("Штрихкод",СтрокаТаблицыШтрихкодов.ШтрихкодВидаРемонта);
		
		Если ВидРемонта.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока 			= ДокументОбъект.Ремонт.Добавить();
		НоваяСтрока.ВидРемонта 	= ВидРемонта;
		
		Если ВидРемонта = Справочники.ВидыРемонтаСИЗ.РемонтуНеПодлежит Тогда
			ДокументОбъект.РемонтуНеПодлежит = Истина;
			НоваяСтрока.Количество 	= 1;
			НоваяСтрока.Цена		= 0;
			НоваяСтрока.Сумма		= 0;
		Иначе
			НоваяСтрока.Количество 	= СтрокаТаблицыШтрихкодов.Количество;
			НоваяСтрока.Цена		= Документы.РемонтСредствЗащиты.ПолучитьЦенуВидаРемонта(ВидРемонта,ДокументОбъект);
			НоваяСтрока.Сумма		= НоваяСтрока.Цена * НоваяСтрока.Количество;
		КонецЕсли;	
		
	КонецЦикла;	
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);    	
	
КонецПроцедуры	

//+++АсТБ_Alexey_113864_********************************************************************

Функция SetTexel_ID(Texel_ID, Telephone, ErrorMessage)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ErrorMessage = "";
	
	Попытка
		УстановитьTexel_ID(Сотрудник.ФизическоеЛицо,Texel_ID);
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Процедура УстановитьTexel_ID(ФизическоеЛицо,Texel_ID)
	
	ФизЛицоОбъект = ФизическоеЛицо.ПолучитьОбъект();
	ФизЛицоОбъект.Texel_ID = Texel_ID;
	ФизЛицоОбъект.Записать();	
	
КонецПроцедуры	

//---АсТБ_Alexey_113864_********************************************************************

//+++АсТБ_Alexey_113877_********************************************************************

Функция GetTableForTexel(ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	Попытка
		ПолучитьТаблицуНоменклатурыДляTexel(ТаблицаНоменклатуры);
		Если ТаблицаНоменклатуры.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по номенклатуре для Texel!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаНоменклатуры);
	
КонецФункции

Процедура ПолучитьТаблицуНоменклатурыДляTexel(ТаблицаНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Наименование КАК Номенклатура,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.КодСинхронизации КАК КодСинхронизации,
	|	Номенклатура.НавигационнаяСсылка КАК НавигационнаяСсылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ИспользуетсяДляПримеркиВTexel
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();	
	
КонецПроцедуры

//---АсТБ_Alexey_113877_********************************************************************

//+++АСТБ_ALEXEY_111202_**************************************************************

Функция StorageListTable(Telephone, ErrorMessage)
	
	ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
	
	ТаблицаСкладовПерсональнойВыдачи = Новый ТаблицаЗначений;
	
	Попытка
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			ПолучитьТаблицуСкладовПерсональнойВыдачи(ТаблицаСкладовПерсональнойВыдачи, Сотрудник);
			Если ТаблицаСкладовПерсональнойВыдачи.Количество() = 0 Тогда
				ErrorMessage = "Нет информации по складам персональной выдачи!";
			КонецЕсли;
		Иначе
			ErrorMessage = "Сотрудник не определен по номеру телефона!";
		КонецЕсли;
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаСкладовПерсональнойВыдачи);
	
КонецФункции

Процедура ПолучитьТаблицуСкладовПерсональнойВыдачи(ТаблицаСкладовПерсональнойВыдачи, Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкладыВыдачиСредствЗащиты.Склад КАК Склад,
	|	СкладыВыдачиСредствЗащиты.Получатель КАК Получатель
	|ПОМЕСТИТЬ ВТ_СкладыВыдачи
	|ИЗ
	|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
	|ГДЕ
	|	СкладыВыдачиСредствЗащиты.Организация = &Организация
	|	И СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыКонтактнаяИнформация.Ссылка КАК Склад,
	|	СкладыКонтактнаяИнформация.Вид КАК Вид,
	|	СкладыКонтактнаяИнформация.Представление КАК Представление
	|ПОМЕСТИТЬ ВТ_КонтактнаяИнформацияСкладов
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КонтактнаяИнформацияСкладов.Склад КАК Склад,
	|	ВТ_КонтактнаяИнформацияСкладов.Представление КАК Представление
	|ПОМЕСТИТЬ ВТ_КонтактныеЛицаСкладов
	|ИЗ
	|	ВТ_КонтактнаяИнформацияСкладов КАК ВТ_КонтактнаяИнформацияСкладов
	|ГДЕ
	|	ВТ_КонтактнаяИнформацияСкладов.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.КонтактноеЛицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КонтактнаяИнформацияСкладов.Склад КАК Склад,
	|	ВТ_КонтактнаяИнформацияСкладов.Представление КАК Представление
	|ПОМЕСТИТЬ ВТ_ТелефоныСкладов
	|ИЗ
	|	ВТ_КонтактнаяИнформацияСкладов КАК ВТ_КонтактнаяИнформацияСкладов
	|ГДЕ
	|	ВТ_КонтактнаяИнформацияСкладов.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСклада)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КонтактнаяИнформацияСкладов.Склад КАК Склад,
	|	ВТ_КонтактнаяИнформацияСкладов.Представление КАК Представление
	|ПОМЕСТИТЬ ВТ_ЭлектроннаяПочтаСкладов
	|ИЗ
	|	ВТ_КонтактнаяИнформацияСкладов КАК ВТ_КонтактнаяИнформацияСкладов
	|ГДЕ
	|	ВТ_КонтактнаяИнформацияСкладов.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailСклада)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КонтактнаяИнформацияСкладов.Склад КАК Склад,
	|	ВТ_КонтактнаяИнформацияСкладов.Представление КАК Представление
	|ПОМЕСТИТЬ ВТ_ФактическиеАдресаСкладов
	|ИЗ
	|	ВТ_КонтактнаяИнформацияСкладов КАК ВТ_КонтактнаяИнформацияСкладов
	|ГДЕ
	|	ВТ_КонтактнаяИнформацияСкладов.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресСклада)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СкладыВыдачи.Склад.Наименование КАК НаименованиеСклада,
	|	ВТ_СкладыВыдачи.Склад.Код КАК КодСклада,
	|	ЕСТЬNULL(ВТ_КонтактныеЛицаСкладов.Представление, """") КАК КонтактноеЛицо,
	|	ЕСТЬNULL(ВТ_ТелефоныСкладов.Представление, """") КАК Телефон,
	|	ЕСТЬNULL(ВТ_ЭлектроннаяПочтаСкладов.Представление, """") КАК ЭлектроннаяПочта,
	|	ЕСТЬNULL(ВТ_ФактическиеАдресаСкладов.Представление, """") КАК ФактическийАдрес
	|ИЗ
	|	ВТ_СкладыВыдачи КАК ВТ_СкладыВыдачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтактныеЛицаСкладов КАК ВТ_КонтактныеЛицаСкладов
	|		ПО ВТ_СкладыВыдачи.Склад = ВТ_КонтактныеЛицаСкладов.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТелефоныСкладов КАК ВТ_ТелефоныСкладов
	|		ПО ВТ_СкладыВыдачи.Склад = ВТ_ТелефоныСкладов.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЭлектроннаяПочтаСкладов КАК ВТ_ЭлектроннаяПочтаСкладов
	|		ПО ВТ_СкладыВыдачи.Склад = ВТ_ЭлектроннаяПочтаСкладов.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФактическиеАдресаСкладов КАК ВТ_ФактическиеАдресаСкладов
	|		ПО ВТ_СкладыВыдачи.Склад = ВТ_ФактическиеАдресаСкладов.Склад
	|ГДЕ
	|	ВТ_СкладыВыдачи.Получатель = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СкладыВыдачи.Склад.Наименование КАК НаименованиеСклада,
	|	ВТ_СкладыВыдачи.Склад.Код КАК КодСклада,
	|	ЕСТЬNULL(ВТ_КонтактныеЛицаСкладов.Представление, """") КАК КонтактноеЛицо,
	|	ЕСТЬNULL(ВТ_ТелефоныСкладов.Представление, """") КАК Телефон,
	|	ЕСТЬNULL(ВТ_ЭлектроннаяПочтаСкладов.Представление, """") КАК ЭлектроннаяПочта,
	|	ЕСТЬNULL(ВТ_ФактическиеАдресаСкладов.Представление, """") КАК ФактическийАдрес
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(
	|			,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК ЗанятыеРабочиеМестаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкладыВыдачи КАК ВТ_СкладыВыдачи
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтактныеЛицаСкладов КАК ВТ_КонтактныеЛицаСкладов
	|			ПО ВТ_СкладыВыдачи.Склад = ВТ_КонтактныеЛицаСкладов.Склад
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТелефоныСкладов КАК ВТ_ТелефоныСкладов
	|			ПО ВТ_СкладыВыдачи.Склад = ВТ_ТелефоныСкладов.Склад
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЭлектроннаяПочтаСкладов КАК ВТ_ЭлектроннаяПочтаСкладов
	|			ПО ВТ_СкладыВыдачи.Склад = ВТ_ЭлектроннаяПочтаСкладов.Склад
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФактическиеАдресаСкладов КАК ВТ_ФактическиеАдресаСкладов
	|			ПО ВТ_СкладыВыдачи.Склад = ВТ_ФактическиеАдресаСкладов.Склад
	|		ПО ЗанятыеРабочиеМестаОстатки.Подразделение = ВТ_СкладыВыдачи.Получатель
	|ГДЕ
	|	НЕ ВТ_СкладыВыдачи.Склад ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СкладыВыдачи.Склад.Наименование КАК НаименованиеСклада,
	|	ВТ_СкладыВыдачи.Склад.Код КАК КодСклада,
	|	ЕСТЬNULL(ВТ_КонтактныеЛицаСкладов.Представление, """") КАК КонтактноеЛицо,
	|	ЕСТЬNULL(ВТ_ТелефоныСкладов.Представление, """") КАК Телефон,
	|	ЕСТЬNULL(ВТ_ЭлектроннаяПочтаСкладов.Представление, """") КАК ЭлектроннаяПочта,
	|	ЕСТЬNULL(ВТ_ФактическиеАдресаСкладов.Представление, """") КАК ФактическийАдрес
	|ИЗ
	|	ВТ_СкладыВыдачи КАК ВТ_СкладыВыдачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтактныеЛицаСкладов КАК ВТ_КонтактныеЛицаСкладов
	|		ПО ВТ_СкладыВыдачи.Склад = ВТ_КонтактныеЛицаСкладов.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТелефоныСкладов КАК ВТ_ТелефоныСкладов
	|		ПО ВТ_СкладыВыдачи.Склад = ВТ_ТелефоныСкладов.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЭлектроннаяПочтаСкладов КАК ВТ_ЭлектроннаяПочтаСкладов
	|		ПО ВТ_СкладыВыдачи.Склад = ВТ_ЭлектроннаяПочтаСкладов.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФактическиеАдресаСкладов КАК ВТ_ФактическиеАдресаСкладов
	|		ПО ВТ_СкладыВыдачи.Склад = ВТ_ФактическиеАдресаСкладов.Склад
	|ГДЕ
	|	(ВТ_СкладыВыдачи.Получатель = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			ИЛИ ВТ_СкладыВыдачи.Получатель = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ИЛИ ВТ_СкладыВыдачи.Получатель = НЕОПРЕДЕЛЕНО)";
	
	Запрос.УстановитьПараметр("Организация", 	Сотрудник.Владелец);
	Запрос.УстановитьПараметр("Сотрудник", 		Сотрудник);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СкладыПоСотруднику 		= Результат[6].Выгрузить();
	СкладыПоПодразделению 	= Результат[7].Выгрузить();
	СкладыПоОрганизации 	= Результат[8].Выгрузить();
	
	Если НЕ СкладыПоСотруднику.Количество() = 0 Тогда
		ТаблицаСкладовПерсональнойВыдачи = СкладыПоСотруднику;
	Иначе
		Если НЕ СкладыПоПодразделению.Количество() = 0 Тогда
			ТаблицаСкладовПерсональнойВыдачи = СкладыПоПодразделению;
		Иначе
			Если НЕ СкладыПоОрганизации.Количество() = 0 Тогда
				ТаблицаСкладовПерсональнойВыдачи = СкладыПоОрганизации;
			Иначе //возвращаем пустую таблицу с колонками
				ТаблицаСкладовПерсональнойВыдачи.Колонки.Добавить("НаименованиеСклада", Новый ОписаниеТипов("Строка"));
				ТаблицаСкладовПерсональнойВыдачи.Колонки.Добавить("КодСклада", 			Новый ОписаниеТипов("Строка"));
				ТаблицаСкладовПерсональнойВыдачи.Колонки.Добавить("КонтактноеЛицо", 	Новый ОписаниеТипов("Строка"));
				ТаблицаСкладовПерсональнойВыдачи.Колонки.Добавить("Телефон", 			Новый ОписаниеТипов("Строка"));
				ТаблицаСкладовПерсональнойВыдачи.Колонки.Добавить("ЭлектроннаяПочта", 	Новый ОписаниеТипов("Строка"));
				ТаблицаСкладовПерсональнойВыдачи.Колонки.Добавить("ФактическийАдрес", 	Новый ОписаниеТипов("Строка"));
			КонецЕсли;	
		КонецЕсли;	
	Конецесли;
	
КонецПроцедуры	

//---АСТБ_ALEXEY_111202_**************************************************************

//Танцюра А.Н. -- №141627 Доработка веб-сервисов по записи на склад -- 02.11.2021 <<<

Функция Get_Storage_Table(Telephone, ErrorMessage)
	
    ErrorMessage = "";
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТаблицаДанныхПоСкладамДляЗаписи = Новый ТаблицаЗначений;
	
	Попытка
		Сотрудник = ПолучитьСотрудникаПоНомеруТелефона(Telephone);
		ПолучитьТаблицуСкладовВыдачи(ТаблицаДанныхПоСкладамДляЗаписи);
		Если ТаблицаДанныхПоСкладамДляЗаписи.Количество() = 0 Тогда
			ErrorMessage = "Нет информации по складам для записи!";
		КонецЕсли;
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			СкладВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьСкладВыдачи(Справочники.Подразделения.ПустаяСсылка(),Сотрудник,Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача);
			НайденныеСтроки = ТаблицаДанныхПоСкладамДляЗаписи.НайтиСтроки(Новый Структура("Склад",СкладВыдачи.Наименование));
			Если НЕ НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки[0].ПоУмолчанию = Истина;
			КонецЕсли;
		Иначе
			СкладВыдачи = Справочники.Склады.ПустаяСсылка();
			ErrorMessage = "Сотрудник не определен по номеру телефона!";
		КонецЕсли;	
	Исключение
		ErrorMessage = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ТаблицаДанныхПоСкладамДляЗаписи);
	
КонецФункции

//Танцюра А.Н. -- №141627 Доработка веб-сервисов по записи на склад -- 02.11.2021 >>>