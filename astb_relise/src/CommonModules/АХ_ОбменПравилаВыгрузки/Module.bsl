
#Область ПоДаннымВебСервисаАХ

#Область СлужебныйПрограммныйИнтерфейс

Функция СформироватьПакетОбмена(Прокси,МассивДанных,СтруктураОбработкиОшибок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ВозвращаемыйСписок = СоздатьОбъект(Прокси, "Объекты");
	
	Для Каждого Данные из МассивДанных цикл
		
		ОбъектXDTO = ПолучитьОбъектXDTO(Прокси,Данные,СтруктураОбработкиОшибок);
		
		Если СтруктураОбработкиОшибок.ЕстьОшибки Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ОбъектXDTO <> Неопределено Тогда
			ВозвращаемыйСписок.Объекты.Добавить(ОбъектXDTO);
		КонецЕсли;
		
	КонецЦикла;
	
	//есть список для отправки пустой, тоже ошибка
	Если ВозвращаемыйСписок.Объекты.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(нСтр("ru='Нет данных для отправки'", "ru"),,,,СтруктураОбработкиОшибок.ЕстьОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть());
	
КонецФункции // СформироватьПакетОбменаПередачиПоступлений()

Функция ИнициализироватьДанныеКОтправкеПланаСнятия() Экспорт
	
	СтруктураДанных = Новый Структура("Назначение,СборкаСМезонина,ЗаполнятьЗонуКомплектации,ЗаполнятьМезонин,УправленческийДокумент,УзелТочкиХранения,Качество,Комментарий,Товары,ТоварыНеСлотовыхСкладов","ПланСнятия",ложь,Ложь,Ложь);	
	СтруктураДанных.УправленческийДокумент = ИнициализироватьДанныеУправленческогоДокумента();
	
	ОписаниеТипаНоменклатура = АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Номенклатура");
	ОписаниеТипаХарактеристикаНоменклатуры = АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ХарактеристикаНоменклатуры");	
	ОписаниеТипаКоличество = АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Количество");
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", ОписаниеТипаНоменклатура);
	ТаблицаТовары.Колонки.Добавить("ХарактеристикаНоменклатуры", ОписаниеТипаХарактеристикаНоменклатуры);
	ТаблицаТовары.Колонки.Добавить("Количество",ОписаниеТипаКоличество);	
	ТаблицаТовары.Колонки.Добавить("Заказ", АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Заказ"));
	
	ТоварыНеСлотовыхСкладов = Новый ТаблицаЗначений;
	ТоварыНеСлотовыхСкладов.Колонки.Добавить("Номенклатура",ОписаниеТипаНоменклатура);
	ТоварыНеСлотовыхСкладов.Колонки.Добавить("ХарактеристикаНоменклатуры",ОписаниеТипаХарактеристикаНоменклатуры);
	ТоварыНеСлотовыхСкладов.Колонки.Добавить("Количество",ОписаниеТипаКоличество);	
	
	СтруктураДанных.Товары = ТаблицаТовары; 
	СтруктураДанных.ТоварыНеСлотовыхСкладов = ТоварыНеСлотовыхСкладов; 
	
	Возврат СтруктураДанных
	
КонецФункции // СтруктураДанныхПланаСнятия()

Функция ИнициализироватьДанныеКОтправкеСнятия() Экспорт
	
	СтруктураДанных = Новый Структура("ДокументОснование,УзелТочкиХранения,Качество,Комментарий,Товары");	
	
	ОписаниеТипаНоменклатура = АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Номенклатура");
	ОписаниеТипаХарактеристикаНоменклатуры = АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ХарактеристикаНоменклатуры");	
	ОписаниеТипаКоличество = АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Количество");
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", ОписаниеТипаНоменклатура);
	ТаблицаТовары.Колонки.Добавить("ХарактеристикаНоменклатуры", ОписаниеТипаХарактеристикаНоменклатуры);
	ТаблицаТовары.Колонки.Добавить("Количество",ОписаниеТипаКоличество);	
	
	СтруктураДанных.Товары = ТаблицаТовары; 
	
	Возврат СтруктураДанных
	
КонецФункции // СтруктураДанныхПланаСнятия()

Функция ИнициализироватьДанныеКотправкеПоступления() Экспорт
	
	СтруктураДанных = Новый Структура("КонтролироватьТоварыВСборке,МезонинКакЗонаПоступления,УзелТочкиХранения,УправленческийДокумент,ПриходныеДокументы,Товары",ложь,Ложь);	
	СтруктураДанных.УправленческийДокумент = ИнициализироватьДанныеУправленческогоДокумента();
	
	//типизируем только те позиции, которые необходимо использовать в запросе
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("ХарактеристикаНоменклатуры",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ХарактеристикаНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("Количество",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Количество"));
	ТаблицаТовары.Колонки.Добавить("Короб");
	ТаблицаТовары.Колонки.Добавить("КоличествоУпр");
	
	//заказ покупателя в случае поступления необходим, только для записи в регистр данныеВАдресномХранении
	ТаблицаТовары.Колонки.Добавить("Заказ", АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Заказ")); 
	
	МассивПриходныхДокументов = Новый Массив;
	
	СтруктураДанных.ПриходныеДокументы = МассивПриходныхДокументов; 
	СтруктураДанных.Товары = ТаблицаТовары;
	
	Возврат СтруктураДанных
	
КонецФункции // ИнициализироватьДанныеКотправкеПоступления()

функция ИнициализироватьДанныеУправленческогоДокумента() Экспорт 	
	
	СтруктураУправленческогоДокумента = Новый Структура("Ссылка,Получатель,НаименованиеОрганизации");
	Возврат СтруктураУправленческогоДокумента
	
КонецФункции

Функция ПодготовитьДанныеАдресногоПоступления(ДокументПоступления,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок) Экспорт 
	
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеНоменклатуры") Тогда
		СтруктураДанных = ЗаполнитьАдресноеПоступлениеПоДокументуПоступлениеНоменклатуры(ДокументПоступления,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок);
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ОприходованиеНоменклатуры") Тогда		
		СтруктураДанных = ЗаполнитьАдресноеПоступлениеПоДокументуОприходованиеНоменклатуры(ДокументПоступления,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок);
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику") Тогда
		СтруктураДанных = ЗаполнитьАдресноеПоступлениеПоДокументуВыдачаСредствЗащитыСотруднику(ДокументПоступления,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок);
	иначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПеремещениеНоменклатуры") Тогда
		СтруктураДанных = ЗаполнитьАдресноеПоступлениеПоДокументуПеремещениеНоменклатуры(ДокументПоступления,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок);	
	иначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ВозвратСредствЗащитыОтСотрудника") Тогда
		СтруктураДанных = ЗаполнитьАдресноеПоступлениеПоДокументуВозвратСредствЗащитыОтСотрудника(ДокументПоступления,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок);	
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		СтруктураДанных = ЗаполнитьАдресноеПоступлениеПоДокументуКомплектацияНоменклатуры(ДокументПоступления,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок);			
	КонецЕсли;
	
	Если ЭтоПредварительнаяПроверка Тогда
		Возврат Неопределено
	иначе
		Возврат СтруктураДанных
	КонецЕсли;	
	
КонецФункции

Функция ПодготовитьДанныеАдресногоПланаСнятия(ДокументРасхода,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных = Неопределено) Экспорт 
	
	Если ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику") Тогда
		СтруктураДанных = ЗаполнитьАдресныйПланСнятияПоДокументуВыдачаСредствЗащитыСотруднику(ДокументРасхода,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных);
	ИначеЕсли ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.СписаниеНоменклатуры") Тогда		
		СтруктураДанных = ЗаполнитьАдресныйПланСнятияПоДокументуСписаниеНоменклатуры(ДокументРасхода,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных);		
	ИначеЕсли ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.ПеремещениеНоменклатуры") Тогда		
		СтруктураДанных = ЗаполнитьАдресныйПланСнятияПоДокументуПеремещениеНоменклатуры(ДокументРасхода,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных);
	ИначеЕсли ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.ВозвратНоменклатурыПоставщику") Тогда		
		СтруктураДанных = ЗаполнитьАдресныйПланСнятияПоДокументуВозвратНоменклатурыПоставщику(ДокументРасхода,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных);
	ИначеЕсли ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.ВыдачаДежурныхСредствЗащиты") Тогда		
		СтруктураДанных = ЗаполнитьАдресныйПланСнятияПоДокументуВыдачаДежурныхСредствЗащиты(ДокументРасхода,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных);				
	ИначеЕсли ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда		
		СтруктураДанных = ЗаполнитьАдресныйПланСнятияПоДокументуКомплектацияНоменклатуры(ДокументРасхода,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных);	
	КонецЕсли;
	
	Если ЭтоПредварительнаяПроверка Тогда
		Возврат Неопределено
	иначе
		Возврат СтруктураДанных
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьДанныеАдресногоСнятия(ДокументСнятия,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок) Экспорт 
	
	Если ТипЗнч(ДокументСнятия) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику") Тогда
		СтруктураДанных = ЗаполнитьАдресноеСнятиеПоДокументуВыдачаСредствЗащитыСотруднику(ДокументСнятия,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок);
	КонецЕсли;
	
	//добавить документ списание номенклатуры
	
	Если ЭтоПредварительнаяПроверка Тогда
		Возврат Неопределено
	иначе
		Возврат СтруктураДанных
	КонецЕсли;	
	
КонецФункции // ПодготовитьДанныеАдресногоСнятия()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОбъектXDTO(Прокси, Данные,СтруктураОбработкиОшибок = Неопределено) Экспорт
	
	ПередаваемыйОбъект = Неопределено;
	
	Если ТипЗнч(Данные) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьВНоменклатура(Прокси,Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьВХарактеристикиНоменклатуры(Прокси, Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументСсылка.ПоступлениеНоменклатуры")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ОприходованиеНоменклатуры")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ВозвратСредствЗащитыОтСотрудника") Тогда
		
		ПередаваемыйОбъект = ПодготовитьИВыгрузитьВПоступлениеТовара(Прокси,Данные,СтруктураОбработкиОшибок);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументСсылка.СписаниеНоменклатуры")
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ВозвратНоменклатурыПоставщику") 
		ИЛИ ТипЗнч(Данные) = Тип("ДокументСсылка.ВыдачаДежурныхСредствЗащиты") Тогда
		
		ПередаваемыйОбъект = ПодготовитьИВыгрузитьВПланСнятия(Прокси,Данные,СтруктураОбработкиОшибок);
		
		//в случае,если нужно синхронизировать документ в определенный тип документа в адресном хранении
		//нужно использовать Структуру, Ключ - Строка, значение  - Ссылка на документ, либо поступление	
		
	ИначеЕсли ТипЗнч(Данные) = Тип("Соответствие") Тогда
		
		Если Данные.Получить("ПланСнятия") <> Неопределено Тогда
			
			СсылкаНаДокумент = Данные.Получить("ПланСнятия");			
			ПередаваемыйОбъект = ПодготовитьИВыгрузитьВПланСнятия(Прокси,СсылкаНаДокумент,СтруктураОбработкиОшибок);
			
		ИначеЕсли Данные.Получить("ПланСнятияИПоступление") <> Неопределено Тогда
			
			СсылкаНаДокумент = Данные.Получить("ПланСнятияИПоступление");			
			ПередаваемыйОбъект = ПодготовитьИВыгрузитьВПланСнятияИПоступлениеТовара(Прокси,СсылкаНаДокумент,СтруктураОбработкиОшибок);
			
		ИначеЕсли Данные.Получить("ПланСнятияИПоступление_ПримеркаТовара") <> Неопределено Тогда
			
			СсылкаНаДокумент = Данные.Получить("ПланСнятияИПоступление_ПримеркаТовара");			
			ПередаваемыйОбъект = ПодготовитьИВыгрузитьВПланСнятияИПоступлениеТовара_ПримеркаТовара(Прокси,СсылкаНаДокумент,СтруктураОбработкиОшибок);
			
		ИначеЕсли Данные.Получить("Снятие") <> Неопределено Тогда
			
			СсылкаНаДокумент = Данные.Получить("Снятие");			
			ПередаваемыйОбъект = ПодготовитьИВыгрузитьВСнятие(Прокси,СсылкаНаДокумент,СтруктураОбработкиОшибок);
			
		ИначеЕсли Данные.Получить("ВыборочнаяПередачаДанныхВПланСнятияСМезонина") <> Неопределено Тогда
			
			Параметры = Данные.Получить("ВыборочнаяПередачаДанныхВПланСнятияСМезонина");
			
			СсылкаНаДокумент = Параметры.Источник;
			СтруктураВходящихДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище);
			
			ПередаваемыйОбъект = ПодготовитьИВыгрузитьВПланСнятияТоварыВМезонине(Прокси,СсылкаНаДокумент,СтруктураОбработкиОшибок,СтруктураВходящихДанных);
			
		ИначеЕсли Данные.Получить("ПередачаТранспортнойПоставки") <> Неопределено Тогда
			// транспортная поставка, это групповая передача документов поступлений, на нее своя задача
			
			МассивПоступлений = Данные.Получить("ПередачаТранспортнойПоставки");			
			ПередаваемыйОбъект = ПодготовитьИВыгрузитьТранспортнуюПоставкуВПоступлениеТовара(Прокси,МассивПоступлений,СтруктураОбработкиОшибок);
			
			//тестовый режим
		ИначеЕсли Данные.Получить("ОтменаУправленческогоДокумента") <> Неопределено Тогда
			
			СсылкаНаДокумент = Данные.Получить("ОтменаУправленческогоДокумента");						
			ПередаваемыйОбъект = ПодготовитьИВыгрузитьВОтменуУправленческогоДокумента(Прокси,СсылкаНаДокумент,СтруктураОбработкиОшибок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции // ПолучитьОбъектXDTO()

Функция СоздатьОбъект(Прокси, ТипОбъекта) Экспорт
	
	Возврат Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("EisfExchange", ТипОбъекта));
	
КонецФункции // СоздатьОбъект()

Функция НайтиПодчиненныйДокумент(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеВАдресномХранении.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.АХ_ДанныеВАдресномХранении КАК ДанныеВАдресномХранении
	|ГДЕ
	|	ДанныеВАдресномХранении.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ",Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой()
	
КонецФункции

Функция ПолучитьПризнакХарактеристикиНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции // ПолучитьПризнакХарактеристикиНоменклатуры()

Функция СформироватьКомментарийКДокументу(Документ)
	
	ТекущийКомментарий = Документ.Комментарий;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику") Тогда
		
		ТекущийКомментарий = ВРег(Строка(Документ.ВидВыдачиСИЗ)) + " / "  + ТекущийКомментарий;
		
	КонецЕсли;

	Возврат ТекущийКомментарий;
	
КонецФункции // ДополнитьКомментарийСлужебнымСообщением()

#Область Поступление

Функция ЗаполнитьАдресноеПоступлениеПоДокументуПоступлениеНоменклатуры(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеНоменклатуры.Ссылка КАК УпрДокумент,
	|	ПоступлениеНоменклатуры.Склад.АХ_КодУзлаТочкиХранения КАК УзелТочкиХранения,
	|	ПоступлениеНоменклатуры.Проведен КАК Проведен,
	|	ПоступлениеНоменклатуры.Склад.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладу,
	|	ПоступлениеНоменклатуры.Организация.Наименование КАК НаименованиеОрганизации,
	|	ПоступлениеНоменклатуры.Ссылка КАК Ссылка,
	|	ПоступлениеНоменклатуры.Склад.АХ_АббревиатураСклада КАК Абреввиатура,
	|	ПоступлениеНоменклатуры.Склад КАК Получатель
	|ИЗ
	|	Документ.ПоступлениеНоменклатуры КАК ПоступлениеНоменклатуры
	|ГДЕ
	|	ПоступлениеНоменклатуры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	Если НЕ ВыборкаШапка.Проведен ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладу ИЛИ АХ_ОбменВызовСервера.НайтиПодчиненныйДокумент(Ссылка,Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара) Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара);
	
	ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные",Истина);
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураДанных = ИнициализироватьДанныеКотправкеПоступления();		
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных.УправленческийДокумент,ВыборкаШапка);		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		Для каждого СтрокаТабличнойЧасти из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
			
			НоваяСтрока.Количество = СтрокаТабличнойЧасти.Количество;
			НоваяСтрока.КоличествоУпр = НоваяСтрока.Количество;
			
		КонецЦикла;
		
		СтруктураДанных.ПриходныеДокументы.Добавить(СтруктураДанных.УправленческийДокумент);
				
		Возврат СтруктураДанных;
		
	КонецЕсли;	
	
КонецФункции

Функция ЗаполнитьАдресноеПоступлениеПоДокументуОприходованиеНоменклатуры(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОприходованиеНоменклатуры.Ссылка КАК УпрДокумент,
	|	ОприходованиеНоменклатуры.Склад.АХ_КодУзлаТочкиХранения КАК УзелТочкиХранения,
	|	ОприходованиеНоменклатуры.Проведен КАК Проведен,
	|	ОприходованиеНоменклатуры.Склад.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладу,
	|	ОприходованиеНоменклатуры.Организация.Наименование КАК НаименованиеОрганизации,
	|	ОприходованиеНоменклатуры.Ссылка КАК Ссылка,
	|	ОприходованиеНоменклатуры.Склад.АХ_АббревиатураСклада КАК Абреввиатура,
	|	ОприходованиеНоменклатуры.Склад КАК Получатель
	|ИЗ
	|	Документ.ОприходованиеНоменклатуры КАК ОприходованиеНоменклатуры
	|ГДЕ
	|	ОприходованиеНоменклатуры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	
	Если НЕ ВыборкаШапка.Проведен ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладу ИЛИ АХ_ОбменВызовСервера.НайтиПодчиненныйДокумент(Ссылка,Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара) Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара);
	
	ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные",Истина);
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураДанных = ИнициализироватьДанныеКотправкеПоступления();		
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных.УправленческийДокумент,ВыборкаШапка);		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		Для каждого СтрокаТабличнойЧасти из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
			
			НоваяСтрока.Количество = СтрокаТабличнойЧасти.Количество;
			НоваяСтрока.КоличествоУпр = НоваяСтрока.Количество;
			
		КонецЦикла;
		
		СтруктураДанных.ПриходныеДокументы.Добавить(СтруктураДанных.УправленческийДокумент);
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьАдресноеПоступлениеПоДокументуВозвратСредствЗащитыОтСотрудника(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратСредствЗащитыОтСотрудника.Ссылка КАК УпрДокумент,
	|	ВозвратСредствЗащитыОтСотрудника.Склад.АХ_КодУзлаТочкиХранения КАК УзелТочкиХранения,
	|	ВозвратСредствЗащитыОтСотрудника.Проведен КАК Проведен,
	|	ВозвратСредствЗащитыОтСотрудника.Склад.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладу,
	|	ВозвратСредствЗащитыОтСотрудника.Организация.Наименование КАК НаименованиеОрганизации,
	|	ВозвратСредствЗащитыОтСотрудника.Ссылка КАК Ссылка,
	|	ВозвратСредствЗащитыОтСотрудника.Склад.АХ_АббревиатураСклада КАК Абреввиатура,
	|	ВозвратСредствЗащитыОтСотрудника.Склад КАК Получатель
	|ИЗ
	|	Документ.ВозвратСредствЗащитыОтСотрудника КАК ВозвратСредствЗащитыОтСотрудника
	|ГДЕ
	|	ВозвратСредствЗащитыОтСотрудника.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	Если НЕ ВыборкаШапка.Проведен ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладу ИЛИ АХ_ОбменВызовСервера.НайтиПодчиненныйДокумент(Ссылка,Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара) Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара);
	
	ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные");
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураДанных = ИнициализироватьДанныеКотправкеПоступления();		
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных.УправленческийДокумент,ВыборкаШапка);		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		Для каждого СтрокаТабличнойЧасти из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
			
			НоваяСтрока.Количество = СтрокаТабличнойЧасти.Количество;
			НоваяСтрока.КоличествоУпр = НоваяСтрока.Количество;
			
		КонецЦикла;
		
		СтруктураДанных.ПриходныеДокументы.Добавить(СтруктураДанных.УправленческийДокумент);
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьАдресноеПоступлениеПоДокументуВыдачаСредствЗащитыСотруднику(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаСредствЗащитыСотруднику.Ссылка КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|			ТОГДА ВыдачаСредствЗащитыСотруднику.СкладОтправитель.АХ_КодУзлаТочкиХранения
	|		ИНАЧЕ ВыдачаСредствЗащитыСотруднику.Склад.АХ_КодУзлаТочкиХранения
	|	КОНЕЦ КАК УзелТочкиХранения,
	|	ВыдачаСредствЗащитыСотруднику.Проведен КАК Проведен,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|			ТОГДА ВыдачаСредствЗащитыСотруднику.СкладОтправитель.АХ_СлотовыйУчетПоСкладу
	|		ИНАЧЕ ВыдачаСредствЗащитыСотруднику.Склад.АХ_СлотовыйУчетПоСкладу
	|	КОНЕЦ КАК СлотовыйУчетПоСкладу,
	|	ЛОЖЬ КАК ЗаполнятьЗонуКомплектации,
	|	""Новый"" КАК Качество,
	|	ВыдачаСредствЗащитыСотруднику.Организация.Наименование КАК НаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача)
	|				ИЛИ ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача)
	|			ТОГДА ВыдачаСредствЗащитыСотруднику.Сотрудник
	|		КОГДА ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|			ТОГДА ВыдачаСредствЗащитыСотруднику.СкладОтправитель
	|		ИНАЧЕ ВыдачаСредствЗащитыСотруднику.Склад
	|	КОНЕЦ КАК Получатель,
	|	ВыдачаСредствЗащитыСотруднику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВыдачаСредствЗащитыСотруднику КАК ВыдачаСредствЗащитыСотруднику
	|ГДЕ
	|	ВыдачаСредствЗащитыСотруднику.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	Если НЕ ВыборкаШапка.Проведен ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладу Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия);
	
	ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоОтрицательные");
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;

		СтруктураДанных = ИнициализироватьДанныеКотправкеПоступления();		
		СтруктураДанных.КонтролироватьТоварыВСборке = Истина;
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных.УправленческийДокумент,ВыборкаШапка);		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		Для каждого СтрокаТабличнойЧасти из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
			
			НоваяСтрока.Количество = -СтрокаТабличнойЧасти.Количество;
			НоваяСтрока.КоличествоУпр = НоваяСтрока.Количество;
			
		КонецЦикла;
		
		СтруктураДанных.ПриходныеДокументы.Добавить(СтруктураДанных.УправленческийДокумент);
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьАдресноеПоступлениеПоДокументуПеремещениеНоменклатуры(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеНоменклатуры.Ссылка КАК ДокументОснование,
	|	ПеремещениеНоменклатуры.Проведен КАК Проведен,
	|	ЛОЖЬ КАК ЗаполнятьЗонуКомплектации,
	|	""Новый"" КАК Качество,
	|	ПеремещениеНоменклатуры.Организация.Наименование КАК НаименованиеОрганизации,
	|	ПеремещениеНоменклатуры.Ссылка КАК Ссылка,
	|	ПеремещениеНоменклатуры.СкладПолучатель.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладуПолучатель,
	|	ПеремещениеНоменклатуры.СкладПолучатель.АХ_КодУзлаТочкиХранения КАК УзелТочкиХранения,
	|	ПеремещениеНоменклатуры.СкладПолучатель КАК Получатель,
	|	ПеремещениеНоменклатуры.СкладПолучатель.АХ_АббревиатураСклада КАК АббревиатураСклада,
	|	ПеремещениеНоменклатуры.СкладОтправитель.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладуОтправитель,
	|	ПеремещениеНоменклатуры.СкладОтправитель.АХ_КодУзлаТочкиХранения КАК КодУзлаТочкиХраненияОтправитель,
	|	ПеремещениеНоменклатуры.СкладПолучатель.АХ_КодУзлаТочкиХранения КАК КодУзлаТочкиХраненияПолучатель,
	|	ПеремещениеНоменклатуры.СкладОтправитель КАК СкладОтправитель
	|ИЗ
	|	Документ.ПеремещениеНоменклатуры КАК ПеремещениеНоменклатуры
	|ГДЕ
	|	ПеремещениеНоменклатуры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	Если НЕ ВыборкаШапка.Проведен
		ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладуПолучатель 
		ИЛИ АХ_ОбменВызовСервера.НайтиПодчиненныйДокумент(Ссылка,Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара)
		ИЛИ ((ВыборкаШапка.СлотовыйУчетПоСкладуПолучатель И ВыборкаШапка.СлотовыйУчетПоСкладуОтправитель) И (ВыборкаШапка.КодУзлаТочкиХраненияОтправитель = ВыборкаШапка.КодУзлаТочкиХраненияПолучатель)) Тогда
		
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара);
	
	ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные");
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;

		СтруктураДанных = ИнициализироватьДанныеКотправкеПоступления();		
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных.УправленческийДокумент,ВыборкаШапка);		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		СтруктураДанных.МезонинКакЗонаПоступления = ВыборкаШапка.СкладОтправитель = Константы.АХ_СкладПредварительнойСборки.Получить();
		
		Для каждого СтрокаТабличнойЧасти из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
			
			НоваяСтрока.Количество = СтрокаТабличнойЧасти.Количество;
			НоваяСтрока.КоличествоУпр = НоваяСтрока.Количество;
			
		КонецЦикла;
		
		СтруктураДанных.ПриходныеДокументы.Добавить(СтруктураДанных.УправленческийДокумент);
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьАдресноеПоступлениеПоДокументуКомплектацияНоменклатуры(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплектацияНоменклатуры.Ссылка КАК УпрДокумент,
	|	КомплектацияНоменклатуры.Склад.АХ_КодУзлаТочкиХранения КАК УзелТочкиХранения,
	|	КомплектацияНоменклатуры.Проведен КАК Проведен,
	|	КомплектацияНоменклатуры.Склад.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладу,
	|	КомплектацияНоменклатуры.Организация.Наименование КАК НаименованиеОрганизации,
	|	КомплектацияНоменклатуры.Ссылка КАК Ссылка,
	|	КомплектацияНоменклатуры.Склад.АХ_АббревиатураСклада КАК Абреввиатура,
	|	КомплектацияНоменклатуры.Склад КАК Получатель
	|ИЗ
	|	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	|ГДЕ
	|	КомплектацияНоменклатуры.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	Если НЕ ВыборкаШапка.Проведен ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладу ИЛИ АХ_ОбменВызовСервера.НайтиПодчиненныйДокумент(Ссылка,Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара) Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара);
	
	ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные",Истина);
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;

		СтруктураДанных = ИнициализироватьДанныеКотправкеПоступления();		
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных.УправленческийДокумент,ВыборкаШапка);		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		Для каждого СтрокаТабличнойЧасти из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
			
			НоваяСтрока.Количество = СтрокаТабличнойЧасти.Количество;
			НоваяСтрока.КоличествоУпр = НоваяСтрока.Количество;
			
		КонецЦикла;
		
		СтруктураДанных.ПриходныеДокументы.Добавить(СтруктураДанных.УправленческийДокумент);
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПланСнятия

Функция ЗаполнитьАдресныйПланСнятияПоДокументуВыдачаСредствЗащитыСотруднику(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаСредствЗащитыСотруднику.Ссылка КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|			ТОГДА ВыдачаСредствЗащитыСотруднику.СкладОтправитель.АХ_КодУзлаТочкиХранения
	|		ИНАЧЕ ВыдачаСредствЗащитыСотруднику.Склад.АХ_КодУзлаТочкиХранения
	|	КОНЕЦ КАК УзелТочкиХранения,
	|	ВыдачаСредствЗащитыСотруднику.Проведен КАК Проведен,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|			ТОГДА ВЫБОР
	|					КОГДА ВыдачаСредствЗащитыСотруднику.СкладОтправитель = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ВыдачаСредствЗащитыСотруднику.СкладОтправитель.АХ_СлотовыйУчетПоСкладу
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВыдачаСредствЗащитыСотруднику.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ВыдачаСредствЗащитыСотруднику.Склад.АХ_СлотовыйУчетПоСкладу
	|			КОНЕЦ
	|	КОНЕЦ КАК СлотовыйУчетПоСкладу,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотруднику.АХ_СтатусСборки = ЗНАЧЕНИЕ(перечисление.АХ_СтатусыСборкиТоваров.Подготовлено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаполнятьЗонуКомплектации,
	|	""Новый"" КАК Качество,
	|	ВыдачаСредствЗащитыСотруднику.Организация.Наименование КАК НаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача)
	|				ИЛИ ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача)
	|			ТОГДА ВыдачаСредствЗащитыСотруднику.Сотрудник
	|		КОГДА ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|			ТОГДА ВыдачаСредствЗащитыСотруднику.Склад
	|		ИНАЧЕ ВыдачаСредствЗащитыСотруднику.Склад
	|	КОНЕЦ КАК Получатель,
	|	ВыдачаСредствЗащитыСотруднику.Ссылка КАК Ссылка,
	|	ВыдачаСредствЗащитыСотруднику.АХ_СтатусСборки КАК СтатусСборки,
	|	ВЫБОР
	|		КОГДА (ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача)
	|				ИЛИ ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача))
	|				И ВыдачаСредствЗащитыСотруднику.АХ_СтатусСборки <> ЗНАЧЕНИЕ(перечисление.АХ_СтатусыСборкиТоваров.Подготовлено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СборкаСМезонина,
	|	ВЫБОР
	|		КОГДА (ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача)
	|				ИЛИ ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПроизвольнаяВыдача))
	|				И ВыдачаСредствЗащитыСотруднику.АХ_СтатусСборки <> ЗНАЧЕНИЕ(перечисление.АХ_СтатусыСборкиТоваров.Подготовлено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаполнятьМезонин,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотруднику.АХ_СтатусСборки = ЗНАЧЕНИЕ(Перечисление.АХ_СтатусыСборкиТоваров.ПредварительнаяСборка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПредварительнаяСборка,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотруднику.ДокументОснование ССЫЛКА Документ.ВыдачаСредствЗащитыСотруднику
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(ВыдачаСредствЗащитыСотруднику.ДокументОснование КАК Документ.ВыдачаСредствЗащитыСотруднику).Проведен
	|							И ВЫРАЗИТЬ(ВыдачаСредствЗащитыСотруднику.ДокументОснование КАК Документ.ВыдачаСредствЗащитыСотруднику).ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|							И ВЫРАЗИТЬ(ВыдачаСредствЗащитыСотруднику.ДокументОснование КАК Документ.ВыдачаСредствЗащитыСотруднику).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыдачиСИЗ.ПредварительнаяЗаявка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПредварительнаяЗаявка
	|ИЗ
	|	Документ.ВыдачаСредствЗащитыСотруднику КАК ВыдачаСредствЗащитыСотруднику
	|ГДЕ
	|	ВыдачаСредствЗащитыСотруднику.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	//проверки, при необходимости можно сообщить
	Если НЕ ВыборкаШапка.Проведен 
		ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладу 
		ИЛИ ВыборкаШапка.ПредварительнаяСборка ИЛИ ВыборкаШапка.ЕстьПредварительнаяЗаявка Тогда
		
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
		
	КонецЕсли;	
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия);
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПустаяСсылка());
	
	Если СтруктураВходящихДанных <> Неопределено И СтруктураВходящихДанных.Свойство("Товары") Тогда	
		ТаблицаРасхождений = СтруктураВходящихДанных.Товары;
	иначе
		ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные");			
	КонецЕсли;
	
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;

		СтруктураДанных = ИнициализироватьДанныеКОтправкеПланаСнятия();
				
		ЗаполнитьЗначенияСвойств(СтруктураДанных.УправленческийДокумент,ВыборкаШапка);		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		Если СтруктураВходящихДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных,СтруктураВходящихДанных,,"Товары");
		КонецЕсли;
		
		Для каждого СтрокаТаблицыЗначений из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗначений);			
			
		КонецЦикла;
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьАдресныйПланСнятияПоДокументуСписаниеНоменклатуры(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеНоменклатуры.Ссылка КАК ДокументОснование,
	|	СписаниеНоменклатуры.Проведен КАК Проведен,
	|	""Новый"" КАК Качество,
	|	СписаниеНоменклатуры.Ссылка КАК Ссылка,
	|	СписаниеНоменклатуры.Комментарий КАК Комментарий,
	|	СписаниеНоменклатуры.Склад.АХ_КодУзлаТочкиХранения КАК УзелТочкиХранения,
	|	СписаниеНоменклатуры.Склад КАК Получатель,
	|	СписаниеНоменклатуры.Организация.Наименование КАК НаименованиеОрганизации,
	|	СписаниеНоменклатуры.Склад.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладу,
	|	ЛОЖЬ КАК ЗаполнятьЗонуКомплектации
	|ИЗ
	|	Документ.СписаниеНоменклатуры КАК СписаниеНоменклатуры
	|ГДЕ
	|	СписаниеНоменклатуры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	//проверки, при необходимости можно сообщить
	Если НЕ ВыборкаШапка.Проведен 
		ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладу Тогда
		
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
		
	КонецЕсли;	
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия);
	
	Если СтруктураВходящихДанных <> Неопределено И СтруктураВходящихДанных.Свойство("Товары") Тогда	
		ТаблицаРасхождений = СтруктураВходящихДанных.Товары;
	иначе
		ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные");			
	КонецЕсли;
	
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураДанных = ИнициализироватьДанныеКОтправкеПланаСнятия();
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных.УправленческийДокумент,ВыборкаШапка);		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		Если СтруктураВходящихДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных,СтруктураВходящихДанных,,"Товары");
		КонецЕсли;
		
		Для каждого СтрокаТаблицыЗначений из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗначений);			
			
		КонецЦикла;
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьАдресныйПланСнятияПоДокументуВозвратНоменклатурыПоставщику(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратНоменклатурыПоставщику.Ссылка КАК ДокументОснование,
	|	ВозвратНоменклатурыПоставщику.Проведен КАК Проведен,
	|	""Новый"" КАК Качество,
	|	ВозвратНоменклатурыПоставщику.Ссылка КАК Ссылка,
	|	ВозвратНоменклатурыПоставщику.Комментарий КАК Комментарий,
	|	ВозвратНоменклатурыПоставщику.Склад.АХ_КодУзлаТочкиХранения КАК УзелТочкиХранения,
	|	ВозвратНоменклатурыПоставщику.Склад КАК Получатель,
	|	ВозвратНоменклатурыПоставщику.Организация.Наименование КАК НаименованиеОрганизации,
	|	ВозвратНоменклатурыПоставщику.Склад.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладу,
	|	ЛОЖЬ КАК ЗаполнятьЗонуКомплектации
	|ИЗ
	|	Документ.ВозвратНоменклатурыПоставщику КАК ВозвратНоменклатурыПоставщику
	|ГДЕ
	|	ВозвратНоменклатурыПоставщику.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	//проверки, при необходимости можно сообщить
	Если НЕ ВыборкаШапка.Проведен 
		ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладу Тогда
		
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
		
	КонецЕсли;	
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия);
	
	Если СтруктураВходящихДанных <> Неопределено И СтруктураВходящихДанных.Свойство("Товары") Тогда	
		ТаблицаРасхождений = СтруктураВходящихДанных.Товары;
	иначе
		ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные");			
	КонецЕсли;
	
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;

		СтруктураДанных = ИнициализироватьДанныеКОтправкеПланаСнятия();
				
		ЗаполнитьЗначенияСвойств(СтруктураДанных.УправленческийДокумент,ВыборкаШапка);		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		Если СтруктураВходящихДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных,СтруктураВходящихДанных,,"Товары");
		КонецЕсли;
		
		Для каждого СтрокаТаблицыЗначений из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗначений);			
			
		КонецЦикла;
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьАдресныйПланСнятияПоДокументуВыдачаДежурныхСредствЗащиты(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаДежурныхСредствЗащиты.Ссылка КАК ДокументОснование,
	|	ВыдачаДежурныхСредствЗащиты.Проведен КАК Проведен,
	|	""Новый"" КАК Качество,
	|	ВыдачаДежурныхСредствЗащиты.Ссылка КАК Ссылка,
	|	ВыдачаДежурныхСредствЗащиты.Комментарий КАК Комментарий,
	|	ВыдачаДежурныхСредствЗащиты.Склад.АХ_КодУзлаТочкиХранения КАК УзелТочкиХранения,
	|	ВыдачаДежурныхСредствЗащиты.Склад КАК Получатель,
	|	ВыдачаДежурныхСредствЗащиты.Организация.Наименование КАК НаименованиеОрганизации,
	|	ВыдачаДежурныхСредствЗащиты.Склад.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладу,
	|	ЛОЖЬ КАК ЗаполнятьЗонуКомплектации
	|ИЗ
	|	Документ.ВыдачаДежурныхСредствЗащиты КАК ВыдачаДежурныхСредствЗащиты
	|ГДЕ
	|	ВыдачаДежурныхСредствЗащиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	//проверки, при необходимости можно сообщить
	Если НЕ ВыборкаШапка.Проведен 
		ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладу Тогда
		
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
		
	КонецЕсли;	
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия);
	
	Если СтруктураВходящихДанных <> Неопределено И СтруктураВходящихДанных.Свойство("Товары") Тогда	
		ТаблицаРасхождений = СтруктураВходящихДанных.Товары;
	иначе
		ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные");			
	КонецЕсли;
	
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;

		СтруктураДанных = ИнициализироватьДанныеКОтправкеПланаСнятия();
				
		ЗаполнитьЗначенияСвойств(СтруктураДанных.УправленческийДокумент,ВыборкаШапка);		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		Если СтруктураВходящихДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных,СтруктураВходящихДанных,,"Товары");
		КонецЕсли;
		
		Для каждого СтрокаТаблицыЗначений из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗначений);			
			
		КонецЦикла;
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьАдресныйПланСнятияПоДокументуПеремещениеНоменклатуры(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеНоменклатуры.Ссылка КАК ДокументОснование,
	|	ПеремещениеНоменклатуры.Проведен КАК Проведен,
	|	""Новый"" КАК Качество,
	|	ПеремещениеНоменклатуры.Ссылка КАК Ссылка,
	|	ПеремещениеНоменклатуры.Комментарий КАК Комментарий,
	|	ПеремещениеНоменклатуры.СкладОтправитель.АХ_КодУзлаТочкиХранения КАК УзелТочкиХранения,
	|	ПеремещениеНоменклатуры.СкладПолучатель КАК Получатель,
	|	ПеремещениеНоменклатуры.Организация.Наименование КАК НаименованиеОрганизации,
	|	ПеремещениеНоменклатуры.СкладОтправитель.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладуОтправитель,
	|	ЛОЖЬ КАК ЗаполнятьЗонуКомплектации,
	|	ПеремещениеНоменклатуры.СкладПолучатель.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладуПолучатель,
	|	ПеремещениеНоменклатуры.СкладОтправитель.АХ_КодУзлаТочкиХранения КАК КодУзлаТочкиХраненияОтправитель,
	|	ПеремещениеНоменклатуры.СкладПолучатель.АХ_КодУзлаТочкиХранения КАК КодУзлаТочкиХраненияПолучатель
	|ИЗ
	|	Документ.ПеремещениеНоменклатуры КАК ПеремещениеНоменклатуры
	|ГДЕ
	|	ПеремещениеНоменклатуры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	//проверки, при необходимости можно сообщить
	Если НЕ ВыборкаШапка.Проведен 
		ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладуОтправитель
		ИЛИ ((ВыборкаШапка.СлотовыйУчетПоСкладуПолучатель И ВыборкаШапка.СлотовыйУчетПоСкладуОтправитель) И (ВыборкаШапка.КодУзлаТочкиХраненияОтправитель = ВыборкаШапка.КодУзлаТочкиХраненияПолучатель))Тогда
		
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
		
	КонецЕсли;	
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия);
	
	Если СтруктураВходящихДанных <> Неопределено И СтруктураВходящихДанных.Свойство("Товары") Тогда	
		ТаблицаРасхождений = СтруктураВходящихДанных.Товары;
	иначе
		ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные");			
	КонецЕсли;
	
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;

		СтруктураДанных = ИнициализироватьДанныеКОтправкеПланаСнятия();
				
		ЗаполнитьЗначенияСвойств(СтруктураДанных.УправленческийДокумент,ВыборкаШапка);		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		Если СтруктураВходящихДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных,СтруктураВходящихДанных,,"Товары");
		КонецЕсли;
		
		Для каждого СтрокаТаблицыЗначений из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗначений);			
			
		КонецЦикла;
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьАдресныйПланСнятияПоДокументуКомплектацияНоменклатуры(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок,СтруктураВходящихДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплектацияНоменклатуры.Ссылка КАК ДокументОснование,
	|	КомплектацияНоменклатуры.Проведен КАК Проведен,
	|	""Новый"" КАК Качество,
	|	КомплектацияНоменклатуры.Ссылка КАК Ссылка,
	|	КомплектацияНоменклатуры.Комментарий КАК Комментарий,
	|	КомплектацияНоменклатуры.Склад.АХ_КодУзлаТочкиХранения КАК УзелТочкиХранения,
	|	КомплектацияНоменклатуры.Склад КАК Получатель,
	|	КомплектацияНоменклатуры.Организация.Наименование КАК НаименованиеОрганизации,
	|	КомплектацияНоменклатуры.Склад.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладу,
	|	ЛОЖЬ КАК ЗаполнятьЗонуКомплектации
	|ИЗ
	|	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	|ГДЕ
	|	КомплектацияНоменклатуры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	//проверки, при необходимости можно сообщить
	Если НЕ ВыборкаШапка.Проведен 
		ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладу Тогда
		
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
		
	КонецЕсли;	
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия);
	
	Если СтруктураВходящихДанных <> Неопределено И СтруктураВходящихДанных.Свойство("Товары") Тогда	
		ТаблицаРасхождений = СтруктураВходящихДанных.Товары;
	иначе
		ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные",Ложь);			
	КонецЕсли;
	
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;

		СтруктураДанных = ИнициализироватьДанныеКОтправкеПланаСнятия();
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных.УправленческийДокумент,ВыборкаШапка);		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		Если СтруктураВходящихДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных,СтруктураВходящихДанных,,"Товары");
		КонецЕсли;
		
		Для каждого СтрокаТаблицыЗначений из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗначений);			
			
		КонецЦикла;
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТранспортнаяПоставка

Функция ЗаполнитьТранспортнуюПоставкуПоДокументуПоступлениеНоменклатуры(МассивПоступлений,СтруктураОбработкиОшибок)	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеНоменклатуры.Склад.АХ_КодУзлаТочкиХранения КАК УзелТочкиХранения,
	|	ПоступлениеНоменклатуры.Склад.АХ_СлотовыйУчетПоСкладу КАК СлотовыйУчетПоСкладу,
	|	ПоступлениеНоменклатуры.Организация.Наименование КАК НаименованиеОрганизации,
	|	ПоступлениеНоменклатуры.Склад.АХ_АббревиатураСклада КАК Абреввиатура,
	|	ПоступлениеНоменклатуры.Склад КАК Получатель
	|ИЗ
	|	Документ.ПоступлениеНоменклатуры КАК ПоступлениеНоменклатуры
	|ГДЕ
	|	ПоступлениеНоменклатуры.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеНоменклатурыТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеНоменклатурыТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ПоступлениеНоменклатурыТовары.Количество) КАК Количество,
	|	СУММА(ПоступлениеНоменклатурыТовары.Количество) КАК КоличествоУпр
	|ИЗ
	|	Документ.ПоступлениеНоменклатуры.Товары КАК ПоступлениеНоменклатурыТовары
	|ГДЕ
	|	ПоступлениеНоменклатурыТовары.Ссылка В (&МассивПоступлений)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНоменклатурыТовары.ХарактеристикаНоменклатуры,
	|	ПоступлениеНоменклатурыТовары.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", МассивПоступлений[0]);
	Запрос.УстановитьПараметр("МассивПоступлений", МассивПоступлений);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ТаблицаРасхождений = МассивРезультатов[1].Выгрузить();
	
	//проверка на код оракл
	ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
	Если ТабличныйДокумент <> Неопределено Тогда
		
		СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДанных = ИнициализироватьДанныеКотправкеПоступления();		
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
	
	Для каждого СтрокаТабличнойЧасти из ТаблицаРасхождений цикл
		
		НоваяСтрока = СтруктураДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	Для Каждого ПриходныйДокумент из МассивПоступлений цикл
		
		СтруктураПриходногоДокумента = ИнициализироватьДанныеУправленческогоДокумента();
		ЗаполнитьЗначенияСвойств(СтруктураПриходногоДокумента,ВыборкаШапка);
		СтруктураПриходногоДокумента.Ссылка = ПриходныйДокумент;
		
		СтруктураДанных.ПриходныеДокументы.Добавить(СтруктураПриходногоДокумента);
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти

#Область Снятие

Функция ЗаполнитьАдресноеСнятиеПоДокументуВыдачаСредствЗащитыСотруднику(Ссылка,ЭтоПредварительнаяПроверка,СтруктураОбработкиОшибок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаСредствЗащитыСотруднику.Ссылка КАК ДокументОснование,
	|	ВыдачаСредствЗащитыСотруднику.Проведен КАК Проведен,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|			ТОГДА ВыдачаСредствЗащитыСотруднику.СкладОтправитель.АХ_СлотовыйУчетПоСкладу
	|		ИНАЧЕ ВыдачаСредствЗащитыСотруднику.Склад.АХ_СлотовыйУчетПоСкладу
	|	КОНЕЦ КАК СлотовыйУчетПоСкладу,
	|	""Новый"" КАК Качество,
	|	ВыдачаСредствЗащитыСотруднику.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|			ТОГДА ВыдачаСредствЗащитыСотруднику.СкладОтправитель.АХ_КодУзлаТочкиХранения
	|		ИНАЧЕ ВыдачаСредствЗащитыСотруднику.Склад.АХ_КодУзлаТочкиХранения
	|	КОНЕЦ КАК УзелТочкиХранения,
	|	ВыдачаСредствЗащитыСотруднику.Комментарий КАК Комментарий,
	|	ВЫБОР
	|		КОГДА ВыдачаСредствЗащитыСотруднику.АХ_СтатусСборки = ЗНАЧЕНИЕ(Перечисление.АХ_СтатусыСборкиТоваров.ПредварительнаяСборка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПредварительнаяСборка
	|ИЗ
	|	Документ.ВыдачаСредствЗащитыСотруднику КАК ВыдачаСредствЗащитыСотруднику
	|ГДЕ
	|	ВыдачаСредствЗащитыСотруднику.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	//проверки, при необходимости можно сообщить
	Если НЕ ВыборкаШапка.Проведен 
		ИЛИ НЕ ВыборкаШапка.СлотовыйУчетПоСкладу
		ИЛИ ВыборкаШапка.ПредварительнаяСборка Тогда
		
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	МассивВидовАдресногоДокумента = Новый Массив;
	МассивВидовАдресногоДокумента.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.Снятие);

	ТаблицаРасхождений = АХ_ОбменВызовСервера.ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокумента,"ТолькоПоложительные");
	Если ТаблицаРасхождений.Количество() = 0 Тогда
		СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	//теперь можно заполнять данные к отправке, если это не предварительная проверка
	Если НЕ ЭтоПредварительнаяПроверка Тогда
		
		//проверка на код оракл
		ТабличныйДокумент = АХ_ОбменВызовСервера.СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка,ТаблицаРасхождений,СтруктураОбработкиОшибок.ОповеститьСообщением);
		Если ТабличныйДокумент <> Неопределено Тогда
			
			СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
			СтруктураОбработкиОшибок.ЕстьОшибки = Истина;
			
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураДанных = ИнициализироватьДанныеКОтправкеСнятия();
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных,ВыборкаШапка);
		
		Для каждого СтрокаТаблицыЗначений из ТаблицаРасхождений цикл
			
			НоваяСтрока = СтруктураДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗначений);			
			
		КонецЦикла;
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Справочники

Функция ВыгрузитьВНоменклатура(Прокси, Данные)
	
	Если НЕ ЗначениеЗаполнено(Данные) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъект(Прокси, "СпрНоменклатура");
	ПередаваемыйОбъект.Id = Строка(Данные.УникальныйИдентификатор());
	
	ПередаваемыйОбъект.Наименование = Данные.Наименование;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	Если ЗначениеЗаполнено(Данные.Родитель) Тогда
		ПередаваемыйОбъект.Группа = ПолучитьОбъектXDTO(Прокси, Данные.Родитель);
	КонецЕсли;
	
	Если Данные.ЭтоГруппа Тогда
		ПередаваемыйОбъект.ЭтоГруппа = Истина;
		Возврат ПередаваемыйОбъект;
	Иначе
		ПередаваемыйОбъект.ЭтоГруппа = Ложь;
	КонецЕсли;
	
	ПередаваемыйОбъект.Артикул  = Данные.Артикул;  
	ПередаваемыйОбъект.КодОракл = Данные.КодСинхронизации;
	ПередаваемыйОбъект.КонтролироватьСрокиГодности = Ложь;
	
	//по стандартной схеме, данный признак находится в номенклатуре.К сожалению в астб такого признака, нет. по хорошему, нужно изменить. 
	//по нагруженному тестированию и отправке 5тысяч номенклатурных позиций (50000 позиций характеристик) данный запрос в цикле занимает около 5% от общего времени формирования пакета.
	
	ПередаваемыйОбъект.ВестиУчетПоХарактеристикам  = ПолучитьПризнакХарактеристикиНоменклатуры(Данные);
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьВХарактеристикиНоменклатуры(Прокси, Данные)
	
	Если НЕ ЗначениеЗаполнено(Данные) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъект(Прокси, "СпрХарактеристикаНоменклатуры");
	ПередаваемыйОбъект.Id = Строка(Данные.УникальныйИдентификатор());
	ПередаваемыйОбъект.Наименование = Данные.Наименование;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Владелец = ПолучитьОбъектXDTO(Прокси, Данные.Владелец);
	ПередаваемыйОбъект.КодОракл = Данные.Код;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

#КонецОбласти

#Область Документы

//Предназначена для формирования ХДТО объекта адресного документа "АХ_ПланСнятия" 
//
//
// Параметры:
//	Прокси
//	Данные  - Структура - Структура общая для всех документов списаний товаров
//                 инициализируется в функцие АХ_ОбменПравилаВыгрузки.ИнициализироватьДанныеКОтправкеПланаСнятия();
//
// Возвращаемое значение:
//   ОбъектХДТО
//
Функция ВыгрузитьВПланСнятия(Прокси, Данные)
	
	// необходимо откорректировать источник данных товаров,Склад,Зону комплектации, в зависимости от типа документа,
	
	ПередаваемыйОбъект = СоздатьОбъект(Прокси, "ДокПланСнятия");
	
	ПередаваемыйОбъект.ДокументОснование = ВыгрузитьВУправленческийДокумент(Прокси,Данные.УправленческийДокумент);
	ПередаваемыйОбъект.УзелТочкиХранения = ВыгрузитьВСлотТочкиХранения(Прокси,Данные.УзелТочкиХранения);
	ПередаваемыйОбъект.СборкаСМезонина   = Данные.СборкаСМезонина;
	ПередаваемыйОбъект.ЗаполнятьМезонин   = Данные.ЗаполнятьМезонин;
	ПередаваемыйОбъект.Качество 	     = Данные.Качество;
	ПередаваемыйОбъект.ЗаполнятьЗонуКомплектации = Данные.ЗаполнятьЗонуКомплектации;
	
	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Товары").Тип;
	ДобавляемыеСтроки = Прокси.ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	
	Для каждого СтрокаТЧ Из Данные.Товары Цикл  
		
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("СтрокиТабличнойЧасти").Тип;
		ДобавляемаяСтрока = Прокси.ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ДобавляемаяСтрока.Номенклатура = ПолучитьОбъектXDTO(Прокси, СтрокаТЧ.Номенклатура);
		Конецесли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ХарактеристикаНоменклатуры) тогда
			ДобавляемаяСтрока.ХарактеристикаНоменклатуры = ПолучитьОбъектXDTO(Прокси, СтрокаТЧ.ХарактеристикаНоменклатуры);			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Заказ) тогда
			ДобавляемаяСтрока.Посылка = ВыгрузитьВУправленческийДокумент(Прокси, СтрокаТЧ.Заказ);			
		КонецЕсли;
		
		ДобавляемаяСтрока.Количество = СтрокаТЧ.Количество;
		
		ДобавляемыеСтроки.СтрокиТабличнойЧасти.Добавить(ДобавляемаяСтрока);
		
	КонецЦикла;
	
	ПередаваемыйОбъект.Товары = ДобавляемыеСтроки;
	
	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("ТоварыНеСлотовыхСкладов").Тип;
	ДобавляемыеСтроки = Прокси.ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	
	Для каждого СтрокаТЧ Из Данные.ТоварыНеСлотовыхСкладов Цикл  
		
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("СтрокиТабличнойЧасти").Тип;
		ДобавляемаяСтрока = Прокси.ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ДобавляемаяСтрока.Номенклатура = ПолучитьОбъектXDTO(Прокси, СтрокаТЧ.Номенклатура);
		Конецесли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ХарактеристикаНоменклатуры) тогда
			ДобавляемаяСтрока.ХарактеристикаНоменклатуры = ПолучитьОбъектXDTO(Прокси, СтрокаТЧ.ХарактеристикаНоменклатуры);			
		КонецЕсли;
		
		ДобавляемаяСтрока.Количество = СтрокаТЧ.Количество;
		
		ДобавляемыеСтроки.СтрокиТабличнойЧасти.Добавить(ДобавляемаяСтрока);
		
	КонецЦикла;
	
	ПередаваемыйОбъект.ТоварыНеСлотовыхСкладов = ДобавляемыеСтроки;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции // ВыгрузитьВПланСнятия()

//Предназначена для  формирования ХДТО объекта адресного документа "АХ_ПоступлениеТовара"
//
//
// Параметры:
//	Прокси
//	Данные  - Структура - Структура общая для всех документов поступлений
//                 инициализируется в функцие АХ_ОбменПравилаВыгрузки.ИнициализироватьДанныеКотправкеПоступления();
//
// Возвращаемое значение:
//   ОбъектХДТО
//
Функция ВыгрузитьВПоступлениеТовара(Прокси, Данные)
	
	ПередаваемыйОбъект = СоздатьОбъект(Прокси, "ДокПоступлениеТовара");
	
	ПередаваемыйОбъект.УпрДокумент = ВыгрузитьВУправленческийДокумент(Прокси,Данные.УправленческийДокумент);
	ПередаваемыйОбъект.УзелТочкиХранения = ВыгрузитьВСлотТочкиХранения(Прокси,Данные.УзелТочкиХранения);
	ПередаваемыйОбъект.КонтролироватьТоварыВСборке = Данные.КонтролироватьТоварыВСборке;
	ПередаваемыйОбъект.МезонинКакЗонаПоступления = Данные.МезонинКакЗонаПоступления;
	//приходные документы
	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("ПриходныеДокументы").Тип;
	ДобавляемыеСтроки = Прокси.ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	
	Для каждого СтруктураУправленческогоДокумента Из Данные.ПриходныеДокументы Цикл
		
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("СтрокиТабличнойЧасти").Тип;
		ДобавляемаяСтрока = Прокси.ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		
		//пока что документ будет один
		ДобавляемаяСтрока.Документ = ВыгрузитьВУправленческийДокумент(Прокси,СтруктураУправленческогоДокумента);
		
		ДобавляемыеСтроки.СтрокиТабличнойЧасти.Добавить(ДобавляемаяСтрока);
		
	КонецЦикла;
	
	ПередаваемыйОбъект.ПриходныеДокументы = ДобавляемыеСтроки;	
	
	//товары
	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Товары").Тип;
	ДобавляемыеСтроки = Прокси.ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	
	Для каждого СтрокаТЧ Из Данные.Товары Цикл
		
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("СтрокиТабличнойЧасти").Тип;
		ДобавляемаяСтрока = Прокси.ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		
		ДобавляемаяСтрока.Номенклатура = ПолучитьОбъектXDTO(Прокси, СтрокаТЧ.Номенклатура);		
		ДобавляемаяСтрока.ХарактеристикаНоменклатуры = ПолучитьОбъектXDTO(Прокси, СтрокаТЧ.ХарактеристикаНоменклатуры);			
		
		ДобавляемаяСтрока.Количество    = СтрокаТЧ.Количество;
		ДобавляемаяСтрока.КоличествоУпр = СтрокаТЧ.КоличествоУпр;
		
		//ДобавляемаяСтрока.ДокументОснование = ВыгрузитьВУправленческийДокумент(Прокси,СтрокаТЧ.ДокументОснование);
		ДобавляемаяСтрока.Короб = ПолучитьОбъектXDTO(Прокси, СтрокаТЧ.Короб);		
		
		ДобавляемыеСтроки.СтрокиТабличнойЧасти.Добавить(ДобавляемаяСтрока);
		
	КонецЦикла;
	
	ПередаваемыйОбъект.Товары = ДобавляемыеСтроки;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции // ВыгрузитьВПоступлениеТовара()

////Предназначена для  формирования ХДТО объекта адресного документа "АХ_Снятие"
//
//
// Параметры:
//	Прокси
//	Данные  - Структура - Структура общая для всех документов поступлений
//                 инициализируется в функцие АХ_ОбменПравилаВыгрузки.ИнициализироватьДанныеКотправкеПоступления();
//
// Возвращаемое значение:
//   ОбъектХДТО
//
Функция ВыгрузитьВСнятие(Прокси, Данные)
	
	ПередаваемыйОбъект = СоздатьОбъект(Прокси, "ДокСнятие");
	
	ПередаваемыйОбъект.ДокументОснование = ВыгрузитьВУправленческийДокумент(Прокси,Данные.ДокументОснование);
	ПередаваемыйОбъект.УзелТочкиХранения = ВыгрузитьВСлотТочкиХранения(Прокси,Данные.УзелТочкиХранения);
	ПередаваемыйОбъект.Качество  = Данные.Качество;
	
	//товары
	ДобавляемыеСтрокиТип = ПередаваемыйОбъект.Свойства().Получить("Товары").Тип;
	ДобавляемыеСтроки = Прокси.ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
	
	Для каждого СтрокаТЧ Из Данные.Товары Цикл
		
		ДобавляемаяСтрокаТип = ДобавляемыеСтроки.Свойства().Получить("СтрокиТабличнойЧасти").Тип;
		ДобавляемаяСтрока = Прокси.ФабрикаXDTO.Создать(ДобавляемаяСтрокаТип);
		
		ДобавляемаяСтрока.Номенклатура = ПолучитьОбъектXDTO(Прокси, СтрокаТЧ.Номенклатура);		
		ДобавляемаяСтрока.ХарактеристикаНоменклатуры = ПолучитьОбъектXDTO(Прокси, СтрокаТЧ.ХарактеристикаНоменклатуры);			
		
		ДобавляемаяСтрока.Количество    = СтрокаТЧ.Количество;
			
		ДобавляемыеСтроки.СтрокиТабличнойЧасти.Добавить(ДобавляемаяСтрока);
		
	КонецЦикла;
	
	ПередаваемыйОбъект.Товары = ДобавляемыеСтроки;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции // ВыгрузитьВПоступлениеТовара()

Функция ПодготовитьИВыгрузитьВСнятие(Прокси,Данные,СтруктураОбработкиОшибок)
	
	СтруктураДанных = ПодготовитьДанныеАдресногоСнятия(Данные,Ложь,СтруктураОбработкиОшибок);
	
	Если НЕ СтруктураОбработкиОшибок.ЕстьОшибки И СтруктураДанных <> Неопределено Тогда
		
		СтруктураДанных.Товары.Колонки.Добавить("Заказ", АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Заказ")); 
		СтруктураДанных.Товары.Колонки.Добавить("ВидАдресногоДокумента",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ВидАдресногоДокумента"));
		СтруктураДанных.Товары.ЗаполнитьЗначения(Перечисления.АХ_ВидыДокументовАдресногоХранения.Снятие,"ВидАдресногоДокумента");
		
		АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(СтруктураДанных.Товары,Данные);
		
		Возврат ВыгрузитьВСнятие(Прокси,СтруктураДанных);	
		
	КонецЕсли;	
	
КонецФункции // ПодготовитьИВыгрузитьВСнятие()

Функция ПодготовитьИВыгрузитьВПоступлениеТовара(Прокси,Данные,СтруктураОбработкиОшибок)
	
	СтруктураДанных = ПодготовитьДанныеАдресногоПоступления(Данные,Ложь,СтруктураОбработкиОшибок);
	
	Если НЕ СтруктураОбработкиОшибок.ЕстьОшибки ИЛИ СтруктураДанных <> Неопределено Тогда
		
		СтруктураДанных.Товары.Колонки.Добавить("ВидАдресногоДокумента",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ВидАдресногоДокумента"));
		СтруктураДанных.Товары.ЗаполнитьЗначения(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара,"ВидАдресногоДокумента");
		
		АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(СтруктураДанных.Товары,Данные);
		
		Возврат ВыгрузитьВПоступлениеТовара(Прокси,СтруктураДанных);	
		
	КонецЕсли;
	
КонецФункции // ПодготовитьИВыгрузитьВПоступлениеТовара()

Функция ПодготовитьИВыгрузитьВПланСнятия(Прокси,Данные,СтруктураОбработкиОшибок)
	
	СтруктураДанных = ПодготовитьДанныеАдресногоПланаСнятия(Данные,Ложь,СтруктураОбработкиОшибок);
	
	Если НЕ СтруктураОбработкиОшибок.ЕстьОшибки И СтруктураДанных <> Неопределено Тогда
		
		СтруктураДанных.Товары.Колонки.Добавить ("ВидАдресногоДокумента",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ВидАдресногоДокумента"));
		СтруктураДанных.Товары.ЗаполнитьЗначения(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия,"ВидАдресногоДокумента");
		
		АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(СтруктураДанных.Товары,Данные);
		
		Возврат ВыгрузитьВПланСнятия(Прокси,СтруктураДанных);	
		
	КонецЕсли;
	
КонецФункции // ПодготовитьИВыгрузитьВПланСнятия()

Функция ПодготовитьИВыгрузитьВПланСнятияТоварыВМезонине(Прокси,Данные,СтруктураОбработкиОшибок,СтруктураВходящихДанных)
	
	СтруктураДанных = ПодготовитьДанныеАдресногоПланаСнятия(Данные,Ложь,СтруктураОбработкиОшибок,СтруктураВходящихДанных);
	
	Если НЕ СтруктураОбработкиОшибок.ЕстьОшибки И СтруктураДанных <> Неопределено Тогда
		
		ОбъектXDTO = ВыгрузитьВПланСнятия(Прокси,СтруктураДанных);	
		
		СтруктураДанных.Товары.Колонки.Добавить ("ВидАдресногоДокумента",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ВидАдресногоДокумента"));
		
		Для Каждого СтрокаТаблицыТовары из СтруктураДанных.Товары цикл	
			СтрокаТаблицыТовары.Количество = - СтрокаТаблицыТовары.Количество;
		КонецЦикла;
		
		//отнимаем данные с мезонина, плюсум данные в план снятия
		ТаблицаТовары_Копия = СтруктураДанных.Товары.Скопировать();
		ТаблицаТовары_Копия.ЗаполнитьЗначения(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия,"ВидАдресногоДокумента");
		
		Для Каждого СтрокаТаблицы_Копия из ТаблицаТовары_Копия цикл
			СтрокаТаблицы_Копия.Количество = - СтрокаТаблицы_Копия.Количество;
			ЗаполнитьЗначенияСвойств(СтруктураДанных.Товары.добавить(),СтрокаТаблицы_Копия);
		КонецЦикла;
		
		АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(СтруктураДанных.Товары,Данные);
		
		Возврат ОбъектXDTO;
	
	КонецЕсли;
	
КонецФункции // ПодготовитьИВыгрузитьВПланСнятияТоварыВМезонине()

Функция ПодготовитьИВыгрузитьВПланСнятияИПоступлениеТовара_ПримеркаТовара(Прокси,Данные,СтруктураОбработкиОшибок)
	
	ПередаваемыйОбъект_ПланСнятия  = Неопределено;
	ПередаваемыйОбъект_Поступление = Неопределено;
	
	СтруктураДанныхАдресногоПоступления = ПодготовитьДанныеАдресногоПоступления(Данные,Ложь,СтруктураОбработкиОшибок);
	Если НЕ СтруктураОбработкиОшибок.ЕстьОшибки ИЛИ СтруктураДанныхАдресногоПоступления <> Неопределено  Тогда
		
		ПередаваемыйОбъект_Поступление = ВыгрузитьВПоступлениеТовара(Прокси,СтруктураДанныхАдресногоПоступления);	
		
		//алгоритм следующий: 
		// когда формируем поступление и пишем данные в регистр, мы должны соответственно уменьшить данные по плану снятия в регистре, для корректного подсчета.
		
		СтруктураДанныхАдресногоПоступления.Товары.Колонки.Добавить ("ВидАдресногоДокумента",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ВидАдресногоДокумента"));
		СтруктураДанныхАдресногоПоступления.Товары.ЗаполнитьЗначения(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара,"ВидАдресногоДокумента");
		
		АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(СтруктураДанныхАдресногоПоступления.Товары,Данные);
		
		Для Каждого СтрокаТабличнойЧасти из СтруктураДанныхАдресногоПоступления.Товары Цикл
			СтрокаТабличнойЧасти.Количество = -СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.ВидАдресногоДокумента = Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия;
		КонецЦикла;
		
		АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(СтруктураДанныхАдресногоПоступления.Товары,Данные);
		
	КонецЕсли;
	
	//по скольку ключ в структуре "ЕстьОшибки" один, а структуру передавать будем в две функции, и обрабатывать нужно результат в зависимости от результатов обеих функций.
	
	ЕстьОшибки_Поступление = СтруктураОбработкиОшибок.ЕстьОшибки;
	
	СтруктураОбработкиОшибок.ЕстьОшибки = Ложь;
	
	СтруктураДанныхАдресногоПланаСнятия = ПодготовитьДанныеАдресногоПланаСнятия(Данные,Ложь,СтруктураОбработкиОшибок);	
	Если НЕ СтруктураОбработкиОшибок.ЕстьОшибки и СтруктураДанныхАдресногоПланаСнятия <> Неопределено Тогда     
		
		ПередаваемыйОбъект_ПланСнятия = ВыгрузитьВПланСнятия(Прокси,СтруктураДанныхАдресногоПланаСнятия);	
		
		СтруктураДанныхАдресногоПланаСнятия.Товары.Колонки.Добавить ("ВидАдресногоДокумента",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ВидАдресногоДокумента"));
		СтруктураДанныхАдресногоПланаСнятия.Товары.ЗаполнитьЗначения(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия,"ВидАдресногоДокумента");
		
		АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(СтруктураДанныхАдресногоПланаСнятия.Товары,Данные);
		
	КонецЕсли;
	
	//если  в одном и двух нет ошибки, тогда отправляем данные
	Если ЕстьОшибки_Поступление И СтруктураОбработкиОшибок.ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОбработкиОшибок.ЕстьОшибки = Ложь;	
	ПередаваемыйОбъект = Неопределено;
	
	Если ПередаваемыйОбъект_ПланСнятия <> Неопределено И ПередаваемыйОбъект_Поступление <> Неопределено Тогда
		
		ПередаваемыйОбъект = СоздатьОбъект(Прокси, "Объекты");         
		
		ПередаваемыйОбъект.Объекты.Добавить(ПередаваемыйОбъект_ПланСнятия);
		ПередаваемыйОбъект.Объекты.Добавить(ПередаваемыйОбъект_Поступление);
		
	Иначе
		
		Если ПередаваемыйОбъект_ПланСнятия <> Неопределено Тогда
			ПередаваемыйОбъект = ПередаваемыйОбъект_ПланСнятия;
		КонецЕсли;
		
		Если ПередаваемыйОбъект_Поступление <> Неопределено Тогда
			ПередаваемыйОбъект = ПередаваемыйОбъект_Поступление;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;	
	
КонецФункции // ПодготовитьИВыгрузитьВПланСнятияИПоступлениеТовара()

Функция ПодготовитьИВыгрузитьВПланСнятияИПоступлениеТовара(Прокси,Данные,СтруктураОбработкиОшибок)
	
	ПередаваемыйОбъект_ПланСнятия  = Неопределено;
	ПередаваемыйОбъект_Поступление = Неопределено;
	
	СтруктураДанныхАдресногоПоступления = ПодготовитьДанныеАдресногоПоступления(Данные,Ложь,СтруктураОбработкиОшибок);
	Если НЕ СтруктураОбработкиОшибок.ЕстьОшибки ИЛИ СтруктураДанныхАдресногоПоступления <> Неопределено  Тогда
		
		ПередаваемыйОбъект_Поступление = ВыгрузитьВПоступлениеТовара(Прокси,СтруктураДанныхАдресногоПоступления);	
		
		СтруктураДанныхАдресногоПоступления.Товары.Колонки.Добавить ("ВидАдресногоДокумента",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ВидАдресногоДокумента"));
		СтруктураДанныхАдресногоПоступления.Товары.ЗаполнитьЗначения(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара,"ВидАдресногоДокумента");
		
		АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(СтруктураДанныхАдресногоПоступления.Товары,Данные);
		
	КонецЕсли;
	
	//по скольку ключ в структуре "ЕстьОшибки" один, а структуру передавать будем в две функции, и обрабатывать нужно результат в зависимости от результатов обеих функций.
	
	ЕстьОшибки_Поступление = СтруктураОбработкиОшибок.ЕстьОшибки;
	
	СтруктураОбработкиОшибок.ЕстьОшибки = Ложь;
	
	СтруктураДанныхАдресногоПланаСнятия = ПодготовитьДанныеАдресногоПланаСнятия(Данные,Ложь,СтруктураОбработкиОшибок);	
	Если НЕ СтруктураОбработкиОшибок.ЕстьОшибки и СтруктураДанныхАдресногоПланаСнятия <> Неопределено Тогда     
		
		ПередаваемыйОбъект_ПланСнятия = ВыгрузитьВПланСнятия(Прокси,СтруктураДанныхАдресногоПланаСнятия);	
		
		СтруктураДанныхАдресногоПланаСнятия.Товары.Колонки.Добавить ("ВидАдресногоДокумента",АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ВидАдресногоДокумента"));
		СтруктураДанныхАдресногоПланаСнятия.Товары.ЗаполнитьЗначения(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия,"ВидАдресногоДокумента");
		
		АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(СтруктураДанныхАдресногоПланаСнятия.Товары,Данные);
		
	КонецЕсли;
	
	//если  в одном и двух нет ошибки, тогда отправляем данные
	Если ЕстьОшибки_Поступление И СтруктураОбработкиОшибок.ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОбработкиОшибок.ЕстьОшибки = Ложь;	
	ПередаваемыйОбъект = Неопределено;
	
	Если ПередаваемыйОбъект_ПланСнятия <> Неопределено И ПередаваемыйОбъект_Поступление <> Неопределено Тогда
		
		ПередаваемыйОбъект = СоздатьОбъект(Прокси, "Объекты");         
		
		ПередаваемыйОбъект.Объекты.Добавить(ПередаваемыйОбъект_ПланСнятия);
		ПередаваемыйОбъект.Объекты.Добавить(ПередаваемыйОбъект_Поступление);
		
	Иначе
		
		Если ПередаваемыйОбъект_ПланСнятия <> Неопределено Тогда
			ПередаваемыйОбъект = ПередаваемыйОбъект_ПланСнятия;
		КонецЕсли;
		
		Если ПередаваемыйОбъект_Поступление <> Неопределено Тогда
			ПередаваемыйОбъект = ПередаваемыйОбъект_Поступление;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;	
	
КонецФункции // ПодготовитьИВыгрузитьВПланСнятияИПоступлениеТовара()

Функция ПодготовитьИВыгрузитьТранспортнуюПоставкуВПоступлениеТовара(Прокси,МассивДанных,СтруктураОбработкиОшибок)
	
	СтруктураДанных = ЗаполнитьТранспортнуюПоставкуПоДокументуПоступлениеНоменклатуры(МассивДанных,СтруктураОбработкиОшибок);	
	Если НЕ СтруктураОбработкиОшибок.ЕстьОшибки ИЛИ СтруктураДанных <> Неопределено Тогда
		
		Возврат ВыгрузитьВПоступлениеТовара(Прокси,СтруктураДанных);	
		
	КонецЕсли;
	
КонецФункции // ПодготовитьИВыгрузитьТранспортнуюПоставкуВПоступлениеТовара()

Функция ПодготовитьИВыгрузитьВОтменуУправленческогоДокумента(Прокси,СсылкаНаДокумент,СтруктураОбработкиОшибок)
	
	ПередаваемыйОбъект = ВыгрузитьВОтменаУправленческогоДокумента(Прокси,СсылкаНаДокумент);
	
	//очищаем данные из регистра полностью
	НаборЗаписей = РегистрыСведений.АХ_ДанныеВАдресномХранении.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(СсылкаНаДокумент);
	НаборЗаписей.Записать();
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции // ПодготовитьИВыгрузитьТранспортнуюПоставкуВПоступлениеТовара()

#КонецОбласти

#Область Прочее

Функция ВыгрузитьВСлотТочкиХранения(Прокси, Данные)
	
	Если НЕ ЗначениеЗаполнено(Данные) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъект(Прокси, "СпрСлотТочкиХранения");
	ПередаваемыйОбъект.Id = Данные;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьВПолучатели(Прокси, Данные)
	
	Если НЕ ЗначениеЗаполнено(Данные) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъект(Прокси, "СпрПолучатели");
	ПередаваемыйОбъект.Id = Строка(Данные.УникальныйИдентификатор());
	
	ЭтоКонтрагент 	 = ТипЗнч(Данные) = Тип("СправочникСсылка.Сотрудники");
	
	Если ЭтоКонтрагент тогда
		ПередаваемыйОбъект.ТипПолучателя = "Контрагент";
	иначе
		ПередаваемыйОбъект.ТипПолучателя = "Склад";
		ПередаваемыйОбъект.АбреввиатураСклада = Данные.АХ_АббревиатураСклада;
	КонецЕсли;
	
	ПередаваемыйОбъект.Наименование = Данные.Наименование;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьВУправленческийДокумент(Прокси,Данные)
	
	Если НЕ ЗначениеЗаполнено(Данные) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// если в данных - структура, значит будем заполнять получателя и другие реквизиты. иначе просто создаем документ с гуидом и видом
	ПолноеЗаполнение = (ТипЗнч(Данные) = Тип("Структура"));
	Если ПолноеЗаполнение тогда
		Документ = Данные.Ссылка;
	Иначе
		Документ = Данные;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Документ) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъект(Прокси, "ДокУправленческийДокумент");
	ПередаваемыйОбъект.Дата = Документ.Дата;
	ПередаваемыйОбъект.ГУИД = Строка(Документ.УникальныйИдентификатор());
	ПередаваемыйОбъект.ВидДокумента = Документ.Метаданные().Имя;
	ПередаваемыйОбъект.НомерДокумента = Строка(Документ.Номер);
	ПередаваемыйОбъект.Комментарий = СформироватьКомментарийКДокументу(Документ);
	ПередаваемыйОбъект.Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Ответственный,"Наименование");
	
	Если ПолноеЗаполнение Тогда
		//заполняем получателя и т.д
		ПередаваемыйОбъект.Получатель = ВыгрузитьВПолучатели(Прокси,Данные.Получатель);
		ПередаваемыйОбъект.НаименованиеОрганизации = Данные.НаименованиеОрганизации;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции // ВыгрузитьВУправленческийДокумент()

Функция ВыгрузитьВОтменаУправленческогоДокумента(Прокси,Данные)
	
	Если НЕ ЗначениеЗаполнено(Данные) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъект(Прокси, "ОтменаУправленческогоДокумента");
	ПередаваемыйОбъект.Документ = ВыгрузитьВУправленческийДокумент(Прокси,Данные);
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции // ВыгрузитьВУправленческийДокумент()

#КонецОбласти

#КонецОбласти

#КонецОбласти




