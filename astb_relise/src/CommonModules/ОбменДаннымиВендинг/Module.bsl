Процедура ВендингЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрироватьИзменения = Ложь;
	
	Если ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Сотрудники") 
		ИЛИ ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.НоменклатураНормОрганизации") Тогда
		
		Если ЗначениеЗаполнено(Источник.Владелец.Проект) Тогда
			
			РегистрироватьИзменения = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Если НЕ Источник.ЭтоГруппа И Источник.ВозможнаАвтоматизированнаяВыдача Тогда
			
			РегистрироватьИзменения = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Склады") Тогда
		
		Если Источник.АвтоматизированнаяВыдача Тогда
			
			РегистрироватьИзменения = Истина;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если РегистрироватьИзменения Тогда
		
		ВыборкаУзлов = ПланыОбмена.Вендинг.Выбрать();
		
		Пока ВыборкаУзлов.Следующий() Цикл
			
			Если ВыборкаУзлов.Ссылка = ПланыОбмена.Вендинг.ЭтотУзел() Тогда
				Продолжить;
			КонецЕсли;
			
			ПланыОбмена.ЗарегистрироватьИзменения(ВыборкаУзлов.Ссылка,Источник);
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ВендингВыполнитьПервоначальнуюРегистрацию(Узел) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВозможнаАвтоматизированнаяВыдача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураНормОрганизации.Ссылка КАК НоменклатураНормы
	|ИЗ
	|	Справочник.НоменклатураНормОрганизации КАК НоменклатураНормОрганизации
	|ГДЕ
	|	НЕ НоменклатураНормОрганизации.Владелец.Проект = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.Владелец.Проект = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.АвтоматизированнаяВыдача";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатуры 		= Результат[0].Выгрузить();
	ТаблицаНоменклатурыНормы 	= Результат[1].Выгрузить();
	ТаблицаСотрудников 			= Результат[2].Выгрузить();
	ТаблицаСкладов 				= Результат[3].Выгрузить();
	
	Для Каждого СтрокаТаблицыНоменклатуры Из ТаблицаНоменклатуры Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Узел,СтрокаТаблицыНоменклатуры.Номенклатура);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыНоменклатурыНормы Из ТаблицаНоменклатурыНормы Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Узел,СтрокаТаблицыНоменклатурыНормы.НоменклатураНормы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыСотрудников Из ТаблицаСотрудников Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Узел,СтрокаТаблицыСотрудников.Сотрудник);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыСкладов Из ТаблицаСкладов Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Узел,СтрокаТаблицыСкладов.Склад);
	КонецЦикла;
	
КонецПроцедуры	

Процедура ВендингВыгрузитьДанныеПоРасписанию() Экспорт
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,"Регламентная выгрузка данных для вендинга не выполнена, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ВендингВыгрузитьДанные();
	
КонецПроцедуры	

Процедура ВендингЗагрузитьДанныеПоРасписанию() Экспорт
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,"Регламентная выгрузка данных для вендинга не выполнена, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ВендингЗагрузитьДанные();
	
КонецПроцедуры

Процедура ВендингЗагрузитьДанные() Экспорт
	
	ТаблицаДляЗагрузки = Новый ТаблицаЗначений;
	ТаблицаДляЗагрузки.Колонки.Добавить("Организация", 					Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДляЗагрузки.Колонки.Добавить("Проект", 						Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаДляЗагрузки.Колонки.Добавить("Файл", 						Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТаблицаДляЗагрузки.Колонки.Добавить("Ответственный", 				Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТаблицаДляЗагрузки.Колонки.Добавить("Лог", 							Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1000)));
	ТаблицаДляЗагрузки.Колонки.Добавить("ЕстьОшибки", 					Новый ОписаниеТипов("Булево"));
	ТаблицаДляЗагрузки.Колонки.Добавить("Склад", 						Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДляЗагрузки.Колонки.Добавить("Сотрудник", 					Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДляЗагрузки.Колонки.Добавить("ДатаВыдачи", 					Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаДляЗагрузки.Колонки.Добавить("НоменклатураНормы", 			Новый ОписаниеТипов("СправочникСсылка.НоменклатураНормОрганизации"));
	ТаблицаДляЗагрузки.Колонки.Добавить("Номенклатура", 				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДляЗагрузки.Колонки.Добавить("ХарактеристикаНоменклатуры", 	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДляЗагрузки.Колонки.Добавить("Количество", 					Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	ЗапросПоОстаткам = Новый Запрос;
	ЗапросПоОстаткам.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиНоменклатурыОстатки.Организация КАК Организация,
	|	ОстаткиНоменклатурыОстатки.Склад КАК Склад,
	|	ОстаткиНоменклатурыОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(0) КАК Количество
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			&ДатаАнализа,
	|			Организация = &Организация
	|				И Склад = &Склад) КАК ОстаткиНоменклатурыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатурыОстатки.Номенклатура,
	|	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры,
	|	ОстаткиНоменклатурыОстатки.Организация,
	|	ОстаткиНоменклатурыОстатки.Склад";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Проект КАК Проект
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Проект = """"";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	РесурсДляЗагрузки = Константы.ВендингРесурсОбмена.Получить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		НайденныеФайлы = НайтиФайлы(РесурсДляЗагрузки + СтрокаТаблицыЗапроса.Проект,"*.xml",Ложь);
		
		Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
			
			РассчитыватьОстатки = Ложь;
			
			ИмяФайла = НайденныйФайл.Имя;
			
			Если СтрНайти(НРЕГ(ИмяФайла),"dispense") = 0 И СтрНайти(НРЕГ(ИмяФайла),"returns") = 0 Тогда
				Если СтрНайти(НРЕГ(ИмяФайла),"expedition") = 0 ИЛИ ПолучитьФункциональнуюОпцию("ВендингНеЗагружатьРаскладку") Тогда
					Продолжить;
				Иначе
					РассчитыватьОстатки = Истина;
				КонецЕсли;
			КонецЕсли;	
			
			Чтение = Новый ЧтениеXML;
			Чтение.ОткрытьФайл(РесурсДляЗагрузки + СтрокаТаблицыЗапроса.Проект + "\" + ИмяФайла);
			
			Пока Чтение.Прочитать() Цикл
				
				Если НЕ СтрНайти(НРег(ИмяФайла),"dispense") = 0 Тогда
					
					Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						
						Если Чтение.ЛокальноеИмя = "dispense" Тогда
							
							НоваяСтрока = ТаблицаДляЗагрузки.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗапроса);
							НоваяСтрока.Файл = ИмяФайла;
			
							КодНоменклатурыНормы 	= СокрЛП(Чтение.ЗначениеАтрибута("nomenclature_norm_ID"));
							КодНоменклатурыВыдачи 	= Число(СокрЛП(Чтение.ЗначениеАтрибута("nomenclature_give_ID")));
							КодРазмера 				= СокрЛП(Чтение.ЗначениеАтрибута("nomenclature_give_size_ID"));
							КодРазмера				= ?(ЗначениеЗаполнено(КодРазмера),Число(КодРазмера),КодРазмера);
							
							НоменклатураНормы = Справочники.НоменклатураНормОрганизации.НайтиПоКоду(КодНоменклатурыНормы,,НоваяСтрока.Организация);
							Если НоменклатураНормы.Пустая() Тогда
								НоваяСтрока.ЕстьОшибки = Истина;
								НоваяСтрока.Лог = "Не найдена номенклатура нормы по коду: " + КодНоменклатурыНормы + Символы.ПС;
							КонецЕсли;
							
							НоменклатураВыдачи = Справочники.Номенклатура.НайтиПоРеквизиту("КодСинхронизации",КодНоменклатурыВыдачи);
							Если НоменклатураВыдачи.Пустая() Тогда
								НоваяСтрока.ЕстьОшибки = Истина;
								НоваяСтрока.Лог = "Не найдена номенклатура выдачи по коду: " + КодНоменклатурыВыдачи + Символы.ПС;
							Иначе
								Если ЗначениеЗаполнено(КодРазмера) Тогда//ищем размер
									Размер = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(КодРазмера,,,НоменклатураВыдачи);
									Если Размер.Пустая() Тогда
										НоваяСтрока.ЕстьОшибки = Истина;
										НоваяСтрока.Лог = "Не найден размер по коду: " + КодРазмера + Символы.ПС;
									КонецЕсли;
								Иначе
									Размер = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
								КонецЕсли;	
							КонецЕсли;
							
							GUIDСотрудника	= Новый УникальныйИдентификатор(СокрЛП(Чтение.ЗначениеАтрибута("worker_GUID")));
							Сотрудник 		= Справочники.Сотрудники.ПолучитьСсылку(GUIDСотрудника);
							Если НЕ ЗначениеЗаполнено(Сотрудник.Код) Тогда
								НоваяСтрока.ЕстьОшибки = Истина;
								НоваяСтрока.Лог = "Не найден сотрудник по GUID: " + СокрЛП(Чтение.ЗначениеАтрибута("worker_GUID")) + Символы.ПС;
							КонецЕсли;
							
							GUIDСклада 	= Новый УникальныйИдентификатор(СокрЛП(Чтение.ЗначениеАтрибута("issuing_point_ID")));
							Склад		= Справочники.Склады.ПолучитьСсылку(GUIDСклада);	
							
							Если НЕ ЗначениеЗаполнено(Склад.Код) Тогда
								НоваяСтрока.ЕстьОшибки = Истина;
								НоваяСтрока.Лог = "Не найден склад по GUID: " + СокрЛП(Чтение.ЗначениеАтрибута("issuing_point_ID")) + Символы.ПС;
							КонецЕсли;
							
							ДатаВыдачи = ПолучитьДатуИзСтрокиДляВендинга(СокрЛП(Чтение.ЗначениеАтрибута("give_date")));
							
							НоваяСтрока.Склад 						= Склад;
							НоваяСтрока.Сотрудник 					= Сотрудник;
							НоваяСтрока.ДатаВыдачи 					= ДатаВыдачи;
							НоваяСтрока.НоменклатураНормы 			= НоменклатураНормы;
							НоваяСтрока.Номенклатура 				= НоменклатураВыдачи;
							НоваяСтрока.ХарактеристикаНоменклатуры 	= Размер;
							
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли НЕ СтрНайти(НРег(ИмяФайла),"expedition") = 0 Тогда
					
					Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						
						Если Чтение.ЛокальноеИмя = "issuing_point" Тогда	
							
							GUIDСклада	= Новый УникальныйИдентификатор(СокрЛП(Чтение.ЗначениеАтрибута("issuing_point_ID")));
							Склад		= Справочники.Склады.ПолучитьСсылку(GUIDСклада);	
							
							Если НЕ ЗначениеЗаполнено(Склад.Код) Тогда
								ЕстьОшибкиСклада = Истина;
								НоваяСтрока = ТаблицаДляЗагрузки.Добавить();
								НоваяСтрока.Лог = "Не найден склад по GUID: " + СокрЛП(Чтение.ЗначениеАтрибута("issuing_point_ID")) + Символы.ПС;
							КонецЕсли;
							
							ДатаЗакладки = ПолучитьДатуИзСтрокиДляВендинга(СокрЛП(Чтение.ЗначениеАтрибута("expedition_date")));
							
						КонецЕсли;
						
						Если Чтение.ЛокальноеИмя = "nomenclature_give_item" Тогда
							
							НоваяСтрока = ТаблицаДляЗагрузки.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗапроса);
							НоваяСтрока.Файл = ИмяФайла;
			
							КодНоменклатурыВыдачи 	= Число(СокрЛП(Чтение.ЗначениеАтрибута("nomenclature_give_ID")));
							КодРазмера 				= СокрЛП(Чтение.ЗначениеАтрибута("nomenclature_give_size_ID"));
							КодРазмера				= ?(ЗначениеЗаполнено(КодРазмера),Число(КодРазмера),КодРазмера);
							КоличествоЗакладки		= Число(СокрЛП(Чтение.ЗначениеАтрибута("quantity")));
							
							НоменклатураВыдачи = Справочники.Номенклатура.НайтиПоРеквизиту("КодСинхронизации",КодНоменклатурыВыдачи);
							Если НоменклатураВыдачи.Пустая() Тогда
								НоваяСтрока.ЕстьОшибки = Истина;
								НоваяСтрока.Лог = "Не найдена номенклатура выдачи по коду: " + КодНоменклатурыВыдачи + Символы.ПС;
							Иначе
								Если ЗначениеЗаполнено(КодРазмера) Тогда//ищем размер
									Размер = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(КодРазмера,,,НоменклатураВыдачи);
									Если Размер.Пустая() Тогда
										НоваяСтрока.ЕстьОшибки = Истина;
										НоваяСтрока.Лог = "Не найден размер по коду: " + КодРазмера + Символы.ПС;
									КонецЕсли;
								Иначе
									Размер = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
								КонецЕсли;	
							КонецЕсли;
							
							НоваяСтрока.Склад 						= Склад;
							НоваяСтрока.ДатаВыдачи 					= ДатаЗакладки;
							НоваяСтрока.Номенклатура 				= НоменклатураВыдачи;
							НоваяСтрока.Количество 					= КоличествоЗакладки;
							НоваяСтрока.ХарактеристикаНоменклатуры 	= Размер;
							
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли НЕ СтрНайти(НРег(ИмяФайла),"returns") = 0 Тогда
					
					Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						
						Если Чтение.ЛокальноеИмя = "return" Тогда	
							
							GUIDСклада	= Новый УникальныйИдентификатор(СокрЛП(Чтение.ЗначениеАтрибута("issuing_point_ID")));
							Склад		= Справочники.Склады.ПолучитьСсылку(GUIDСклада);	
							
							Если НЕ ЗначениеЗаполнено(Склад.Код) Тогда
								ЕстьОшибкиСклада = Истина;
								НоваяСтрока = ТаблицаДляЗагрузки.Добавить();
								НоваяСтрока.Лог = "Не найден склад по GUID: " + СокрЛП(Чтение.ЗначениеАтрибута("issuing_point_ID")) + Символы.ПС;
							КонецЕсли;
							
							ДатаВозврата 	= ПолучитьДатуИзСтрокиДляВендинга(СокрЛП(Чтение.ЗначениеАтрибута("return_date")));
							Ответственный 	= СокрЛП(Чтение.ЗначениеАтрибута("return_user_name"));
							
						КонецЕсли;
						
						Если Чтение.ЛокальноеИмя = "nomenclature_return_item" Тогда
							
							НоваяСтрока = ТаблицаДляЗагрузки.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗапроса);
							НоваяСтрока.Файл = ИмяФайла;
			
							КодНоменклатурыВыдачи 	= Число(СокрЛП(Чтение.ЗначениеАтрибута("nomenclature_return_ID")));
							КодРазмера 				= СокрЛП(Чтение.ЗначениеАтрибута("nomenclature_return_size_ID"));
							КодРазмера				= ?(ЗначениеЗаполнено(КодРазмера),Число(КодРазмера),КодРазмера);
							Количество				= Число(СокрЛП(Чтение.ЗначениеАтрибута("nomenclature_return_quantity")));
							
							НоменклатураВыдачи = Справочники.Номенклатура.НайтиПоРеквизиту("КодСинхронизации",КодНоменклатурыВыдачи);
							Если НоменклатураВыдачи.Пустая() Тогда
								НоваяСтрока.ЕстьОшибки = Истина;
								НоваяСтрока.Лог = "Не найдена номенклатура выдачи по коду: " + КодНоменклатурыВыдачи + Символы.ПС;
							Иначе
								Если ЗначениеЗаполнено(КодРазмера) Тогда//ищем размер
									Размер = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(КодРазмера,,,НоменклатураВыдачи);
									Если Размер.Пустая() Тогда
										НоваяСтрока.ЕстьОшибки = Истина;
										НоваяСтрока.Лог = "Не найден размер по коду: " + КодРазмера + Символы.ПС;
									КонецЕсли;
								Иначе
									Размер = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
								КонецЕсли;	
							КонецЕсли;
							
							НоваяСтрока.Склад 						= Склад;
							НоваяСтрока.ДатаВыдачи 					= ДатаВозврата;
							НоваяСтрока.Ответственный 				= Ответственный;
							НоваяСтрока.Номенклатура 				= НоменклатураВыдачи;
							НоваяСтрока.Количество 					= Количество;
							НоваяСтрока.ХарактеристикаНоменклатуры 	= Размер;
							
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЦикла;	
			
			Чтение.Закрыть();
			
			Если НЕ Склад = Неопределено И РассчитыватьОстатки Тогда
				
				//могут быть остатки на складе, которых нет в аппарате
				//при этом ТЭГ "nomenclature_give_item" отсутствует
				//эти остатки нужно сбросить
				ЗапросПоОстаткам.УстановитьПараметр("ДатаАнализа",	Новый Граница(ДатаЗакладки,ВидГраницы.Исключая));
				ЗапросПоОстаткам.УстановитьПараметр("Организация",	ТаблицаЗапроса[0].Организация);
				ЗапросПоОстаткам.УстановитьПараметр("Склад",		Склад);
				
				ТаблицаОстатков = ЗапросПоОстаткам.Выполнить().Выгрузить();
				
				Для Каждого СтрокаТаблицыОстатков Из ТаблицаОстатков Цикл
					
					СтруктураПоиска = Новый Структура("НоменклатураНормы, Номенклатура, ХарактеристикаНоменклатуры", Справочники.НоменклатураНормОрганизации.ПустаяСсылка(), СтрокаТаблицыОстатков.Номенклатура, СтрокаТаблицыОстатков.ХарактеристикаНоменклатуры);
					
					НайденныеСтроки = ТаблицаДляЗагрузки.НайтиСтроки(СтруктураПоиска);
					
					Если НайденныеСтроки.Количество() = 0 Тогда //нужно списать все остатки в ноль
						
						НоваяСтрока 			= ТаблицаДляЗагрузки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыОстатков);
						НоваяСтрока.Файл 		= ИмяФайла;
						НоваяСтрока.ДатаВыдачи 	= ДатаЗакладки;
						НоваяСтрока.Проект 		= СтрокаТаблицыЗапроса.Проект;
						
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЕсли;
	
		КонецЦикла;	
		
	КонецЦикла;
	
	ЗагрузитьДанныеПоВендингу(ТаблицаДляЗагрузки, РесурсДляЗагрузки);
	
	ПереместитьЗагруженныеФайлы(ТаблицаДляЗагрузки, РесурсДляЗагрузки);
	
КонецПроцедуры	

Процедура ЗагрузитьДанныеПоВендингу(ТаблицаДляЗагрузки, РесурсДляЗагрузки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПоОстаткам = Новый Запрос;
	ЗапросПоОстаткам.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ОстаткиНоменклатурыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			&ДатаАнализа,
	|			(Организация = &Организация
	|				ИЛИ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				И Склад = &Склад
	|				И Номенклатура = &Номенклатура
	|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ОстаткиНоменклатурыОстатки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДляФормированияДокументов.Организация КАК Организация,
	|	ТаблицаДляФормированияДокументов.Склад КАК Склад,
	|	ТаблицаДляФормированияДокументов.Сотрудник КАК Сотрудник,
	|	ТаблицаДляФормированияДокументов.ДатаВыдачи КАК ДатаВыдачи,
	|	ТаблицаДляФормированияДокументов.Ответственный КАК Ответственный,
	|	ТаблицаДляФормированияДокументов.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаДляФормированияДокументов.Номенклатура КАК Номенклатура,
	|	ТаблицаДляФормированияДокументов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаДляФормированияДокументов.Файл КАК Файл,
	|	ТаблицаДляФормированияДокументов.Количество КАК Количество,
	|	ТаблицаДляФормированияДокументов.ЕстьОшибки КАК ЕстьОшибки,
	|	ТаблицаДляФормированияДокументов.Лог КАК Лог
	|ПОМЕСТИТЬ ВТ_ТаблицаДляФорированияДокументов
	|ИЗ
	|	&ТаблицаДляФормированияДокументов КАК ТаблицаДляФормированияДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормыВыдачиСИЗСоставНормы.Ссылка КАК Ссылка,
	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы КАК НоменклатураНормы,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи
	|ПОМЕСТИТЬ ВТ_СоставНормы
	|ИЗ
	|	Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПотребностьВыдачиСИЗОстатки.Организация КАК Организация,
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник КАК Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи КАК НормаВыдачи,
	|	ПотребностьВыдачиСИЗОстатки.НоменклатураНормы КАК НоменклатураНормы,
	|	СУММА(ПотребностьВыдачиСИЗОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ,
	|	ПотребностьВыдачиСИЗОстатки.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_СоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи
	|ПОМЕСТИТЬ ВТ_Потребность
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(
	|			,
	|			Организация В (&МассивОрганизаций)
	|				И Сотрудник В (&МассивСотрудников)
	|				И НоменклатураНормы В (&МассивНоменклатурыНормы)) КАК ПотребностьВыдачиСИЗОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоставНормы КАК ВТ_СоставНормы
	|		ПО ПотребностьВыдачиСИЗОстатки.НормаВыдачи = ВТ_СоставНормы.Ссылка
	|			И ПотребностьВыдачиСИЗОстатки.НоменклатураНормы = ВТ_СоставНормы.НоменклатураНормы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьВыдачиСИЗОстатки.Организация,
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи,
	|	ПотребностьВыдачиСИЗОстатки.НоменклатураНормы,
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи.ВидВыдачиСИЗ,
	|	ПотребностьВыдачиСИЗОстатки.ДатаПотребности,
	|	ВТ_СоставНормы.ПериодичностьВыдачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатуры.Период КАК Период,
	|	ЦеныНоменклатуры.Организация КАК Организация,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Цена КАК Цена,
	|	ЦеныНоменклатуры.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Период КАК НачалоПериода,
	|	МИНИМУМ(ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Период, &ТекущаяДата)) КАК КонецПериода,
	|	ВложенныйЗапрос.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ПериодыЦены
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ЦеныНоменклатуры.Период КАК Период,
	|		ВТ_ЦеныНоменклатуры.Организация КАК Организация,
	|		ВТ_ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|		ВТ_ЦеныНоменклатуры.МоментВремени КАК МоментВремени,
	|		ВТ_ЦеныНоменклатуры.Цена КАК Цена
	|	ИЗ
	|		ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры
	|		ПО ВложенныйЗапрос.Организация = ВТ_ЦеныНоменклатуры.Организация
	|			И ВложенныйЗапрос.Номенклатура = ВТ_ЦеныНоменклатуры.Номенклатура
	|			И ВложенныйЗапрос.МоментВремени < ВТ_ЦеныНоменклатуры.МоментВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Потребность.Организация КАК Организация,
	|	ВТ_Потребность.Сотрудник КАК Сотрудник,
	|	ВТ_Потребность.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Потребность.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Потребность.КоличествоОстаток КАК КоличествоПотребность,
	|	ВТ_Потребность.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ,
	|	ВТ_Потребность.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_Потребность.ПериодичностьВыдачи КАК ПериодичностьВыдачи
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДляФорированияДокументов.Организация КАК Организация,
	|	ВТ_ТаблицаДляФорированияДокументов.Склад КАК Склад,
	|	ВТ_ТаблицаДляФорированияДокументов.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДляФорированияДокументов.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи КАК ДатаДокумента,
	|	ВТ_ТаблицаДляФорированияДокументов.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаДляФорированияДокументов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	1 КАК Количество,
	|	ВТ_ТаблицаДляФорированияДокументов.ЕстьОшибки КАК ЕстьОшибки,
	|	ВТ_ТаблицаДляФорированияДокументов.Лог КАК Лог,
	|	ВТ_ТаблицаДляФорированияДокументов.Файл КАК Файл,
	|	ЕСТЬNULL(ВТ_ПериодыЦены.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ВТ_ПериодыЦены.Цена, 0) КАК Сумма
	|ИЗ
	|	ВТ_ТаблицаДляФорированияДокументов КАК ВТ_ТаблицаДляФорированияДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыЦены КАК ВТ_ПериодыЦены
	|		ПО ВТ_ТаблицаДляФорированияДокументов.Организация = ВТ_ПериодыЦены.Организация
	|			И ВТ_ТаблицаДляФорированияДокументов.Номенклатура = ВТ_ПериодыЦены.Номенклатура
	|			И ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи <= ВТ_ПериодыЦены.КонецПериода
	|			И ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи > ВТ_ПериодыЦены.НачалоПериода
	|ГДЕ
	|	ВТ_ТаблицаДляФорированияДокументов.Файл ПОДОБНО ""%dispense%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДляФорированияДокументов.Организация КАК Организация,
	|	ВТ_ТаблицаДляФорированияДокументов.Склад КАК Склад,
	|	ВТ_ТаблицаДляФорированияДокументов.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи КАК ДатаДокумента,
	|	ВТ_ТаблицаДляФорированияДокументов.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаДляФорированияДокументов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ТаблицаДляФорированияДокументов.Файл КАК Файл,
	|	ВТ_ТаблицаДляФорированияДокументов.Количество КАК Количество,
	|	ЕСТЬNULL(ВТ_ПериодыЦены.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ВТ_ПериодыЦены.Цена, 0) * ВТ_ТаблицаДляФорированияДокументов.Количество КАК Сумма,
	|	ВТ_ТаблицаДляФорированияДокументов.ЕстьОшибки КАК ЕстьОшибки,
	|	ВТ_ТаблицаДляФорированияДокументов.Лог КАК Лог
	|ИЗ
	|	ВТ_ТаблицаДляФорированияДокументов КАК ВТ_ТаблицаДляФорированияДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыЦены КАК ВТ_ПериодыЦены
	|		ПО ВТ_ТаблицаДляФорированияДокументов.Организация = ВТ_ПериодыЦены.Организация
	|			И ВТ_ТаблицаДляФорированияДокументов.Номенклатура = ВТ_ПериодыЦены.Номенклатура
	|			И ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи <= ВТ_ПериодыЦены.КонецПериода
	|			И ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи > ВТ_ПериодыЦены.НачалоПериода
	|ГДЕ
	|	ВТ_ТаблицаДляФорированияДокументов.Файл ПОДОБНО ""%expedition%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаДляФорированияДокументов.Файл КАК Файл,
	|	ВТ_ТаблицаДляФорированияДокументов.Организация КАК Организация,
	|	ВТ_ТаблицаДляФорированияДокументов.ЕстьОшибки КАК ЕстьОшибки,
	|	"""" КАК Лог
	|ИЗ
	|	ВТ_ТаблицаДляФорированияДокументов КАК ВТ_ТаблицаДляФорированияДокументов
	|ГДЕ
	|	ВТ_ТаблицаДляФорированияДокументов.Файл ПОДОБНО ""%expedition%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаДляФорированияДокументов.Файл КАК Файл,
	|	ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи КАК ДатаДокумента
	|ИЗ
	|	ВТ_ТаблицаДляФорированияДокументов КАК ВТ_ТаблицаДляФорированияДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Файл УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДляФорированияДокументов.Организация КАК Организация,
	|	ВТ_ТаблицаДляФорированияДокументов.Склад КАК Склад,
	|	ВТ_ТаблицаДляФорированияДокументов.Сотрудник КАК Сотрудник,
	|	ВТ_Потребность.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаДляФорированияДокументов.НоменклатураНормы КАК НоменклатураНормы,
	|	МАКСИМУМ(ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи) КАК ДатаДокумента,
	|	ВТ_ТаблицаДляФорированияДокументов.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаДляФорированияДокументов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(1) КАК Количество,
	|	МАКСИМУМ(ВТ_ТаблицаДляФорированияДокументов.Файл) КАК Файл,
	|	ВТ_Потребность.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ,
	|	ВЫБОР
	|		КОГДА ВТ_Потребность.Организация.ИспользоватьАлгоритм_0_0_1_2
	|			ТОГДА ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи
	|		ИНАЧЕ ВТ_Потребность.ДатаПотребности
	|	КОНЕЦ КАК ДатаВыдачи,
	|	ВТ_Потребность.КоличествоОстаток КАК КоличествоПотребность,
	|	ЕСТЬNULL(ВТ_ПериодыЦены.Цена, 0) КАК Цена,
	|	ВТ_СоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	СУММА(ЕСТЬNULL(ВТ_ПериодыЦены.Цена, 0)) КАК Сумма,
	|	ВТ_ТаблицаДляФорированияДокументов.ЕстьОшибки КАК ЕстьОшибки,
	|	ВТ_ТаблицаДляФорированияДокументов.Лог КАК Лог
	|ИЗ
	|	ВТ_ТаблицаДляФорированияДокументов КАК ВТ_ТаблицаДляФорированияДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Потребность КАК ВТ_Потребность
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоставНормы КАК ВТ_СоставНормы
	|			ПО ВТ_Потребность.НормаВыдачи = ВТ_СоставНормы.Ссылка
	|				И ВТ_Потребность.НоменклатураНормы = ВТ_СоставНормы.НоменклатураНормы
	|		ПО ВТ_ТаблицаДляФорированияДокументов.Организация = ВТ_Потребность.Организация
	|			И ВТ_ТаблицаДляФорированияДокументов.Сотрудник = ВТ_Потребность.Сотрудник
	|			И ВТ_ТаблицаДляФорированияДокументов.НоменклатураНормы = ВТ_Потребность.НоменклатураНормы
	|			И (НАЧАЛОПЕРИОДА(ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(ВТ_Потребность.ДатаПотребности, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыЦены КАК ВТ_ПериодыЦены
	|		ПО ВТ_ТаблицаДляФорированияДокументов.Организация = ВТ_ПериодыЦены.Организация
	|			И ВТ_ТаблицаДляФорированияДокументов.Номенклатура = ВТ_ПериодыЦены.Номенклатура
	|			И ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи <= ВТ_ПериодыЦены.КонецПериода
	|			И ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи > ВТ_ПериодыЦены.НачалоПериода
	|ГДЕ
	|	ВТ_ТаблицаДляФорированияДокументов.Файл ПОДОБНО ""%dispense%""
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаДляФорированияДокументов.Организация,
	|	ВТ_ТаблицаДляФорированияДокументов.Склад,
	|	ВТ_ТаблицаДляФорированияДокументов.Сотрудник,
	|	ВТ_Потребность.НормаВыдачи,
	|	ВТ_ТаблицаДляФорированияДокументов.НоменклатураНормы,
	|	ВТ_ТаблицаДляФорированияДокументов.Номенклатура,
	|	ВТ_ТаблицаДляФорированияДокументов.ХарактеристикаНоменклатуры,
	|	ВТ_Потребность.ВидВыдачиСИЗ,
	|	ВЫБОР
	|		КОГДА ВТ_Потребность.Организация.ИспользоватьАлгоритм_0_0_1_2
	|			ТОГДА ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи
	|		ИНАЧЕ ВТ_Потребность.ДатаПотребности
	|	КОНЕЦ,
	|	ВТ_Потребность.КоличествоОстаток,
	|	ВТ_СоставНормы.ПериодичностьВыдачи,
	|	ВТ_ТаблицаДляФорированияДокументов.ЕстьОшибки,
	|	ВТ_ТаблицаДляФорированияДокументов.Лог,
	|	ЕСТЬNULL(ВТ_ПериодыЦены.Цена, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДляФорированияДокументов.Организация КАК Организация,
	|	ВТ_ТаблицаДляФорированияДокументов.Склад КАК Склад,
	|	ВТ_ТаблицаДляФорированияДокументов.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи КАК ДатаДокумента,
	|	ВТ_ТаблицаДляФорированияДокументов.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаДляФорированияДокументов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ТаблицаДляФорированияДокументов.Файл КАК Файл,
	|	ВТ_ТаблицаДляФорированияДокументов.Количество КАК Количество,
	|	ЕСТЬNULL(ВТ_ПериодыЦены.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ВТ_ПериодыЦены.Цена, 0) * ВТ_ТаблицаДляФорированияДокументов.Количество КАК Сумма,
	|	ВТ_ТаблицаДляФорированияДокументов.ЕстьОшибки КАК ЕстьОшибки,
	|	ВТ_ТаблицаДляФорированияДокументов.Лог КАК Лог,
	|	ВТ_ТаблицаДляФорированияДокументов.Ответственный КАК Ответственный
	|ИЗ
	|	ВТ_ТаблицаДляФорированияДокументов КАК ВТ_ТаблицаДляФорированияДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыЦены КАК ВТ_ПериодыЦены
	|		ПО ВТ_ТаблицаДляФорированияДокументов.Организация = ВТ_ПериодыЦены.Организация
	|			И ВТ_ТаблицаДляФорированияДокументов.Номенклатура = ВТ_ПериодыЦены.Номенклатура
	|			И ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи <= ВТ_ПериодыЦены.КонецПериода
	|			И ВТ_ТаблицаДляФорированияДокументов.ДатаВыдачи > ВТ_ПериодыЦены.НачалоПериода
	|ГДЕ
	|	ВТ_ТаблицаДляФорированияДокументов.Файл ПОДОБНО ""%returns%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаДляФорированияДокументов.Файл КАК Файл,
	|	ВТ_ТаблицаДляФорированияДокументов.Организация КАК Организация,
	|	ВТ_ТаблицаДляФорированияДокументов.ЕстьОшибки КАК ЕстьОшибки,
	|	"""" КАК Лог
	|ИЗ
	|	ВТ_ТаблицаДляФорированияДокументов КАК ВТ_ТаблицаДляФорированияДокументов
	|ГДЕ
	|	ВТ_ТаблицаДляФорированияДокументов.Файл ПОДОБНО ""%returns%""";
	
	Запрос.УстановитьПараметр("ТаблицаДляФормированияДокументов",	ТаблицаДляЗагрузки);
	Запрос.УстановитьПараметр("МассивОрганизаций",					ТаблицаДляЗагрузки.ВыгрузитьКолонку("Организация"));
	Запрос.УстановитьПараметр("МассивСотрудников",					ТаблицаДляЗагрузки.ВыгрузитьКолонку("Сотрудник"));
	Запрос.УстановитьПараметр("МассивНоменклатурыНормы",			ТаблицаДляЗагрузки.ВыгрузитьКолонку("НоменклатураНормы"));
	Запрос.УстановитьПараметр("ТекущаяДата",						ТекущаяДата());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаВыдачи 					= Результат[6].Выгрузить();
	ТаблицаЗакладки 				= Результат[7].Выгрузить();
	ТаблицаЗакладкиЛог 				= Результат[8].Выгрузить();
	ТаблицаДляЗагрузкиДокументов	= Результат[9].Выгрузить();
	ТаблицаПотребности				= Результат[10].Выгрузить();
	ТаблицаВозврата					= Результат[11].Выгрузить();
	ТаблицаВозвратаЛог 				= Результат[12].Выгрузить();
	
	Для Каждого СтрокаТаблицыДляЗагрузкиДокументов Из ТаблицаДляЗагрузкиДокументов Цикл
		
		Если НЕ СтрНайти(НРег(СтрокаТаблицыДляЗагрузкиДокументов.Файл),"expedition") = 0 Тогда //загрузка закладки
			
			ТаблицаКСписанию = Новый ТаблицаЗначений;
			ТаблицаКСписанию.Колонки.Добавить("Номенклатура", 				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаКСписанию.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
			ТаблицаКСписанию.Колонки.Добавить("Количество", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			ТаблицаКСписанию.Колонки.Добавить("Цена",						Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			ТаблицаКСписанию.Колонки.Добавить("Сумма",						Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			
			ТаблицаКПеремещению = Новый ТаблицаЗначений;
			ТаблицаКПеремещению.Колонки.Добавить("Номенклатура", 				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаКПеремещению.Колонки.Добавить("ХарактеристикаНоменклатуры", 	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
			ТаблицаКПеремещению.Колонки.Добавить("Количество", 					Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			ТаблицаКПеремещению.Колонки.Добавить("Цена",						Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			ТаблицаКПеремещению.Колонки.Добавить("Сумма",						Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			
			НайденныеСтроки = ТаблицаЗакладки.НайтиСтроки(Новый Структура("Файл",СтрокаТаблицыДляЗагрузкиДокументов.Файл));
			
			Если НайденныеСтроки.Количество() = 0 Тогда //вообще, такого быть не должно... а вдруг?
				Продолжить;
			КонецЕсли;	
			
			НовыйДокумент = Документы.ПеремещениеНоменклатуры.СоздатьДокумент();
			НовыйДокумент.Дата 					= НайденныеСтроки[0].ДатаДокумента;
			НовыйДокумент.Комментарий 			= "Загружен из файла: " + СтрокаТаблицыДляЗагрузкиДокументов.Файл;
			НовыйДокумент.Организация 			= НайденныеСтроки[0].Организация;
			НовыйДокумент.СкладПолучатель 		= НайденныеСтроки[0].Склад;
			НовыйДокумент.МОЛСкладаПолучателя	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(НовыйДокумент.СкладПолучатель,НайденныеСтроки[0].Организация);
			НовыйДокумент.СкладОтправитель		= НовыйДокумент.СкладПолучатель.СкладОтправитель;
			НовыйДокумент.МОЛСкладаОтправителя	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(НовыйДокумент.СкладОтправитель,НайденныеСтроки[0].Организация);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ЗапросПоОстаткам.УстановитьПараметр("ДатаАнализа",					Новый Граница(НайденныеСтроки[0].ДатаДокумента,ВидГраницы.Исключая));
				ЗапросПоОстаткам.УстановитьПараметр("Организация",					НайденныеСтроки[0].Организация);
				ЗапросПоОстаткам.УстановитьПараметр("Склад",						НайденныеСтроки[0].Склад);
				ЗапросПоОстаткам.УстановитьПараметр("Номенклатура",					НайденнаяСтрока.Номенклатура);
				ЗапросПоОстаткам.УстановитьПараметр("ХарактеристикаНоменклатуры",	НайденнаяСтрока.ХарактеристикаНоменклатуры);
				
				//расчет остатков
				Результат = ЗапросПоОстаткам.Выполнить();
				
				Если Результат.Пустой() Тогда //остатков нет 
					ТекущийОстаток = 0; 
				Иначе
					ТекущийОстаток = Результат.Выгрузить()[0].КоличествоОстаток
				КонецЕсли;
				
				Если ТекущийОстаток > НайденнаяСтрока.Количество Тогда //нужно списывать
					НоваяСтрока 			= ТаблицаКСписанию.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрока);
					НоваяСтрока.Количество 	= ТекущийОстаток - НайденнаяСтрока.Количество;
					НоваяСтрока.Сумма 		= НоваяСтрока.Цена * НоваяСтрока.Количество;
				ИначеЕсли ТекущийОстаток < НайденнаяСтрока.Количество Тогда //нужно перемещать
					НоваяСтрока 			= ТаблицаКПеремещению.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрока);
					НоваяСтрока.Количество 	= НайденнаяСтрока.Количество - ТекущийОстаток;
					НоваяСтрока.Сумма 		= НоваяСтрока.Цена * НоваяСтрока.Количество;
				КонецЕсли;	
				
			КонецЦикла;	
			
			Если НЕ ТаблицаКСписанию.Количество() = 0 Тогда //создаем документ списания
				
				НовыйДокумент = Документы.СписаниеНоменклатуры.СоздатьДокумент();
				НовыйДокумент.Дата 			= НайденныеСтроки[0].ДатаДокумента;
				НовыйДокумент.Комментарий 	= "Загружен из файла: " + СтрокаТаблицыДляЗагрузкиДокументов.Файл;
				НовыйДокумент.Организация 	= НайденныеСтроки[0].Организация;
				НовыйДокумент.Склад 		= НайденныеСтроки[0].Склад;
				НовыйДокумент.МОЛ			= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(НовыйДокумент.Склад,НайденныеСтроки[0].Организация);
				
				НовыйДокумент.Товары.Загрузить(ТаблицаКСписанию);
				
				НовыйДокумент.СуммаДокумента = НовыйДокумент.Товары.Итог("Сумма");
				НовыйДокумент.УстановитьНовыйНомер();
				
				Попытка
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					НайденныеСтроки = ТаблицаЗакладкиЛог.НайтиСтроки(НОВЫЙ Структура("Файл",СтрокаТаблицыДляЗагрузкиДокументов.Файл));
					НайденныеСтроки[0].Лог = НайденныеСтроки[0].Лог + ОписаниеОшибки();
					НайденныеСтроки[0].ЕстьОшибки = Истина;
				КонецПопытки;
				
			КонецЕсли;
			
			Если НЕ ТаблицаКПеремещению.Количество() = 0 Тогда //создаем документ перемещения
				
				НовыйДокумент = Документы.ПеремещениеНоменклатуры.СоздатьДокумент();
				НовыйДокумент.Дата 					= НайденныеСтроки[0].ДатаДокумента;
				НовыйДокумент.Комментарий 			= "Загружен из файла: " + СтрокаТаблицыДляЗагрузкиДокументов.Файл;
				НовыйДокумент.Организация 			= НайденныеСтроки[0].Организация;
				НовыйДокумент.СкладПолучатель 		= НайденныеСтроки[0].Склад;
				НовыйДокумент.МОЛСкладаПолучателя	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(НовыйДокумент.СкладПолучатель,НайденныеСтроки[0].Организация);
				НовыйДокумент.СкладОтправитель		= НовыйДокумент.СкладПолучатель.СкладОтправитель;
				НовыйДокумент.МОЛСкладаОтправителя	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(НовыйДокумент.СкладОтправитель,НайденныеСтроки[0].Организация);
				
				НовыйДокумент.Товары.Загрузить(ТаблицаКПеремещению);
				
				НовыйДокумент.СуммаДокумента = НовыйДокумент.Товары.Итог("Сумма");
				НовыйДокумент.УстановитьНовыйНомер();
				
				Попытка
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					НайденныеСтроки = ТаблицаЗакладкиЛог.НайтиСтроки(НОВЫЙ Структура("Файл",СтрокаТаблицыДляЗагрузкиДокументов.Файл));
					НайденныеСтроки[0].Лог = НайденныеСтроки[0].Лог + ОписаниеОшибки();
					НайденныеСтроки[0].ЕстьОшибки = Истина;
				КонецПопытки;
				
			КонецЕсли;
	
		КонецЕсли;
		
		Если НЕ СтрНайти(НРег(СтрокаТаблицыДляЗагрузкиДокументов.Файл),"returns") = 0 Тогда //загрузка возврата
			
			НайденныеСтроки = ТаблицаВозврата.НайтиСтроки(Новый Структура("Файл",СтрокаТаблицыДляЗагрузкиДокументов.Файл));
			
			Если НайденныеСтроки.Количество() = 0 Тогда //вообще, такого быть не должно... а вдруг?
				Продолжить;
			КонецЕсли;	
			
			НовыйДокумент = Документы.ПеремещениеНоменклатуры.СоздатьДокумент();
			НовыйДокумент.Дата 					= НайденныеСтроки[0].ДатаДокумента;
			НовыйДокумент.Комментарий 			= "Загружен из файла: " + СтрокаТаблицыДляЗагрузкиДокументов.Файл;
			НовыйДокумент.Организация 			= НайденныеСтроки[0].Организация;
			НовыйДокумент.Комментарий 			= "Ответственный: " + НайденныеСтроки[0].Ответственный;
			НовыйДокумент.СкладОтправитель 		= НайденныеСтроки[0].Склад;
			НовыйДокумент.МОЛСкладаОтправителя	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(НовыйДокумент.СкладОтправитель,НайденныеСтроки[0].Организация);
			НовыйДокумент.СкладПолучатель		= НовыйДокумент.СкладОтправитель.СкладОтправитель;
			НовыйДокумент.МОЛСкладаПолучателя	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(НовыйДокумент.СкладПолучатель,НайденныеСтроки[0].Организация);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ЗаполнитьЗначенияСвойств(НовыйДокумент.Товары.Добавить(),НайденнаяСтрока);
				
			КонецЦикла;	
			
			НовыйДокумент.СуммаДокумента = НовыйДокумент.Товары.Итог("Сумма");
			НовыйДокумент.УстановитьНовыйНомер();
			
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				НайденныеСтроки = ТаблицаВозвратаЛог.НайтиСтроки(НОВЫЙ Структура("Файл",СтрокаТаблицыДляЗагрузкиДокументов.Файл));
				НайденныеСтроки[0].Лог = НайденныеСтроки[0].Лог + ОписаниеОшибки();
				НайденныеСтроки[0].ЕстьОшибки = Истина;
				НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
				
		КонецЕсли;
		
		Если НЕ СтрНайти(НРег(СтрокаТаблицыДляЗагрузкиДокументов.Файл),"dispense") = 0 Тогда //загрузка выдачи
			
			ВыдачаЗачнена = Ложь;
			
			НайденныеСтроки = ТаблицаВыдачи.НайтиСтроки(Новый Структура("Файл,ДатаДокумента",СтрокаТаблицыДляЗагрузкиДокументов.Файл,СтрокаТаблицыДляЗагрузкиДокументов.ДатаДокумента));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	
				
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				//если разные организации имеют одинаковый проект, возможна коллизия: владелец сотрудника и организация не совпадают
				//в этом случае загрузку производить не нужно
				Если НЕ НайденнаяСтрока.Организация = НайденнаяСтрока.Сотрудник.Владелец Тогда
					Продолжить;
				КонецЕсли;
			
				//ВыдачаЗачнена = Ложь;
				
				СтруктураПоиска = Новый Структура();	
				СтруктураПоиска.Вставить("Организация",			НайденнаяСтрока.Организация);	
				СтруктураПоиска.Вставить("Сотрудник",			НайденнаяСтрока.Сотрудник);	
				СтруктураПоиска.Вставить("НоменклатураНормы",	НайденнаяСтрока.НоменклатураНормы);
				
				НайденныеСтрокиПотребности = ТаблицаПотребности.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого НайденнаяСтрокаПотребности Из НайденныеСтрокиПотребности Цикл
					
					Если НайденнаяСтрокаПотребности.КоличествоПотребность = 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					НовыйДокумент 						= Документы.ВыдачаСредствЗащитыСотруднику.СоздатьДокумент();
					НовыйДокумент.ВидВыдачиСИЗ 			= НайденнаяСтрокаПотребности.ВидВыдачиСИЗ;
					НовыйДокумент.ВидОперации 			= Перечисления.ВидыОперацийВыдачиСИЗ.ФактическаяВыдача;
					НовыйДокумент.Дата 					= НайденнаяСтрока.ДатаДокумента;
					НовыйДокумент.Комментарий 			= "Загружен из файла: " + НайденнаяСтрока.Файл;
					НовыйДокумент.Организация 			= НайденнаяСтрока.Организация;
					НовыйДокумент.МОЛ 					= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(НайденнаяСтрока.Склад,НайденнаяСтрока.Организация);
					НовыйДокумент.Склад 				= НайденнаяСтрока.Склад;
					НовыйДокумент.Сотрудник 			= НайденнаяСтрока.Сотрудник;
					
					НоваяСтрока = НовыйДокумент.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрока);		
					НоваяСтрока.НормаВыдачи 			= НайденнаяСтрокаПотребности.НормаВыдачи;
					НоваяСтрока.ПериодичностьВыдачи 	= НайденнаяСтрокаПотребности.ПериодичностьВыдачи;
					НоваяСтрока.КоличествоПотребность 	= НайденнаяСтрокаПотребности.КоличествоПотребность;
					Если НайденнаяСтрока.Организация.ИспользоватьАлгоритм_0_0_1_2 Тогда
						НоваяСтрока.ДатаВыдачи = СтрокаТаблицыДляЗагрузкиДокументов.ДатаДокумента;
					Иначе
						НоваяСтрока.ДатаВыдачи = НайденнаяСтрокаПотребности.ДатаВыдачи;
					КонецЕсли;					
					НовыйДокумент.СуммаДокумента = НовыйДокумент.Товары.Итог("Сумма");
					НовыйДокумент.УстановитьНовыйНомер();
					
					Попытка
						НайденнаяСтрокаПотребности.КоличествоПотребность = НайденнаяСтрокаПотребности.КоличествоПотребность - 1;
						ВыдачаЗачнена = Истина;
						НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						Текст = Новый ТекстовыйДокумент();
						Текст.ДобавитьСтроку(ОписаниеОшибки());
						Текст.Записать(РесурсДляЗагрузки + НайденнаяСтрока.Организация.Проект + "\OLD\" + НайденнаяСтрока.Файл + ".RESULT");
						НовыйДокумент.Комментарий = НовыйДокумент.Комментарий + Символы.ПС + ОписаниеОшибки();
						НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
					КонецПопытки;
					
					Если ВыдачаЗачнена Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ВыдачаЗачнена Тогда
					
					Текст = Новый ТекстовыйДокумент();
					Текст.ДобавитьСтроку("Не найдена потребность по файлу: " + НайденнаяСтрока.Файл);
					Текст.Записать(РесурсДляЗагрузки + НайденнаяСтрока.Организация.Проект + "\OLD\" + НайденнаяСтрока.Файл + ".RESULT");
					
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого СтрокаТаблицыЗакладкиЛог Из ТаблицаЗакладкиЛог Цикл
		
		Если СтрокаТаблицыЗакладкиЛог.ЕстьОшибки Тогда
			
			Текст = Новый ТекстовыйДокумент();
			Текст.ДобавитьСтроку(СтрокаТаблицыЗакладкиЛог.Лог);
			Текст.Записать(РесурсДляЗагрузки + СтрокаТаблицыЗакладкиЛог.Организация.Проект + "\OLD\" + СтрокаТаблицыЗакладкиЛог.Файл + ".RESULT");
			
		Конецесли;	
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыВозвратаЛог Из ТаблицаВозвратаЛог Цикл
		
		Если СтрокаТаблицыВозвратаЛог.ЕстьОшибки Тогда
			
			Текст = Новый ТекстовыйДокумент();
			Текст.ДобавитьСтроку(СтрокаТаблицыВозвратаЛог.Лог);
			Текст.Записать(РесурсДляЗагрузки + СтрокаТаблицыВозвратаЛог.Организация.Проект + "\OLD\" + СтрокаТаблицыВозвратаЛог.Файл + ".RESULT");
			
		Конецесли;	
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьДатуИзСтрокиДляВендинга(ДатаСтрокой) Экспорт
	
	День_ 		= Число(Лев(ДатаСтрокой,2));
	Месяц_ 		= Число(Сред(ДатаСтрокой,4,2));
	Год_   		= Число(Сред(ДатаСтрокой,7,4));
	Час_   		= Число(Сред(ДатаСтрокой,12,2));
	Минута_		= Число(Сред(ДатаСтрокой,15,2));
	Секунда_ 	= Число(Сред(ДатаСтрокой,18,2));
	
	Возврат Дата(Год_,Месяц_,День_,Час_,Минута_,Секунда_);
	
КонецФункции

Процедура ПереместитьЗагруженныеФайлы(ТаблицаДляЗагрузки, РесурсДляЗагрузки) Экспорт
	
	ТаблицаДляЗагрузки.Свернуть("Проект,Файл");
	
	Для Каждого СтрокаТаблицыДляЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		ПереместитьФайл(РесурсДляЗагрузки + СтрокаТаблицыДляЗагрузки.Проект + "\" + СтрокаТаблицыДляЗагрузки.Файл, РесурсДляЗагрузки + СтрокаТаблицыДляЗагрузки.Проект + "\OLD\" + СтрокаТаблицыДляЗагрузки.Файл);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВендингВыгрузитьДанные() Экспорт
	
	//общий ресур для обмена данными
	Ресурс = Константы.ВендингРесурсОбмена.Получить();
	
	ВыборкаУзлов = ПланыОбмена.Вендинг.Выбрать();
	
	Пока ВыборкаУзлов.Следующий() Цикл
		
		Если ВыборкаУзлов.Ссылка = ПланыОбмена.Вендинг.ЭтотУзел() Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСотрудников 		= Новый Массив;
		МассивНоменклатуры 		= Новый Массив;
		МассивНоменклатурыНорм 	= Новый Массив;
		МассивСкладов 			= Новый Массив;
		
		ТекущийПроект = ВыборкаУзлов.Наименование;
		ТекущийКаталог = Ресурс + ТекущийПроект + "\";
		
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ВыборкаУзлов.Ссылка,1);
		
		Пока ВыборкаИзменений.Следующий() Цикл
			
			ДанныеВыборки = ВыборкаИзменений.Получить();
			
			Если ТипЗнч(ДанныеВыборки) = Тип("СправочникОбъект.НоменклатураНормОрганизации") Тогда
				МассивНоменклатурыНорм.Добавить(ДанныеВыборки.Ссылка);
			ИначеЕсли ТипЗнч(ДанныеВыборки) = Тип("СправочникОбъект.Номенклатура") Тогда
				МассивНоменклатуры.Добавить(ДанныеВыборки.Ссылка);
			ИначеЕсли ТипЗнч(ДанныеВыборки) = Тип("СправочникОбъект.Сотрудники") Тогда
				МассивСотрудников.Добавить(ДанныеВыборки.Ссылка);
			ИначеЕсли ТипЗнч(ДанныеВыборки) = Тип("СправочникОбъект.Склады") Тогда
				МассивСкладов.Добавить(ДанныеВыборки.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаДляВыгрузки();
		Запрос.УстановитьПараметр("ДатаАнализа",			ТекущаяДата());
		Запрос.УстановитьПараметр("Проект",					ТекущийПроект);
		Запрос.УстановитьПараметр("МассивНоменклатурыНормы",МассивНоменклатурыНорм);
		Запрос.УстановитьПараметр("МассивНоменклатуры",		МассивНоменклатуры);
		Запрос.УстановитьПараметр("МассивСотрудников",		МассивСотрудников);
		Запрос.УстановитьПараметр("МассивСкладов",			МассивСкладов);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ТаблицаСкладов 						= Результат[4].Выгрузить();
		ВыборкаПоПроектам 					= Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТаблицаСотрудников 					= Результат[6].Выгрузить();
		ТаблицаНоменклатурыНорм 			= Результат[7].Выгрузить();
		ТаблицаНоменклатурыВыдачи 			= Результат[8].Выгрузить();
		ТаблицаНоменклатурыНормСотрудников 	= Результат[9].Выгрузить();
		ТаблицаСоответствия 				= ПроцедурыРаботыСНормамиСервер.ПолучитьСоответствияНоменклатурыДляСотрудников(ТаблицаНоменклатурыНормСотрудников,ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(""));
		ТаблицаПотребности 					= Результат[11].Выгрузить();
		
		ИмяФайла = ТекущийПроект + "_astb_" + Формат(Год(ТекущаяДата()),"ЧГ=0") + "_" 
		+ Формат(Месяц(ТекущаяДата()),"ЧЦ=2; ЧВН=") + "_" 
		+ Формат(День(ТекущаяДата()),"ЧЦ=2; ЧВН=") + "_" 
		+ Формат(Час(ТекущаяДата()),"ЧЦ=2; ЧВН=") + "_" 
		+ Формат(Минута(ТекущаяДата()),"ЧЦ=2; ЧВН=") + ".xml";
		
		ПолноеИмяФайлаВыгрузки = ТекущийКаталог + ИмяФайла;
		
		ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
		
		ХМЛ = Новый ЗаписьXML;
		ХМЛ.ОткрытьФайл(ВременныйФайл, "UTF-8"); 
		ХМЛ.ЗаписатьОбъявлениеXML();
		
		ХМЛ.ЗаписатьНачалоЭлемента("progects");
		
		Пока ВыборкаПоПроектам.Следующий() Цикл
			
			ХМЛ.ЗаписатьНачалоЭлемента("progect");
			ХМЛ.ЗаписатьАтрибут("progect_ID",ВыборкаПоПроектам.Проект);
			
			ХМЛ.ЗаписатьНачалоЭлемента("org_list");
			
			ВыборкаПоОрганизации = ВыборкаПоПроектам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоОрганизации.Следующий() Цикл
				
				ТекущаяОрганизация = ВыборкаПоОрганизации.Организация;
				
				ХМЛ.ЗаписатьНачалоЭлемента("org_item");
				ХМЛ.ЗаписатьАтрибут("org_inn",		СокрЛП(ТекущаяОрганизация.ИНН));
				ХМЛ.ЗаписатьАтрибут("org_kpp",		СокрЛП(ТекущаяОрганизация.КПП));
				ХМЛ.ЗаписатьАтрибут("org_prefix",	СокрЛП(ТекущаяОрганизация.Префикс));
				ХМЛ.ЗаписатьАтрибут("org_name",		СокрЛП(ТекущаяОрганизация.Наименование));
				ХМЛ.ЗаписатьАтрибут("org_full_name",СокрЛП(ТекущаяОрганизация.НаименованиеПолное));
				
				НайденныеСтроки = ТаблицаСотрудников.НайтиСтроки(Новый Структура("Организация",ТекущаяОрганизация));
				
				ХМЛ.ЗаписатьНачалоЭлемента("worker_list");
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					ХМЛ.ЗаписатьНачалоЭлемента("worker_item");
					ХМЛ.ЗаписатьАтрибут("worker_GUID",		Строка(НайденнаяСтрока.Сотрудник.УникальныйИдентификатор()));
					ХМЛ.ЗаписатьАтрибут("worker_ID",		НайденнаяСтрока.Сотрудник.Идентификатор);
					ХМЛ.ЗаписатьАтрибут("worker_number",	НайденнаяСтрока.Сотрудник.ТабельныйНомер);
					ХМЛ.ЗаписатьАтрибут("worker_family",	НайденнаяСтрока.Фамилия);
					ХМЛ.ЗаписатьАтрибут("worker_name",		НайденнаяСтрока.Имя);
					ХМЛ.ЗаписатьАтрибут("worker_surname",	НайденнаяСтрока.Отчество);
					ХМЛ.ЗаписатьКонецЭлемента();//worker_item
					
				КонецЦикла;
				
				ХМЛ.ЗаписатьКонецЭлемента();//worker_list
				
				НайденныеСтроки = ТаблицаНоменклатурыВыдачи.НайтиСтроки(Новый Структура("Организация",ТекущаяОрганизация));
				
				ХМЛ.ЗаписатьНачалоЭлемента("nomenclature_give_list");
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					ХМЛ.ЗаписатьНачалоЭлемента("nomenclature_give_item");
					ХМЛ.ЗаписатьАтрибут("nomenclature_give_ID",			Формат(НайденнаяСтрока.Номенклатура.КодСинхронизации,"ЧГ="));
					ХМЛ.ЗаписатьАтрибут("nomenclature_give_name",		СокрЛП(НайденнаяСтрока.НаименованиеНоменклатуры));
					ХМЛ.ЗаписатьАтрибут("nomenclature_give_size_ID",	Формат(НайденнаяСтрока.КодРазмера,"ЧГ="));
					ХМЛ.ЗаписатьАтрибут("nomenclature_give_size_name",	СокрЛП(НайденнаяСтрока.НаименованиеРазмера));
					ХМЛ.ЗаписатьАтрибут("nomenclature_give_photo",		СокрЛП(НайденнаяСтрока.Номенклатура.Артикул));
					ХМЛ.ЗаписатьАтрибут("nomenclature_give_small",		?(НайденнаяСтрока.Номенклатура.АвтоматизированнаяВыдачаБезОшибок,"true","false"));
					ХМЛ.ЗаписатьКонецЭлемента();//nomenclature_give_item
					
				КонецЦикла;
				
				ХМЛ.ЗаписатьКонецЭлемента();//nomenclature_give_list
				
				НайденныеСтроки = ТаблицаНоменклатурыНорм.НайтиСтроки(Новый Структура("Организация",ТекущаяОрганизация));	
				
				ХМЛ.ЗаписатьНачалоЭлемента("nomenclature_norm_list");
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					ХМЛ.ЗаписатьНачалоЭлемента("nomenclature_norm_item");
					ХМЛ.ЗаписатьАтрибут("nomenclature_norm_ID",		СокрЛП(НайденнаяСтрока.НоменклатураНормы.Код));
					ХМЛ.ЗаписатьАтрибут("nomenclature_norm_name",	СокрЛП(НайденнаяСтрока.НоменклатураНормы.Наименование));
					ХМЛ.ЗаписатьКонецЭлемента();//nomenclature_norm_item
					
				КонецЦикла;
				
				ХМЛ.ЗаписатьКонецЭлемента();//nomenclature_norm_list
				
				НайденныеСтроки = ТаблицаПотребности.НайтиСтроки(Новый Структура("Организация",ТекущаяОрганизация));	
				
				ХМЛ.ЗаписатьНачалоЭлемента("norm_list");
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					СтруктураПоиска = Новый Структура("Сотрудник,НоменклатураНормы",НайденнаяСтрока.Сотрудник,НайденнаяСтрока.НоменклатураНормы);
					
					НайденныеСтрокиМаппинга = ТаблицаСоответствия.НайтиСтроки(СтруктураПоиска);
					
					Для Каждого НайденнаяСтрокаМаппинга Из НайденныеСтрокиМаппинга Цикл
						
						Если НайденнаяСтрокаМаппинга.Номенклатура.ВозможнаАвтоматизированнаяВыдача Тогда
							
							ХМЛ.ЗаписатьНачалоЭлемента("norm_item");
							ХМЛ.ЗаписатьАтрибут("worker_GUID",			Строка(НайденнаяСтрока.Сотрудник.УникальныйИдентификатор()));
							ХМЛ.ЗаписатьАтрибут("norm_date",			Формат(НайденнаяСтрока.ДатаПотребности,"ДФ=dd.MM.yyyy"));
							ХМЛ.ЗаписатьАтрибут("nomenclature_norm_ID",	СокрЛП(НайденнаяСтрока.НоменклатураНормы.Код));
							ХМЛ.ЗаписатьАтрибут("nomenclature_give_ID",	Формат(НайденнаяСтрокаМаппинга.Номенклатура.КодСинхронизации,"ЧГ="));
							ХМЛ.ЗаписатьАтрибут("norm_limit",			Формат(НайденнаяСтрока.КоличествоОстаток,"ЧЦ=15; ЧДЦ=3; ЧГ="));
							ХМЛ.ЗаписатьКонецЭлемента();//norm_item
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ХМЛ.ЗаписатьКонецЭлемента();//norm_list
				
				ХМЛ.ЗаписатьКонецЭлемента();//org_item
				
			КонецЦикла;
			
			ХМЛ.ЗаписатьКонецЭлемента();//org_list
			
			ХМЛ.ЗаписатьНачалоЭлемента("issuing_points_list");
			
			Для Каждого СтрокаТаблицыСкладов Из ТаблицаСкладов Цикл
				
				ХМЛ.ЗаписатьНачалоЭлемента("issuing_point_item");
				ХМЛ.ЗаписатьАтрибут("issuing_point_ID",			Строка(СтрокаТаблицыСкладов.Склад.УникальныйИдентификатор()));
				ХМЛ.ЗаписатьАтрибут("issuing_point_name",		СокрЛП(СтрокаТаблицыСкладов.Наименование));
				ХМЛ.ЗаписатьАтрибут("issuing_point_position",	СокрЛП(СтрокаТаблицыСкладов.Местоположение));
				ХМЛ.ЗаписатьКонецЭлемента();//issuing_point_item
				
			КонецЦикла;	
			
			ХМЛ.ЗаписатьКонецЭлемента();//issuing_points_list
			
			ХМЛ.ЗаписатьКонецЭлемента();//progect
			
		КонецЦикла;
		
		ХМЛ.ЗаписатьКонецЭлемента();//progects
		
		ХМЛ.Закрыть();
		
		КопироватьФайл(ВременныйФайл,ПолноеИмяФайлаВыгрузки);
		
		УдалитьФайлы(ВременныйФайл);
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ВыборкаУзлов.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьТекстЗапросаДляВыгрузки()
	
	ТекстЗапроса =  
	"ВЫБРАТЬ
	|	ПотребностьВыдачиСИЗОстатки.Организация КАК Организация,
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник КАК Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.НоменклатураНормы КАК НоменклатураНормы,
	|	НАЧАЛОПЕРИОДА(ПотребностьВыдачиСИЗОстатки.ДатаПотребности, МЕСЯЦ) КАК ДатаПотребности,
	|	СУММА(ПотребностьВыдачиСИЗОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Потребность
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(&ДатаАнализа, Организация.Проект = &Проект) КАК ПотребностьВыдачиСИЗОстатки
	|ГДЕ
	|	НЕ ПотребностьВыдачиСИЗОстатки.КоличествоОстаток < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьВыдачиСИЗОстатки.Организация,
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.НоменклатураНормы,
	|	НАЧАЛОПЕРИОДА(ПотребностьВыдачиСИЗОстатки.ДатаПотребности, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Сотрудник КАК Сотрудник,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Подразделение КАК Подразделение,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Должность КАК Должность,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.НоменклатураНормыОрганизации КАК НоменклатураНормыОрганизации,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура КАК Номенклатура,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Маппинг
	|ИЗ
	|	РегистрСведений.СоответствияНоменклатурыВыдачи.СрезПоследних(&ДатаАнализа, ) КАК СоответствияНоменклатурыВыдачиСрезПоследних
	|ГДЕ
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Использовать
	|	И СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура.ВозможнаАвтоматизированнаяВыдача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник,
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность
	|ПОМЕСТИТЬ ВТ_ЗРМ
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(&ДатаАнализа, Организация.Проект = &Проект) КАК ЗанятыеРабочиеМестаОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.Наименование КАК НаименованиеРазмера,
	|	ХарактеристикиНоменклатуры.Код КАК КодРазмера
	|ПОМЕСТИТЬ ВТ_Размеры
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец.ВозможнаАвтоматизированнаяВыдача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.КодСинхронизации КАК КодСинхронизации,
	|	Склады.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА Склады.Местоположение = """"
	|			ТОГДА ""местоположение не определено""
	|		ИНАЧЕ Склады.Местоположение
	|	КОНЕЦ КАК Местоположение,
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В(&МассивСкладов)
	|	И Склады.АвтоматизированнаяВыдача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Потребность.Организация.Проект КАК Проект,
	|	ВТ_Потребность.Организация КАК Организация
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|ГДЕ
	|	ВТ_Потребность.Организация.Проект = &Проект
	|ИТОГИ ПО
	|	Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Потребность.Организация КАК Организация,
	|	ВТ_Потребность.Сотрудник КАК Сотрудник,
	|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаАнализа, ) КАК ФИОФизическихЛицСрезПоследних
	|		ПО ВТ_Потребность.Сотрудник.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	|ГДЕ
	|	ВТ_Потребность.Сотрудник В(&МассивСотрудников)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Потребность.Сотрудник.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Потребность.Организация КАК Организация,
	|	ВТ_Потребность.НоменклатураНормы КАК НоменклатураНормы
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг КАК ВТ_Маппинг
	|		ПО ВТ_Потребность.НоменклатураНормы = ВТ_Маппинг.НоменклатураНормыОрганизации
	|ГДЕ
	|	НЕ ВТ_Маппинг.Номенклатура ЕСТЬ NULL
	|	И ВТ_Потребность.НоменклатураНормы В(&МассивНоменклатурыНормы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Потребность.НоменклатураНормы.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Потребность.Организация КАК Организация,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_Размеры.КодРазмера, 0) КАК КодРазмера,
	|	ВТ_Маппинг.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	ВТ_Размеры.НаименованиеРазмера КАК НаименованиеРазмера
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг КАК ВТ_Маппинг
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Размеры КАК ВТ_Размеры
	|			ПО ВТ_Маппинг.Номенклатура = ВТ_Размеры.Номенклатура
	|		ПО ВТ_Потребность.НоменклатураНормы = ВТ_Маппинг.НоменклатураНормыОрганизации
	|ГДЕ
	|	НЕ ВТ_Маппинг.Номенклатура ЕСТЬ NULL
	|	И ВТ_Маппинг.Номенклатура В(&МассивНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Маппинг.Номенклатура.Наименование,
	|	Организация,
	|	КодРазмера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Потребность.Сотрудник КАК Сотрудник,
	|	ВТ_ЗРМ.Подразделение КАК Подразделение,
	|	ВТ_ЗРМ.Должность КАК Должность,
	|	ВТ_Потребность.НоменклатураНормы КАК НоменклатураНормы
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗРМ КАК ВТ_ЗРМ
	|		ПО ВТ_Потребность.Сотрудник = ВТ_ЗРМ.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг КАК ВТ_Маппинг
	|		ПО ВТ_Потребность.НоменклатураНормы = ВТ_Маппинг.НоменклатураНормыОрганизации
	|ГДЕ
	|	НЕ ВТ_Маппинг.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Потребность.Организация КАК Организация,
	|	ВТ_Потребность.Сотрудник КАК Сотрудник,
	|	ВТ_Потребность.НоменклатураНормы КАК НоменклатураНормы,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(&ДатаАнализа, МЕСЯЦ) > НАЧАЛОПЕРИОДА(ВТ_Потребность.ДатаПотребности, МЕСЯЦ)
	|			ТОГДА НАЧАЛОПЕРИОДА(&ДатаАнализа, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_Потребность.ДатаПотребности, МЕСЯЦ)
	|	КОНЕЦ КАК ДатаПотребности,
	|	ВТ_Потребность.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг КАК ВТ_Маппинг
	|		ПО ВТ_Потребность.НоменклатураНормы = ВТ_Маппинг.НоменклатураНормыОрганизации
	|ГДЕ
	|	НЕ ВТ_Маппинг.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Организация КАК Организация,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.ДатаПотребности КАК ДатаПотребности,
	|	СУММА(ВТ_Результат.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.Организация,
	|	ВТ_Результат.Сотрудник,
	|	ВТ_Результат.НоменклатураНормы,
	|	ВТ_Результат.ДатаПотребности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Результат.Сотрудник.Наименование,
	|	ВТ_Результат.НоменклатураНормы.Наименование,
	|	ВТ_Результат.ДатаПотребности";
	
	Возврат ТекстЗапроса;
	
КонецФункции	