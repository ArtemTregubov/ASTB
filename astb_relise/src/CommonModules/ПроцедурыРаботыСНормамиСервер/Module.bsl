Функция СоздатьНоменклатуруНормыОрганизации(НаименованиеНоменклатуры,Организация) Экспорт
	
	НоменклатураНорм = Справочники.НоменклатураНормОрганизации.НайтиПоНаименованию(СокрЛП(НаименованиеНоменклатуры),Истина,,Организация);
	
	Если НоменклатураНорм.Пустая() Тогда
		
		НоменклатураНорм 				= Справочники.НоменклатураНормОрганизации.СоздатьЭлемент();
		НоменклатураНорм.Владелец		= Организация;
		НоменклатураНорм.Наименование 	= СокрЛП(НаименованиеНоменклатуры);
		НоменклатураНорм.ВидСИЗ			= СоздатьВидСИЗ(СокрЛП(НаименованиеНоменклатуры));
		НоменклатураНорм.УстановитьНовыйКод();
		НоменклатураНорм.Записать();
		НоменклатураНорм 				= НоменклатураНорм.Ссылка;
		
	КонецЕсли;
	
	Возврат НоменклатураНорм;
	
КонецФункции

Функция СоздатьВидСИЗ(НаименованиеНоменклатуры) Экспорт
	
	ПервоеСлово = Лев(НаименованиеНоменклатуры,Найти(НаименованиеНоменклатуры," ") - 1);
	
	Если НЕ ЗначениеЗаполнено(ПервоеСлово) Тогда
		ПервоеСлово = НаименованиеНоменклатуры;
	КонецЕсли;
	
	ВидСИЗ = Справочники.ВидыСИЗ.НайтиПоНаименованию(ПервоеСлово,Истина);
	
	Если ВидСИЗ.Пустая() Тогда
		
		ВидСИЗ 				= Справочники.ВидыСИЗ.СоздатьЭлемент();
		ВидСИЗ.Наименование = ПервоеСлово;
		ВидСИЗ.УстановитьНовыйКод();
		ВидСИЗ.Записать();
		ВидСИЗ 				= ВидСИЗ.Ссылка;
		
	КонецЕсли;
	
	Возврат ВидСИЗ;
	
КонецФункции

Функция ПолучитьВладельцаСоставаТОН(НормаОрганизации) Экспорт
	
	Возврат НормаОрганизации.Основание;
	
КонецФункции

Функция ПолучитьГОСТ(НомерГОСТ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныйГОСТ = Справочники.ГОСТы.НайтиПоКоду(НомерГОСТ);
	
	Если НайденныйГОСТ.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравильныеГОСТы.ПравильныйГОСТ
		|ИЗ
		|	РегистрСведений.ПравильныеГОСТы КАК ПравильныеГОСТы
		|ГДЕ
		|	ПравильныеГОСТы.НеПравильныйГОСТ = &НеПравильныйГОСТ";
		
		Запрос.УстановитьПараметр("НеПравильныйГОСТ",НомерГОСТ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			НайденныйГОСТ = Выборка.ПравильныйГОСТ;
		Иначе
			НайденныйГОСТ = НомерГОСТ;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденныйГОСТ;	
	
КонецФункции

Функция ПолучитьПол(НаименованиеПола) Экспорт
	
	Если НаименованиеПола = "женский" Тогда
		Возврат Перечисления.ПолФизическогоЛица.Женский;
	Иначе
		Возврат Перечисления.ПолФизическогоЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗаголовокТОН(ТекущееОснование,ВыводитьЗаголовок) Экспорт
	
	Если ЗначениеЗаполнено(ТекущееОснование) Тогда
		ТекущийЗаголовок = СтрЗаменить(ТекущееОснование.Владелец.ПолноеНаименование(),"/"," --> ");
	Иначе
		ТекущийЗаголовок = "не определен";
	КонецЕсли;
	
	Возврат ?(ВыводитьЗаголовок,"ТОН: ","") + ТекущийЗаголовок;	
	
КонецФункции

Функция ПолучитьНоменклатуруНормыОрганизацииПоТОН(Организация,НоменклатураТОН) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствияНоменклатурыНорм.НоменклатураНормОрганизации
	|ИЗ
	|	РегистрСведений.СоответствияНоменклатурыНорм КАК СоответствияНоменклатурыНорм
	|ГДЕ
	|	СоответствияНоменклатурыНорм.НоменклатураТОН = &НоменклатураТОН
	|	И СоответствияНоменклатурыНорм.НоменклатураНормОрганизации.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец",Организация);
	Запрос.УстановитьПараметр("НоменклатураТОН",НоменклатураТОН);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НоменклатураНормОрганизации"); 
	
КонецФункции

Функция ПолучитьСписокПрофессийПоШтатномуРасписанию(ДокументСсылка,ТекущееПодразделение) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ разрешенные
	|	ШтатноеРасписаниеСрезПоследних.Должность КАК Должность
	|ИЗ
	|	РегистрСведений.ШтатноеРасписание.СрезПоследних(
	|			&ДатаАнализа,
	|			Организация = &Организация
	|				И Подразделение = &Подразделение) КАК ШтатноеРасписаниеСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Должность";
	
	Запрос.УстановитьПараметр("ДатаАнализа",	ПолучитьГраницуАнализаПоДокументу(ДокументСсылка));
	Запрос.УстановитьПараметр("Организация",	ТекущееПодразделение.Владелец);
	Запрос.УстановитьПараметр("Подразделение",	ТекущееПодразделение);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Должность");
	
КонецФункции

Функция ПолучитьСписокНоменклатурыПоНоменклатуреНормы(НоменклатураНормы,ДокументОбъект,Сотрудник) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствияНоменклатурыВыдачи.СрезПоследних(
	|			&ДатаАнализа,
	|			НоменклатураНормыОрганизации В (&НоменклатураНормы)
	|				И ВЫБОР
	|					КОГДА &ПолСотрудника = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|						ТОГДА НЕ Номенклатура.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					КОГДА &ПолСотрудника = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|						ТОГДА НЕ Номенклатура.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК СоответствияНоменклатурыВыдачиСрезПоследних
	|ГДЕ
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Использовать";
	
	Запрос.УстановитьПараметр("ДатаАнализа",		ПолучитьГраницуАнализаПоДокументу(ДокументОбъект.Ссылка));
	Запрос.УстановитьПараметр("НоменклатураНормы",	НоменклатураНормы);
	Запрос.УстановитьПараметр("ПолСотрудника",		Сотрудник.ФизическоеЛицо.Пол);
	
	//иначе с ограниченными правами будет ошибка
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ПолучитьТаблицуПериодов(НачалоПериода,КонецПериода,Дискретность) Экспорт
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НачалоПериода");
	ТаблицаПериодов.Колонки.Добавить("КонецПериода");
	
	Если (НЕ ЗначениеЗаполнено(НачалоПериода)) ИЛИ (НЕ ЗначениеЗаполнено(КонецПериода)) Тогда
		Возврат ТаблицаПериодов;
	КонецЕсли;
	
	ТекущаяДатаНачалаПериода = НачалоПериода;	
	
	Пока ТекущаяДатаНачалаПериода < КонецПериода Цикл
		
		Если Дискретность = Перечисления.ДоступныеПериодыОтчета.Месяц Тогда
			ТекущаяДатаКонцаПериода = КонецДня(КонецМесяца(ТекущаяДатаНачалаПериода));
		ИначеЕсли Дискретность = Перечисления.ДоступныеПериодыОтчета.День Тогда
			ТекущаяДатаКонцаПериода = КонецДня(ТекущаяДатаНачалаПериода);
		Иначе
			Возврат ТаблицаПериодов;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока.НачалоПериода 	= ТекущаяДатаНачалаПериода;
		НоваяСтрока.КонецПериода 	= ТекущаяДатаКонцаПериода;
		
		ТекущаяДатаНачалаПериода = ТекущаяДатаКонцаПериода + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

//определяет период зимы относительно заданной даты
//
//параметры:
//РасчетнаяДата - дата, для которой определяется период зимы
//НачалоЗимы - месяц начала зимы
//КонецЗимы - месяц конца зимы
//
//возвращает структуру:
//НачалоЗимы,КонецЗимы
Функция ПолучитьПериодЗимы(РасчетнаяДата,НачалоЗимы,КонецЗимы) Экспорт
	
	Если Не ЗначениеЗаполнено(НачалоЗимы) ИЛИ Не ЗначениеЗаполнено(КонецЗимы) Тогда
		Возврат Новый Структура("НачалоЗимы,КонецЗимы",Дата(1,1,1,1,1,1),Дата(1,1,1,1,1,1));
	КонецЕсли;
	
	ДатаНачалаЗимы 	= ПолучитьДатуНачалаМесяца(НачалоЗимы,РасчетнаяДата);
	ДатаКонцаЗимы 	= ПолучитьДатуКонцаМесяца(КонецЗимы,РасчетнаяДата);
	
	//начало зимы
	Если Месяц(ДатаНачалаЗимы) > Месяц(ДатаКонцаЗимы) Тогда //начало зимы в прошлом году относительно конца зимы
		ГодНачалаЗимы 	= Год(РасчетнаяДата) - 1;
	Иначе
		ГодНачалаЗимы 	= Год(РасчетнаяДата);
	КонецЕсли;
	
	ТекущаяДатаНачалаЗимы 	= Дата(ГодНачалаЗимы,Месяц(ДатаНачалаЗимы),День(ДатаНачалаЗимы),0,0,0);
	
	ТекущаяДатаКонцаЗимы 	= Дата(Год(РасчетнаяДата),Месяц(ДатаКонцаЗимы),День(ДатаКонцаЗимы),23,59,59);
	
	Если ТекущаяДатаКонцаЗимы < РасчетнаяДата Тогда //зима прошла, определяем следующую
		
		ТекущаяДатаНачалаЗимы 	= ДобавитьМесяц(ТекущаяДатаНачалаЗимы,12);
		ТекущаяДатаКонцаЗимы 	= ДобавитьМесяц(ТекущаяДатаКонцаЗимы,12);
		
	КонецЕсли;
	
	Возврат Новый Структура("НачалоЗимы,КонецЗимы",ТекущаяДатаНачалаЗимы,ТекущаяДатаКонцаЗимы);
	
КонецФункции

Функция ЭтоЗима(ДатаАнализа,Подразделение) Экспорт
	
	Если (НЕ ЗначениеЗаполнено(Подразделение.НачалоЗимы)) ИЛИ (НЕ ЗначениеЗаполнено(Подразделение.КонецЗимы)) Тогда //проверяем организацию
		
		Если (НЕ ЗначениеЗаполнено(Подразделение.Владелец.НачалоЗимы)) ИЛИ (НЕ ЗначениеЗаполнено(Подразделение.Владелец.КонецЗимы)) Тогда
			
			Возврат Истина;
			
		Иначе
			
			ДатаНачалаЗимы 	= Подразделение.Владелец.НачалоЗимы;
			ДатаКонцаЗимы 	= Подразделение.Владелец.КонецЗимы;
			
		КонецЕсли;
		
	Иначе
		
		ДатаНачалаЗимы 	= Подразделение.НачалоЗимы;
		ДатаКонцаЗимы 	= Подразделение.КонецЗимы;
		
	КонецЕсли;
	
	МесяцНачалаЗимы = Месяц(ДатаНачалаЗимы);
	МесяцКонцаЗимы 	= Месяц(ДатаКонцаЗимы);
	
	МассивЗимнихМесяцев = Новый Массив;
	
	Если МесяцНачалаЗимы > МесяцКонцаЗимы Тогда //начало зимы в прошлом году относительно конца зимы
		
		Сч = МесяцНачалаЗимы;
		Пока Сч <= 12 Цикл
			МассивЗимнихМесяцев.Добавить(Сч);
			Сч = Сч + 1;
		КонецЦикла;
		
		Сч = 1;
		Пока Сч <= МесяцКонцаЗимы Цикл
			МассивЗимнихМесяцев.Добавить(Сч);
			Сч = Сч + 1;
		КонецЦикла;
		
	Иначе
		
		Сч = МесяцНачалаЗимы;
		Пока Сч <= МесяцКонцаЗимы Цикл
			МассивЗимнихМесяцев.Добавить(Сч);
			Сч = Сч + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат (НЕ МассивЗимнихМесяцев.Найти(Месяц(ДатаАнализа)) = Неопределено);
	
КонецФункции

Функция ПолучитьКоличествоВМесяц(Периодичность,Количество,КоличествоПериодов) Экспорт
	
	Если КоличествоПериодов = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Периодичность) Тогда
		Если Периодичность = Перечисления.ДоступныеПериодыОтчета.Год Тогда
			Возврат Количество/КоличествоПериодов/12;
		Иначе //месяц
			Возврат Количество/КоличествоПериодов;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуЗанятыхРабочихМест(Организация,Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ разрешенные
	|	ЗанятыеРабочиеМестаОстатки.Организация КАК Организация,
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто,
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗанятыеРабочиеМестаОстатки.КоличествоОстаток > 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(&Период, Организация = &Организация) КАК ЗанятыеРабочиеМестаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗанятыеРабочиеМестаОстатки.Организация,
	|	ЗанятыеРабочиеМестаОстатки.Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто,
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Подразделение,
	|	Должность,
	|	РабочееМесто,
	|	Сотрудник";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Период",Дата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СформироватьПерсональнуюПотребность(СтрокаСМаксимальнымЗначением,ТаблицаДвижений) Экспорт
	
	Если СтрокаСМаксимальнымЗначением.ВидРасчетаНормы = Перечисления.ВидыРасчетаНорм.Дежурный 
		ИЛИ СтрокаСМаксимальнымЗначением.ВидРасчетаНормы = Перечисления.ВидыРасчетаНорм.ДоИзноса Тогда
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСМаксимальнымЗначением);
		
	Иначе
		
		Если СтрокаСМаксимальнымЗначением.Периодичность = Перечисления.ДоступныеПериодыОтчета.Год Тогда
			
			//первая выдача
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСМаксимальнымЗначением);
			
			//следующая выдача через год
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСМаксимальнымЗначением);
			НоваяСтрока.ДатаВыдачи = ДобавитьМесяц(НоваяСтрока.ДатаВыдачи,12);
			
		Иначе //месяц
			
			КоличествоМесяцевПланирования = Цел(12/СтрокаСМаксимальнымЗначением.КоличествоПериодов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьХарактеристикуПоАнтропометрии(Номенклатура,Сотрудник) Экспорт
	
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(Сотрудник);
	
	//+++АСТБ_ALEXEY_110616_**************************************************************
	//ТаблицаАнтропометрии = ПолучитьАнтропометриюСотрудников(МассивСотрудников,Сотрудник.Владелец);
	ТаблицаАнтропометрии = ПолучитьАнтропометриюСотрудников(МассивСотрудников,Сотрудник.Владелец,Номенклатура);
	//---АСТБ_ALEXEY_110616_**************************************************************
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаАнтропометрии.Метрика КАК Метрика,
	|	ТаблицаАнтропометрии.Рост КАК Рост,
	|	ТаблицаАнтропометрии.Размер КАК Размер,
	|	ТаблицаАнтропометрии.ПолСотрудника КАК ПолСотрудника,
	|	ТаблицаАнтропометрии.ДополнительноеУсловие КАК ДополнительноеУсловие,
	|	ТаблицаАнтропометрии.ВидСвойства КАК ВидСвойства
	|ПОМЕСТИТЬ ВТ_Метрики
	|ИЗ
	|	&ТаблицаАнтропометрии КАК ТаблицаАнтропометрии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	ВТ_Метрики КАК ВТ_Метрики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВТ_Метрики.Метрика = ХарактеристикиНоменклатуры.Метрика
	|			И ВТ_Метрики.ВидСвойства = ХарактеристикиНоменклатуры.Владелец.ВидАнтропометрическогоСвойства
	|			И (ВЫБОР
	|				КОГДА ХарактеристикиНоменклатуры.Владелец.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА ВТ_Метрики.ПолСотрудника = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|				КОГДА ХарактеристикиНоменклатуры.Владелец.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|					ТОГДА ВТ_Метрики.ПолСотрудника = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ХарактеристикиНоменклатуры.Владелец.ИспользоватьРост
	|					ТОГДА НЕ ВТ_Метрики.Рост = 0
	|				ИНАЧЕ ВТ_Метрики.Рост = 0
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ВТ_Метрики.ДополнительноеУсловие = ЗНАЧЕНИЕ(Справочник.ВидыСИЗ.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Метрики.ДополнительноеУсловие = ХарактеристикиНоменклатуры.Владелец.ВидСИЗ
	|			КОНЕЦ)
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Метрики.ДополнительноеУсловие УБЫВ,
	|	ВТ_Метрики.ПолСотрудника УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаАнтропометрии",	ТаблицаАнтропометрии);
	Запрос.УстановитьПараметр("Номенклатура",			Номенклатура);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		Возврат СтрокаТаблицыЗапроса.ХарактеристикаНоменклатуры;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьПредставлениеПериодичностиВыдачи(ТипПериода,Количество,Периодичность,КоличествоПериодов) Экспорт
	
	Если ТипПериода = Перечисления.ВидыРасчетаНорм.Период Тогда
		
		ФормСтрока = "Л = ru_RU; НД = Ложь; ДП = Ложь";
		
		Если Периодичность = Перечисления.ДоступныеПериодыОтчета.Год Тогда
			ПараметрПредмета = "год,года,лет,м,год,года,лет,м,0";
		ИначеЕсли Периодичность = Перечисления.ДоступныеПериодыОтчета.Месяц Тогда
			ПараметрПредмета = "месяц,месяца,месяцев,м,месяц,месяца,месяцев,м,0";
		ИначеЕсли Периодичность = Перечисления.ДоступныеПериодыОтчета.Декада Тогда
			ПараметрПредмета = "декада,декады,декад,ж,декада,декады,декад,ж,0";
		ИначеЕсли Периодичность = Перечисления.ДоступныеПериодыОтчета.День Тогда
			ПараметрПредмета = "день,дня,дней,м,день,дня,дней,м,0";
		ИначеЕсли Периодичность = Перечисления.ДоступныеПериодыОтчета.Квартал Тогда
			ПараметрПредмета = "квартал,квартала,кварталов,м,квартал,квартала,кварталов,м,0";
		ИначеЕсли Периодичность = Перечисления.ДоступныеПериодыОтчета.Неделя Тогда
			ПараметрПредмета = "неделя,недели,недель,ж,неделя,недели,недель,ж,0";
		ИначеЕсли Периодичность = Перечисления.ДоступныеПериодыОтчета.Полугодие Тогда
			ПараметрПредмета = "полугодие,полугодия,полугодий,с,полугодие,полугодия,полугодий,с,0";
		Иначе
			ПараметрПредмета = "период,периода,периодов,м,период,периода,периодов,м,0";
		КонецЕсли;
		
		ПрописьЧисла = ЧислоПрописью(КоличествоПериодов, ФормСтрока, ПараметрПредмета);
		
		//МассивСловВПрописиЧисла = ОбщегоНазначенияПереопределяемый.ИзСтрокиСРазделителями(ПрописьЧисла," ");
		
		МассивСловВПрописиЧисла = УправлениеКонтактнойИнформациейКлиентСервер.СловаТекста(ПрописьЧисла," ");
		
		//ПредставлениеПериодичности = Строка(Количество) + " на " + ПрописьЧисла;
		
		ПредставлениеПериодичности = Строка(Количество) + " в " + КоличествоПериодов + " " + МассивСловВПрописиЧисла[МассивСловВПрописиЧисла.Количество() - 1];
		
	Иначе
		
		ПредставлениеПериодичности = Строка(ТипПериода);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеПериодичности) Тогда
		ПредставлениеПериодичности = "периодичность не определена";
	КонецЕсли;
	
	Возврат ПредставлениеПериодичности;
	
КонецФункции

Функция ПолучитьНомерСертификатаНоменклатуры(Номенклатура,ДатаВыдачи) Экспорт
	
	НомерСертификата = "";
	
	Для Каждого СтрокаТаблицыСертификатов Из Номенклатура.Сертификаты Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицыСертификатов.Сертификат.ОкончаниеСрокаДействия) Тогда
			
			Если ДатаВыдачи < СтрокаТаблицыСертификатов.Сертификат.ОкончаниеСрокаДействия Тогда
				НомерСертификата = СтрокаТаблицыСертификатов.Сертификат.НомерСертификата;
				Прервать;
			КонецЕсли;
			
		Иначе
			
			Если ДатаВыдачи >= СтрокаТаблицыСертификатов.Сертификат.НачалоСрокаДействия Тогда
				НомерСертификата = СтрокаТаблицыСертификатов.Сертификат.НомерСертификата;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НомерСертификата;
	
КонецФункции

Функция ПолучитьУсловиеНормы(Условие,СоздаватьЕслиНеНайдено = Истина) Экспорт
	
	Если (НЕ ЗначениеЗаполнено(Условие)) ИЛИ (НЕ Найти(НРег(Условие),"всегда") = 0) ИЛИ (НЕ Найти(НРег(Условие),"стандартный") = 0) Тогда
		ТипУсловияНормы = Перечисления.ТипыУсловийНорм.Всегда;
		//ИначеЕсли НЕ Найти(НРег(Условие),"вместо") = 0 Тогда
		//	ТипУсловияНормы = Перечисления.ТипыУсловийНорм.ПриУсловииВместо;
	ИначеЕсли Найти(НРег(Условие),"зимой дополнительно") = 1 Тогда
		Если СтрДлина(Условие) > 20 Тогда
			ТипУсловияНормы = Перечисления.ТипыУсловийНорм.ПриУсловииЗимойДополнительно;
		Иначе
			ТипУсловияНормы = Перечисления.ТипыУсловийНорм.ЗимойДополнительно;
		КонецЕсли;
	ИначеЕсли (НЕ Найти(НРег(Условие),"зимой") = 0) И (НЕ Найти(НРег(Условие),"дополнительно") = 0) И (СтрДлина(Условие) > 20) Тогда
		ТипУсловияНормы = Перечисления.ТипыУсловийНорм.ПриУсловииЗимойДополнительно;
	Иначе
		ТипУсловияНормы = Перечисления.ТипыУсловийНорм.ПриУсловии;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияНорм.Ссылка
	|ИЗ
	|	Справочник.УсловияНорм КАК УсловияНорм
	|ГДЕ
	|	УсловияНорм.ТипУсловия = &ТипУсловия
	|	И УсловияНорм.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ТипУсловия",		ТипУсловияНормы);
	Запрос.УстановитьПараметр("Наименование",	Условие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		Если СоздаватьЕслиНеНайдено Тогда
			
			НовоеУсловиеНорм 				= Справочники.УсловияНорм.СоздатьЭлемент();
			НовоеУсловиеНорм.Наименование 	= Условие;
			НовоеУсловиеНорм.ТипУсловия 	= ТипУсловияНормы;
			НовоеУсловиеНорм.УстановитьНовыйКод();
			НовоеУсловиеНорм.Записать();
			Возврат НовоеУсловиеНорм.Ссылка;
			
		Иначе
			
			Возврат Справочники.УсловияНорм.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуДолжностейИзОКПДТР() Экспорт
	
	ТаблицаОКПДТР = Новый ТаблицаЗначений;
	ТаблицаОКПДТР.Колонки.Добавить("Источник");
	ТаблицаОКПДТР.Колонки.Добавить("КодПоОКПДТР");
	ТаблицаОКПДТР.Колонки.Добавить("Наименование");
	ТаблицаОКПДТР.Колонки.Добавить("НаименованиеДляПоиска");
	
	//чтение схемы из макета
	ВременныйФайлСхемы = ПолучитьИмяВременногоФайла();
	
	МакетСхемы = Справочники.ДолжностиИПрофессии.ПолучитьМакет("СхемаXML");
	МакетСхемы.Записать(ВременныйФайлСхемы);
	
	ЧтениеСхемы = Новый ЧтениеXML;
	ЧтениеСхемы.ОткрытьФайл(ВременныйФайлСхемы);
	
	Построитель_DOM = Новый ПостроительDOM;
	Документ_DOM 	= Построитель_DOM.Прочитать(ЧтениеСхемы);
	
	ПостроительСхем_XML = Новый ПостроительСхемXML;
	Схема_XML 			= ПостроительСхем_XML.СоздатьСхемуXML(Документ_DOM);
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(Схема_XML);
	
	НоваяФабрика = Новый ФабрикаXDTO(НаборСхем);
	
	//чтение данных из макета
	ВременныйФайлДанных 	= ПолучитьИмяВременногоФайла();
	МакетДанных 			= Справочники.ДолжностиИПрофессии.ПолучитьМакет("ДанныеXML");
	МакетДанных.Записать(ВременныйФайлДанных);
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ВременныйФайлДанных);
	
	Попытка
		Данные = НоваяФабрика.ПрочитатьXML(Чтение);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат ТаблицаОКПДТР;
	КонецПопытки;
	
	Если Данные = Неопределено Тогда
		Возврат ТаблицаОКПДТР;
	КонецЕсли;
	
	Для Каждого Элемент Из Данные.profession_category Цикл
		
		Если Элемент.class = "Профессии рабочих" Тогда
			ТекущийИсточник = Перечисления.ИсточникиДолжностей.ПрофессииРабочих;
		Иначе
			ТекущийИсточник = Перечисления.ИсточникиДолжностей.ДолжностиСлужащих;
		КонецЕсли;
		
		Для Каждого ЭлементКлассификатора Из Элемент.profession_list Цикл
			
			НоваяСтрока 						= ТаблицаОКПДТР.Добавить();
			НоваяСтрока.Источник 				= ТекущийИсточник;
			НоваяСтрока.КодПоОКПДТР 			= ЭлементКлассификатора.code + ЭлементКлассификатора.kch;
			НоваяСтрока.Наименование 			= ЭлементКлассификатора.profession_name;
			НоваяСтрока.НаименованиеДляПоиска 	= НРег(ЭлементКлассификатора.profession_name);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаОКПДТР;
	
КонецФункции

Процедура ВыполнитьЗагрузкуУточненныхПричинСписания() Экспорт
	
	ВременныйФайлДанных = ПолучитьИмяВременногоФайла();
	МакетДанных 		= Справочники.УточненныеПричиныСписания.ПолучитьМакет("ДанныеXML");
	МакетДанных.Записать(ВременныйФайлДанных);
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ВременныйФайлДанных);
	
	Пока Чтение.Прочитать() Цикл
			
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если Чтение.ЛокальноеИмя = "spisanie_group_1" Тогда
				НаименованиеГруппыПервогоУровня = Чтение.ЗначениеАтрибута("name");
				ГруппаПервогоУровня = Справочники.УточненныеПричиныСписания.НайтиПоНаименованию(НаименованиеГруппыПервогоУровня);
				Если ГруппаПервогоУровня.Пустая() Тогда
					НоваяГруппа = Справочники.УточненныеПричиныСписания.СоздатьГруппу();
					НоваяГруппа.Наименование = НаименованиеГруппыПервогоУровня;
					НоваяГруппа.УстановитьНовыйКод();
					НоваяГруппа.Записать();
					ГруппаПервогоУровня = НоваяГруппа.Ссылка;
				КонецЕсли;
			ИначеЕсли Чтение.ЛокальноеИмя = "spisanie_group_2" Тогда	
				НаименованиеГруппыВторогоУровня = Чтение.ЗначениеАтрибута("name");
				ГруппаВторогоУровня = Справочники.УточненныеПричиныСписания.НайтиПоНаименованию(НаименованиеГруппыВторогоУровня,,ГруппаПервогоУровня,);
				Если ГруппаВторогоУровня.Пустая() Тогда
					НоваяГруппа = Справочники.УточненныеПричиныСписания.СоздатьГруппу();
					НоваяГруппа.Наименование = НаименованиеГруппыВторогоУровня;
					НоваяГруппа.Родитель = ГруппаПервогоУровня;
					НоваяГруппа.УстановитьНовыйКод();
					НоваяГруппа.Записать();
					ГруппаВторогоУровня = НоваяГруппа.Ссылка;
				КонецЕсли;
			ИначеЕсли Чтение.ЛокальноеИмя = "spisanie_item" Тогда
				НаименованиеЭлемента = Чтение.ЗначениеАтрибута("name");
				Если ЗначениеЗаполнено(ГруппаВторогоУровня) Тогда
					ТекущаяГруппа = ГруппаВторогоУровня;
				Иначе
					Если ЗначениеЗаполнено(ГруппаПервогоУровня) Тогда
					    ТекущаяГруппа = ГруппаПервогоУровня;
					Иначе
						ТекущаяГруппа = Справочники.УточненныеПричиныСписания.ПустаяСсылка();
					КонецЕсли;	
				КонецЕсли;
				ТекущийЭлемент = Справочники.УточненныеПричиныСписания.НайтиПоНаименованию(НаименованиеЭлемента,,ТекущаяГруппа,);
				Если ТекущийЭлемент.Пустая() Тогда
					НовыйЭлемент = Справочники.УточненныеПричиныСписания.СоздатьЭлемент();
					НовыйЭлемент.Наименование = НаименованиеЭлемента;
					НовыйЭлемент.Родитель = ТекущаяГруппа;
					НовыйЭлемент.УстановитьНовыйКод();
					НовыйЭлемент.Записать();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если Чтение.ЛокальноеИмя = "spisanie_group_1" Тогда
				ГруппаПервогоУровня = Справочники.УточненныеПричиныСписания.ПустаяСсылка();
			ИначеЕсли Чтение.ЛокальноеИмя = "spisanie_group_2" Тогда
				ГруппаВторогоУровня = Справочники.УточненныеПричиныСписания.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	УдалитьФайлы(ВременныйФайлДанных);

КонецПроцедуры

Процедура ВыполнитьЗагрузкуСоответствийХарактеристик() Экспорт
	
	//очистка регистра сведений
	//НаборЗаписей = РегистрыСведений.СоответствияХарактеристикНоменклатуры.СоздатьНаборЗаписей();
	//НаборЗаписей.Записать();
	
	//чтение схемы из макета
	ВременныйФайлСхемы = ПолучитьИмяВременногоФайла();
	
	МакетСхемы = РегистрыСведений.СоответствияХарактеристикНоменклатуры.ПолучитьМакет("СхемаXML");
	МакетСхемы.Записать(ВременныйФайлСхемы);
	
	ЧтениеСхемы = Новый ЧтениеXML;
	ЧтениеСхемы.ОткрытьФайл(ВременныйФайлСхемы);
	
	Построитель_DOM = Новый ПостроительDOM;
	Документ_DOM 	= Построитель_DOM.Прочитать(ЧтениеСхемы);
	
	ПостроительСхем_XML = Новый ПостроительСхемXML;
	Схема_XML 			= ПостроительСхем_XML.СоздатьСхемуXML(Документ_DOM);
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(Схема_XML);
	
	НоваяФабрика = Новый ФабрикаXDTO(НаборСхем);
	
	//чтение данных из макета
	ВременныйФайлНоменклатуры 	= ПолучитьИмяВременногоФайла();
	МакетДанных 				= РегистрыСведений.СоответствияХарактеристикНоменклатуры.ПолучитьМакет("ДанныеXML");
	МакетДанных.Записать(ВременныйФайлНоменклатуры);
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ВременныйФайлНоменклатуры);
	
	Попытка
		Данные = НоваяФабрика.ПрочитатьXML(Чтение);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из Данные.size_item Цикл
		
		Рост = ?(ЗначениеЗаполнено(Элемент.lengt),Число(Элемент.lengt),0);
		Попытка
			Размер = Число(Элемент.size);
		Исключение
			Размер = Элемент.size;
		КонецПопытки;
		
		Если Элемент.sex = "M" Тогда
			Пол = Перечисления.ПолФизическогоЛица.Мужской;
		ИначеЕсли Элемент.sex = "W" Тогда
			Пол = Перечисления.ПолФизическогоЛица.Женский;
		Иначе
			Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
		КонецЕсли;
		
		ДополнительноеУсловие = ?(ЗначениеЗаполнено(Элемент.vid_SIZ),Справочники.ВидыСИЗ.НайтиПоНаименованию(СокрЛП(Элемент.vid_SIZ),Истина),"");
		
		Если ТипЗнч(Элемент.metrika_item) = Тип("ОбъектXDTO") Тогда
			
			НаименованиеМетрики = Элемент.metrika_item.metrika_name;
			КодМетрики 			= Число(Элемент.metrika_item.metrika_no);
			Метрика 			= ПолучитьМетрику(КодМетрики,НаименованиеМетрики);
			
			НаборЗаписей = РегистрыСведений.СоответствияХарактеристикНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Размер.Установить(Размер);
			НаборЗаписей.Отбор.Рост.Установить(Рост);
			НаборЗаписей.Отбор.Пол.Установить(Пол);
			НаборЗаписей.Отбор.ДополнительноеУсловие.Установить(ДополнительноеУсловие);
			НаборЗаписей.Отбор.Метрика.Установить(Метрика);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				
				НоваяЗапись 						= НаборЗаписей.Добавить();
				НоваяЗапись.Размер 					= Размер;
				НоваяЗапись.Рост 					= Рост;
				НоваяЗапись.Пол 					= Пол;
				НоваяЗапись.ДополнительноеУсловие 	= ДополнительноеУсловие;
				НоваяЗапись.Метрика 				= Метрика;
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		Иначе
			
			Для Каждого ТекущийРазмер Из Элемент.metrika_item Цикл
				
				НаименованиеМетрики = ТекущийРазмер.metrika_name;
				КодМетрики 			= Число(ТекущийРазмер.metrika_no);
				Метрика 			= ПолучитьМетрику(КодМетрики,НаименованиеМетрики);
				
				НаборЗаписей = РегистрыСведений.СоответствияХарактеристикНоменклатуры.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Размер.Установить(Размер);
				НаборЗаписей.Отбор.Рост.Установить(Рост);
				НаборЗаписей.Отбор.Пол.Установить(Пол);
				НаборЗаписей.Отбор.ДополнительноеУсловие.Установить(ДополнительноеУсловие);
				НаборЗаписей.Отбор.Метрика.Установить(Метрика);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() = 0 Тогда
					
					НоваяЗапись 						= НаборЗаписей.Добавить();
					НоваяЗапись.Размер 					= Размер;
					НоваяЗапись.Рост 					= Рост;
					НоваяЗапись.Пол 					= Пол;
					НоваяЗапись.ДополнительноеУсловие 	= ДополнительноеУсловие;
					НоваяЗапись.Метрика 				= Метрика;
					
					НаборЗаписей.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМетрику(КодМетрики,НаименованиеМетрики) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодМетрики) Тогда
		Возврат Справочники.Метрики.ПустаяСсылка();
	КонецЕсли;
	
	НайденнаяМетрика = Справочники.Метрики.НайтиПоКоду(КодМетрики);
	
	Если НайденнаяМетрика.Пустая() Тогда
		
		НоваяМетрика 				= Справочники.Метрики.СоздатьЭлемент();
		НоваяМетрика.Код 			= КодМетрики;
		НоваяМетрика.Наименование 	= НаименованиеМетрики;
		НоваяМетрика.Записать();
		
		НайденнаяМетрика =  НоваяМетрика.Ссылка;
		
	КонецЕсли;
	
	Возврат НайденнаяМетрика;
	
КонецФункции

Функция ПолучитьСкладВыдачи(Подразделение,Сотрудник,ВидВыдачиСИЗ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкладыВыдачиСредствЗащиты.Склад
	|ИЗ
	|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
	|ГДЕ
	|	СкладыВыдачиСредствЗащиты.Получатель = &Сотрудник
	|	И СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ = &ВидВыдачиСИЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкладыВыдачиСредствЗащиты.Склад
	|ИЗ
	|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
	|ГДЕ
	|	СкладыВыдачиСредствЗащиты.Получатель = &Подразделение
	|	И СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ = &ВидВыдачиСИЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СкладыВыдачиСредствЗащиты.Склад
	|ИЗ
	|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
	|ГДЕ
	|	СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ = &ВидВыдачиСИЗ
	|	И (СкладыВыдачиСредствЗащиты.Получатель = НЕОПРЕДЕЛЕНО
	|			ИЛИ СкладыВыдачиСредствЗащиты.Получатель = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			ИЛИ СкладыВыдачиСредствЗащиты.Получатель = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Сотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("Подразделение",	Подразделение);
	Запрос.УстановитьПараметр("ВидВыдачиСИЗ",	ВидВыдачиСИЗ);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СкладыВыдачиПоСотруднику = Результат[0].Выгрузить();
	
	Если СкладыВыдачиПоСотруднику.Количество() = 0 Тогда
		СкладыВыдачиПоПодразделению = Результат[1].Выгрузить();
		Если СкладыВыдачиПоПодразделению.Количество() = 0 Тогда
			СтруктураДанных = НайтиСкладВыдачиГоловногоПодразделения(Подразделение,ВидВыдачиСИЗ);
			СкладВыдачиГоловногоПодразделения = СтруктураДанных.Склад;
			Если НЕ ЗначениеЗаполнено(СкладВыдачиГоловногоПодразделения) Тогда
				СкладыВыдачиПоПустомуПолучателю = Результат[2].Выгрузить();
				Если СкладыВыдачиПоПустомуПолучателю.Количество() = 0 Тогда
					Возврат Справочники.Склады.ПустаяСсылка();
				Иначе
					Возврат СкладыВыдачиПоПустомуПолучателю[0].Склад;
				КонецЕсли;
			Иначе
				Возврат СкладВыдачиГоловногоПодразделения;
			КонецЕсли;
		Иначе
			Возврат СкладыВыдачиПоПодразделению[0].Склад;
		КонецЕсли;
	Иначе
		Возврат СкладыВыдачиПоСотруднику[0].Склад;
	КонецЕсли;
	
КонецФункции

Функция НайтиСкладВыдачиГоловногоПодразделения(Подразделение,ВидВыдачиСИЗ)
	
	Если ЗначениеЗаполнено(Подразделение.Родитель) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СкладыВыдачиСредствЗащиты.Склад
		|ИЗ
		|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
		|ГДЕ
		|	СкладыВыдачиСредствЗащиты.Получатель = &Получатель
		|	И СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ = &ВидВыдачиСИЗ";
		
		Запрос.УстановитьПараметр("Получатель",		Подразделение.Родитель);
		Запрос.УстановитьПараметр("ВидВыдачиСИЗ",	ВидВыдачиСИЗ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Возврат Новый Структура("Склад,Получатель,ВидВыдачиСИЗ",Выборка.Склад,Подразделение.Родитель,ВидВыдачиСИЗ);
			
		Иначе
			
			Возврат НайтиСкладВыдачиГоловногоПодразделения(Подразделение.Родитель,ВидВыдачиСИЗ);
			
		КонецЕсли;
		
	Иначе
		
		Возврат Новый Структура("Склад,Получатель,ВидВыдачиСИЗ",Справочники.Склады.ПустаяСсылка(),Подразделение,ВидВыдачиСИЗ);
		
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьТаблицуСкладовВыдачи(Получатель) Экспорт
	
	ТаблицаСкладовВыдачи = Новый ТаблицаЗначений;
	ТаблицаСкладовВыдачи.Колонки.Добавить("Получатель");
	ТаблицаСкладовВыдачи.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСкладовВыдачи.Колонки.Добавить("ВидВыдачиСИЗ",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВыдачиСИЗ"));
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗанятыеРабочиеМеста.Подразделение КАК Получатель,
		|	ЕСТЬNULL(СкладыВыдачи.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача) КАК ВидВыдачиСИЗ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение
		|	ИЗ
		|		РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(, Сотрудник = &Сотрудник) КАК ЗанятыеРабочиеМестаОстатки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗанятыеРабочиеМестаОстатки.Подразделение) КАК ЗанятыеРабочиеМеста
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СкладыВыдачиСредствЗащиты.Получатель КАК Получатель,
		|			СкладыВыдачиСредствЗащиты.Склад КАК Склад
		|		ИЗ
		|			РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
		|		ГДЕ
		|			СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача)
		|			И СкладыВыдачиСредствЗащиты.Организация = &Организация
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СкладыВыдачиСредствЗащиты.Получатель,
		|			СкладыВыдачиСредствЗащиты.Склад) КАК СкладыВыдачи
		|		ПО ЗанятыеРабочиеМеста.Подразделение = СкладыВыдачи.Получатель
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗанятыеРабочиеМеста.Подразделение,
		|	ЕСТЬNULL(СкладыВыдачи.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗанятыеРабочиеМеста.Подразделение,
		|	ЕСТЬNULL(СкладыВыдачи.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)),
		|	ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение
		|	ИЗ
		|		РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(, Сотрудник = &Сотрудник) КАК ЗанятыеРабочиеМестаОстатки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗанятыеРабочиеМестаОстатки.Подразделение) КАК ЗанятыеРабочиеМеста
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СкладыВыдачиСредствЗащиты.Получатель КАК Получатель,
		|			СкладыВыдачиСредствЗащиты.Склад КАК Склад
		|		ИЗ
		|			РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
		|		ГДЕ
		|			СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
		|			И СкладыВыдачиСредствЗащиты.Организация = &Организация
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СкладыВыдачиСредствЗащиты.Получатель,
		|			СкладыВыдачиСредствЗащиты.Склад) КАК СкладыВыдачи
		|		ПО ЗанятыеРабочиеМеста.Подразделение = СкладыВыдачи.Получатель
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗанятыеРабочиеМеста.Подразделение,
		|	ЕСТЬNULL(СкладыВыдачи.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СкладыВыдачиСредствЗащиты.Склад,
		|	СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ
		|ИЗ
		|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
		|ГДЕ
		|	СкладыВыдачиСредствЗащиты.Получатель = &Сотрудник
		|	И СкладыВыдачиСредствЗащиты.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СкладыВыдачиСредствЗащиты.Склад,
		|	СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ
		|ИЗ
		|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
		|ГДЕ
		|	(СкладыВыдачиСредствЗащиты.Получатель = НЕОПРЕДЕЛЕНО
		|			ИЛИ СкладыВыдачиСредствЗащиты.Получатель = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|			ИЛИ СкладыВыдачиСредствЗащиты.Получатель = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|	И СкладыВыдачиСредствЗащиты.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	СкладыВыдачиСредствЗащиты.Склад,
		|	СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ";
		
		Запрос.УстановитьПараметр("Сотрудник",	Получатель);
		Запрос.УстановитьПараметр("Организация",Получатель.Владелец);
		
		Результат = Запрос.ВыполнитьПакет();
		
		РезультатПоСкладамСотрудника = Результат[1].Выгрузить();
		Для Каждого СтрокаЗапроса Из РезультатПоСкладамСотрудника Цикл
			НоваяСтрока 				= ТаблицаСкладовВыдачи.Добавить();
			НоваяСтрока.Склад 			= СтрокаЗапроса.Склад;
			НоваяСтрока.ВидВыдачиСИЗ 	= СтрокаЗапроса.ВидВыдачиСИЗ;
			НоваяСтрока.Получатель 		= Получатель;
		КонецЦикла;
		
		РезультатПоПустомуПолучателю = Результат[2].Выгрузить();
		Для Каждого СтрокаЗапроса Из РезультатПоПустомуПолучателю Цикл
			НоваяСтрока 				= ТаблицаСкладовВыдачи.Добавить();
			НоваяСтрока.Склад 			= СтрокаЗапроса.Склад;
			НоваяСтрока.ВидВыдачиСИЗ 	= СтрокаЗапроса.ВидВыдачиСИЗ;
			НоваяСтрока.Получатель 		= Неопределено;
		КонецЦикла;
		
		РезультатПоСкладамПодразделения = Результат[0].Выгрузить();
		Для Каждого СтрокаЗапроса Из РезультатПоСкладамПодразделения Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаЗапроса.Склад) Тогда
				СтруктураДанных = НайтиСкладВыдачиГоловногоПодразделения(СтрокаЗапроса.Получатель,СтрокаЗапроса.ВидВыдачиСИЗ);
				Если ЗначениеЗаполнено(СтруктураДанных.Склад) Тогда
					НоваяСтрока 			= ТаблицаСкладовВыдачи.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗапроса);
					НоваяСтрока.Склад 		= СтруктураДанных.Склад;
					НоваяСтрока.Получатель 	= СтруктураДанных.Получатель;
				КонецЕсли;
			Иначе
				НоваяСтрока = ТаблицаСкладовВыдачи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗапроса);
			КонецЕсли;
		КонецЦикла;
		
	Иначе //получатель - подразделение
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗанятыеРабочиеМеста.Сотрудник КАК Получатель,
		|	СкладыВыдачи.Склад КАК Склад,
		|	СкладыВыдачи.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник
		|	ИЗ
		|		РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(
		|				,
		|				Подразделение В ИЕРАРХИИ (&Получатель)
		|					И Организация = &Организация) КАК ЗанятыеРабочиеМестаОстатки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗанятыеРабочиеМестаОстатки.Сотрудник) КАК ЗанятыеРабочиеМеста
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СкладыВыдачиСредствЗащиты.Склад КАК Склад,
		|			СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ,
		|			СкладыВыдачиСредствЗащиты.Получатель КАК Получатель
		|		ИЗ
		|			РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
		|		ГДЕ
		|			СкладыВыдачиСредствЗащиты.Организация = &Организация
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СкладыВыдачиСредствЗащиты.Склад,
		|			СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ,
		|			СкладыВыдачиСредствЗащиты.Получатель) КАК СкладыВыдачи
		|		ПО ЗанятыеРабочиеМеста.Сотрудник = СкладыВыдачи.Получатель
		|ГДЕ
		|	НЕ СкладыВыдачи.Склад ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗанятыеРабочиеМеста.Сотрудник.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СкладыВыдачиСредствЗащиты.Склад КАК Склад,
		|	СкладыВыдачиСредствЗащиты.Получатель КАК Получатель,
		|	СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ
		|ИЗ
		|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
		|ГДЕ
		|	(СкладыВыдачиСредствЗащиты.Получатель = НЕОПРЕДЕЛЕНО
		|			ИЛИ СкладыВыдачиСредствЗащиты.Получатель = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|			ИЛИ СкладыВыдачиСредствЗащиты.Получатель = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|	И СкладыВыдачиСредствЗащиты.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	СкладыВыдачиСредствЗащиты.Склад,
		|	СкладыВыдачиСредствЗащиты.Получатель,
		|	СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СкладыВыдачиСредствЗащиты.Склад КАК Склад
		|ИЗ
		|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
		|ГДЕ
		|	СкладыВыдачиСредствЗащиты.Получатель = &Получатель
		|	И СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача)
		|	И СкладыВыдачиСредствЗащиты.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СкладыВыдачиСредствЗащиты.Склад КАК Склад
		|ИЗ
		|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
		|ГДЕ
		|	СкладыВыдачиСредствЗащиты.Получатель = &Получатель
		|	И СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
		|	И СкладыВыдачиСредствЗащиты.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Получатель",Получатель);
		Запрос.УстановитьПараметр("Организация",Получатель.Владелец); 
		
		Результат = Запрос.ВыполнитьПакет();
		
		РезультатПоСкладамСотрудника = Результат[0].Выгрузить();
		Для Каждого СтрокаЗапроса Из РезультатПоСкладамСотрудника Цикл
			НоваяСтрока 					= ТаблицаСкладовВыдачи.Добавить();  
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗапроса);
		КонецЦикла;
		
		РезультатПоПустомуПолучателю = Результат[1].Выгрузить();
		Для Каждого СтрокаЗапроса Из РезультатПоПустомуПолучателю Цикл
			НоваяСтрока 					= ТаблицаСкладовВыдачи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗапроса);
		КонецЦикла;
		
		РезультатПоСкладамПодразделения = Результат[2].Выгрузить();
		Если РезультатПоСкладамПодразделения.Количество() = 0 Тогда
			СтруктураДанных = НайтиСкладВыдачиГоловногоПодразделения(Получатель,Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача);
			Если ЗначениеЗаполнено(СтруктураДанных.Склад) Тогда
				НоваяСтрока 				= ТаблицаСкладовВыдачи.Добавить();
				НоваяСтрока.Склад			= СтруктураДанных.Склад;
				НоваяСтрока.Получатель 		= СтруктураДанных.Получатель;
				НоваяСтрока.ВидВыдачиСИЗ 	= Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача;
			КонецЕсли;
		Иначе
			Для Каждого СтрокаЗапроса Из РезультатПоСкладамПодразделения Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаЗапроса.Склад) Тогда
					СтруктураДанных = НайтиСкладВыдачиГоловногоПодразделения(Получатель,Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача);
					Если ЗначениеЗаполнено(СтруктураДанных.Склад) Тогда
						НоваяСтрока 				= ТаблицаСкладовВыдачи.Добавить();
						НоваяСтрока.Склад			= СтруктураДанных.Склад;
						НоваяСтрока.Получатель 		= СтруктураДанных.Получатель;
						НоваяСтрока.ВидВыдачиСИЗ 	= Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача;
					КонецЕсли;
				Иначе
					НоваяСтрока 					= ТаблицаСкладовВыдачи.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗапроса);
					НоваяСтрока.Получатель 		= Получатель;
					НоваяСтрока.ВидВыдачиСИЗ 	= Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		РезультатПоСкладамПодразделения = Результат[3].Выгрузить();
		Если РезультатПоСкладамПодразделения.Количество() = 0 Тогда
			СтруктураДанных = НайтиСкладВыдачиГоловногоПодразделения(Получатель,Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача);
			Если ЗначениеЗаполнено(СтруктураДанных.Склад) Тогда
				НоваяСтрока 				= ТаблицаСкладовВыдачи.Добавить();
				НоваяСтрока.Склад			= СтруктураДанных.Склад;
				НоваяСтрока.Получатель 		= СтруктураДанных.Получатель;
				НоваяСтрока.ВидВыдачиСИЗ 	= Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача;
			КонецЕсли;
		Иначе
			Для Каждого СтрокаЗапроса Из РезультатПоСкладамПодразделения Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаЗапроса.Склад) Тогда
					СтруктураДанных = НайтиСкладВыдачиГоловногоПодразделения(Получатель,Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача);
					Если ЗначениеЗаполнено(СтруктураДанных.Склад) Тогда
						НоваяСтрока 				= ТаблицаСкладовВыдачи.Добавить();
						НоваяСтрока.Склад			= СтруктураДанных.Склад;
						НоваяСтрока.Получатель 		= СтруктураДанных.Получатель;
						НоваяСтрока.ВидВыдачиСИЗ 	= Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача;
					КонецЕсли;
				Иначе
					НоваяСтрока 				= ТаблицаСкладовВыдачи.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗапроса);
					НоваяСтрока.Получатель 		= Получатель;
					НоваяСтрока.ВидВыдачиСИЗ 	= Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаСкладовВыдачи;
	
КонецФункции

Функция ПолучитьМассивДоступныхМестХраненияСИЗ(Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ разрешенные
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник.МестоХраненияСИЗ КАК МестоХраненияСИЗ
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(, НЕ Сотрудник = &Сотрудник) КАК ЗанятыеРабочиеМестаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник.МестоХраненияСИЗ";
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	
	Если ВозможноИспользоватьОдноМестоХраненияСИЗДляНесколькихСотрудников(Сотрудник.Владелец) Тогда
		МассивЗанятыхМестХранения = Новый Массив;
	Иначе
		МассивЗанятыхМестХранения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МестоХраненияСИЗ");
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиШаблонаАдресацииМестХраненияСИЗ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Сотрудник.Владелец);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		ОдинАдресДляНесколькихСотрудников = Ложь;
	Иначе
		СтруктураНастроек = НаборЗаписей[0].НастройкиШаблонаАдресации.Получить();
		ОдинАдресДляНесколькихСотрудников = ?(СтруктураНастроек.Свойство("ОдинАдресДляНесколькихСотрудников") = Ложь, Ложь, СтруктураНастроек.ОдинАдресДляНесколькихСотрудников);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ОдинАдресДляНесколькихСотрудников Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестаХраненияСИЗСотрудников.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МестаХраненияСИЗСотрудников КАК МестаХраненияСИЗСотрудников
		|ГДЕ
		|	МестаХраненияСИЗСотрудников.ЭтоГруппа = ЛОЖЬ
		|	И МестаХраненияСИЗСотрудников.Владелец = &Организация
		//АсТБ_Alexey_87021_********************************************************************
		|	И НЕ МестаХраненияСИЗСотрудников.ПометкаУдаления
		//АсТБ_Alexey_87021_********************************************************************
		|
		|СГРУППИРОВАТЬ ПО
		|	МестаХраненияСИЗСотрудников.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	МестаХраненияСИЗСотрудников.Наименование";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестаХраненияСИЗСотрудников.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МестаХраненияСИЗСотрудников КАК МестаХраненияСИЗСотрудников
		|ГДЕ
		|	НЕ МестаХраненияСИЗСотрудников.Ссылка В (&МассивЗанятыхМестХранения)
		|	И МестаХраненияСИЗСотрудников.ЭтоГруппа = ЛОЖЬ
		|	И МестаХраненияСИЗСотрудников.Владелец = &Организация
		//АсТБ_Alexey_87021_********************************************************************
		|	И НЕ МестаХраненияСИЗСотрудников.ПометкаУдаления
		//АсТБ_Alexey_87021_********************************************************************
		|
		|СГРУППИРОВАТЬ ПО
		|	МестаХраненияСИЗСотрудников.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	МестаХраненияСИЗСотрудников.Наименование";
		
		Запрос.УстановитьПараметр("МассивЗанятыхМестХранения",МассивЗанятыхМестХранения);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",Сотрудник.Владелец);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ВозможноИспользоватьОдноМестоХраненияСИЗДляНесколькихСотрудников(Организация) Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиШаблонаАдресацииМестХраненияСИЗ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		ОдинАдресДляНесколькихСотрудников 	= Ложь;		
	Иначе
		СтруктураНастроек 					= НаборЗаписей[0].НастройкиШаблонаАдресации.Получить();
		ОдинАдресДляНесколькихСотрудников 	= ?(СтруктураНастроек.Свойство("ОдинАдресДляНесколькихСотрудников") = Ложь, Ложь, СтруктураНастроек.ОдинАдресДляНесколькихСотрудников);		
	КонецЕсли;	
	
	Возврат ОдинАдресДляНесколькихСотрудников;
	
КонецФункции	

// Функция выполняет формирование изображения штрихкода.
// Параметры: 
//   ПараметрыШтрихкода 
// Возвращаемое значение: 
//   Картинка - Картинка со сформированным штрихкодом или НЕОПРЕДЕЛЕНО
Функция ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода) Экспорт
	
	ВнешняяКомпонента = ПроцедурыРаботыСНормамиСерверПовтИсп.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода!'");
	КонецЕсли;
	
	// Зададим размер картинки
	ВнешняяКомпонента.Ширина = Окр(ПараметрыШтрихкода.Ширина);
	ВнешняяКомпонента.Высота = Окр(ПараметрыШтрихкода.Высота);
	
	ВнешняяКомпонента.АвтоТип = Ложь;
	ВнешняяКомпонента.ТипКода         = ПараметрыШтрихкода.ТипКода;
	//ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихкода.ОтображатьТекст;
	//ВнешняяКомпонента.РазмерШрифта    = ПараметрыШтрихкода.РазмерШрифта;
	
	// Или установим код EAN-13
	// ВнешняяКомпонента.ТипКода = 1;
	//
	// Тип смотрим в документации на внешнюю компоненту
	
	// Если код содержит контрольный символ, обязательно указываем
	ВнешняяКомпонента.СодержитКС = СтрДлина(ПараметрыШтрихкода.Штрихкод) = 13;
	
	// Если отображать контрольный символ не нужно
	// ВнешняяКомпонента.ВидимостьКС = Ложь;
	
	// Формируем картинку штрихкода
	ВнешняяКомпонента.ЗначениеКода = ПараметрыШтрихкода.Штрихкод;
	
	// Если установленная нами ширина меньше минимально допустимой для этого штрихкода
	Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
		ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода + 10;
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	
	// Если картинка сформировалась
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		// Формируем из двоичных данных
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Процедура обрабатывает введенные штрихкоды:
// - добаваляет введенные штрихкоды в табличную часть документа;
// - вызвает помощник создания штрикода, если он не был найден.
// Параметры:
//   Форма - УправляемаяФорма - форма для которой будут обработаны введенные штрихкоды. 
//   Объект - ДанныеФормыСтруктура - объект формы.
//   СтруктураПараметров - Структура - структура формируется функцией ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов()
//									   и заполняется данными из формы.
//   КэшированныеЗначения - Структура - кэш формы
Процедура ОбработатьШтрихкоды(Форма, Объект, СтруктураПараметров) Экспорт
	
	Модифицированность = Ложь;
	
	Если ТипЗнч(СтруктураПараметров.Штрихкоды) = Тип("Массив") Тогда
		МассивШтрихкодов = СтруктураПараметров.Штрихкоды;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(СтруктураПараметров.Штрихкоды);
	КонецЕсли;
	
	ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатурыДляУчетаЧистки.ПолучитьДанныеПоШтрихкодам(МассивШтрихкодов);
	
	ЕстьСуммаВДокументе = Ложь;
	
	Для Каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		
		ТекущаяСтруктураДанныхПоШтрихкоду = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ТекущаяСтруктураДанныхПоШтрихкоду = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекШтрихкод.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(ТекущаяСтруктураДанныхПоШтрихкоду.Сотрудник) Тогда
		//    Продолжить;
		//КонецЕсли;
		
		Если НЕ ТекущаяСтруктураДанныхПоШтрихкоду.Свойство("Сотрудник") Тогда
			Сообщить("Не найдена информация по штрих коду: " + ТекШтрихкод.Штрихкод);
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Штрихкод",ТекШтрихкод.Штрихкод));
		Если НЕ НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратИзЧистки") Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПередачаВЧистку") Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтруктураДанныхПоШтрихкоду);
			НоваяСтрока.Вес = ТекущаяСтруктураДанныхПоШтрихкоду.Номенклатура.ВесДляУчетаЧистки;
			НоваяСтрока.Штрихкод = ТекШтрихкод.Штрихкод;
		Иначе
			Если ТекущаяСтруктураДанныхПоШтрихкоду.Номенклатура.ПриниматьНаХранение Тогда
				НоваяСтрока 			= Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтруктураДанныхПоШтрихкоду);
				НоваяСтрока.Количество 	= 1;
				НоваяСтрока.Цена 		= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НоваяСтрока.Номенклатура,Объект.Организация,Объект.Дата);
				НоваяСтрока.Сумма 		= НоваяСтрока.Количество * НоваяСтрока.Цена;
				НоваяСтрока.Штрихкод 	= ТекШтрихкод.Штрихкод;
				ЕстьСуммаВДокументе 	= Истина;
			КонецЕсли;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
	Если ЕстьСуммаВДокументе Тогда
		Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	КонецЕсли;	
	
	Если Модифицированность Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПравоРегистрацииШтрихкодовНоменклатурыДоступно() Экспорт
	
	Возврат Пользователи.РолиДоступны("РегистрацияШтрихкодовНоменклатуры");
	
КонецФункции

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме
// Параметры:
//   Форма - Форма, в которой необходимо настроить подключаемое оборудование
//
Процедура НастроитьПодключаемоеОборудование(Форма) Экспорт
	
	ТипыПодключенногоОборудования = МенеджерОборудованияСерверПовтИсп.ТипыПодключенногоОборудования();
	
	Форма.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);
	
	ЕстьТСД  =
	ТипыПодключенногоОборудования <> Неопределено
	И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных) <> Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	Форма.Элементы,
	"ТоварыЗагрузитьДанныеИзТСД",
	"Видимость",Форма.ИспользоватьПодключаемоеОборудование И ЕстьТСД);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
	Форма.Элементы,
	"ВыгрузитьДанныеВТСД",
	"Видимость",Форма.ИспользоватьПодключаемоеОборудование И ЕстьТСД);
	
КонецПроцедуры

// Проверяет, что включена ф.о "Использовать подключаемое оборудование",
// настроено ли оборудование и авторизовался пользователь,
// а не внешний пользователь.
Функция ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования = Неопределено) Экспорт
	
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ПользовательАвторизовался 			 = ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	
	Если ТипыПодключенногоОборудования = Неопределено Тогда
		ТипыПодключенногоОборудования = МенеджерОборудованияСерверПовтИсп.ТипыПодключенногоОборудования();
	КонецЕсли;
	
	Возврат
	ИспользоватьПодключаемоеОборудование
	И ПользовательАвторизовался
	И ТипыПодключенногоОборудования <> Неопределено
	И ТипыПодключенногоОборудования.Количество() > 0;
	
КонецФункции	

// функция возвращает таблицу значений:
// ------------------------------------------------------------------------------------------------
// | Подразделение | Должность | Рабочее место АСТБ | Условие нормы | Норма выдачи | Использовать |
// ------------------------------------------------------------------------------------------------
//
// параметры: массив норм выдачи СИЗ
Функция ПолучитьТаблицуИспользованияНормы(МассивНормВыдачи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ разрешенные
	|	ИсходныеНормыВыдачиСИЗ.Подразделение КАК Подразделение,
	|	ИсходныеНормыВыдачиСИЗ.Должность КАК Должность,
	|	ИсходныеНормыВыдачиСИЗ.РабочееМесто КАК РабочееМесто,
	|	ИсходныеНормыВыдачиСИЗ.УсловиеНормы КАК УсловиеНормы,
	|	ИсходныеНормыВыдачиСИЗ.НормаВыдачи КАК НормаВыдачи,
	|	ИсходныеНормыВыдачиСИЗ.Использовать КАК Использовать
	|ИЗ
	|	РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК ИсходныеНормыВыдачиСИЗ
	|ГДЕ
	|	ИсходныеНормыВыдачиСИЗ.НормаВыдачи В(&МассивНормВыдачи)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НормаВыдачи,
	|	Подразделение,
	|	Должность,
	|	РабочееМесто,
	|	УсловиеНормы,
	|	Использовать";
	
	Запрос.УстановитьПараметр("МассивНормВыдачи",МассивНормВыдачи);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПриПроведенииДокументаУвольнениеОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ разрешенные
	|	ТаблицаДокумента.Сотрудник
	|ИЗ
	|	(ВЫБРАТЬ
	|		УвольнениеРаботники.Сотрудник КАК Сотрудник
	|	ИЗ
	|		Документ.Увольнение.Работники КАК УвольнениеРаботники
	|	ГДЕ
	|		УвольнениеРаботники.Ссылка = &Ссылка
	|		И НЕ УвольнениеРаботники.Сотрудник.МестоХраненияСИЗ = ЗНАЧЕНИЕ(Справочник.МестаХраненияСИЗСотрудников.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		УвольнениеРаботники.Сотрудник) КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник,
	|			СУММА(ЗанятыеРабочиеМестаОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(, ) КАК ЗанятыеРабочиеМестаОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗанятыеРабочиеМестаОстатки.Сотрудник) КАК ЗанятыеРМ
	|		ПО ТаблицаДокумента.Сотрудник = ЗанятыеРМ.Сотрудник
	|ГДЕ
	|	ЕСТЬNULL(ЗанятыеРМ.КоличествоОстаток, 0) = 0";
	
	Запрос.УстановитьПараметр("Ссылка",Источник.Ссылка);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		ТекущийСотрудник = СтрокаТаблицыЗапроса.Сотрудник.ПолучитьОбъект();
		ТекущийСотрудник.МестоХраненияСИЗ = Справочники.МестаХраненияСИЗСотрудников.ПустаяСсылка();
		ТекущийСотрудник.Записать();		 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПериодичностьВыдачи(ТипПериода,КоличествоПериодов,КоличествоВПериоде,СоздаватьЕслиНеНайден = Истина) Экспорт
	
	Если КоличествоВПериоде = 0 И КоличествоПериодов = 0 И НЕ ЗначениеЗаполнено(ТипПериода) Тогда
				
		Возврат Справочники.ПериодичностьВыдачиСИЗ.ПустаяСсылка();
		
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодичностьВыдачиСИЗ.Ссылка КАК НайденнаяПериодичность
	|ИЗ
	|	Справочник.ПериодичностьВыдачиСИЗ КАК ПериодичностьВыдачиСИЗ
	|ГДЕ
	|	ПериодичностьВыдачиСИЗ.ТипПериода = &ТипПериода
	|	И ПериодичностьВыдачиСИЗ.КоличествоПериодов = &КоличествоПериодов
	|	И ПериодичностьВыдачиСИЗ.КоличествоВПериоде = &КоличествоВПериоде";
	
	Запрос.УстановитьПараметр("ТипПериода",			ТипПериода);
	Запрос.УстановитьПараметр("КоличествоПериодов",	КоличествоПериодов);
	Запрос.УстановитьПараметр("КоличествоВПериоде",	КоличествоВПериоде);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		НайденнаяПериодичность = Выборка.НайденнаяПериодичность;
		
	Иначе
		
		Если СоздаватьЕслиНеНайден Тогда
			
			НоваяПериодичность 						= Справочники.ПериодичностьВыдачиСИЗ.СоздатьЭлемент();
			НоваяПериодичность.КоличествоВПериоде 	= КоличествоВПериоде;
			НоваяПериодичность.КоличествоПериодов 	= КоличествоПериодов;
			НоваяПериодичность.ТипПериода 			= ТипПериода;
			НоваяПериодичность.Наименование 		= Справочники.ПериодичностьВыдачиСИЗ.СформироватьНаименованиеПериодичности(НоваяПериодичность);
			НоваяПериодичность.Приоритет 			= Справочники.ПериодичностьВыдачиСИЗ.РассчитатьПриоритетПериодичности(НоваяПериодичность);
			НоваяПериодичность.УстановитьНовыйКод();
			НоваяПериодичность.Записать();
			
			НайденнаяПериодичность = НоваяПериодичность.Ссылка;
			
		Иначе
			
			НайденнаяПериодичность = Справочники.ПериодичностьВыдачиСИЗ.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденнаяПериодичность;
	
КонецФункции

Функция ПолучитьДолжность(ТаблицаОКПДТР,НаименованиеДолжности,КодОКПДТР = "",СоздаватьЕслиНеНайдена = Истина) Экспорт
	
	Должность = Справочники.ДолжностиИПрофессии.НайтиПоНаименованию(НаименованиеДолжности,Истина);
	
	Если Должность = Справочники.ДолжностиИПрофессии.ПустаяСсылка() Тогда //ищем в классификаторе
		
		Если СоздаватьЕслиНеНайдена Тогда
			
			СтрокаОКПДТР 	= ТаблицаОКПДТР.Найти(НРег(НаименованиеДолжности),"НаименованиеДляПоиска");
			НоваяДолжность 	= Справочники.ДолжностиИПрофессии.СоздатьЭлемент();
			
			Если СтрокаОКПДТР = Неопределено Тогда //создаем произвольную должность
				
				НоваяДолжность.Наименование = НаименованиеДолжности;
				НоваяДолжность.Источник 	= Перечисления.ИсточникиДолжностей.ВведеныВручную;
				
			Иначе
				
				НоваяДолжность.Наименование = СтрокаОКПДТР.Наименование;
				НоваяДолжность.КодПоОКПДТР	= СтрокаОКПДТР.КодПоОКПДТР;
				НоваяДолжность.Источник		= СтрокаОКПДТР.Источник;
				
			КонецЕсли;
			
			НоваяДолжность.УстановитьНовыйКод();
			НоваяДолжность.Записать();
			
			Возврат НоваяДолжность.Ссылка;
			
		Иначе
			
			Возврат Должность;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Должность;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНоменклатуруНормыОрганизации(НаименованиеНоменклатуры,Организация,СоздаватьЕслиНеНайдена = Истина) Экспорт
	
	НоменклатураНорм = Справочники.НоменклатураНормОрганизации.НайтиПоНаименованию(СокрЛП(НаименованиеНоменклатуры),Истина,,Организация);
	
	Если НоменклатураНорм.Пустая() Тогда
		
		Если СоздаватьЕслиНеНайдена Тогда
			
			НоменклатураНорм 				= Справочники.НоменклатураНормОрганизации.СоздатьЭлемент();
			НоменклатураНорм.Владелец		= Организация;
			НоменклатураНорм.Наименование 	= СокрЛП(НаименованиеНоменклатуры);
			НоменклатураНорм.ВидСИЗ			= СоздатьВидСИЗ(СокрЛП(НаименованиеНоменклатуры));
			НоменклатураНорм.УстановитьНовыйКод();
			НоменклатураНорм.Записать();
			
			Возврат НоменклатураНорм.Ссылка;
			
		Иначе
			
			Возврат НоменклатураНорм;
			
		КонецЕсли;
		
	Иначе
		
		Возврат НоменклатураНорм;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(КодЕдиницы,СоздаватьЕслиНеНайдена = Истина) Экспорт
	
	БазоваяЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоКоду(КодЕдиницы);
	
	Если БазоваяЕдиница.Пустая() Тогда
		
		Если СоздаватьЕслиНеНайдена Тогда
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			Макет = Справочники.ЕдиницыИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
			Макет.Записать(ИмяВременногоФайла);
			Дерево = ЗначениеИзФайла(ИмяВременногоФайла);
			
			СтрокаДерева = Дерево.Строки.Найти(КодЕдиницы,"КодЧисловой",Истина);
			Если НЕ СтрокаДерева = Неопределено Тогда
				БазоваяЕдиница = СтрокаДерева.Строки.Добавить();
				
			Иначе
				
				//***НСК Трегубов А.А.*** -- в классификаторе может не оказаться такого кода --  13.11.2019 <<<
				Возврат БазоваяЕдиница;
				//***НСК Трегубов А.А.*** -- в классификаторе может не оказаться такого кода --  13.11.2019 >>>
				
			КонецЕсли;
			
			СправочникОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			
			Если ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеНациональное) Тогда
				Наименование = СтрокаДерева.УсловноеОбозначениеНациональное;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеМеждународное) Тогда
				Наименование = СтрокаДерева.УсловноеОбозначениеМеждународное;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеНациональное) Тогда
				Наименование = СтрокаДерева.КодовоеБуквенноеОбозначениеНациональное;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное) Тогда
				Наименование = СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное;
			Иначе
				Наименование = СтрокаДерева.Наименование;
			КонецЕсли;
			
			СправочникОбъект.Наименование            = СтрЗаменить(Наименование,Символы.ПС,"/");
			СправочникОбъект.МеждународноеСокращение = СтрЗаменить(СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное,Символы.ПС,"/");
			СправочникОбъект.НаименованиеПолное      = СтрЗаменить(СтрокаДерева.Наименование,Символы.ПС,"/");
			СправочникОбъект.Код                     = СтрокаДерева.КодЧисловой;
			
			СправочникОбъект.Записать();
			
			БазоваяЕдиница = СправочникОбъект.Ссылка;
			
			//***НСК Трегубов А.А.*** --  --  13.11.2019 <<<
			Возврат БазоваяЕдиница;
			//***НСК Трегубов А.А.*** --  --  13.11.2019 >>>
			
		Иначе
			
			Возврат БазоваяЕдиница;
			
		КонецЕсли;
		
	Иначе
		
		Возврат БазоваяЕдиница;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНормуВыдачиСИЗ(ТаблицаСостава,СтруктураНормы,СоздаватьЕслиНеНайдена = Истина, ИспользоватьНаиболееПолноеНаименование = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДляПроверки.НоменклатураНормы,
	|	ТаблицаДляПроверки.ПериодичностьВыдачи,
	|	ТаблицаДляПроверки.УчитыватьВПотребности,
	|	ТаблицаДляПроверки.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДляПроверки
	|ИЗ
	|	&ТаблицаДляПроверки КАК ТаблицаДляПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НормаВыдачи,
	|	ВложенныйЗапрос.КоличествоСовпадений
	|ИЗ
	|	(ВЫБРАТЬ
	|		НормыВыдачиСИЗСоставНормы.Ссылка КАК НормаВыдачи,
	|		СУММА(1) КАК КоличествоСовпадений
	|	ИЗ
	|		ТаблицаДляПроверки КАК ТаблицаДляПроверки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|			ПО ТаблицаДляПроверки.НоменклатураНормы = НормыВыдачиСИЗСоставНормы.НоменклатураНормы
	|				И ТаблицаДляПроверки.ПериодичностьВыдачи = НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи
	|				И ТаблицаДляПроверки.УчитыватьВПотребности = НормыВыдачиСИЗСоставНормы.УчитыватьВПотребности
	|				И ТаблицаДляПроверки.НомерСтроки = НормыВыдачиСИЗСоставНормы.НомерСтроки
	|	ГДЕ
	|		НормыВыдачиСИЗСоставНормы.Ссылка В
	|				(ВЫБРАТЬ
	|					ВложенныйЗапрос.Ссылка КАК НормаВыдачи
	|				ИЗ
	|					(ВЫБРАТЬ
	|						НормыВыдачиСИЗСоставНормы.Ссылка КАК Ссылка,
	|						СУММА(1) КАК КоличествоСтрок
	|					ИЗ
	|						Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|					СГРУППИРОВАТЬ ПО
	|						НормыВыдачиСИЗСоставНормы.Ссылка) КАК ВложенныйЗапрос
	|				ГДЕ
	|					ВложенныйЗапрос.КоличествоСтрок = &КоличествоСтрок)
	|		И ВЫБОР
	|				КОГДА НормыВыдачиСИЗСоставНормы.Ссылка.ОснованиеНормы = НЕОПРЕДЕЛЕНО
	|					ТОГДА &ОснованиеНормы = """"
	|				ИНАЧЕ НормыВыдачиСИЗСоставНормы.Ссылка.ОснованиеНормы = &ОснованиеНормы
	|			КОНЕЦ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НормыВыдачиСИЗСоставНормы.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.КоличествоСовпадений = &КоличествоСтрок
	|	И ВложенныйЗапрос.НормаВыдачи.ВидВыдачиСИЗ = &ВидВыдачиСИЗ
	|	И ВложенныйЗапрос.НормаВыдачи.ВидРасчета = &ВидРасчета
	|	И ВложенныйЗапрос.НормаВыдачи.Владелец = &Организация";
	
	Запрос.УстановитьПараметр("КоличествоСтрок",	ТаблицаСостава.Количество());
	Запрос.УстановитьПараметр("ТаблицаДляПроверки",	ТаблицаСостава);
	Запрос.УстановитьПараметр("Организация",		СтруктураНормы.Организация);
	Запрос.УстановитьПараметр("ВидВыдачиСИЗ",		СтруктураНормы.ВидВыдачиСИЗ);
	Запрос.УстановитьПараметр("ВидРасчета",			СтруктураНормы.ВидРасчета);
	Запрос.УстановитьПараметр("ОснованиеНормы",		СтруктураНормы.ОснованиеНормы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		//нужно обновить состав для обновления реквизита "Периодичность для личной карточки"
		НормаОбъект = Выборка.НормаВыдачи.ПолучитьОбъект();
		НормаОбъект.СоставНормы.Загрузить(ТаблицаСостава);
		НормаОбъект.Записать();
		
		Возврат Выборка.НормаВыдачи;
		
	Иначе
		
		Если СоздаватьЕслиНеНайдена Тогда
			
			НовыйЭлемент 					= Справочники.НормыВыдачиСИЗ.СоздатьЭлемент();
			НовыйЭлемент.ВидРасчета 		= СтруктураНормы.ВидРасчета;
			НовыйЭлемент.Владелец 			= СтруктураНормы.Организация;
			НовыйЭлемент.ВидВыдачиСИЗ 		= СтруктураНормы.ВидВыдачиСИЗ;
			НовыйЭлемент.ОснованиеНормы 	= СтруктураНормы.ОснованиеНормы;
			НовыйЭлемент.СоставНормы.Загрузить(ТаблицаСостава);
			НовыйЭлемент.ВесовойКоэффициент = 1/ТаблицаСостава.Количество();
			МассивНаименований = Справочники.НормыВыдачиСИЗ.СформироватьМассивНаименованийНормыВыдачиСИЗ(НовыйЭлемент);
			Если ИспользоватьНаиболееПолноеНаименование Тогда
				НовыйЭлемент.Наименование 	= МассивНаименований[МассивНаименований.Количество()-1];
			Иначе
				НовыйЭлемент.Наименование 	= МассивНаименований[0];
			КонецЕсли;
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Записать();
			
			Возврат НовыйЭлемент.Ссылка;
			
		Иначе
			
			Возврат Справочники.НормыВыдачиСИЗ.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;;
	
КонецФункции

//функция приводит строку к строке с заглавной буквы
Функция НормализоватьНаименование(ТекущееНаименование) Экспорт
	
	ПервыйСимвол 		= ВРег(Лев(ТекущееНаименование,1));
	ОстальныеСимволы 	= НРег(Прав(ТекущееНаименование,СтрДлина(ТекущееНаименование)-1));
	
	Возврат ПервыйСимвол + ОстальныеСимволы;
	
КонецФункции

//Возвращает строковое представление номенклатуры с характеристикой для отображения в сообщениях
//Параметры
// 		НоменклатураПредставление - строковое предствление номенклатуры или ссылка на элемент справочника "Номенклатура"
// 		ХарактеристикаПредставление - строковое предствление характеристики или ссылка на элемент справочника "Номенклатура"
Функция ПолучитьПредставлениеНоменклатуры(НоменклатураПредставление, ХарактеристикаПредставление) Экспорт
	
	СтрПредставление = СокрЛП(НоменклатураПредставление);
	
	Если ЗначениеЗаполнено(ХарактеристикаПредставление)Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(ХарактеристикаПредставление);
	КонецЕсли;
	
	Возврат СтрПредставление;
	
КонецФункции

Функция СформироватьЗаголовокДокумента(Шапка, знач НазваниеДокумента = "") Экспорт
	
	// Если название документа не передано, получим название по представлению документа
	Если НазваниеДокумента = ""	И Шапка.Свойство("Представление") И ЗначениеЗаполнено(Шапка.Представление) Тогда
		ПоложениеНомера = Найти(Шапка.Представление, Шапка.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(Шапка.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;
	
	НомерНаПечать = Шапка.Номер;
	СтандартнаяОбработка = Истина;
	ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерНаПечать, Истина, Истина);
	Если СтандартнаяОбработка Тогда
		НомерНаПечать = Шапка.Номер;
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1 № %2 от %3'"),
	НазваниеДокумента, НомерНаПечать, Формат(Шапка.Дата, "ДЛФ=DD"));
	
КонецФункции

// Возвращает ключ данных для подстановки в сообщение пользователю
// Ключ данных нужен при групповой обработке объектов - если он установлен, то при нажатии пользователем на сообщение
// будет открываться форма объекта
//
//	Параметры:
//		Объект - Произвольный - объект, для которого нужно получить ключ данных
//	
//	Возвращаемое значение
//		Ссылка - ссылка на объект информационной базы
//
Функция КлючДанныхДляСообщенияПользователю(Объект) Экспорт
	
	КлючДанных = Неопределено;
	XMLТипЗнч = XMLТипЗнч(Объект); 
	
	Если XMLТипЗнч <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч.ИмяТипа;
		Если Найти(ТипЗначенияСтрокой, "Object.") > 0 Тогда
			КлючДанных = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлючДанных;
	
КонецФункции

Функция ИзСтрокиСРазделителями(Значение,Разделитель = ";") Экспорт
	
	ДлинаРазделителя = СтрДлина(Разделитель);
	
	Рез = Новый Массив();
	Стр = СокрЛП(Значение);
	
	Если Стр = "" Тогда
		Возврат Рез; 
	КонецЕсли; 
	
	Поз = Найти(Стр,Разделитель);
	Пока Поз > 0 Цикл
		Рез.Добавить(СокрЛП(Лев(Стр,Поз-1)));
		Стр = Прав(Стр,СтрДлина(Стр) - Поз - ДлинаРазделителя + 1);
		Поз = Найти(Стр,Разделитель);
	КонецЦикла;
	
	Рез.Добавить(СокрЛП(Стр));
	
	Возврат Рез;
	
КонецФункции

// Стандартная функция форматирования прописи количества
//
// Параметры:
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт
	
	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);
	
	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
		
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
		
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
		
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
		
	КонецЕсли;
	
	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);
	
КонецФункции // КоличествоПрописью()

Функция ПолучитьОрганизациюПоУмолчанию(ТекущаяОрганизация = Неопределено) Экспорт
	
	Если ТекущаяОрганизация = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК ОрганизацияПоУмолчанию
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОрганизацияПоУмолчанию";
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			Возврат Справочники.Организации.ПустаяСсылка();
			
		Иначе
			
			Выборка = Результат.Выбрать(); 
			Выборка.Следующий();
			Возврат Выборка.ОрганизацияПоУмолчанию; 
			
		КонецЕсли;		
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК ОрганизацияПоУмолчанию
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.Ссылка = &Ссылка
		|	И Организации.ОрганизацияПоУмолчанию";
		
		Запрос.УстановитьПараметр("Ссылка",ТекущаяОрганизация);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			Возврат Справочники.Организации.ПустаяСсылка();
			
		Иначе
			
			Выборка = Результат.Выбрать(); 
			Выборка.Следующий();
			Возврат Выборка.ОрганизацияПоУмолчанию; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнениеРеквизитовНовогоДокументаОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если НЕ Источник.Метаданные().Реквизиты.Найти("СоздательДокумента") = Неопределено Тогда
		
		Источник.СоздательДокумента = ПараметрыСеанса.ТекущийПользователь;
		
	КонецЕсли;
	
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Ответственный") = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(Источник.Ответственный) Тогда
			Источник.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Организация") = Неопределено Тогда
		
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			
			Если НЕ ЗначениеЗаполнено(Источник.Организация) Тогда
				Источник.Организация = Константы.ОсновнаяОрганизация.Получить();
				//АСТБ_ALEXEY_69654_**************************************************************
				Если НЕ Источник.Метаданные().Реквизиты.Найти("Склад") = Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(Источник.Склад) Тогда
						Источник.Склад = Источник.Организация.СкладПоУмолчанию;
						Если НЕ Источник.Метаданные().Реквизиты.Найти("МОЛ") = Неопределено Тогда
							Источник.МОЛ = ПолучитьМОЛСклада(Источник.Склад,Источник.Организация,Источник.СоздательДокумента);
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
				//АСТБ_ALEXEY_69654_**************************************************************
			КонецЕсли;
			
		Иначе
			
			Если НЕ ТипЗнч(Источник) = Тип("ДокументОбъект.СогласиеНаИнформирование") Тогда 
				
				Если НЕ Источник.Метаданные().Реквизиты.Найти("Сотрудник") = Неопределено Тогда
					
					//АСТБ_ALEXEY_69654_**************************************************************
					Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
						
						Если НЕ Источник.Метаданные().Реквизиты.Найти("Склад") = Неопределено Тогда
							Источник.Склад = Источник.Организация.СкладПоУмолчанию;
							Если НЕ Источник.Метаданные().Реквизиты.Найти("МОЛ") = Неопределено Тогда
								Источник.МОЛ = ПолучитьМОЛСклада(Источник.Склад,Источник.Организация,Источник.СоздательДокумента);
							КонецЕсли;
							
							Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВыдачаСредствЗащитыСотруднику") Тогда
								
								//***НСК Трегубов А.А.*** -- 93684 --  01.07.2021 <<<							
								Если НЕ ЗначениеЗаполнено(Источник.Склад) Тогда 
									
									ТаблицаСкладовВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьТаблицуСкладовВыдачи(ДанныеЗаполнения);
									
									НайденныеСтроки = ТаблицаСкладовВыдачи.НайтиСтроки(Новый Структура("ВидВыдачиСИЗ",Источник.ВидВыдачиСИЗ));
									
									Если НайденныеСтроки.Количество() = 0 Тогда
										Источник.Склад = Справочники.Склады.ПустаяСсылка();
									Иначе
										НайденныеСтрокиПоСотруднику = ТаблицаСкладовВыдачи.НайтиСтроки(Новый Структура("ВидВыдачиСИЗ,Получатель",Источник.ВидВыдачиСИЗ,ДанныеЗаполнения));
										Если НайденныеСтрокиПоСотруднику.Количество() = 0 Тогда
											ТекущийСклад = Справочники.Склады.ПустаяСсылка();
											Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
												Если ЗначениеЗаполнено(НайденнаяСтрока.Получатель) Тогда
													Источник.Склад = НайденнаяСтрока.Склад;
													ТекущийСклад = НайденнаяСтрока.Склад;
													Прервать;
												Иначе
													ТекущийСклад = НайденнаяСтрока.Склад;
												КонецЕсли;
												Если Не ЗначениеЗаполнено(Источник.Склад) Тогда
													Источник.Склад = ТекущийСклад;
												КонецЕсли;
											КонецЦикла;
										Иначе
											Источник.Склад = НайденныеСтрокиПоСотруднику[0].Склад;
										КонецЕсли;
									КонецЕсли;									
									
									Источник.МОЛ = ПолучитьМОЛСклада(Источник.Склад,Источник.Организация,Источник.СоздательДокумента);
									
								КонецЕсли;								
								//***НСК Трегубов А.А.*** -- 93684 --  01.07.2021 >>>
								
								Документы.ВыдачаСредствЗащитыСотруднику.ЗаполнитьТаблицуДокумента(Источник);
								
							КонецЕсли;	
						КонецЕсли;
					
					Иначе
						
						Если НЕ ЗначениеЗаполнено(Источник.Сотрудник) И НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
							
							Источник.Организация = ПолучитьОрганизациюПоУмолчанию();
							
							Если НЕ Источник.Метаданные().Реквизиты.Найти("Склад") = Неопределено Тогда
								Если НЕ ЗначениеЗаполнено(Источник.Склад) Тогда
									Источник.Склад = Источник.Организация.СкладПоУмолчанию;
									Если НЕ Источник.Метаданные().Реквизиты.Найти("МОЛ") = Неопределено Тогда
										Источник.МОЛ = ПолучитьМОЛСклада(Источник.Склад,Источник.Организация,Источник.СоздательДокумента);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					//АСТБ_ALEXEY_69654_**************************************************************
					
				Иначе
					
					Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
						Источник.Организация = ПолучитьОрганизациюПоУмолчанию();
						//АСТБ_ALEXEY_69654_**************************************************************
						Если НЕ Источник.Метаданные().Реквизиты.Найти("Склад") = Неопределено Тогда
							Если НЕ ЗначениеЗаполнено(Источник.Склад) Тогда
								Источник.Склад = Источник.Организация.СкладПоУмолчанию;
								Если НЕ Источник.Метаданные().Реквизиты.Найти("МОЛ") = Неопределено Тогда
									Источник.МОЛ = ПолучитьМОЛСклада(Источник.Склад,Источник.Организация,Источник.СоздательДокумента);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						//АСТБ_ALEXEY_69654_**************************************************************
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнениеРеквизитовНовогоДокументаОбработкаЗаполненияПриКопировании(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если НЕ Источник.Метаданные().Реквизиты.Найти("СоздательДокумента") = Неопределено Тогда
		
		Источник.СоздательДокумента = ПараметрыСеанса.ТекущийПользователь;
		
	КонецЕсли;
	
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Ответственный") = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(Источник.Ответственный) Тогда
			Источник.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Организация") = Неопределено Тогда
		
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			
			Если НЕ ЗначениеЗаполнено(Источник.Организация) Тогда
				Источник.Организация = Константы.ОсновнаяОрганизация.Получить();
				//АСТБ_ALEXEY_69654_**************************************************************
				Если НЕ Источник.Метаданные().Реквизиты.Найти("Склад") = Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(Источник.Склад) Тогда
						Источник.Склад = Источник.Организация.СкладПоУмолчанию;
						Если НЕ Источник.Метаданные().Реквизиты.Найти("МОЛ") = Неопределено Тогда
							Источник.МОЛ = ПолучитьМОЛСклада(Источник.Склад,Источник.Организация,Источник.СоздательДокумента);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//АСТБ_ALEXEY_69654_**************************************************************
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Источник.Метаданные().Имя = "УстановкаШтрихкодовНоменклатуры" Тогда //нельзя заполнять табличную часть
		
		Источник.ШтрихкодыНоменклатуры.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

//АСТБ_ALEXEY_70409**************************************************************
Функция УточнитьМОЛПоСоздателюДокумента(ТекущийСклад, ТекущийМОЛ, СоздательДокумента, Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СоздательДокумента) Тогда
		Возврат ТекущийМОЛ;
	КонецЕсли;
	
	Если ТипЗнч(СоздательДокумента) = Тип("СправочникСсылка.Пользователи") Тогда
		ФизЛицо = СоздательДокумента.ФизическоеЛицо;
	ИначеЕсли ТипЗнч(СоздательДокумента) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда	
		ФизЛицо = СоздательДокумента.ОбъектАвторизации;
	Иначе
		Возврат ТекущийМОЛ;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат ТекущийМОЛ;
	КонецЕсли;
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ФизЛицо,,Организация);
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат ТекущийМОЛ;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкладыМатериальноОтветственныеЛица.МОЛ КАК МОЛ
	|ИЗ
	|	Справочник.Склады.МатериальноОтветственныеЛица КАК СкладыМатериальноОтветственныеЛица
	|ГДЕ
	|	СкладыМатериальноОтветственныеЛица.Ссылка = &Склад
	|	И СкладыМатериальноОтветственныеЛица.МОЛ = &МОЛ";
	
	Запрос.УстановитьПараметр("Склад",	ТекущийСклад);
	Запрос.УстановитьПараметр("МОЛ",	Сотрудник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ТекущийМОЛ;
	Иначе
		Возврат Сотрудник;
	КонецЕсли;
	
КонецФункции
//АСТБ_ALEXEY_70409**************************************************************

Функция ПолучитьСписокНоменклатурыНормыПоНормеВыдачи(НормаВыдачи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы
	|ИЗ
	|	Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|ГДЕ
	|	НормыВыдачиСИЗСоставНормы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",НормаВыдачи);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НоменклатураНормы");
	
КонецФункции

Функция РассчитатьДатуСледующейВыдачи(ДатаВыдачи,НормаВыдачи,НоменклатураНормы) Экспорт
	
	СтрокаТаблицыНормы = НормаВыдачи.СоставНормы.Найти(НоменклатураНормы,"НоменклатураНормы");
	
	Если СтрокаТаблицыНормы.ПериодичностьВыдачи.ТипПериода = Перечисления.ДоступныеПериодыОтчета.Месяц Тогда
		ДатаСледующейВыдачи = ДобавитьМесяц(ДатаВыдачи,СтрокаТаблицыНормы.ПериодичностьВыдачи.КоличествоПериодов);
	ИначеЕсли СтрокаТаблицыНормы.ПериодичностьВыдачи.ТипПериода = Перечисления.ДоступныеПериодыОтчета.Год Тогда
		ДатаСледующейВыдачи = ДобавитьМесяц(ДатаВыдачи,СтрокаТаблицыНормы.ПериодичностьВыдачи.КоличествоПериодов*12);
	Иначе
		ДатаСледующейВыдачи = ДатаВыдачи;
	КонецЕсли;
	
	Возврат ДатаСледующейВыдачи;
	
КонецФункции

//+++АСТБ_ALEXEY_110616_**************************************************************
Функция ПолучитьАнтропометриюСотрудников(МассивСотрудников,Организация,Номенклатура = НЕОПРЕДЕЛЕНО) Экспорт
//Функция ПолучитьАнтропометриюСотрудников(МассивСотрудников,Организация) Экспорт	

	Если Номенклатура = Неопределено Тогда //запрос возвращает значения по-старому 
		ВидРоста = Справочники.ВидыАнтропометрическихСвойств.Рост;
	Иначе
		Если Номенклатура.ИспользоватьРост Тогда
			Если НЕ ЗначениеЗаполнено(Номенклатура.ВидРоста) Тогда //почему-то не проставился вид роста после перехода на 114-й релиз
				ВидРоста = Справочники.ВидыАнтропометрическихСвойств.Рост;
			Иначе
				ВидРоста = Номенклатура.ВидРоста;
			КонецЕсли;	
		Иначе
			ВидРоста = Справочники.ВидыАнтропометрическихСвойств.Рост;
		КонецЕсли;
	КонецЕсли;
	
	//---АСТБ_ALEXEY_110616_**************************************************************
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ЗначенияАнтропометрическихСвойств.ВидСвойства КАК ВидСвойства,
	|	ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК ЗначениеСвойства,
	|	ЗначенияАнтропометрическихСвойств.Сотрудник.ФизическоеЛицо.Пол КАК ПолСотрудника
	|ПОМЕСТИТЬ ВТ_ЗначенияАнтропометрическихСвойств
	|ИЗ
	|	РегистрСведений.ЗначенияАнтропометрическихСвойств КАК ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ЗначенияАнтропометрическихСвойств.Сотрудник.Владелец = &Организация
	|	И ЗначенияАнтропометрическихСвойств.Сотрудник В(&МассивСотрудников)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствияХарактеристикНоменклатуры.Размер КАК Размер,
	|	СоответствияХарактеристикНоменклатуры.Рост КАК Рост,
	|	СоответствияХарактеристикНоменклатуры.Пол КАК Пол,
	|	СоответствияХарактеристикНоменклатуры.ДополнительноеУсловие КАК ДополнительноеУсловие,
	|	СоответствияХарактеристикНоменклатуры.Метрика КАК Метрика
	|ПОМЕСТИТЬ ВТ_СоответствияХарактеристикНоменклатуры
	|ИЗ
	|	РегистрСведений.СоответствияХарактеристикНоменклатуры КАК СоответствияХарактеристикНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Метрика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства КАК ВидСвойства,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК ЗначениеСвойства,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ПолСотрудника КАК ПолСотрудника
	|ПОМЕСТИТЬ ВТ_АнтропометрияБезРоста
	|ИЗ
	|	ВТ_ЗначенияАнтропометрическихСвойств КАК ВТ_ЗначенияАнтропометрическихСвойств
	|ГДЕ
	//+++АСТБ_ALEXEY_110616_**************************************************************
	//|	НЕ ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.Рост)
	|	НЕ (ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.Рост) ИЛИ ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РостВерхОдежды) ИЛИ ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РостНизОдежды))
	//---АСТБ_ALEXEY_110616_**************************************************************
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствияХарактеристикНоменклатуры.Размер КАК Размер,
	|	ВТ_СоответствияХарактеристикНоменклатуры.Пол КАК Пол,
	|	ВТ_СоответствияХарактеристикНоменклатуры.Метрика КАК Метрика,
	|	ВТ_СоответствияХарактеристикНоменклатуры.ДополнительноеУсловие КАК ДополнительноеУсловие
	|ПОМЕСТИТЬ ВТ_МетрикиБезРоста
	|ИЗ
	|	ВТ_СоответствияХарактеристикНоменклатуры КАК ВТ_СоответствияХарактеристикНоменклатуры
	|ГДЕ
	|	ВТ_СоответствияХарактеристикНоменклатуры.Рост = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Метрика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства КАК ВидСвойства,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК РазмерОдежды,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ПолСотрудника КАК ПолСотрудника
	|ПОМЕСТИТЬ ВТ_РазмерОдежды
	|ИЗ
	|	ВТ_ЗначенияАнтропометрическихСвойств КАК ВТ_ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерОдежды)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК Рост,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ПолСотрудника КАК ПолСотрудника
	|ПОМЕСТИТЬ ВТ_РостСотрудника
	|ИЗ
	|	ВТ_ЗначенияАнтропометрическихСвойств КАК ВТ_ЗначенияАнтропометрическихСвойств
	|ГДЕ
	//+++АСТБ_ALEXEY_110616_**************************************************************
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = &ВидРоста
	//|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.Рост)
	//---АСТБ_ALEXEY_110616_**************************************************************
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_РазмерОдежды.Сотрудник КАК Сотрудник,
	|	ВТ_РазмерОдежды.ВидСвойства КАК ВидСвойства,
	|	ВТ_РазмерОдежды.РазмерОдежды КАК РазмерОдежды,
	|	ВТ_РостСотрудника.Рост КАК Рост,
	|	ВТ_РазмерОдежды.ПолСотрудника КАК ПолСотрудника
	|ПОМЕСТИТЬ ВТ_АнтропометрияСРостом
	|ИЗ
	|	ВТ_РазмерОдежды КАК ВТ_РазмерОдежды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РостСотрудника КАК ВТ_РостСотрудника
	|		ПО ВТ_РазмерОдежды.Сотрудник = ВТ_РостСотрудника.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствияХарактеристикНоменклатуры.Размер КАК Размер,
	|	ВТ_СоответствияХарактеристикНоменклатуры.Рост КАК Рост,
	|	ВТ_СоответствияХарактеристикНоменклатуры.Пол КАК Пол,
	|	ВТ_СоответствияХарактеристикНоменклатуры.ДополнительноеУсловие КАК ДополнительноеУсловие,
	|	ВТ_СоответствияХарактеристикНоменклатуры.Метрика КАК Метрика
	|ПОМЕСТИТЬ ВТ_МетрикиСРостом
	|ИЗ
	|	ВТ_СоответствияХарактеристикНоменклатуры КАК ВТ_СоответствияХарактеристикНоменклатуры
	|ГДЕ
	|	НЕ ВТ_СоответствияХарактеристикНоменклатуры.Рост = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Метрика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_АнтропометрияБезРоста.Сотрудник КАК Сотрудник,
	|	ВТ_АнтропометрияБезРоста.ВидСвойства КАК ВидСвойства,
	|	ВТ_МетрикиБезРоста.Метрика КАК Метрика,
	|	ВТ_МетрикиБезРоста.ДополнительноеУсловие КАК ДополнительноеУсловие,
	|	ВТ_АнтропометрияБезРоста.ПолСотрудника КАК ПолСотрудника,
	|	ВТ_АнтропометрияБезРоста.ЗначениеСвойства КАК Размер,
	|	0 КАК Рост,
	|	ВТ_МетрикиБезРоста.Пол КАК ПолСоответствия
	|ИЗ
	|	ВТ_АнтропометрияБезРоста КАК ВТ_АнтропометрияБезРоста
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетрикиБезРоста КАК ВТ_МетрикиБезРоста
	|		ПО ВТ_АнтропометрияБезРоста.ЗначениеСвойства = ВТ_МетрикиБезРоста.Размер
	|			И (ВЫБОР
	|				КОГДА ВТ_МетрикиБезРоста.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА ВТ_АнтропометрияБезРоста.ПолСотрудника = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|				КОГДА ВТ_МетрикиБезРоста.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|					ТОГДА ВТ_АнтропометрияБезРоста.ПолСотрудника = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнтропометрияСРостом.Сотрудник,
	|	ВТ_АнтропометрияСРостом.ВидСвойства,
	|	ВТ_МетрикиСРостом.Метрика,
	|	ВТ_МетрикиСРостом.ДополнительноеУсловие,
	|	ВТ_АнтропометрияСРостом.ПолСотрудника,
	|	ВТ_АнтропометрияСРостом.РазмерОдежды,
	|	ВТ_АнтропометрияСРостом.Рост,
	|	ВТ_МетрикиСРостом.Пол
	|ИЗ
	|	ВТ_АнтропометрияСРостом КАК ВТ_АнтропометрияСРостом
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МетрикиСРостом КАК ВТ_МетрикиСРостом
	|		ПО ВТ_АнтропометрияСРостом.РазмерОдежды = ВТ_МетрикиСРостом.Размер
	|			И ВТ_АнтропометрияСРостом.Рост = ВТ_МетрикиСРостом.Рост
	|			И (ВЫБОР
	|				КОГДА ВТ_МетрикиСРостом.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА ВТ_АнтропометрияСРостом.ПолСотрудника = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|				КОГДА ВТ_МетрикиСРостом.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|					ТОГДА ВТ_АнтропометрияСРостом.ПолСотрудника = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДополнительноеУсловие УБЫВ,
	|	ПолСоответствия УБЫВ";
	
	Запрос.УстановитьПараметр("МассивСотрудников",	МассивСотрудников);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ВидРоста",			ВидРоста);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//параметры
// 1. ТаблицаНоменклатурыНормСотрудников - таблица вида:
// | Сотрудник | Подразделение | Должность | НоменклатураНормы |
// 2. ДатаАнализа - граница (дата) анализа данных регистров
//
//возвращает таблицу вида:
// | Сотрудник | НоменклатураНормы | Номенклатура | ЕстьРазмеры | ПриоритетСоотвествия | Приоритет | ТолькоДляСотрудника |
//
Функция ПолучитьСоответствияНоменклатурыДляСотрудников(ТаблицаНоменклатурыНормСотрудников,ДатаАнализа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ХарактеристикиНоменклатуры
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыНормСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаНоменклатурыНормСотрудников.Подразделение КАК Подразделение,
	|	ТаблицаНоменклатурыНормСотрудников.Должность КАК Должность,
	|	ТаблицаНоменклатурыНормСотрудников.НоменклатураНормы КАК НоменклатураНормы
	|ПОМЕСТИТЬ ВТ_ТаблицаНоменклатурыНормСотрудников
	|ИЗ
	|	&ТаблицаНоменклатурыНормСотрудников КАК ТаблицаНоменклатурыНормСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	ВТ_ТаблицаНоменклатурыНормСотрудников.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаНоменклатурыНормСотрудников.Должность КАК Должность,
	|	ВТ_ТаблицаНоменклатурыНормСотрудников.НоменклатураНормы КАК НоменклатураНормы
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	ВТ_ТаблицаНоменклатурыНормСотрудников КАК ВТ_ТаблицаНоменклатурыНормСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ВТ_ТаблицаНоменклатурыНормСотрудников.Сотрудник = Сотрудники.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Сотрудник КАК Сотрудник,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Подразделение КАК Подразделение,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Должность КАК Должность,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.УсловиеСоответствия КАК УсловиеСоответствия,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.НоменклатураНормыОрганизации КАК НоменклатураНормы,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура КАК Номенклатура,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура.Пол КАК Пол,
	|	ВЫБОР
	|		КОГДА ВТ_ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРазмеры,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Маппинг
	|ИЗ
	|	РегистрСведений.СоответствияНоменклатурыВыдачи.СрезПоследних(&ПериодРасчета, НоменклатураНормыОрганизации В (&МассивНоменклатурыНорм)) КАК СоответствияНоменклатурыВыдачиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиНоменклатуры КАК ВТ_ХарактеристикиНоменклатуры
	|		ПО СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура = ВТ_ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	10 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_Сотрудник_Подразделение_Должность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	НЕ ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	20 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	НЕ ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	30 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	НЕ ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	40 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	НЕ ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	50 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	60 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	70 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	80 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сотрудники.Сотрудник КАК Сотрудник,
	|	ВТ_Сотрудники.НоменклатураНормы КАК НоменклатураНормы,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Номенклатура ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Номенклатура ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Номенклатура ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|																								ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Номенклатура
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Номенклатура
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Номенклатура
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Номенклатура
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Номенклатура
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.ЕстьРазмеры ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.ЕстьРазмеры ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.ЕстьРазмеры ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.ЕстьРазмеры ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.ЕстьРазмеры ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.ЕстьРазмеры ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.ЕстьРазмеры ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.ЕстьРазмеры ЕСТЬ NULL
	|																								ТОГДА ЛОЖЬ
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.ЕстьРазмеры
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.ЕстьРазмеры
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.ЕстьРазмеры
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.ЕстьРазмеры
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.ЕстьРазмеры
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.ЕстьРазмеры
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.ЕстьРазмеры
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.ЕстьРазмеры
	|	КОНЕЦ КАК ЕстьРазмеры,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.ПриоритетСоответствия ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.ПриоритетСоответствия ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.ПриоритетСоответствия ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.ПриоритетСоответствия ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.ПриоритетСоответствия ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.ПриоритетСоответствия ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.ПриоритетСоответствия ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.ПриоритетСоответствия ЕСТЬ NULL
	|																								ТОГДА 0
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.ПриоритетСоответствия
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.ПриоритетСоответствия
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.ПриоритетСоответствия
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.ПриоритетСоответствия
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.ПриоритетСоответствия
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.ПриоритетСоответствия
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.ПриоритетСоответствия
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.ПриоритетСоответствия
	|	КОНЕЦ КАК ПриоритетСоответствия,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Приоритет ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Приоритет ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Приоритет ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Приоритет ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Приоритет ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Приоритет ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Приоритет ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Приоритет ЕСТЬ NULL
	|																								ТОГДА 0
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Приоритет
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Приоритет
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Приоритет
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Приоритет
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Приоритет
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Приоритет
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Приоритет
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.Приоритет
	|	КОНЕЦ КАК Приоритет,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Номенклатура ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Номенклатура ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Номенклатура ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|																								ТОГДА ЛОЖЬ
	|																							ИНАЧЕ ЛОЖЬ
	|																						КОНЕЦ
	|																				ИНАЧЕ ЛОЖЬ
	|																			КОНЕЦ
	|																	ИНАЧЕ ЛОЖЬ
	|																КОНЕЦ
	|														ИНАЧЕ ЛОЖЬ
	|													КОНЕЦ
	|											ИНАЧЕ ИСТИНА
	|										КОНЕЦ
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТолькоДляСотрудника
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность КАК ВТ_Маппинг_Сотрудник_Подразделение_Должность
	|		ПО ВТ_Сотрудники.Сотрудник = ВТ_Маппинг_Сотрудник_Подразделение_Должность.Сотрудник
	|			И ВТ_Сотрудники.Подразделение = ВТ_Маппинг_Сотрудник_Подразделение_Должность.Подразделение
	|			И ВТ_Сотрудники.Должность = ВТ_Маппинг_Сотрудник_Подразделение_Должность.Должность
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_Сотрудник_Подразделение_Должность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность КАК ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность
	|		ПО ВТ_Сотрудники.Сотрудник = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Сотрудник
	|			И ВТ_Сотрудники.Должность = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Должность
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность КАК ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность
	|		ПО ВТ_Сотрудники.Сотрудник = ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Сотрудник
	|			И ВТ_Сотрудники.Подразделение = ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Подразделение
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность КАК ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность
	|		ПО ВТ_Сотрудники.Подразделение = ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Подразделение
	|			И ВТ_Сотрудники.Должность = ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Должность
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность КАК ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность
	|		ПО ВТ_Сотрудники.Должность = ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Должность
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность КАК ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность
	|		ПО ВТ_Сотрудники.Подразделение = ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Подразделение
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность КАК ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность
	|		ПО ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность КАК ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность
	|		ПО ВТ_Сотрудники.Сотрудник = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Сотрудник
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.ЕстьРазмеры КАК ЕстьРазмеры,
	|	МИНИМУМ(ВТ_Результат.ПриоритетСоответствия) КАК ПриоритетСоответствия,
	|	МИНИМУМ(ВТ_Результат.Приоритет) КАК Приоритет,
	|	ВТ_Результат.ТолькоДляСотрудника КАК ТолькоДляСотрудника
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.Сотрудник,
	|	ВТ_Результат.НоменклатураНормы,
	|	ВТ_Результат.Номенклатура,
	|	ВТ_Результат.ЕстьРазмеры,
	|	ВТ_Результат.ТолькоДляСотрудника
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НоменклатураНормы,
	|	ПриоритетСоответствия,
	|	Приоритет,
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("ПериодРасчета",						ДатаАнализа);
	Запрос.УстановитьПараметр("МассивНоменклатурыНорм",				ТаблицаНоменклатурыНормСотрудников.ВыгрузитьКолонку("НоменклатураНормы"));
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыНормСотрудников",	ТаблицаНоменклатурыНормСотрудников);
	
	//иначе под ограниченными правами возникает бесконечный цикл
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//параметры
// 1. ТаблицаНоменклатурыНормСотрудника - таблица вида:
// | Сотрудник | Подразделение | Должность | НоменклатураНормы |
// 2. ДатаАнализа - граница (дата) анализа данных регистров
// 3. НоменклатураНормы - номенклатура нормы для поиска маппинга
//
//возвращает таблицу вида:
// | Сотрудник | НоменклатураНормы | Номенклатура | ЕстьРазмеры | ПриоритетСоотвествия | Приоритет | ТолькоДляСотрудника |
//
Функция ПолучитьСоответствияНоменклатурыДляСотрудника(ТаблицаНоменклатурыНормСотрудника,ДатаАнализа,НоменклатураНормы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ХарактеристикиНоменклатуры
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыНормСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаНоменклатурыНормСотрудников.Подразделение КАК Подразделение,
	|	ТаблицаНоменклатурыНормСотрудников.Должность КАК Должность,
	|	ТаблицаНоменклатурыНормСотрудников.НоменклатураНормы КАК НоменклатураНормы
	|ПОМЕСТИТЬ ВТ_ТаблицаНоменклатурыНормСотрудников
	|ИЗ
	|	&ТаблицаНоменклатурыНормСотрудников КАК ТаблицаНоменклатурыНормСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	ВТ_ТаблицаНоменклатурыНормСотрудников.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаНоменклатурыНормСотрудников.Должность КАК Должность,
	|	ВТ_ТаблицаНоменклатурыНормСотрудников.НоменклатураНормы КАК НоменклатураНормы
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	ВТ_ТаблицаНоменклатурыНормСотрудников КАК ВТ_ТаблицаНоменклатурыНормСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ВТ_ТаблицаНоменклатурыНормСотрудников.Сотрудник = Сотрудники.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Сотрудник КАК Сотрудник,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Подразделение КАК Подразделение,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Должность КАК Должность,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.УсловиеСоответствия КАК УсловиеСоответствия,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.НоменклатураНормыОрганизации КАК НоменклатураНормы,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура КАК Номенклатура,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура.Пол КАК Пол,
	|	ВЫБОР
	|		КОГДА ВТ_ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРазмеры,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Маппинг
	|ИЗ
	|	РегистрСведений.СоответствияНоменклатурыВыдачи.СрезПоследних(&ПериодРасчета, НоменклатураНормыОрганизации = &НоменклатураНормы) КАК СоответствияНоменклатурыВыдачиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиНоменклатуры КАК ВТ_ХарактеристикиНоменклатуры
	|		ПО СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура = ВТ_ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	10 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_Сотрудник_Подразделение_Должность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	НЕ ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	20 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	НЕ ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	30 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	НЕ ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	40 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	НЕ ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	50 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	60 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	70 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	80 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|ГДЕ
	|	ВТ_Маппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВТ_Маппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И ВТ_Маппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сотрудники.Сотрудник КАК Сотрудник,
	|	ВТ_Сотрудники.НоменклатураНормы КАК НоменклатураНормы,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Номенклатура ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Номенклатура ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Номенклатура ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|																								ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Номенклатура
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Номенклатура
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Номенклатура
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Номенклатура
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Номенклатура
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.ЕстьРазмеры ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.ЕстьРазмеры ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.ЕстьРазмеры ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.ЕстьРазмеры ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.ЕстьРазмеры ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.ЕстьРазмеры ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.ЕстьРазмеры ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.ЕстьРазмеры ЕСТЬ NULL
	|																								ТОГДА ЛОЖЬ
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.ЕстьРазмеры
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.ЕстьРазмеры
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.ЕстьРазмеры
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.ЕстьРазмеры
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.ЕстьРазмеры
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.ЕстьРазмеры
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.ЕстьРазмеры
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.ЕстьРазмеры
	|	КОНЕЦ КАК ЕстьРазмеры,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.ПриоритетСоответствия ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.ПриоритетСоответствия ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.ПриоритетСоответствия ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.ПриоритетСоответствия ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.ПриоритетСоответствия ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.ПриоритетСоответствия ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.ПриоритетСоответствия ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.ПриоритетСоответствия ЕСТЬ NULL
	|																								ТОГДА 0
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.ПриоритетСоответствия
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.ПриоритетСоответствия
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.ПриоритетСоответствия
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.ПриоритетСоответствия
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.ПриоритетСоответствия
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.ПриоритетСоответствия
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.ПриоритетСоответствия
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.ПриоритетСоответствия
	|	КОНЕЦ КАК ПриоритетСоответствия,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Приоритет ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Приоритет ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Приоритет ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Приоритет ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Приоритет ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Приоритет ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Приоритет ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Приоритет ЕСТЬ NULL
	|																								ТОГДА 0
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Приоритет
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Приоритет
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Приоритет
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Приоритет
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Приоритет
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Приоритет
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Приоритет
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.Приоритет
	|	КОНЕЦ КАК Приоритет,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Номенклатура ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Номенклатура ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Номенклатура ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|																								ТОГДА ЛОЖЬ
	|																							ИНАЧЕ ЛОЖЬ
	|																						КОНЕЦ
	|																				ИНАЧЕ ЛОЖЬ
	|																			КОНЕЦ
	|																	ИНАЧЕ ЛОЖЬ
	|																КОНЕЦ
	|														ИНАЧЕ ЛОЖЬ
	|													КОНЕЦ
	|											ИНАЧЕ ИСТИНА
	|										КОНЕЦ
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТолькоДляСотрудника
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность КАК ВТ_Маппинг_Сотрудник_Подразделение_Должность
	|		ПО ВТ_Сотрудники.Сотрудник = ВТ_Маппинг_Сотрудник_Подразделение_Должность.Сотрудник
	|			И ВТ_Сотрудники.Подразделение = ВТ_Маппинг_Сотрудник_Подразделение_Должность.Подразделение
	|			И ВТ_Сотрудники.Должность = ВТ_Маппинг_Сотрудник_Подразделение_Должность.Должность
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_Сотрудник_Подразделение_Должность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность КАК ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность
	|		ПО ВТ_Сотрудники.Сотрудник = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Сотрудник
	|			И ВТ_Сотрудники.Должность = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Должность
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность КАК ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность
	|		ПО ВТ_Сотрудники.Сотрудник = ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Сотрудник
	|			И ВТ_Сотрудники.Подразделение = ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Подразделение
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность КАК ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность
	|		ПО ВТ_Сотрудники.Подразделение = ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Подразделение
	|			И ВТ_Сотрудники.Должность = ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Должность
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность КАК ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность
	|		ПО ВТ_Сотрудники.Должность = ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Должность
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность КАК ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность
	|		ПО ВТ_Сотрудники.Подразделение = ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Подразделение
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность КАК ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность
	|		ПО ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность КАК ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность
	|		ПО ВТ_Сотрудники.Сотрудник = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Сотрудник
	|			И ВТ_Сотрудники.НоменклатураНормы = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Пол = ВТ_Сотрудники.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.ЕстьРазмеры КАК ЕстьРазмеры,
	|	МИНИМУМ(ВТ_Результат.ПриоритетСоответствия) КАК ПриоритетСоответствия,
	|	МИНИМУМ(ВТ_Результат.Приоритет) КАК Приоритет,
	|	ВТ_Результат.ТолькоДляСотрудника КАК ТолькоДляСотрудника
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.Сотрудник,
	|	ВТ_Результат.НоменклатураНормы,
	|	ВТ_Результат.Номенклатура,
	|	ВТ_Результат.ЕстьРазмеры,
	|	ВТ_Результат.ТолькоДляСотрудника
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НоменклатураНормы,
	|	ПриоритетСоответствия,
	|	Приоритет,
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("ПериодРасчета",						ДатаАнализа);
	Запрос.УстановитьПараметр("НоменклатураНормы",					НоменклатураНормы);
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыНормСотрудников",	ТаблицаНоменклатурыНормСотрудника);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьМассивСотрудниковПодразделений(НеУчитыватьПодразделения,МассивПодразделений,ДатаАнализа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(&ДатаАнализа, (&НеУчитыватьПодразделения ИЛИ Подразделение В (&МассивПодразделений))) КАК ЗанятыеРабочиеМестаОстатки
	|ГДЕ
	|	ЗанятыеРабочиеМестаОстатки.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник.Наименование";
	
	Запрос.УстановитьПараметр("ДатаАнализа",				ДатаАнализа);
	Запрос.УстановитьПараметр("МассивПодразделений",		МассивПодразделений);
	Запрос.УстановитьПараметр("НеУчитыватьПодразделения",	НеУчитыватьПодразделения);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Функция ПолучитьСкладыВыдачиСотрудников(МассивСотрудников,ВидВыдачиСИЗ,Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Сотрудник,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Подразделение
	|ПОМЕСТИТЬ ВТ_ПодразделенияСотрудников
	|ИЗ
	|	РегистрСведений.ОсновноеМестоРаботыСотрудника.СрезПоследних(
	|			,
	|			Организация = &Организация
	|				И Сотрудник В (&МассивСотрудников)) КАК ОсновноеМестоРаботыСотрудникаСрезПоследних
	|ГДЕ
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.ОсновноеМестоРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СкладыВыдачиСредствЗащиты.Склад,
	|	СкладыВыдачиСредствЗащиты.Получатель
	|ПОМЕСТИТЬ ВТ_СкладыВыдачи
	|ИЗ
	|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
	|ГДЕ
	|	СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ = &ВидВыдачиСИЗ
	|	И СкладыВыдачиСредствЗащиты.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПодразделенияСотрудников.Сотрудник,
	|	ВТ_СкладыВыдачи.Склад
	|ПОМЕСТИТЬ ВТ_СкладыВыдачиПоСотрудникам
	|ИЗ
	|	ВТ_ПодразделенияСотрудников КАК ВТ_ПодразделенияСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкладыВыдачи КАК ВТ_СкладыВыдачи
	|		ПО ВТ_ПодразделенияСотрудников.Сотрудник = ВТ_СкладыВыдачи.Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПодразделенияСотрудников.Сотрудник,
	|	ВТ_СкладыВыдачи.Склад
	|ПОМЕСТИТЬ ВТ_СкладыВыдачиПоПодразделениям
	|ИЗ
	|	ВТ_ПодразделенияСотрудников КАК ВТ_ПодразделенияСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкладыВыдачи КАК ВТ_СкладыВыдачи
	|		ПО ВТ_ПодразделенияСотрудников.Подразделение = ВТ_СкладыВыдачи.Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СкладыВыдачи.Склад
	|ПОМЕСТИТЬ ВТ_СкладыБезПолучателя
	|ИЗ
	|	ВТ_СкладыВыдачи КАК ВТ_СкладыВыдачи
	|ГДЕ
	|	(ВТ_СкладыВыдачи.Получатель = НЕОПРЕДЕЛЕНО
	|			ИЛИ ВТ_СкладыВыдачи.Получатель = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			ИЛИ ВТ_СкладыВыдачи.Получатель = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПодразделенияСотрудников.Сотрудник КАК Сотрудник,
	|	ВТ_ПодразделенияСотрудников.Подразделение,
	|	ВТ_СкладыВыдачиПоСотрудникам.Склад КАК СкладВыдачиПоСотруднику,
	|	NULL КАК СкладВыдачиПоПодразделению,
	|	NULL КАК СкладВыдачиБезПолучателя
	|ПОМЕСТИТЬ ВТ_ВсеСкладыВыдачи
	|ИЗ
	|	ВТ_ПодразделенияСотрудников КАК ВТ_ПодразделенияСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкладыВыдачиПоСотрудникам КАК ВТ_СкладыВыдачиПоСотрудникам
	|		ПО ВТ_ПодразделенияСотрудников.Сотрудник = ВТ_СкладыВыдачиПоСотрудникам.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПодразделенияСотрудников.Сотрудник,
	|	ВТ_ПодразделенияСотрудников.Подразделение,
	|	NULL,
	|	ВТ_СкладыВыдачиПоПодразделениям.Склад,
	|	NULL
	|ИЗ
	|	ВТ_ПодразделенияСотрудников КАК ВТ_ПодразделенияСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкладыВыдачиПоПодразделениям КАК ВТ_СкладыВыдачиПоПодразделениям
	|		ПО ВТ_ПодразделенияСотрудников.Сотрудник = ВТ_СкладыВыдачиПоПодразделениям.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПодразделенияСотрудников.Сотрудник,
	|	ВТ_ПодразделенияСотрудников.Подразделение,
	|	NULL,
	|	NULL,
	|	ВТ_СкладыБезПолучателя.Склад
	|ИЗ
	|	ВТ_ПодразделенияСотрудников КАК ВТ_ПодразделенияСотрудников,
	|	ВТ_СкладыБезПолучателя КАК ВТ_СкладыБезПолучателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеСкладыВыдачи.Сотрудник,
	|	ВТ_ВсеСкладыВыдачи.Подразделение,
	|	ЕСТЬNULL(ВТ_ВсеСкладыВыдачи.СкладВыдачиПоСотруднику, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладВыдачиПоСотруднику,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_ВсеСкладыВыдачи.СкладВыдачиПоПодразделению, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК СкладВыдачиПоПодразделению,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_ВсеСкладыВыдачи.СкладВыдачиБезПолучателя, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК СкладВыдачиБезПолучателя
	|ИЗ
	|	ВТ_ВсеСкладыВыдачи КАК ВТ_ВсеСкладыВыдачи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВсеСкладыВыдачи.Сотрудник,
	|	ВТ_ВсеСкладыВыдачи.Подразделение,
	|   ЕСТЬNULL(ВТ_ВсеСкладыВыдачи.СкладВыдачиПоСотруднику, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ВсеСкладыВыдачи.Сотрудник.Наименование";
	
	Запрос.УстановитьПараметр("МассивСотрудников",	МассивСотрудников);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ВидВыдачиСИЗ",		ВидВыдачиСИЗ);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСкладов = Новый ТаблицаЗначений;
	ТаблицаСкладов.Колонки.Добавить("Сотрудник",	Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСкладов.Колонки.Добавить("Склад",		Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		НоваяСтрока = ТаблицаСкладов.Добавить();
		НоваяСтрока.Сотрудник = СтрокаТаблицыЗапроса.Сотрудник;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.СкладВыдачиПоСотруднику) Тогда
			НоваяСтрока.Склад = СтрокаТаблицыЗапроса.СкладВыдачиПоСотруднику;
			//Продолжить;
		Иначе
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.СкладВыдачиПоПодразделению) Тогда
				НоваяСтрока.Склад = СтрокаТаблицыЗапроса.СкладВыдачиПоПодразделению;
				Продолжить;
			КонецЕсли;
			
			СтруктураДанных = НайтиСкладВыдачиГоловногоПодразделения(СтрокаТаблицыЗапроса.Подразделение,ВидВыдачиСИЗ);
			СкладВыдачиГоловногоПодразделения = СтруктураДанных.Склад;
			
			Если ЗначениеЗаполнено(СкладВыдачиГоловногоПодразделения) Тогда
				НоваяСтрока.Склад = СкладВыдачиГоловногоПодразделения;
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.СкладВыдачиБезПолучателя) Тогда
				НоваяСтрока.Склад = СтрокаТаблицыЗапроса.СкладВыдачиБезПолучателя;
			Иначе
				НоваяСтрока.Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСкладов;
	
КонецФункции

// функция формирует таблицу периодов зимы вида:
// | Дата периода | Подразделение | Организация | Дата начала зимы | Дата окончания зимы |
// 
// параметры:
// МассивПодразделений 	- массив подразделений для анализа
// МассивДат 			- массив дат потребности для анализа
// Организация 			- организация для анализа
// ДатаАнализа  		- граница (дата), на которую выполняется анализ
//
Функция ПолучитьТаблицуЗимы(МассивПодразделений,Организация,ДатаАнализа,МассивДат) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодыЗимыСрезПоследних.Подразделение,
	|	ПериодыЗимыСрезПоследних.НачалоЗимы,
	|	ПериодыЗимыСрезПоследних.КонецЗимы
	|ПОМЕСТИТЬ ВТ_ПериодыЗимы
	|ИЗ
	|	РегистрСведений.ПериодыЗимы.СрезПоследних(&ПериодРасчета, Организация = &Организация) КАК ПериодыЗимыСрезПоследних
	|ГДЕ
	|	ПериодыЗимыСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПериодыЗимы.Подразделение,
	|	ВТ_ПериодыЗимы.НачалоЗимы,
	|	ВТ_ПериодыЗимы.КонецЗимы
	|ИЗ
	|	ВТ_ПериодыЗимы КАК ВТ_ПериодыЗимы
	|ГДЕ
	|	ВТ_ПериодыЗимы.Подразделение В(&МассивПодразделений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПериодыЗимы.Подразделение,
	|	ВТ_ПериодыЗимы.НачалоЗимы,
	|	ВТ_ПериодыЗимы.КонецЗимы
	|ИЗ
	|	ВТ_ПериодыЗимы КАК ВТ_ПериодыЗимы
	|ГДЕ
	|	ВТ_ПериодыЗимы.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПериодыЗимы.Подразделение,
	|	ВТ_ПериодыЗимы.НачалоЗимы,
	|	ВТ_ПериодыЗимы.КонецЗимы
	|ИЗ
	|	ВТ_ПериодыЗимы КАК ВТ_ПериодыЗимы
	|ГДЕ
	|	НЕ ВТ_ПериодыЗимы.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_ПериодыЗимы.Подразделение В (&МассивПодразделений)";
	
	Запрос.УстановитьПараметр("МассивПодразделений",МассивПодразделений);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ПериодРасчета",		ДатаАнализа);
	
	Результат 						= Запрос.ВыполнитьПакет();
	ТаблицаПоПодразделениям 		= Результат[1].Выгрузить();
	ТаблицаПоПустымПодразделениям 	= Результат[2].Выгрузить();
	ТаблицаПоДругимПодразделениям 	= Результат[3].Выгрузить();
	
	Для Каждого ЭлементМассиваПодразделений Из МассивПодразделений Цикл
		
		НайденнаяСтрока = ТаблицаПоПодразделениям.Найти(ЭлементМассиваПодразделений,"Подразделение");
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			ДанныеНайденыВИерархии = ПолучитьПериодЗимыРекурсивно(ЭлементМассиваПодразделений,ЭлементМассиваПодразделений.Родитель,ТаблицаПоПодразделениям,ТаблицаПоДругимПодразделениям);
			
			Если НЕ ДанныеНайденыВИерархии Тогда
				
				Если ТаблицаПоПустымПодразделениям.Количество() > 0 Тогда
					
					НоваяСтрока 				= ТаблицаПоПодразделениям.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТаблицаПоПустымПодразделениям[0]);
					НоваяСтрока.Подразделение 	= ЭлементМассиваПодразделений;
					
				Иначе
					
					НоваяСтрока 				= ТаблицаПоПодразделениям.Добавить();
					НоваяСтрока.Подразделение 	= ЭлементМассиваПодразделений;
					НоваяСтрока.НачалоЗимы 		= Перечисления.МесяцыГода.ПустаяСсылка();
					НоваяСтрока.КонецЗимы 		= Перечисления.МесяцыГода.ПустаяСсылка();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаЗимы = Новый ТаблицаЗначений;
	ТаблицаЗимы.Колонки.Добавить("ДатаПериода",			Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗимы.Колонки.Добавить("Подразделение",		Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТаблицаЗимы.Колонки.Добавить("ДатаНачалаЗимы",		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаЗимы.Колонки.Добавить("ДатаОкончанияЗимы",	Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Для Каждого СтрокаТаблицыПоПодразделениям Из ТаблицаПоПодразделениям Цикл
		
		Для Каждого ЭлементМассиваДат Из МассивДат Цикл
			
			НоваяСтрока = ТаблицаЗимы.Добавить();
			НоваяСтрока.ДатаПериода 		= ЭлементМассиваДат;
			НоваяСтрока.Подразделение 		= СтрокаТаблицыПоПодразделениям.Подразделение;
			
			//!!!возможно, неверное определение периода зимы:
			//НоваяСтрока.ДатаНачалаЗимы 		= ПолучитьДатуНачалаМесяца(СтрокаТаблицыПоПодразделениям.НачалоЗимы,ЭлементМассиваДат);
			//НоваяСтрока.ДатаОкончанияЗимы 	= ПолучитьДатуКонцаМесяца(СтрокаТаблицыПоПодразделениям.КонецЗимы,ЭлементМассиваДат);
			//!!!возможно, должно быть так:
			СтруктураПериодаЗимы = ПолучитьПериодЗимы(ЭлементМассиваДат,СтрокаТаблицыПоПодразделениям.НачалоЗимы,СтрокаТаблицыПоПодразделениям.КонецЗимы);
			НоваяСтрока.ДатаНачалаЗимы 		= СтруктураПериодаЗимы.НачалоЗимы;
			НоваяСтрока.ДатаОкончанияЗимы 	= СтруктураПериодаЗимы.КонецЗимы;
			//!!!
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЗимы.Свернуть("ДатаПериода, Подразделение, ДатаНачалаЗимы, ДатаОкончанияЗимы");
	
	Возврат ТаблицаЗимы;
	
КонецФункции

Функция ПолучитьДатуНачалаМесяца(ТекущийМесяц,ДатаАнализа) Экспорт
	
	Если ТекущийМесяц = Перечисления.МесяцыГода.Январь Тогда
		Возврат Дата(Год(ДатаАнализа),1,1);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Февраль Тогда
		Возврат Дата(Год(ДатаАнализа),2,1);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Март Тогда
		Возврат Дата(Год(ДатаАнализа),3,1);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Апрель Тогда
		Возврат Дата(Год(ДатаАнализа),4,1);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Май Тогда
		Возврат Дата(Год(ДатаАнализа),5,1);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Июнь Тогда
		Возврат Дата(Год(ДатаАнализа),6,1);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Июль Тогда
		Возврат Дата(Год(ДатаАнализа),7,1);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Август Тогда
		Возврат Дата(Год(ДатаАнализа),8,1);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Сентябрь Тогда
		Возврат Дата(Год(ДатаАнализа),9,1);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Октябрь Тогда
		Возврат Дата(Год(ДатаАнализа),10,1);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Ноябрь Тогда
		Возврат Дата(Год(ДатаАнализа),11,1);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Декабрь Тогда
		Возврат Дата(Год(ДатаАнализа),12,1);
	Иначе
		Возврат Дата('00010101');
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДатуКонцаМесяца(ТекущийМесяц,ДатаАнализа) Экспорт
	
	Если ТекущийМесяц = Перечисления.МесяцыГода.Январь Тогда
		Возврат Дата(Год(ДатаАнализа),1,31);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Февраль Тогда
		Возврат Дата(Год(ДатаАнализа),2,?(ДеньГода(КонецГода(ДатаАнализа)) = 365,28,29));
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Март Тогда
		Возврат Дата(Год(ДатаАнализа),3,31);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Апрель Тогда
		Возврат Дата(Год(ДатаАнализа),4,30);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Май Тогда
		Возврат Дата(Год(ДатаАнализа),5,31);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Июнь Тогда
		Возврат Дата(Год(ДатаАнализа),6,30);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Июль Тогда
		Возврат Дата(Год(ДатаАнализа),7,31);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Август Тогда
		Возврат Дата(Год(ДатаАнализа),8,31);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Сентябрь Тогда
		Возврат Дата(Год(ДатаАнализа),9,30);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Октябрь Тогда
		Возврат Дата(Год(ДатаАнализа),10,31);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Ноябрь Тогда
		Возврат Дата(Год(ДатаАнализа),11,30);
	ИначеЕсли ТекущийМесяц = Перечисления.МесяцыГода.Декабрь Тогда
		Возврат Дата(Год(ДатаАнализа),12,31);
	Иначе
		Возврат Дата('00010101');
	КонецЕсли;
	
КонецФункции

//функция выполняет подбор периода зимы с учетом иерархии подразделений
//
Функция ПолучитьПериодЗимыРекурсивно(ЭлементМассиваПодразделений,ГоловноеПодразделение,ТаблицаПоПодразделениям,ТаблицаПоДругимПодразделениям) Экспорт
	
	Если ЗначениеЗаполнено(ГоловноеПодразделение) Тогда
		
		НайденнаяСтрока = ТаблицаПоДругимПодразделениям.Найти(ГоловноеПодразделение,"Подразделение");
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			Возврат ПолучитьПериодЗимыРекурсивно(ЭлементМассиваПодразделений,ГоловноеПодразделение.Родитель,ТаблицаПоПодразделениям,ТаблицаПоДругимПодразделениям);
			
		Иначе
			
			НоваяСтрока 				= ТаблицаПоПодразделениям.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрока);
			НоваяСтрока.Подразделение 	= ЭлементМассиваПодразделений;
			
			Возврат Истина;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// функция возвращает таблицу движений по регистру "Потребность выдачи СИЗ"
// 
// параметры:
// ДокументСсылка - документ, выполняющий движения
//
Функция ПолучитьТаблицуДвиженийПоПотребности(ДокументСсылка, ДвиженияПоДоступнымУсловиямРаботы = Неопределено, ТаблицаВыдачаПоПотребности = Неопределено) Экспорт
	
	ТаблицаДвижений = ДокументСсылка.ПолучитьОбъект().Движения.ПотребностьВыдачиСИЗ.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(ДокументСсылка.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Сервер.ПолучитьТаблицуДвиженийПоПотребности(ДокументСсылка,ТаблицаДвижений,ДвиженияПоДоступнымУсловиямРаботы,ТаблицаВыдачаПоПотребности)");
	
	Возврат ТаблицаДвижений;
	
КонецФункции

// функция возвращает таблицу движений по регистру "Выданные средства защиты"
// 
// параметры:
// ДокументСсылка - документ, выполняющий движения
//
Функция ПолучитьТаблицуДвиженийПоВыданнымСИЗ(ДокументСсылка) Экспорт
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	ТаблицаДвижений = ДокументОбъект.Движения.ВыданныеСредстваЗащиты.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(ДокументСсылка.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Сервер." + ДокументОбъект.Метаданные().Имя + "_ПолучитьТаблицуДвиженийПоВыданнымСИЗ(ДокументСсылка,ТаблицаДвижений)");
	
	Возврат ТаблицаДвижений;
	
КонецФункции

// функция возвращает таблицу движений по регистру "Выдача по потребности"
// 
// параметры:
// ДокументСсылка - документ, выполняющий движения
//
Функция ПолучитьТаблицуДвиженийВыдачиПоПотребности(ДокументСсылка,ДвиженияПоПотребности = Неопределено, ДвиженияПоВыданнымСИЗ = Неопределено, ТаблицаВыдачаПоПотребности = Неопределено) Экспорт
	
	ТаблицаДвижений = ДокументСсылка.ПолучитьОбъект().Движения.ВыдачаПоПотребности.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(ДокументСсылка.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Сервер.ПолучитьТаблицуДвиженийВыдачиПоПотребности(ДокументСсылка,ТаблицаДвижений,ДвиженияПоПотребности,ДвиженияПоВыданнымСИЗ,ТаблицаВыдачаПоПотребности)");
	
	Возврат ТаблицаДвижений;
	
КонецФункции

// функция возвращает структуру таблиц движений по документу "Зачет упрощенной выдачи"
// 
// параметры:
// ДокументСсылка - документ, выполняющий движения
//
Функция ПолучитьСтруктуруТаблицДвиженийПоДокументуЗачетаУпрощеннойВыдачи(ДокументСсылка) Экспорт
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	ТаблицаВыданныеСредстваЗащиты = ДокументОбъект.Движения.ВыданныеСредстваЗащиты.Выгрузить();
	ТаблицаВыданныеСредстваЗащиты.Очистить();
	
	ТаблицаПотребностьВыдачиСИЗ = ДокументОбъект.Движения.ПотребностьВыдачиСИЗ.Выгрузить();
	ТаблицаПотребностьВыдачиСИЗ.Очистить();
	
	ТаблицаВыдачаПоПотребности = ДокументОбъект.Движения.ВыдачаПоПотребности.Выгрузить();
	ТаблицаВыдачаПоПотребности.Очистить();
	
	СтруктураТаблицДвижений = Новый Структура("ТаблицаВыданныеСредстваЗащиты, ТаблицаПотребностьВыдачиСИЗ, ТаблицаВыдачаПоПотребности", ТаблицаВыданныеСредстваЗащиты, ТаблицаПотребностьВыдачиСИЗ, ТаблицаВыдачаПоПотребности);
	
	АлгоритмФормированияПотребности = ПроцедурыРаботыСНормамиСервер.ПолучитьАлгоритмФормированияПотребности(ДокументСсылка.Организация);
	
	Если АлгоритмФормированияПотребности = Неопределено Тогда
		Возврат СтруктураТаблицДвижений;
	КонецЕсли;
	
	Выполнить("Алгоритм_" + АлгоритмФормированияПотребности + "_Сервер.ПолучитьСтруктуруТаблицДвиженийПоЗачетуУпрощеннойВыдачи(ДокументСсылка,СтруктураТаблицДвижений)");
	
	Возврат СтруктураТаблицДвижений;
	
КонецФункции

// функция собирает таблицу движений по регистру "Потребность выдачи СИЗ" вида:
// | Вид движения | Период | Организация | Сотрудник | Норма выдачи | Номенклатура нормы | Дата потребности | Количество |
// 
// параметры:
// ДокументСсылка 				- документ, выполняющий движения
// ИсходнаяПотребностьВыдачи 	- таблица исходной потребности
// КонечнаяПотребностьВыдачи 	- таблица конечной потребности
//
Функция СобратьТаблицуПотребности(ИсходнаяПотребностьВыдачи,КонечнаяПотребностьВыдачи,Документ) Экспорт
	
	Если ИсходнаяПотребностьВыдачи.Колонки.Найти("ПроцентИзноса") = Неопределено Тогда //добавим колонку, чтобы запрос не валился в ошибку
		ИсходнаяПотребностьВыдачи.Колонки.Добавить("ПроцентИзноса",ОбщегоНазначения.ОписаниеТипаЧисло(2));
		ИсходнаяПотребностьВыдачи.ЗаполнитьЗначения(0,"ПроцентИзноса");
	КонецЕсли;
	
	Если КонечнаяПотребностьВыдачи.Колонки.Найти("ПроцентИзноса") = Неопределено Тогда //добавим колонку, чтобы запрос не валился в ошибку
		КонечнаяПотребностьВыдачи.Колонки.Добавить("ПроцентИзноса",ОбщегоНазначения.ОписаниеТипаЧисло(2));
		КонечнаяПотребностьВыдачи.ЗаполнитьЗначения(0,"ПроцентИзноса");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтсутствиеНаРабочемМестеСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДОБАВИТЬКДАТЕ(ОтсутствиеНаРабочемМестеСрезПоследних.ДатаОкончания, ДЕНЬ, 1) КАК ДатаПотребности
	|ПОМЕСТИТЬ ВТ_ОтсутствиеНаРабочемМесте
	|ИЗ
	|	РегистрСведений.ОтсутствиеНаРабочемМесте.СрезПоследних(&ПериодАнализа, Организация = &Организация) КАК ОтсутствиеНаРабочемМестеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяПотребность.Сотрудник КАК Сотрудник,
	|	ИсходнаяПотребность.НормаВыдачи КАК НормаВыдачи,
	|	ИсходнаяПотребность.НоменклатураНормы КАК НоменклатураНормы,
	|	ИсходнаяПотребность.ДатаПотребности КАК ДатаПотребности,
	|	ИсходнаяПотребность.ЭтоЗима КАК ЭтоЗима,
	|	ИсходнаяПотребность.ПроцентИзноса КАК ПроцентИзноса,
	|	ИсходнаяПотребность.КоличествоПотребность КАК КоличествоПотребность,
	|	ИсходнаяПотребность.КоличествоВыдано КАК КоличествоВыдано,
	|	ИсходнаяПотребность.ДатаНачалаЗимы КАК ДатаНачалаЗимы,
	|	ИсходнаяПотребность.ДатаОкончанияЗимы КАК ДатаОкончанияЗимы
	|ПОМЕСТИТЬ ВТ_ИсходнаяПотребность
	|ИЗ
	|	&ИсходнаяПотребность КАК ИсходнаяПотребность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонечнаяПотребность.Сотрудник КАК Сотрудник,
	|	КонечнаяПотребность.НормаВыдачи КАК НормаВыдачи,
	|	КонечнаяПотребность.НоменклатураНормы КАК НоменклатураНормы,
	|	КонечнаяПотребность.ДатаПотребности КАК ДатаПотребности,
	|	КонечнаяПотребность.ЭтоЗима КАК ЭтоЗима,
	|	КонечнаяПотребность.ПроцентИзноса КАК ПроцентИзноса,
	|	КонечнаяПотребность.КоличествоПотребность КАК КоличествоПотребность,
	|	КонечнаяПотребность.ДатаНачалаЗимы КАК ДатаНачалаЗимы,
	|	КонечнаяПотребность.ДатаОкончанияЗимы КАК ДатаОкончанияЗимы
	|ПОМЕСТИТЬ ВТ_КонечнаяПотребность
	|ИЗ
	|	&КонечнаяПотребность КАК КонечнаяПотребность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник КАК Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ИсходнаяПотребность.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность КАК Количество,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса КАК ПроцентИзноса
	|ПОМЕСТИТЬ ВТ_ИзмененнаяПотребность
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|ГДЕ
	|	НЕ ВТ_ИсходнаяПотребность.ЭтоЗима
	|	И ВТ_КонечнаяПотребность.ЭтоЗима
	|	И ВТ_ИсходнаяПотребность.ДатаПотребности < ВТ_ИсходнаяПотребность.ДатаНачалаЗимы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&Организация,
	|	ВТ_КонечнаяПотребность.Сотрудник,
	|	ВТ_КонечнаяПотребность.НормаВыдачи,
	|	ВТ_КонечнаяПотребность.НоменклатураНормы,
	|	ВТ_ИсходнаяПотребность.ДатаНачалаЗимы,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|			И ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|ГДЕ
	|	НЕ ВТ_ИсходнаяПотребность.ЭтоЗима
	|	И ВТ_КонечнаяПотребность.ЭтоЗима
	|	И ВТ_ИсходнаяПотребность.ДатаПотребности < ВТ_ИсходнаяПотребность.ДатаНачалаЗимы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	&Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы,
	|	ВТ_ИсходнаяПотребность.ДатаПотребности,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|ГДЕ
	|	ВТ_ИсходнаяПотребность.ЭтоЗима
	|	И НЕ ВТ_КонечнаяПотребность.ЭтоЗима
	|	И ВТ_ИсходнаяПотребность.КоличествоВыдано = 0
	|	И ВТ_КонечнаяПотребность.ДатаПотребности = ВТ_ИсходнаяПотребность.ДатаПотребности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы,
	|	ВТ_КонечнаяПотребность.ДатаПотребности,
	|	ВТ_КонечнаяПотребность.КоличествоПотребность,
	|	ВТ_КонечнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|ГДЕ
	|	ВТ_ИсходнаяПотребность.ЭтоЗима
	|	И НЕ ВТ_КонечнаяПотребность.ЭтоЗима
	|	И ВТ_ИсходнаяПотребность.КоличествоВыдано = 0
	|	И ВТ_КонечнаяПотребность.ДатаПотребности = ВТ_ИсходнаяПотребность.ДатаПотребности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	&Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы,
	|	ВТ_ИсходнаяПотребность.ДатаПотребности,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.ОтсутствиеНаРабочемМесте)
	|			ИЛИ ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.ВыдачаСредствЗащитыСотруднику))
	|	И ВЫБОР
	|			КОГДА ВТ_ИсходнаяПотребность.ЭтоЗима
	|				ТОГДА ВТ_КонечнаяПотребность.ЭтоЗима
	|			ИНАЧЕ НЕ ВТ_КонечнаяПотребность.ЭтоЗима
	|		КОНЕЦ
	|	И ВТ_КонечнаяПотребность.ДатаПотребности > ВТ_ИсходнаяПотребность.ДатаПотребности
	|	И НЕ(&ЧастичнаяВыдача = 3
	|				ИЛИ &ЧастичнаяВыдача = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&Организация,
	|	ВТ_КонечнаяПотребность.Сотрудник,
	|	ВТ_КонечнаяПотребность.НормаВыдачи,
	|	ВТ_КонечнаяПотребность.НоменклатураНормы,
	|	ВТ_КонечнаяПотребность.ДатаПотребности,
	|	ВТ_КонечнаяПотребность.КоличествоПотребность,
	|	ВТ_КонечнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ИсходнаяПотребность.ЭтоЗима
	|				ТОГДА ВТ_КонечнаяПотребность.ЭтоЗима
	|			ИНАЧЕ НЕ ВТ_КонечнаяПотребность.ЭтоЗима
	|		КОНЕЦ
	|	И (ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.ОтсутствиеНаРабочемМесте)
	|			ИЛИ ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.ВыдачаСредствЗащитыСотруднику))
	|	И ВТ_КонечнаяПотребность.ДатаПотребности > ВТ_ИсходнаяПотребность.ДатаПотребности
	|	И НЕ(&ЧастичнаяВыдача = 3
	|				ИЛИ &ЧастичнаяВыдача = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	&Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы,
	|	ВТ_ИсходнаяПотребность.ДатаПотребности,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.СписаниеСредствЗащитыСотрудника)
	|	И ВЫБОР
	|			КОГДА ВТ_ИсходнаяПотребность.ЭтоЗима
	|				ТОГДА ВТ_КонечнаяПотребность.ЭтоЗима
	|			ИНАЧЕ НЕ ВТ_КонечнаяПотребность.ЭтоЗима
	|		КОНЕЦ
	|	И НЕ ВТ_КонечнаяПотребность.ДатаПотребности = ВТ_ИсходнаяПотребность.ДатаПотребности
	|	И НЕ(&ЧастичнаяВыдача = 3
	|				ИЛИ &ЧастичнаяВыдача = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&Организация,
	|	ВТ_КонечнаяПотребность.Сотрудник,
	|	ВТ_КонечнаяПотребность.НормаВыдачи,
	|	ВТ_КонечнаяПотребность.НоменклатураНормы,
	|	ВТ_КонечнаяПотребность.ДатаПотребности,
	|	ВТ_КонечнаяПотребность.КоличествоПотребность,
	|	ВТ_КонечнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ИсходнаяПотребность.ЭтоЗима
	|				ТОГДА ВТ_КонечнаяПотребность.ЭтоЗима
	|			ИНАЧЕ НЕ ВТ_КонечнаяПотребность.ЭтоЗима
	|		КОНЕЦ
	|	И ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.СписаниеСредствЗащитыСотрудника)
	|	И НЕ ВТ_КонечнаяПотребность.ДатаПотребности = ВТ_ИсходнаяПотребность.ДатаПотребности
	|	И НЕ(&ЧастичнаяВыдача = 3
	|				ИЛИ &ЧастичнаяВыдача = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	&Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы,
	|	ВТ_ИсходнаяПотребность.ДатаПотребности,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.УстановкаПериодаЗимы)
	|	И ВЫБОР
	|			КОГДА ВТ_ИсходнаяПотребность.ЭтоЗима
	|				ТОГДА ВТ_КонечнаяПотребность.ЭтоЗима
	|			ИНАЧЕ ВТ_КонечнаяПотребность.ЭтоЗима
	|		КОНЕЦ
	|	И НЕ ВТ_ИсходнаяПотребность.ДатаПотребности = ВТ_КонечнаяПотребность.ДатаПотребности
	|	И НЕ(&ЧастичнаяВыдача = 3
	|				ИЛИ &ЧастичнаяВыдача = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы,
	|	ВТ_КонечнаяПотребность.ДатаПотребности,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.УстановкаПериодаЗимы)
	|	И ВЫБОР
	|			КОГДА ВТ_ИсходнаяПотребность.ЭтоЗима
	|				ТОГДА ВТ_КонечнаяПотребность.ЭтоЗима
	|			ИНАЧЕ ВТ_КонечнаяПотребность.ЭтоЗима
	|		КОНЕЦ
	|	И НЕ ВТ_ИсходнаяПотребность.ДатаПотребности = ВТ_КонечнаяПотребность.ДатаПотребности
	|	И НЕ(&ЧастичнаяВыдача = 3
	|				ИЛИ &ЧастичнаяВыдача = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	&Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы,
	|	ВТ_ИсходнаяПотребность.ДатаПотребности,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|			И ВТ_ИсходнаяПотребность.ДатаПотребности <> ВТ_КонечнаяПотребность.ДатаПотребности
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.ПереносЗимнейПотребности)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&Организация,
	|	ВТ_КонечнаяПотребность.Сотрудник,
	|	ВТ_КонечнаяПотребность.НормаВыдачи,
	|	ВТ_КонечнаяПотребность.НоменклатураНормы,
	|	ВТ_КонечнаяПотребность.ДатаПотребности,
	|	ВТ_КонечнаяПотребность.КоличествоПотребность,
	|	ВТ_КонечнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|			И ВТ_ИсходнаяПотребность.ДатаПотребности <> ВТ_КонечнаяПотребность.ДатаПотребности
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.ПереносЗимнейПотребности)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_КонечнаяПотребность.КоличествоПотребность, 0) > ЕСТЬNULL(ВТ_ИсходнаяПотребность.КоличествоПотребность, 0)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ,
	|	&Период,
	|	&Организация,
	|	ЕСТЬNULL(ВТ_ИсходнаяПотребность.Сотрудник, ВТ_КонечнаяПотребность.Сотрудник),
	|	ЕСТЬNULL(ВТ_ИсходнаяПотребность.НормаВыдачи, ВТ_КонечнаяПотребность.НормаВыдачи),
	|	ЕСТЬNULL(ВТ_ИсходнаяПотребность.НоменклатураНормы, ВТ_КонечнаяПотребность.НоменклатураНормы),
	|	ЕСТЬNULL(ВТ_ИсходнаяПотребность.ДатаПотребности, ВТ_КонечнаяПотребность.ДатаПотребности),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_КонечнаяПотребность.КоличествоПотребность, 0) > ЕСТЬNULL(ВТ_ИсходнаяПотребность.КоличествоПотребность, 0)
	|			ТОГДА ЕСТЬNULL(ВТ_КонечнаяПотребность.КоличествоПотребность, 0) - ЕСТЬNULL(ВТ_ИсходнаяПотребность.КоличествоПотребность, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ИсходнаяПотребность.КоличествоПотребность, 0) - ЕСТЬNULL(ВТ_КонечнаяПотребность.КоличествоПотребность, 0)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВТ_ИсходнаяПотребность.ПроцентИзноса, ВТ_КонечнаяПотребность.ПроцентИзноса)
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|			И ВТ_ИсходнаяПотребность.ДатаПотребности = ВТ_КонечнаяПотребность.ДатаПотребности
	|			И ВТ_ИсходнаяПотребность.ЭтоЗима = ВТ_КонечнаяПотребность.ЭтоЗима
	|			И ВТ_ИсходнаяПотребность.КоличествоПотребность <> ВТ_КонечнаяПотребность.КоличествоПотребность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	&Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы,
	|	ВТ_ИсходнаяПотребность.ДатаПотребности,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|			И ВТ_ИсходнаяПотребность.ДатаПотребности <> ВТ_КонечнаяПотребность.ДатаПотребности
	|			И ВТ_ИсходнаяПотребность.ЭтоЗима = ВТ_КонечнаяПотребность.ЭтоЗима
	|			И ВТ_ИсходнаяПотребность.КоличествоПотребность = ВТ_КонечнаяПотребность.КоличествоПотребность
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.ПриемНаРаботу)
	|			ИЛИ ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.ПриказПоНормамВыдачиСИЗ)
	|			ИЛИ ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.КадровоеПеремещение)
	|			ИЛИ ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.Увольнение)
	|			ИЛИ ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.УстановкаУсловийРаботыСотрудника))
	|	И НЕ(&ЧастичнаяВыдача = 3
	|				ИЛИ &ЧастичнаяВыдача = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы,
	|	ВТ_КонечнаяПотребность.ДатаПотребности,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|			И ВТ_ИсходнаяПотребность.ДатаПотребности <> ВТ_КонечнаяПотребность.ДатаПотребности
	|			И ВТ_ИсходнаяПотребность.ЭтоЗима = ВТ_КонечнаяПотребность.ЭтоЗима
	|			И ВТ_ИсходнаяПотребность.КоличествоПотребность = ВТ_КонечнаяПотребность.КоличествоПотребность
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.ПриемНаРаботу)
	|			ИЛИ ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.ПриказПоНормамВыдачиСИЗ)
	|			ИЛИ ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.КадровоеПеремещение)
	|			ИЛИ ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.Увольнение)
	|			ИЛИ ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.УстановкаУсловийРаботыСотрудника))
	|	И НЕ(&ЧастичнаяВыдача = 3
	|				ИЛИ &ЧастичнаяВыдача = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	&Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы,
	|	ВТ_ИсходнаяПотребность.ДатаПотребности,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|			И ВТ_ИсходнаяПотребность.ПроцентИзноса = ВТ_КонечнаяПотребность.ПроцентИзноса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтсутствиеНаРабочемМесте КАК ВТ_ОтсутствиеНаРабочемМесте
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_ОтсутствиеНаРабочемМесте.Сотрудник
	|			И ВТ_ИсходнаяПотребность.ДатаПотребности = ВТ_ОтсутствиеНаРабочемМесте.ДатаПотребности
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.ОтсутствиеНаРабочемМесте)
	|	И ВЫБОР
	|			КОГДА ВТ_ИсходнаяПотребность.ЭтоЗима
	|				ТОГДА ВТ_КонечнаяПотребность.ЭтоЗима
	|			ИНАЧЕ НЕ ВТ_КонечнаяПотребность.ЭтоЗима
	|		КОНЕЦ
	|	И ВТ_КонечнаяПотребность.ДатаПотребности < ВТ_ИсходнаяПотребность.ДатаПотребности
	|	И НЕ ВТ_ОтсутствиеНаРабочемМесте.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&Организация,
	|	ВТ_КонечнаяПотребность.Сотрудник,
	|	ВТ_КонечнаяПотребность.НормаВыдачи,
	|	ВТ_КонечнаяПотребность.НоменклатураНормы,
	|	ВТ_КонечнаяПотребность.ДатаПотребности,
	|	ВТ_КонечнаяПотребность.КоличествоПотребность,
	|	ВТ_КонечнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|			И ВТ_ИсходнаяПотребность.ПроцентИзноса = ВТ_КонечнаяПотребность.ПроцентИзноса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтсутствиеНаРабочемМесте КАК ВТ_ОтсутствиеНаРабочемМесте
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_ОтсутствиеНаРабочемМесте.Сотрудник
	|			И ВТ_ИсходнаяПотребность.ДатаПотребности = ВТ_ОтсутствиеНаРабочемМесте.ДатаПотребности
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ИсходнаяПотребность.ЭтоЗима
	|				ТОГДА ВТ_КонечнаяПотребность.ЭтоЗима
	|			ИНАЧЕ НЕ ВТ_КонечнаяПотребность.ЭтоЗима
	|		КОНЕЦ
	|	И ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.ОтсутствиеНаРабочемМесте)
	|	И ВТ_КонечнаяПотребность.ДатаПотребности < ВТ_ИсходнаяПотребность.ДатаПотребности
	|	И НЕ ВТ_ОтсутствиеНаРабочемМесте.Сотрудник ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник КАК Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ИсходнаяПотребность.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность КАК Количество,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса КАК ПроцентИзноса
	|ПОМЕСТИТЬ ВТ_ПотребностьРасход
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|ГДЕ
	|	ВТ_КонечнаяПотребность.ДатаПотребности ЕСТЬ NULL
	|	И НЕ(&ЧастичнаяВыдача = 3
	|				ИЛИ &ЧастичнаяВыдача = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Организация,
	|	ВТ_ИсходнаяПотребность.Сотрудник,
	|	ВТ_ИсходнаяПотребность.НормаВыдачи,
	|	ВТ_ИсходнаяПотребность.НоменклатураНормы,
	|	ВТ_ИсходнаяПотребность.ДатаПотребности,
	|	ВТ_ИсходнаяПотребность.КоличествоПотребность,
	|	ВТ_ИсходнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ПО ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник
	|			И ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи
	|			И ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы
	|			И ВТ_ИсходнаяПотребность.ДатаПотребности = ВТ_КонечнаяПотребность.ДатаПотребности
	|ГДЕ
	|	ВТ_КонечнаяПотребность.ДатаПотребности ЕСТЬ NULL
	|	И (&ЧастичнаяВыдача = 3
	|			ИЛИ &ЧастичнаяВыдача = 4)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ВТ_КонечнаяПотребность.Сотрудник КАК Сотрудник,
	|	ВТ_КонечнаяПотребность.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_КонечнаяПотребность.НоменклатураНормы КАК НоменклатураНормы,
	|	ВЫБОР
	|		КОГДА ВТ_КонечнаяПотребность.ЭтоЗима
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_КонечнаяПотребность.ДатаПотребности < ВТ_КонечнаяПотребность.ДатаНачалаЗимы
	|							И ВТ_КонечнаяПотребность.ДатаПотребности > ВТ_КонечнаяПотребность.ДатаОкончанияЗимы
	|						ТОГДА ВТ_КонечнаяПотребность.ДатаНачалаЗимы
	|					ИНАЧЕ ВТ_КонечнаяПотребность.ДатаПотребности
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_КонечнаяПотребность.ДатаПотребности
	|	КОНЕЦ КАК ДатаПотребности,
	|	ВТ_КонечнаяПотребность.КоличествоПотребность КАК Количество,
	|	ВТ_КонечнаяПотребность.ПроцентИзноса КАК ПроцентИзноса
	|ПОМЕСТИТЬ ВТ_ПотребностьПриход
	|ИЗ
	|	ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ПО (ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник)
	|			И (ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи)
	|			И (ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы)
	|ГДЕ
	|	ВТ_ИсходнаяПотребность.ДатаПотребности ЕСТЬ NULL
	|	И НЕ(&ЧастичнаяВыдача = 3
	|				ИЛИ &ЧастичнаяВыдача = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Организация,
	|	ВТ_КонечнаяПотребность.Сотрудник,
	|	ВТ_КонечнаяПотребность.НормаВыдачи,
	|	ВТ_КонечнаяПотребность.НоменклатураНормы,
	|	ВТ_КонечнаяПотребность.ДатаПотребности,
	|	ВТ_КонечнаяПотребность.КоличествоПотребность,
	|	ВТ_КонечнаяПотребность.ПроцентИзноса
	|ИЗ
	|	ВТ_КонечнаяПотребность КАК ВТ_КонечнаяПотребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходнаяПотребность КАК ВТ_ИсходнаяПотребность
	|		ПО (ВТ_ИсходнаяПотребность.Сотрудник = ВТ_КонечнаяПотребность.Сотрудник)
	|			И (ВТ_ИсходнаяПотребность.НормаВыдачи = ВТ_КонечнаяПотребность.НормаВыдачи)
	|			И (ВТ_ИсходнаяПотребность.НоменклатураНормы = ВТ_КонечнаяПотребность.НоменклатураНормы)
	|			И (ВТ_ИсходнаяПотребность.ДатаПотребности = ВТ_КонечнаяПотребность.ДатаПотребности)
	|ГДЕ
	|	ВТ_ИсходнаяПотребность.ДатаПотребности ЕСТЬ NULL
	|	И (&ЧастичнаяВыдача = 3
	|			ИЛИ &ЧастичнаяВыдача = 4)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИзмененнаяПотребность.ВидДвижения КАК ВидДвижения,
	|	ВТ_ИзмененнаяПотребность.Период КАК Период,
	|	ВТ_ИзмененнаяПотребность.Организация КАК Организация,
	|	ВТ_ИзмененнаяПотребность.Сотрудник КАК Сотрудник,
	|	ВТ_ИзмененнаяПотребность.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ИзмененнаяПотребность.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ИзмененнаяПотребность.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_ИзмененнаяПотребность.Количество КАК Количество,
	|	ВТ_ИзмененнаяПотребность.ПроцентИзноса КАК ПроцентИзноса
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ИзмененнаяПотребность КАК ВТ_ИзмененнаяПотребность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПотребностьРасход.ВидДвижения,
	|	ВТ_ПотребностьРасход.Период,
	|	ВТ_ПотребностьРасход.Организация,
	|	ВТ_ПотребностьРасход.Сотрудник,
	|	ВТ_ПотребностьРасход.НормаВыдачи,
	|	ВТ_ПотребностьРасход.НоменклатураНормы,
	|	ВТ_ПотребностьРасход.ДатаПотребности,
	|	ВТ_ПотребностьРасход.Количество,
	|	ВТ_ПотребностьРасход.ПроцентИзноса
	|ИЗ
	|	ВТ_ПотребностьРасход КАК ВТ_ПотребностьРасход
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПотребностьПриход.ВидДвижения,
	|	ВТ_ПотребностьПриход.Период,
	|	ВТ_ПотребностьПриход.Организация,
	|	ВТ_ПотребностьПриход.Сотрудник,
	|	ВТ_ПотребностьПриход.НормаВыдачи,
	|	ВТ_ПотребностьПриход.НоменклатураНормы,
	|	ВТ_ПотребностьПриход.ДатаПотребности,
	|	ВТ_ПотребностьПриход.Количество,
	|	ВТ_ПотребностьПриход.ПроцентИзноса
	|ИЗ
	|	ВТ_ПотребностьПриход КАК ВТ_ПотребностьПриход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ВидДвижения КАК ВидДвижения,
	|	ВТ_Результат.Период КАК Период,
	|	ВТ_Результат.Организация КАК Организация,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_Результат.Количество КАК Количество,
	|	ВТ_Результат.ПроцентИзноса КАК ПроцентИзноса
	|ПОМЕСТИТЬ ВТ_РезультатРасход
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	ВТ_Результат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ВидДвижения КАК ВидДвижения,
	|	ВТ_Результат.Период КАК Период,
	|	ВТ_Результат.Организация КАК Организация,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_Результат.Количество КАК Количество,
	|	ВТ_Результат.ПроцентИзноса КАК ПроцентИзноса
	|ПОМЕСТИТЬ ВТ_РезультатПриход
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	ВТ_Результат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РезультатРасход.Сотрудник КАК Сотрудник,
	|	ВТ_РезультатРасход.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_РезультатРасход.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_РезультатРасход.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_РезультатРасход.Количество КАК КоличествоРасход,
	|	0 КАК КоличествоПриход,
	|	ВТ_РезультатРасход.ПроцентИзноса КАК ПроцентИзноса
	|ПОМЕСТИТЬ ВТ_РезультатРасходПриход
	|ИЗ
	|	ВТ_РезультатРасход КАК ВТ_РезультатРасход
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_РезультатПриход.Сотрудник,
	|	ВТ_РезультатПриход.НормаВыдачи,
	|	ВТ_РезультатПриход.НоменклатураНормы,
	|	ВТ_РезультатПриход.ДатаПотребности,
	|	0,
	|	ВТ_РезультатПриход.Количество,
	|	ВТ_РезультатПриход.ПроцентИзноса
	|ИЗ
	|	ВТ_РезультатПриход КАК ВТ_РезультатПриход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РезультатРасходПриход.Сотрудник КАК Сотрудник,
	|	ВТ_РезультатРасходПриход.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_РезультатРасходПриход.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_РезультатРасходПриход.ДатаПотребности КАК ДатаПотребности,
	|	СУММА(ВТ_РезультатРасходПриход.КоличествоРасход) КАК КоличествоРасход,
	|	СУММА(ВТ_РезультатРасходПриход.КоличествоПриход) КАК КоличествоПриход,
	|	ВТ_РезультатРасходПриход.ПроцентИзноса КАК ПроцентИзноса
	|ПОМЕСТИТЬ ВТ_ГруппировкаРасходПриход
	|ИЗ
	|	ВТ_РезультатРасходПриход КАК ВТ_РезультатРасходПриход
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РезультатРасходПриход.Сотрудник,
	|	ВТ_РезультатРасходПриход.НормаВыдачи,
	|	ВТ_РезультатРасходПриход.НоменклатураНормы,
	|	ВТ_РезультатРасходПриход.ДатаПотребности,
	|	ВТ_РезультатРасходПриход.ПроцентИзноса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ГруппировкаРасходПриход.Сотрудник КАК Сотрудник,
	|	ВТ_ГруппировкаРасходПриход.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ГруппировкаРасходПриход.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ГруппировкаРасходПриход.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_ГруппировкаРасходПриход.КоличествоРасход КАК КоличествоРасход,
	|	ВТ_ГруппировкаРасходПриход.КоличествоПриход КАК КоличествоПриход,
	|	ВТ_ГруппировкаРасходПриход.ПроцентИзноса КАК ПроцентИзноса
	|ПОМЕСТИТЬ ВТ_ФильтрПоПустымОборотам
	|ИЗ
	|	ВТ_ГруппировкаРасходПриход КАК ВТ_ГруппировкаРасходПриход
	|ГДЕ
	|	НЕ ВТ_ГруппировкаРасходПриход.КоличествоРасход = ВТ_ГруппировкаРасходПриход.КоличествоПриход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Результат.ВидДвижения КАК ВидДвижения,
	|	ВТ_Результат.Период КАК Период,
	|	ВТ_Результат.Организация КАК Организация,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_Результат.ПроцентИзноса КАК ПроцентИзноса,
	|	ВТ_Результат.Количество КАК Количество
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФильтрПоПустымОборотам КАК ВТ_ФильтрПоПустымОборотам
	|		ПО ВТ_Результат.Сотрудник = ВТ_ФильтрПоПустымОборотам.Сотрудник
	|			И ВТ_Результат.НормаВыдачи = ВТ_ФильтрПоПустымОборотам.НормаВыдачи
	|			И ВТ_Результат.НоменклатураНормы = ВТ_ФильтрПоПустымОборотам.НоменклатураНормы
	|			И ВТ_Результат.ДатаПотребности = ВТ_ФильтрПоПустымОборотам.ДатаПотребности
	|			И ВТ_Результат.ПроцентИзноса = ВТ_ФильтрПоПустымОборотам.ПроцентИзноса
	|ГДЕ
	|	НЕ ВТ_ФильтрПоПустымОборотам.Сотрудник ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ИсходнаяПотребность",	ИсходнаяПотребностьВыдачи);
	Запрос.УстановитьПараметр("КонечнаяПотребность",	КонечнаяПотребностьВыдачи);
	Запрос.УстановитьПараметр("Период",					Документ.Дата);
	Запрос.УстановитьПараметр("Организация",			Документ.Организация);
	Запрос.УстановитьПараметр("ЧастичнаяВыдача",		Документ.Организация.ЧастичнаяВыдача);
	Запрос.УстановитьПараметр("Документ",				Документ);
	Запрос.УстановитьПараметр("ПериодАнализа",			ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Документ));
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Свернуть("ВидДвижения, Период, Организация, Сотрудник, НормаВыдачи, НоменклатураНормы, ДатаПотребности, ПроцентИзноса","Количество");
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

// функция возвращает таблицу занятых рабочих мест вида
// | Сотрудник | Подразделение | Должность | Рабочее место | Условие | Это зима | Количество ставок |
// 
// параметры:
// МассивСотрудников 	- массив сотрудников для анализа занятых рабочих мест
// Организация 			- организация для анализа занятых рабочих мест
// ДатаАнализа 			- граница (дата) расчета занятых рабочих мест
// ТаблицаДокумента 	- таблица документа - регистратора
//
Функция ПолучитьТаблицуЗанятыхРабочихМестСУсловиями(МассивСотрудников,Организация,ДатаАнализа,ТаблицаДокумента = Неопределено,ДвиженияПоДоступнымУсловиямРаботы = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник,
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто,
	|	СУММА(ЗанятыеРабочиеМестаОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ЗанятыеРабочиеМеста
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(
	|			&ДатаАнализа,
	|			Организация = &Организация
	|				И Сотрудник В (&МассивСотрудников)) КАК ЗанятыеРабочиеМестаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник,
	|	ЗанятыеРабочиеМестаОстатки.Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Подразделение КАК Подразделение,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Должность КАК Должность,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Условие КАК Условие,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Использовать КАК Использовать
	|ПОМЕСТИТЬ ВТ_ДоступныеУсловияРаботы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(ДоступныеУсловияРаботыСотрудникаСрезПоследних.Период) КАК Период,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Подразделение КАК Подразделение,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Должность КАК Должность,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.РабочееМесто КАК РабочееМесто,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Условие КАК Условие
	|	ИЗ
	|		РегистрСведений.ДоступныеУсловияРаботыСотрудника.СрезПоследних(&ДатаАнализа, Сотрудник В (&МассивСотрудников)) КАК ДоступныеУсловияРаботыСотрудникаСрезПоследних
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Подразделение,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Должность,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.РабочееМесто,
	|		ДоступныеУсловияРаботыСотрудникаСрезПоследних.Условие) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеУсловияРаботыСотрудника.СрезПоследних(&ДатаАнализа, Сотрудник В (&МассивСотрудников)) КАК ДоступныеУсловияРаботыСотрудникаСрезПоследних
	|		ПО ВложенныйЗапрос.Сотрудник = ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник
	|			И ВложенныйЗапрос.Период = ДоступныеУсловияРаботыСотрудникаСрезПоследних.Период
	|			И ВложенныйЗапрос.Подразделение = ДоступныеУсловияРаботыСотрудникаСрезПоследних.Подразделение
	|			И ВложенныйЗапрос.Должность = ДоступныеУсловияРаботыСотрудникаСрезПоследних.Должность
	|			И ВложенныйЗапрос.РабочееМесто = ДоступныеУсловияРаботыСотрудникаСрезПоследних.РабочееМесто
	|			И ВложенныйЗапрос.Условие = ДоступныеУсловияРаботыСотрудникаСрезПоследних.Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияПоДоступнымУсловиямРаботы.Сотрудник КАК Сотрудник,
	|	ДвиженияПоДоступнымУсловиямРаботы.Подразделение КАК Подразделение,
	|	ДвиженияПоДоступнымУсловиямРаботы.Должность КАК Должность,
	|	ДвиженияПоДоступнымУсловиямРаботы.РабочееМесто КАК РабочееМесто,
	|	ДвиженияПоДоступнымУсловиямРаботы.Условие КАК Условие,
	|	ДвиженияПоДоступнымУсловиямРаботы.Использовать КАК Использовать
	|ПОМЕСТИТЬ ВТ_ДвиженияПоДоступнымУсловиямРаботы
	|ИЗ
	|	&ДвиженияПоДоступнымУсловиямРаботы КАК ДвиженияПоДоступнымУсловиямРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВТ_ДвиженияПоДоступнымУсловиямРаботы.Сотрудник, ВТ_ДоступныеУсловияРаботы.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ВТ_ДвиженияПоДоступнымУсловиямРаботы.Подразделение, ВТ_ДоступныеУсловияРаботы.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(ВТ_ДвиженияПоДоступнымУсловиямРаботы.Должность, ВТ_ДоступныеУсловияРаботы.Должность) КАК Должность,
	|	ЕСТЬNULL(ВТ_ДвиженияПоДоступнымУсловиямРаботы.РабочееМесто, ВТ_ДоступныеУсловияРаботы.РабочееМесто) КАК РабочееМесто,
	|	ЕСТЬNULL(ВТ_ДвиженияПоДоступнымУсловиямРаботы.Условие, ВТ_ДоступныеУсловияРаботы.Условие) КАК Условие,
	|	ВЫБОР
	|		КОГДА ВТ_ДоступныеУсловияРаботы.Использовать ЕСТЬ NULL
	|			ТОГДА ВТ_ДвиженияПоДоступнымУсловиямРаботы.Использовать
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ДоступныеУсловияРаботы.Использовать = ВТ_ДвиженияПоДоступнымУсловиямРаботы.Использовать
	|					ТОГДА ВТ_ДоступныеУсловияРаботы.Использовать
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_ДвиженияПоДоступнымУсловиямРаботы.Использовать ЕСТЬ NULL
	|							ТОГДА ВТ_ДоступныеУсловияРаботы.Использовать
	|						ИНАЧЕ ВТ_ДвиженияПоДоступнымУсловиямРаботы.Использовать
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Использовать
	|ПОМЕСТИТЬ ВТ_ВсеДоступныеУсловияРаботы
	|ИЗ
	|	ВТ_ДоступныеУсловияРаботы КАК ВТ_ДоступныеУсловияРаботы
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДвиженияПоДоступнымУсловиямРаботы КАК ВТ_ДвиженияПоДоступнымУсловиямРаботы
	|		ПО ВТ_ДоступныеУсловияРаботы.Сотрудник = ВТ_ДвиженияПоДоступнымУсловиямРаботы.Сотрудник
	|			И ВТ_ДоступныеУсловияРаботы.Подразделение = ВТ_ДвиженияПоДоступнымУсловиямРаботы.Подразделение
	|			И ВТ_ДоступныеУсловияРаботы.Должность = ВТ_ДвиженияПоДоступнымУсловиямРаботы.Должность
	|			И ВТ_ДоступныеУсловияРаботы.РабочееМесто = ВТ_ДвиженияПоДоступнымУсловиямРаботы.РабочееМесто
	|			И ВТ_ДоступныеУсловияРаботы.Условие = ВТ_ДвиженияПоДоступнымУсловиямРаботы.Условие
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ДоступныеУсловияРаботы.Использовать ЕСТЬ NULL
	|				ТОГДА ВТ_ДвиженияПоДоступнымУсловиямРаботы.Использовать
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВТ_ДоступныеУсловияРаботы.Использовать = ВТ_ДвиженияПоДоступнымУсловиямРаботы.Использовать
	|						ТОГДА ВТ_ДоступныеУсловияРаботы.Использовать
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВТ_ДвиженияПоДоступнымУсловиямРаботы.Использовать ЕСТЬ NULL
	|								ТОГДА ВТ_ДоступныеУсловияРаботы.Использовать
	|							ИНАЧЕ ВТ_ДвиженияПоДоступнымУсловиямРаботы.Использовать
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Подразделение КАК Подразделение,
	|	ТаблицаДокумента.Должность КАК Должность,
	|	ТаблицаДокумента.РабочееМесто КАК РабочееМесто,
	|	ТаблицаДокумента.УсловиеНормы КАК УсловиеНормы,
	|	ТаблицаДокумента.Использовать КАК Использовать
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ЗанятыеРабочиеМеста.Сотрудник КАК Сотрудник,
	|	ВТ_ЗанятыеРабочиеМеста.Подразделение КАК Подразделение,
	|	ВТ_ЗанятыеРабочиеМеста.Должность КАК Должность,
	|	ВТ_ЗанятыеРабочиеМеста.РабочееМесто КАК РабочееМесто,
	|	ВТ_ТаблицаДокумента.УсловиеНормы КАК УсловиеНормы
	|ПОМЕСТИТЬ ВТ_ТаблицаДокументаПоСотрудникам
	|ИЗ
	|	ВТ_ЗанятыеРабочиеМеста КАК ВТ_ЗанятыеРабочиеМеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
	|		ПО ВТ_ЗанятыеРабочиеМеста.Подразделение = ВТ_ТаблицаДокумента.Подразделение
	|			И ВТ_ЗанятыеРабочиеМеста.Должность = ВТ_ТаблицаДокумента.Должность
	|			И ВТ_ЗанятыеРабочиеМеста.РабочееМесто = ВТ_ТаблицаДокумента.РабочееМесто
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ ВТ_ТаблицаДокумента.УсловиеНормы ЕСТЬ NULL
	|				ТОГДА ВТ_ТаблицаДокумента.Использовать
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокументаПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДокументаПоСотрудникам.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаДокументаПоСотрудникам.Должность КАК Должность,
	|	ВТ_ТаблицаДокументаПоСотрудникам.РабочееМесто КАК РабочееМесто,
	|	ВТ_ТаблицаДокументаПоСотрудникам.УсловиеНормы КАК УсловиеНормы
	|ПОМЕСТИТЬ ВТ_ТаблицаДокументаПоСотрудникамСОтсечкойПоУсловиям
	|ИЗ
	|	ВТ_ТаблицаДокументаПоСотрудникам КАК ВТ_ТаблицаДокументаПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеДоступныеУсловияРаботы КАК ВТ_ВсеДоступныеУсловияРаботы
	|		ПО ВТ_ТаблицаДокументаПоСотрудникам.Сотрудник = ВТ_ВсеДоступныеУсловияРаботы.Сотрудник
	|			И ВТ_ТаблицаДокументаПоСотрудникам.Подразделение = ВТ_ВсеДоступныеУсловияРаботы.Подразделение
	|			И ВТ_ТаблицаДокументаПоСотрудникам.Должность = ВТ_ВсеДоступныеУсловияРаботы.Должность
	|			И ВТ_ТаблицаДокументаПоСотрудникам.РабочееМесто = ВТ_ВсеДоступныеУсловияРаботы.РабочееМесто
	|			И ВТ_ТаблицаДокументаПоСотрудникам.УсловиеНормы = ВТ_ВсеДоступныеУсловияРаботы.Условие
	|ГДЕ
	|	НЕ ВТ_ВсеДоступныеУсловияРаботы.Условие ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДоступныеУсловияРаботы.Сотрудник КАК Сотрудник,
	|	ВТ_ДоступныеУсловияРаботы.Подразделение КАК Подразделение,
	|	ВТ_ДоступныеУсловияРаботы.Должность КАК Должность,
	|	ВТ_ДоступныеУсловияРаботы.РабочееМесто КАК РабочееМесто,
	|	ВТ_ДоступныеУсловияРаботы.Условие КАК Условие
	|ПОМЕСТИТЬ ВТ_ВсеДоступныеУсловия
	|ИЗ
	|	ВТ_ДоступныеУсловияРаботы КАК ВТ_ДоступныеУсловияРаботы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаДокументаПоСотрудникамСОтсечкойПоУсловиям.Сотрудник,
	|	ВТ_ТаблицаДокументаПоСотрудникамСОтсечкойПоУсловиям.Подразделение,
	|	ВТ_ТаблицаДокументаПоСотрудникамСОтсечкойПоУсловиям.Должность,
	|	ВТ_ТаблицаДокументаПоСотрудникамСОтсечкойПоУсловиям.РабочееМесто,
	|	ВТ_ТаблицаДокументаПоСотрудникамСОтсечкойПоУсловиям.УсловиеНормы
	|ИЗ
	|	ВТ_ТаблицаДокументаПоСотрудникамСОтсечкойПоУсловиям КАК ВТ_ТаблицаДокументаПоСотрудникамСОтсечкойПоУсловиям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗанятыеРабочиеМеста.Сотрудник КАК Сотрудник,
	|	ВТ_ЗанятыеРабочиеМеста.Подразделение КАК Подразделение,
	|	ВТ_ЗанятыеРабочиеМеста.Должность КАК Должность,
	|	ВТ_ЗанятыеРабочиеМеста.РабочееМесто КАК РабочееМесто,
	|	ВТ_ВсеДоступныеУсловияРаботы.Условие КАК Условие,
	|	ВЫБОР
	|		КОГДА ВТ_ВсеДоступныеУсловияРаботы.Условие ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА УсловияНорм.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.ЗимойДополнительно)
	|							ИЛИ УсловияНорм.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.ПриУсловииЗимойДополнительно)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ВсеДоступныеУсловияРаботы.Условие.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.ЗимойДополнительно)
	|						ИЛИ ВТ_ВсеДоступныеУсловияРаботы.Условие.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.ПриУсловииЗимойДополнительно)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ЭтоЗима,
	|	ВТ_ЗанятыеРабочиеМеста.КоличествоОстаток КАК КоличествоСтавок
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ЗанятыеРабочиеМеста КАК ВТ_ЗанятыеРабочиеМеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеДоступныеУсловияРаботы КАК ВТ_ВсеДоступныеУсловияРаботы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УсловияНорм КАК УсловияНорм
	|			ПО ВТ_ВсеДоступныеУсловияРаботы.Условие = УсловияНорм.Ссылка
	|		ПО ВТ_ЗанятыеРабочиеМеста.Сотрудник = ВТ_ВсеДоступныеУсловияРаботы.Сотрудник
	|			И ВТ_ЗанятыеРабочиеМеста.Подразделение = ВТ_ВсеДоступныеУсловияРаботы.Подразделение
	|			И ВТ_ЗанятыеРабочиеМеста.Должность = ВТ_ВсеДоступныеУсловияРаботы.Должность
	|			И ВТ_ЗанятыеРабочиеМеста.РабочееМесто = ВТ_ВсеДоступныеУсловияРаботы.РабочееМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.Должность КАК Должность,
	|	ВТ_Результат.РабочееМесто КАК РабочееМесто,
	|	ВТ_Результат.Условие КАК Условие,
	|	ВТ_Результат.ЭтоЗима КАК ЭтоЗима,
	|	ВТ_Результат.КоличествоСтавок КАК КоличествоСтавок
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	НЕ ВТ_Результат.Условие ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Подразделение,
	|	Должность,
	|	РабочееМесто,
	|	Условие";
	
	Запрос.УстановитьПараметр("ДатаАнализа",		ДатаАнализа);
	Запрос.УстановитьПараметр("МассивСотрудников",	МассивСотрудников);
	Запрос.УстановитьПараметр("Организация",		Организация);
	
	Если ТаблицаДокумента = Неопределено Тогда //формируем пустую таблицу
		ТаблицаДокумента = Новый ТаблицаЗначений;
		ТаблицаДокумента.Колонки.Добавить("Подразделение",	Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
		ТаблицаДокумента.Колонки.Добавить("Должность",		Новый ОписаниеТипов("СправочникСсылка.ДолжностиИПрофессии"));
		ТаблицаДокумента.Колонки.Добавить("РабочееМесто",	Новый ОписаниеТипов("СправочникСсылка.РабочиеМестаАСТБ"));
		ТаблицаДокумента.Колонки.Добавить("УсловиеНормы",	Новый ОписаниеТипов("СправочникСсылка.УсловияНорм"));
		ТаблицаДокумента.Колонки.Добавить("Использовать",	Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Запрос.УстановитьПараметр("ТаблицаДокумента",	ТаблицаДокумента);
	
	Если ДвиженияПоДоступнымУсловиямРаботы = Неопределено Тогда //формируем пустую таблицу
		
		ДвиженияПоДоступнымУсловиямРаботы = Новый ТаблицаЗначений;
		ДвиженияПоДоступнымУсловиямРаботы.Колонки.Добавить("Сотрудник",		Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ДвиженияПоДоступнымУсловиямРаботы.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
		ДвиженияПоДоступнымУсловиямРаботы.Колонки.Добавить("Должность",		Новый ОписаниеТипов("СправочникСсылка.ДолжностиИПрофессии"));
		ДвиженияПоДоступнымУсловиямРаботы.Колонки.Добавить("РабочееМесто",  Новый ОписаниеТипов("СправочникСсылка.РабочиеМестаАСТБ"));
		ДвиженияПоДоступнымУсловиямРаботы.Колонки.Добавить("Условие",		Новый ОписаниеТипов("СправочникСсылка.УсловияНорм"));
		ДвиженияПоДоступнымУсловиямРаботы.Колонки.Добавить("Использовать",	Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ДвиженияПоДоступнымУсловиямРаботы",	ДвиженияПоДоступнымУсловиямРаботы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// функция возвращает таблицу установленных норм вида:
// | Подразделение | Должность | Рабочее место | Условие нормы | Норма выдачи | Номенклатура нормы | Тип периода | Количество периодов | Количество в периоде |
// 
// параметры:
// Организация - организация для анализа установленных норм
// ДатаАнализа - граница (дата) для анализа установленных норм
// ТолькоДляПотребности:
//     - ИСТИНА       - учитываем нормы с видом расчета "Период" и остальные с установленным флажком "УчитыватьВПотребности"
//     - ЛОЖЬ   	  - учитываем нормы не с видом расчета "Период" со снятым флажком "УчитыватьВПотребности"
//     - НЕОПРЕДЕЛЕНО - учитываем все нормы 
//
Функция ПолучитьТаблицуУстановленныхНорм(Организация,ДатаАнализа, МассивПодразделений = Неопределено, МассивДолжностей = Неопределено, ТолькоДляПотребности = Истина, МассивНоменклатурыНорм = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Подразделение КАК Подразделение,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Должность КАК Должность,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.УсловиеНормы КАК УсловиеНормы,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.НормаВыдачи КАК НормаВыдачи
	|ПОМЕСТИТЬ ВТ_УстановленныеНормы
	|ИЗ
	|	РегистрСведений.УстановленныеНормыВыдачиСИЗ.СрезПоследних(
	|			&ДатаАнализа,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Подразделение В (&МассивПодразделений)
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПРофессии.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Должность В (&МассивДолжностей)
	|				КОНЕЦ) КАК УстановленныеНормыВыдачиСИЗСрезПоследних
	|ГДЕ
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Использовать
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	Должность,
	|	РабочееМесто,
	|	УсловиеНормы,
	|	НормаВыдачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_УстановленныеНормы.Подразделение КАК Подразделение,
	|	ВТ_УстановленныеНормы.Должность КАК Должность,
	|	ВТ_УстановленныеНормы.РабочееМесто КАК РабочееМесто,
	|	ВТ_УстановленныеНормы.УсловиеНормы КАК УсловиеНормы,
	|	ВТ_УстановленныеНормы.НормаВыдачи КАК НормаВыдачи,
	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы КАК НоменклатураНормы,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.ТипПериода КАК ТипПериода,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов КАК КоличествоПериодов,
	|	ЕСТЬNULL(НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоВПериоде, 1) КАК КоличествоВПериоде,
	|	НормыВыдачиСИЗСоставНормы.УчитыватьВПотребности КАК УчитыватьВПотребности
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_УстановленныеНормы КАК ВТ_УстановленныеНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|		ПО ВТ_УстановленныеНормы.НормаВыдачи = НормыВыдачиСИЗСоставНормы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.Должность КАК Должность,
	|	ВТ_Результат.РабочееМесто КАК РабочееМесто,
	|	ВТ_Результат.УсловиеНормы КАК УсловиеНормы,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.ТипПериода КАК ТипПериода,
	|	ВТ_Результат.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_Результат.КоличествоВПериоде КАК КоличествоВПериоде
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТолькоДляПотребности = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_Результат.НормаВыдачи.ВидРасчета = ЗНАЧЕНИЕ(Перечисление.ВидыРасчетаНорм.Период)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ВТ_Результат.УчитыватьВПотребности
	|					КОНЕЦ
	|			КОГДА &ТолькоДляПотребности = ЛОЖЬ
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_Результат.НормаВыдачи.ВидРасчета = ЗНАЧЕНИЕ(Перечисление.ВидыРасчетаНорм.Период)
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ НЕ ВТ_Результат.УчитыватьВПотребности
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (&НеИспользоватьФильтрПоНоменклатуреНорм
	|			ИЛИ ВТ_Результат.НоменклатураНормы В (&МассивНоменлатурыНорм))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	Должность,
	|	РабочееМесто,
	|	УсловиеНормы,
	|	НормаВыдачи,
	|	НоменклатураНормы";
	
	Запрос.УстановитьПараметр("ДатаАнализа",			ДатаАнализа);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ТолькоДляПотребности",	ТолькоДляПотребности);
	Запрос.УстановитьПараметр("МассивПодразделений",	МассивПодразделений);
	Запрос.УстановитьПараметр("МассивДолжностей",		МассивДолжностей);
	Запрос.УстановитьПараметр("НеИспользоватьФильтрПоНоменклатуреНорм", МассивНоменклатурыНорм = НЕОПРЕДЕЛЕНО);
	Запрос.УстановитьПараметр("МассивНоменлатурыНорм",	МассивНоменклатурыНорм);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// функция возвращает таблицу подобранных норм вида:
// | Сотрудник | Подразделение | Это зима | Норма выдачи | Номенклатура нормы | Тип периода | Количество периодов | Количество в периоде |
// 
// параметры:
// ТаблицаЗанятыхРМ 		- таблица занятых рабочих мест
// ТаблицаУстановленныхНорм - таблица установленных норм
// Организация 				- организация для анализа установленных норм
// ДатаАнализа 				- граница (дата) для анализа установленных норм
//
Функция ПодобратьНормы(ТаблицаЗанятыхРМ,ТаблицаУстановленныхНорм,Организация,ДатаАнализа,СоставКолонок = "") Экспорт
	
	ТаблицаПодобранныхНорм = Новый ТаблицаЗначений;
	ТаблицаПодобранныхНорм.Колонки.Добавить("Сотрудник",			Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПодобранныхНорм.Колонки.Добавить("Подразделение",		Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТаблицаПодобранныхНорм.Колонки.Добавить("Должность",			Новый ОписаниеТипов("СправочникСсылка.ДолжностиИПрофессии"));
	ТаблицаПодобранныхНорм.Колонки.Добавить("УсловиеНормы",			Новый ОписаниеТипов("СправочникСсылка.УсловияНорм"));
	ТаблицаПодобранныхНорм.Колонки.Добавить("ЭтоЗима",				Новый ОписаниеТипов("Булево"));
	ТаблицаПодобранныхНорм.Колонки.Добавить("НормаВыдачи",			Новый ОписаниеТипов("СправочникСсылка.НормыВыдачиСИЗ"));
	ТаблицаПодобранныхНорм.Колонки.Добавить("НоменклатураНормы",	Новый ОписаниеТипов("СправочникСсылка.НоменклатураНормОрганизации"));
	ТаблицаПодобранныхНорм.Колонки.Добавить("ТипПериода",			Новый ОписаниеТипов("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
	ТаблицаПодобранныхНорм.Колонки.Добавить("КоличествоПериодов",	Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПодобранныхНорм.Колонки.Добавить("КоличествоВПериоде",	Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПодобранныхНорм.Колонки.Добавить("Использовать",			Новый ОписаниеТипов("Булево"));
	
	Если ТаблицаУстановленныхНорм.Колонки.Найти("Использовать") = Неопределено Тогда
		ТаблицаУстановленныхНорм.Колонки.Добавить("Использовать",Новый ОписаниеТипов("Булево"));
		ТаблицаУстановленныхНорм.ЗаполнитьЗначения(ИСТИНА,"Использовать");
	КонецЕсли;
	
	ИспользоватьРабочиеМеста = Организация.ИспользоватьРабочиеМеста;
	
	Для Каждого СтрокаТаблицыЗанятыхРМ Из ТаблицаЗанятыхРМ Цикл
		
		//1. поиск по подразделению из занятых рабочих мест
		Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Условие) Тогда
			СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто, УсловиеНормы", 
			СтрокаТаблицыЗанятыхРМ.Подразделение, СтрокаТаблицыЗанятыхРМ.Должность, СтрокаТаблицыЗанятыхРМ.РабочееМесто, СтрокаТаблицыЗанятыхРМ.Условие);
		Иначе
			СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто", 
			СтрокаТаблицыЗанятыхРМ.Подразделение, СтрокаТаблицыЗанятыхРМ.Должность, СтрокаТаблицыЗанятыхРМ.РабочееМесто);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаУстановленныхНорм.НайтиСтроки(СтруктураПоиска);
		
		НормаПоПодразделениюНайдена = Ложь;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НоваяСтрока 					= ТаблицаПодобранныхНорм.Добавить();
			НоваяСтрока.Сотрудник 			= СтрокаТаблицыЗанятыхРМ.Сотрудник;
			НоваяСтрока.Подразделение 		= СтрокаТаблицыЗанятыхРМ.Подразделение;
			НоваяСтрока.Должность 			= СтрокаТаблицыЗанятыхРМ.Должность;
			НоваяСтрока.УсловиеНормы		= СтрокаТаблицыЗанятыхРМ.Условие;
			Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Условие) Тогда
				НоваяСтрока.ЭтоЗима 		= СтрокаТаблицыЗанятыхРМ.ЭтоЗима;
			Иначе
				Если НайденнаяСтрока.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ЗимойДополнительно 
					ИЛИ НайденнаяСтрока.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ПриУсловииЗимойДополнительно Тогда
					НоваяСтрока.ЭтоЗима 	= Истина;
				Иначе
					НоваяСтрока.ЭтоЗима 	= Ложь;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.НормаВыдачи 		= НайденнаяСтрока.НормаВыдачи;
			НоваяСтрока.НоменклатураНормы 	= НайденнаяСтрока.НоменклатураНормы;
			НоваяСтрока.ТипПериода 			= НайденнаяСтрока.ТипПериода;
			НоваяСтрока.КоличествоПериодов 	= НайденнаяСтрока.КоличествоПериодов;
			НоваяСтрока.КоличествоВПериоде 	= НайденнаяСтрока.КоличествоВПериоде;
			НоваяСтрока.Использовать 		= НайденнаяСтрока.Использовать;
			
			НормаПоПодразделениюНайдена = Истина;
			
		КонецЦикла;
		
		//1.1 поиск по подразделению из занятых рабочих мест по пустому значению рабочего места
		Если ИспользоватьРабочиеМеста Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Условие) Тогда
				СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто, УсловиеНормы", 
				СтрокаТаблицыЗанятыхРМ.Подразделение, СтрокаТаблицыЗанятыхРМ.Должность, Справочники.РабочиеМестаАСТБ.ПустаяСсылка(), СтрокаТаблицыЗанятыхРМ.Условие);
			Иначе
				СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто", 
				СтрокаТаблицыЗанятыхРМ.Подразделение, СтрокаТаблицыЗанятыхРМ.Должность, Справочники.РабочиеМестаАСТБ.ПустаяСсылка());
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаУстановленныхНорм.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				НоваяСтрока 					= ТаблицаПодобранныхНорм.Добавить();
				НоваяСтрока.Сотрудник 			= СтрокаТаблицыЗанятыхРМ.Сотрудник;
				НоваяСтрока.Подразделение 		= СтрокаТаблицыЗанятыхРМ.Подразделение;
				НоваяСтрока.Должность 			= СтрокаТаблицыЗанятыхРМ.Должность;
				НоваяСтрока.УсловиеНормы		= СтрокаТаблицыЗанятыхРМ.Условие;
				Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Условие) Тогда
					НоваяСтрока.ЭтоЗима 		= СтрокаТаблицыЗанятыхРМ.ЭтоЗима;
				Иначе
					Если НайденнаяСтрока.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ЗимойДополнительно 
						ИЛИ НайденнаяСтрока.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ПриУсловииЗимойДополнительно Тогда
						НоваяСтрока.ЭтоЗима 	= Истина;
					Иначе
						НоваяСтрока.ЭтоЗима 	= Ложь;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока.НормаВыдачи 		= НайденнаяСтрока.НормаВыдачи;
				НоваяСтрока.НоменклатураНормы 	= НайденнаяСтрока.НоменклатураНормы;
				НоваяСтрока.ТипПериода 			= НайденнаяСтрока.ТипПериода;
				НоваяСтрока.КоличествоПериодов 	= НайденнаяСтрока.КоличествоПериодов;
				НоваяСтрока.КоличествоВПериоде 	= НайденнаяСтрока.КоличествоВПериоде;
				НоваяСтрока.Использовать 		= НайденнаяСтрока.Использовать;
				
			КонецЦикла;
			
		КонецЕсли;
		
		//*****отключено 17.08.2020******
		
		//2. поиск по иерархии снизу вверх
		//Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Подразделение.Родитель) И НЕ НормаПоПодразделениюНайдена Тогда
		//	
		//	НормаНайдена = ПодобратьНормуРекурсивно(СтрокаТаблицыЗанятыхРМ,СтрокаТаблицыЗанятыхРМ.Подразделение.Родитель,ТаблицаПодобранныхНорм,ТаблицаУстановленныхНорм,ИспользоватьРабочиеМеста,НормаПоПодразделениюНайдена);
		//	
		//	Если НормаНайдена Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		//3. поиск по пустому подразделению из занятых рабочих мест
		Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Условие) Тогда
			СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто, УсловиеНормы", 
			Справочники.Подразделения.ПустаяСсылка(), СтрокаТаблицыЗанятыхРМ.Должность, СтрокаТаблицыЗанятыхРМ.РабочееМесто, СтрокаТаблицыЗанятыхРМ.Условие);
		Иначе
			СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто", 
			Справочники.Подразделения.ПустаяСсылка(), СтрокаТаблицыЗанятыхРМ.Должность, СтрокаТаблицыЗанятыхРМ.РабочееМесто);
		КонецЕсли;									
		
		НайденныеСтроки = ТаблицаУстановленныхНорм.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НоваяСтрока 					= ТаблицаПодобранныхНорм.Добавить();
			НоваяСтрока.Сотрудник 			= СтрокаТаблицыЗанятыхРМ.Сотрудник;
			НоваяСтрока.Подразделение 		= СтрокаТаблицыЗанятыхРМ.Подразделение;
			НоваяСтрока.Должность 			= СтрокаТаблицыЗанятыхРМ.Должность;
			НоваяСтрока.УсловиеНормы		= СтрокаТаблицыЗанятыхРМ.Условие;
			Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Условие) Тогда
				НоваяСтрока.ЭтоЗима 		= СтрокаТаблицыЗанятыхРМ.ЭтоЗима;
			Иначе
				Если НайденнаяСтрока.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ЗимойДополнительно 
					ИЛИ НайденнаяСтрока.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ПриУсловииЗимойДополнительно Тогда
					НоваяСтрока.ЭтоЗима 	= Истина;
				Иначе
					НоваяСтрока.ЭтоЗима 	= Ложь;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.НормаВыдачи 		= НайденнаяСтрока.НормаВыдачи;
			НоваяСтрока.НоменклатураНормы 	= НайденнаяСтрока.НоменклатураНормы;
			НоваяСтрока.ТипПериода 			= НайденнаяСтрока.ТипПериода;
			НоваяСтрока.КоличествоПериодов 	= НайденнаяСтрока.КоличествоПериодов;
			НоваяСтрока.КоличествоВПериоде 	= НайденнаяСтрока.КоличествоВПериоде;
			НоваяСтрока.Использовать 		= НайденнаяСтрока.Использовать;
			
		КонецЦикла;
		
		//3.1 поиск по пустому подразделению из занятых рабочих мест по пустому значению рабочего места
		Если ИспользоватьРабочиеМеста Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Условие) Тогда
				СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто, УсловиеНормы", 
				Справочники.Подразделения.ПустаяСсылка(), СтрокаТаблицыЗанятыхРМ.Должность, Справочники.РабочиеМестаАСТБ.ПустаяСсылка(), СтрокаТаблицыЗанятыхРМ.Условие);
			Иначе
				СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто", 
				Справочники.Подразделения.ПустаяСсылка(), СтрокаТаблицыЗанятыхРМ.Должность, Справочники.РабочиеМестаАСТБ.ПустаяСсылка());
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаУстановленныхНорм.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				НоваяСтрока 					= ТаблицаПодобранныхНорм.Добавить();
				НоваяСтрока.Сотрудник 			= СтрокаТаблицыЗанятыхРМ.Сотрудник;
				НоваяСтрока.Подразделение 		= СтрокаТаблицыЗанятыхРМ.Подразделение;
				НоваяСтрока.Должность 			= СтрокаТаблицыЗанятыхРМ.Должность;
				НоваяСтрока.УсловиеНормы		= СтрокаТаблицыЗанятыхРМ.Условие;
				Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Условие) Тогда
					НоваяСтрока.ЭтоЗима 		= СтрокаТаблицыЗанятыхРМ.ЭтоЗима;
				Иначе
					Если НайденнаяСтрока.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ЗимойДополнительно 
						ИЛИ НайденнаяСтрока.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ПриУсловииЗимойДополнительно Тогда
						НоваяСтрока.ЭтоЗима 	= Истина;
					Иначе
						НоваяСтрока.ЭтоЗима 	= Ложь;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока.НормаВыдачи 		= НайденнаяСтрока.НормаВыдачи;
				НоваяСтрока.НоменклатураНормы 	= НайденнаяСтрока.НоменклатураНормы;
				НоваяСтрока.ТипПериода 			= НайденнаяСтрока.ТипПериода;
				НоваяСтрока.КоличествоПериодов 	= НайденнаяСтрока.КоличествоПериодов;
				НоваяСтрока.КоличествоВПериоде 	= НайденнаяСтрока.КоличествоВПериоде;
				НоваяСтрока.Использовать 		= НайденнаяСтрока.Использовать;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СоставКолонок = "" Тогда //по-умолчанию
		
		ТаблицаПодобранныхНорм.Свернуть("Сотрудник,Подразделение,ЭтоЗима,НормаВыдачи,НоменклатураНормы,ТипПериода,КоличествоПериодов,КоличествоВПериоде,Использовать");
		
		Возврат ТаблицаПодобранныхНорм;
		
	Иначе
		
		ТаблицаПодобранныхНорм.Свернуть(СоставКолонок);
		
		Возврат ТаблицаПодобранныхНорм.Скопировать(Новый Структура("Использовать",ИСТИНА));
		
	КонецЕсли;
	
КонецФункции

// функция выполняет подбор норм с учетом иерархии подразделений
//
Функция ПодобратьНормуРекурсивно(СтрокаТаблицыЗанятыхРМ,ГоловноеПодразделение,ТаблицаПодобранныхНорм,ТаблицаУстановленныхНорм,ИспользоватьРабочиеМеста,НормаПоПодразделениюНайдена)
	
	//поиск по подразделению из занятых рабочих мест
	Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Условие) Тогда
		СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто, УсловиеНормы", 
		ГоловноеПодразделение, СтрокаТаблицыЗанятыхРМ.Должность, СтрокаТаблицыЗанятыхРМ.РабочееМесто, СтрокаТаблицыЗанятыхРМ.Условие);
	Иначе
		СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто", 
		ГоловноеПодразделение, СтрокаТаблицыЗанятыхРМ.Должность, СтрокаТаблицыЗанятыхРМ.РабочееМесто);
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаУстановленныхНорм.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		НоваяСтрока 					= ТаблицаПодобранныхНорм.Добавить();
		НоваяСтрока.Сотрудник 			= СтрокаТаблицыЗанятыхРМ.Сотрудник;
		НоваяСтрока.Подразделение 		= СтрокаТаблицыЗанятыхРМ.Подразделение;
		НоваяСтрока.Должность 			= СтрокаТаблицыЗанятыхРМ.Должность;
		НоваяСтрока.УсловиеНормы		= СтрокаТаблицыЗанятыхРМ.Условие;
		Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Условие) Тогда
			НоваяСтрока.ЭтоЗима 		= СтрокаТаблицыЗанятыхРМ.ЭтоЗима;
		Иначе
			Если НайденнаяСтрока.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ЗимойДополнительно 
				ИЛИ НайденнаяСтрока.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ПриУсловииЗимойДополнительно Тогда
				НоваяСтрока.ЭтоЗима 	= Истина;
			Иначе
				НоваяСтрока.ЭтоЗима 	= Ложь;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.НормаВыдачи 		= НайденнаяСтрока.НормаВыдачи;
		НоваяСтрока.НоменклатураНормы 	= НайденнаяСтрока.НоменклатураНормы;
		НоваяСтрока.ТипПериода 			= НайденнаяСтрока.ТипПериода;
		НоваяСтрока.КоличествоПериодов 	= НайденнаяСтрока.КоличествоПериодов;
		НоваяСтрока.КоличествоВПериоде 	= НайденнаяСтрока.КоличествоВПериоде;
		НоваяСтрока.Использовать 		= НайденнаяСтрока.Использовать;
		
		НормаПоПодразделениюНайдена = Истина;
		
	КонецЦикла;
	
	//1. поиск по подразделению из занятых рабочих мест по пустому значению рабочего места
	Если ИспользоватьРабочиеМеста Тогда
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Условие) Тогда
			СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто, УсловиеНормы", 
			ГоловноеПодразделение, СтрокаТаблицыЗанятыхРМ.Должность, Справочники.РабочиеМестаАСТБ.ПустаяСсылка(), СтрокаТаблицыЗанятыхРМ.Условие);
		Иначе
			СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто", 
			ГоловноеПодразделение, СтрокаТаблицыЗанятыхРМ.Должность, Справочники.РабочиеМестаАСТБ.ПустаяСсылка());
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаУстановленныхНорм.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НоваяСтрока 					= ТаблицаПодобранныхНорм.Добавить();
			НоваяСтрока.Сотрудник 			= СтрокаТаблицыЗанятыхРМ.Сотрудник;
			НоваяСтрока.Подразделение 		= СтрокаТаблицыЗанятыхРМ.Подразделение;
			НоваяСтрока.Должность 			= СтрокаТаблицыЗанятыхРМ.Должность;
			НоваяСтрока.УсловиеНормы		= СтрокаТаблицыЗанятыхРМ.Условие;
			Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРМ.Условие) Тогда
				НоваяСтрока.ЭтоЗима 		= СтрокаТаблицыЗанятыхРМ.ЭтоЗима;
			Иначе
				Если НайденнаяСтрока.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ЗимойДополнительно 
					ИЛИ НайденнаяСтрока.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ПриУсловииЗимойДополнительно Тогда
					НоваяСтрока.ЭтоЗима 	= Истина;
				Иначе
					НоваяСтрока.ЭтоЗима 	= Ложь;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.НормаВыдачи 		= НайденнаяСтрока.НормаВыдачи;
			НоваяСтрока.НоменклатураНормы 	= НайденнаяСтрока.НоменклатураНормы;
			НоваяСтрока.ТипПериода 			= НайденнаяСтрока.ТипПериода;
			НоваяСтрока.КоличествоПериодов 	= НайденнаяСтрока.КоличествоПериодов;
			НоваяСтрока.КоличествоВПериоде 	= НайденнаяСтрока.КоличествоВПериоде;
			НоваяСтрока.Использовать 		= НайденнаяСтрока.Использовать;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГоловноеПодразделение.Родитель) И НЕ НормаПоПодразделениюНайдена Тогда
		
		Возврат ПодобратьНормуРекурсивно(СтрокаТаблицыЗанятыхРМ,ГоловноеПодразделение.Родитель,ТаблицаПодобранныхНорм,ТаблицаУстановленныхНорм,ИспользоватьРабочиеМеста,НормаПоПодразделениюНайдена);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьТОН(НаименованиеТОН) Экспорт
	
	НайденныйЭлемент = Справочники.ТиповыеОтраслевыеНормы.НайтиПоНаименованию(НаименованиеТОН,Истина);
	
	Если НайденныйЭлемент.Пустая() Тогда
		
		НовыйЭлемент = Справочники.ТиповыеОтраслевыеНормы.СоздатьЭлемент();
		НовыйЭлемент.Наименование = НаименованиеТОН;
		НовыйЭлемент.УстановитьНовыйКод();
		НовыйЭлемент.Записать();
		НайденныйЭлемент = НовыйЭлемент.Ссылка;
		
	КонецЕсли;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

Функция ПолучитьПунктТОН(ТОН,НомерПрофессииТОН) Экспорт
	
	Если НЕ НомерПрофессииТОН = "Не задан" Тогда
		ИскомоеНаименование = "№" + НомерПрофессииТОН;
	Иначе
		ИскомоеНаименование = НомерПрофессииТОН;
	КонецЕсли;
	
	НайденныйЭлемент = Справочники.ПунктыТОН.НайтиПоНаименованию(ИскомоеНаименование,Истина,,ТОН);
	
	Если НайденныйЭлемент.Пустая() Тогда
		
		НовыйЭлемент 				= Справочники.ПунктыТОН.СоздатьЭлемент();
		НовыйЭлемент.Наименование 	= ИскомоеНаименование;
		НовыйЭлемент.Владелец 		= ТОН;
		НовыйЭлемент.УстановитьНовыйКод();
		НовыйЭлемент.Записать();
		НайденныйЭлемент = НовыйЭлемент.Ссылка;
		
	КонецЕсли;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

Функция ПолучитьАлгоритмФормированияПотребности(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Организация.ИспользоватьАлгоритм_0_0_0_3 Тогда
		Возврат "0_0_0_3";
	ИначеЕсли Организация.ИспользоватьАлгоритм_0_0_0_4 Тогда
		Возврат "0_0_0_4";
	ИначеЕсли Организация.ИспользоватьАлгоритм_0_1_0_3 Тогда
		Возврат "0_1_0_3";
	ИначеЕсли Организация.ИспользоватьАлгоритм_0_0_1_2 Тогда
		Возврат "0_0_1_2";
	ИначеЕсли Организация.ИспользоватьАлгоритм_1_0_1_1 Тогда
		Возврат "1_0_1_1";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 

Функция ПроверитьСовпадающуюНоменклатуруНормы(ТаблицаДокумента) Экспорт
	
	ТаблицаДокумента.ЗаполнитьЗначения(1,"КоличествоСовпаденийНоменклатурыНормы");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НеВыдано КАК НеВыдано,
	|	ТаблицаДокумента.НеВыданоПоПричине КАК НеВыданоПоПричине,
	|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
	|	ТаблицаДокумента.НормаВыдачи КАК НормаВыдачи,
	|	ТаблицаДокумента.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.КоличествоПотребность КАК КоличествоПотребность,
	|	ТаблицаДокумента.Цена КАК Цена,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.ДатаВыдачи КАК ДатаВыдачи,
	|	ТаблицаДокумента.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ТаблицаДокумента.Комплект КАК Комплект,
	|	ТаблицаДокумента.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	ТаблицаДокумента.КоличествоСовпаденийНоменклатурыНормы КАК КоличествоСовпаденийНоменклатурыНормы,
	|	ТаблицаДокумента.ДобавленаКопированием КАК ДобавленаКопированием,
	|	ТаблицаДокумента.ВыдачаСверхНорм КАК ВыдачаСверхНорм
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокумента.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДокумента.НоменклатураНормы КАК НоменклатураНормы,
	|	СУММА(ВТ_ТаблицаДокумента.КоличествоСовпаденийНоменклатурыНормы) КАК КоличествоСовпаденийНоменклатурыНормы
	|ПОМЕСТИТЬ ВТ_РасчетСовпаденийНоменклатурыНормы
	|ИЗ
	|	ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаДокумента.Сотрудник,
	|	ВТ_ТаблицаДокумента.НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокумента.НеВыдано КАК НеВыдано,
	|	ВТ_ТаблицаДокумента.НеВыданоПоПричине КАК НеВыданоПоПричине,
	|	ВТ_ТаблицаДокумента.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДокумента.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаДокумента.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ТаблицаДокумента.Количество КАК Количество,
	|	ВТ_ТаблицаДокумента.КоличествоПотребность КАК КоличествоПотребность,
	|	ВТ_ТаблицаДокумента.Цена КАК Цена,
	|	ВТ_ТаблицаДокумента.Сумма КАК Сумма,
	|	ВТ_ТаблицаДокумента.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ТаблицаДокумента.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_ТаблицаДокумента.Комплект КАК Комплект,
	|	ВТ_ТаблицаДокумента.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	ВТ_ТаблицаДокумента.ДобавленаКопированием КАК ДобавленаКопированием,
	|	ВТ_РасчетСовпаденийНоменклатурыНормы.КоличествоСовпаденийНоменклатурыНормы КАК КоличествоСовпаденийНоменклатурыНормы,
	|	ВТ_ТаблицаДокумента.ВыдачаСверхНорм КАК ВыдачаСверхНорм
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетСовпаденийНоменклатурыНормы КАК ВТ_РасчетСовпаденийНоменклатурыНормы
	|		ПО ВТ_ТаблицаДокумента.Сотрудник = ВТ_РасчетСовпаденийНоменклатурыНормы.Сотрудник
	|			И ВТ_ТаблицаДокумента.НоменклатураНормы = ВТ_РасчетСовпаденийНоменклатурыНормы.НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НеВыдано КАК НеВыдано,
	|	ВТ_Результат.НеВыданоПоПричине КАК НеВыданоПоПричине,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Результат.Количество КАК Количество,
	|	ВТ_Результат.КоличествоПотребность КАК КоличествоПотребность,
	|	ВТ_Результат.Цена КАК Цена,
	|	ВТ_Результат.Сумма КАК Сумма,
	|	ВТ_Результат.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_Результат.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_Результат.Комплект КАК Комплект,
	|	ВТ_Результат.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	ВТ_Результат.ДобавленаКопированием КАК ДобавленаКопированием,
	|	ВТ_Результат.КоличествоСовпаденийНоменклатурыНормы КАК КоличествоСовпаденийНоменклатурыНормы,
	|	ВТ_Результат.ВыдачаСверхНорм КАК ВыдачаСверхНорм
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_РасчетСовпаденийНоменклатурыНормы.Сотрудник КАК Сотрудник,
	|	ВТ_РасчетСовпаденийНоменклатурыНормы.НоменклатураНормы КАК НоменклатураНормы
	|ИЗ
	|	ВТ_РасчетСовпаденийНоменклатурыНормы КАК ВТ_РасчетСовпаденийНоменклатурыНормы
	|ГДЕ
	|	ВТ_РасчетСовпаденийНоменклатурыНормы.КоличествоСовпаденийНоменклатурыНормы > 1";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента",ТаблицаДокумента);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДокумента = Результат[3].Выгрузить();
	ТаблицаСовпадений = Результат[4].Выгрузить();
	
	Для Каждого СтрокаТаблицыСовпадений Из ТаблицаСовпадений Цикл
		
		СтруктураПоиска = Новый Структура("Сотрудник, НоменклатураНормы", СтрокаТаблицыСовпадений.Сотрудник, СтрокаТаблицыСовпадений.НоменклатураНормы);
		
		НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(СтруктураПоиска);
		
		ОбнулятьКоличество = Ложь;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если ОбнулятьКоличество Тогда
				НайденнаяСтрока.Количество 	= 0;
				НайденнаяСтрока.Сумма 		= 0;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Комплект) Тогда
				ОбнулятьКоличество = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДокумента;	
	
КонецФункции

Функция ПолучитьОптимальнуюТаблицуВыдачи(ТекущийОбъект,ТаблицаДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НеВыдано КАК НеВыдано,
	|	ТаблицаДокумента.НеВыданоПоПричине КАК НеВыданоПоПричине,
	|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
	|	ТаблицаДокумента.НормаВыдачи КАК НормаВыдачи,
	|	ТаблицаДокумента.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.КоличествоПотребность КАК КоличествоПотребность,
	|	ТаблицаДокумента.Цена КАК Цена,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.ДатаВыдачи КАК ДатаВыдачи,
	|	ТаблицаДокумента.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ТаблицаДокумента.Комплект КАК Комплект,
	|	ТаблицаДокумента.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	ТаблицаДокумента.ДобавленаКопированием КАК ДобавленаКопированием,
	|	ТаблицаДокумента.КоличествоСовпаденийНоменклатурыНормы КАК КоличествоСовпаденийНоменклатурыНормы,
	|	ТаблицаДокумента.ВыдачаСверхНорм КАК ВыдачаСверхНорм
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормыВыдачиСИЗСоставНормы.Ссылка КАК НормаВыдачи,
	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы КАК НоменклатураНормы,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.ТипПериода КАК ТипПериода,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов КАК КоличествоПериодов,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоВПериоде КАК КоличествоВПериоде,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.Приоритет КАК Приоритет,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи
	|ПОМЕСТИТЬ ВТ_СоставНормВыдачи
	|ИЗ
	|	Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокумента.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДокумента.НоменклатураНормы КАК НоменклатураНормы,
	|	МАКСИМУМ(ВТ_СоставНормВыдачи.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_МаксимальныйПриоритет
	|ИЗ
	|	ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоставНормВыдачи КАК ВТ_СоставНормВыдачи
	|		ПО ВТ_ТаблицаДокумента.НормаВыдачи = ВТ_СоставНормВыдачи.НормаВыдачи
	|			И ВТ_ТаблицаДокумента.НоменклатураНормы = ВТ_СоставНормВыдачи.НоменклатураНормы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаДокумента.Сотрудник,
	|	ВТ_ТаблицаДокумента.НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_МаксимальныйПриоритет.Сотрудник КАК Сотрудник,
	|	ВТ_МаксимальныйПриоритет.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_СоставНормВыдачи.ТипПериода КАК ТипПериода,
	|	ВТ_СоставНормВыдачи.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_СоставНормВыдачи.КоличествоВПериоде КАК КоличествоВПериоде,
	|	ВТ_СоставНормВыдачи.ПериодичностьВыдачи КАК ПериодичностьВыдачи
	|ПОМЕСТИТЬ ВТ_МаксимальнаяПериодичность
	|ИЗ
	|	ВТ_МаксимальныйПриоритет КАК ВТ_МаксимальныйПриоритет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоставНормВыдачи КАК ВТ_СоставНормВыдачи
	|		ПО ВТ_МаксимальныйПриоритет.НоменклатураНормы = ВТ_СоставНормВыдачи.НоменклатураНормы
	|			И ВТ_МаксимальныйПриоритет.Приоритет = ВТ_СоставНормВыдачи.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокумента.НеВыдано КАК НеВыдано,
	|	ВТ_ТаблицаДокумента.НеВыданоПоПричине КАК НеВыданоПоПричине,
	|	ВТ_ТаблицаДокумента.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДокумента.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаДокумента.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_МаксимальнаяПериодичность.КоличествоВПериоде КАК Количество,
	|	ВТ_МаксимальнаяПериодичность.КоличествоВПериоде КАК КоличествоПотребность,
	|	ВТ_ТаблицаДокумента.Цена КАК Цена,
	|	ВТ_ТаблицаДокумента.Цена * ВТ_МаксимальнаяПериодичность.КоличествоВПериоде КАК Сумма,
	|	ВТ_ТаблицаДокумента.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_МаксимальнаяПериодичность.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_ТаблицаДокумента.Комплект КАК Комплект,
	|	ВТ_ТаблицаДокумента.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	ВТ_ТаблицаДокумента.КоличествоСовпаденийНоменклатурыНормы КАК КоличествоСовпаденийНоменклатурыНормы,
	|	ВТ_ТаблицаДокумента.ДобавленаКопированием КАК ДобавленаКопированием,
	|	ВТ_ТаблицаДокумента.ВыдачаСверхНорм КАК ВыдачаСверхНорм
	|ИЗ
	|	ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаксимальнаяПериодичность КАК ВТ_МаксимальнаяПериодичность
	|		ПО ВТ_ТаблицаДокумента.Сотрудник = ВТ_МаксимальнаяПериодичность.Сотрудник
	|			И ВТ_ТаблицаДокумента.НоменклатураНормы = ВТ_МаксимальнаяПериодичность.НоменклатураНормы";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента",	ТаблицаДокумента);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СброситьОптимизацию(ТаблицаДокумента) Экспорт
	
	ТаблицаДокумента.ЗаполнитьЗначения(1,"КоличествоСовпаденийНоменклатурыНормы");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.НеВыдано КАК НеВыдано,
	|	ТаблицаДокумента.НеВыданоПоПричине КАК НеВыданоПоПричине,
	|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
	|	ТаблицаДокумента.НормаВыдачи КАК НормаВыдачи,
	|	ТаблицаДокумента.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.КоличествоПотребность КАК КоличествоПотребность,
	|	ТаблицаДокумента.Цена КАК Цена,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.ДатаВыдачи КАК ДатаВыдачи,
	|	ТаблицаДокумента.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ТаблицаДокумента.Комплект КАК Комплект,
	|	ТаблицаДокумента.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	ТаблицаДокумента.КоличествоСовпаденийНоменклатурыНормы КАК КоличествоСовпаденийНоменклатурыНормы,
	|	ТаблицаДокумента.ДобавленаКопированием КАК ДобавленаКопированием
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормыВыдачиСИЗСоставНормы.Ссылка КАК Ссылка,
	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы КАК НоменклатураНормы,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоВПериоде КАК ПериодичностьВыдачиКоличествоВПериоде
	|ПОМЕСТИТЬ ВТ_СоставНормы
	|ИЗ
	|	Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаДокумента.НеВыдано КАК НеВыдано,
	|	ВТ_ТаблицаДокумента.НеВыданоПоПричине КАК НеВыданоПоПричине,
	|	ВТ_ТаблицаДокумента.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДокумента.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаДокумента.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_СоставНормы.ПериодичностьВыдачиКоличествоВПериоде КАК Количество,
	|	ВТ_СоставНормы.ПериодичностьВыдачиКоличествоВПериоде КАК КоличествоПотребность,
	|	ВТ_ТаблицаДокумента.Цена КАК Цена,
	|	ВТ_ТаблицаДокумента.Сумма КАК Сумма,
	|	ВТ_ТаблицаДокумента.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_СоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_ТаблицаДокумента.Комплект КАК Комплект,
	|	ВТ_ТаблицаДокумента.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	ВТ_ТаблицаДокумента.КоличествоСовпаденийНоменклатурыНормы КАК КоличествоСовпаденийНоменклатурыНормы,
	|	ВТ_ТаблицаДокумента.ДобавленаКопированием КАК ДобавленаКопированием
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоставНормы КАК ВТ_СоставНормы
	|		ПО ВТ_ТаблицаДокумента.НормаВыдачи = ВТ_СоставНормы.Ссылка
	|			И ВТ_ТаблицаДокумента.НоменклатураНормы = ВТ_СоставНормы.НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НеВыдано КАК НеВыдано,
	|	ВТ_Результат.НеВыданоПоПричине КАК НеВыданоПоПричине,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Результат.Количество КАК Количество,
	|	ВТ_Результат.КоличествоПотребность КАК КоличествоПотребность,
	|	ВТ_Результат.Цена КАК Цена,
	|	ВТ_Результат.Сумма КАК Сумма,
	|	ВТ_Результат.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_Результат.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_Результат.Комплект КАК Комплект,
	|	ВТ_Результат.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	ВТ_Результат.КоличествоСовпаденийНоменклатурыНормы КАК КоличествоСовпаденийНоменклатурыНормы,
	|	ВТ_Результат.ДобавленаКопированием КАК ДобавленаКопированием
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Результат.НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента",ТаблицаДокумента);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ПолучитьКоличествоКВыдачеПоПотребности(Сотрудник, НормаВыдачи, НоменклатураНормы, ДатаПотребности, КоличествоПотребность, ДатаАнализа) Экспорт
	
	КоличествоКВыдаче = КоличествоПотребность;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВыданныеСредстваЗащитыОстатки.КоличествоОстаток) КАК Выдано,
	|	ВыданныеСредстваЗащитыОстатки.Сотрудник,
	|	ВыданныеСредстваЗащитыОстатки.НормаВыдачи,
	|	ВыданныеСредстваЗащитыОстатки.НоменклатураНормы,
	|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи
	|ИЗ
	|	РегистрНакопления.ВыданныеСредстваЗащиты.Остатки(
	|			&ДатаАнализа,
	|			Сотрудник = &Сотрудник
	|				И НормаВыдачи = &НормаВыдачи
	|				И НоменклатураНормы = &НоменклатураНормы
	|				И ДатаВыдачи = &ДатаПотребности) КАК ВыданныеСредстваЗащитыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыданныеСредстваЗащитыОстатки.Сотрудник,
	|	ВыданныеСредстваЗащитыОстатки.НормаВыдачи,
	|	ВыданныеСредстваЗащитыОстатки.НоменклатураНормы,
	|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи";
	
	Запрос.УстановитьПараметр("ДатаАнализа",		ДатаАнализа);
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	Запрос.УстановитьПараметр("НормаВыдачи",		НормаВыдачи);
	Запрос.УстановитьПараметр("НоменклатураНормы",	НоменклатураНормы);
	Запрос.УстановитьПараметр("ДатаПотребности",	ДатаПотребности);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		КоличествоКВыдаче = КоличествоКВыдаче - Результат.Выгрузить()[0].Выдано;
		
	КонецЕсли;
	
	Возврат КоличествоКВыдаче;
	
КонецФункции

Функция ПолучитьГраницуАнализаПоДокументу(ДокументСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Новый Граница(ДокументСсылка.МоментВремени(),ВидГраницы.Исключая);
	Иначе
		Возврат Новый Граница(ТекущаяДата(),ВидГраницы.Включая);
	КонецЕсли;
	
КонецФункции

//процедура поизводит соединение таблицы зимы с таблицей конечной потребности и выполняет корректировку даты потребности согласно периоду зимы
// параметры:
// ТаблицаПотребности 		- таблица конечной потребности
// ТаблицаЗимы 				- таблица периодов зимы
//
Процедура УточнитьПотребностьПоЗиме(ТаблицаПотребности,ТаблицаЗимы,ЭтоСписание = Ложь) Экспорт
	
	Если ТаблицаПотребности.Колонки.Найти("ПроцентИзноса") = Неопределено Тогда //добавим колонку, чтобы запрос не валился в ошибку
		ТаблицаПотребности.Колонки.Добавить("ПроцентИзноса",ОбщегоНазначения.ОписаниеТипаЧисло(2));
		ТаблицаПотребности.ЗаполнитьЗначения(0,"ПроцентИзноса");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗимы.ДатаНачалаЗимы КАК ДатаНачалаЗимы,
	|	ТаблицаЗимы.ДатаОкончанияЗимы КАК ДатаОкончанияЗимы,
	|	ТаблицаЗимы.ДатаПериода КАК ДатаПериода,
	|	ТаблицаЗимы.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТ_ТаблицаЗимы
	|ИЗ
	|	&ТаблицаЗимы КАК ТаблицаЗимы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПотребности.Сотрудник КАК Сотрудник,
	|	ТаблицаПотребности.Подразделение КАК Подразделение,
	|	ТаблицаПотребности.НормаВыдачи КАК НормаВыдачи,
	|	ТаблицаПотребности.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаПотребности.ДатаПотребности КАК ДатаПотребности,
	|	ТаблицаПотребности.ЭтоЗима КАК ЭтоЗима,
	|	ТаблицаПотребности.ПроцентИзноса КАК ПроцентИзноса,
	|	ТаблицаПотребности.КоличествоПотребность КАК КоличествоПотребность
	|ПОМЕСТИТЬ ВТ_ТаблицаПотребности
	|ИЗ
	|	&ТаблицаПотребности КАК ТаблицаПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаПотребности.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаПотребности.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаПотребности.НоменклатураНормы КАК НоменклатураНормы,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаПотребности.ЭтоЗима
	|			ТОГДА ВЫБОР
	|					КОГДА &ЭтоСписание
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_ТаблицаЗимы.ДатаНачалаЗимы = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|									ТОГДА ВТ_ТаблицаПотребности.ДатаПотребности
	|								ИНАЧЕ ВЫБОР
	|										КОГДА НАЧАЛОПЕРИОДА(ВТ_ТаблицаПотребности.ДатаПотребности, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(ВТ_ТаблицаЗимы.ДатаНачалаЗимы, МЕСЯЦ)
	|												И НАЧАЛОПЕРИОДА(ВТ_ТаблицаПотребности.ДатаПотребности, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ВТ_ТаблицаЗимы.ДатаОкончанияЗимы, МЕСЯЦ)
	|											ТОГДА ВТ_ТаблицаПотребности.ДатаПотребности
	|										ИНАЧЕ ВТ_ТаблицаЗимы.ДатаНачалаЗимы
	|									КОНЕЦ
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА НАЧАЛОПЕРИОДА(ВТ_ТаблицаПотребности.ДатаПотребности, МЕСЯЦ) < НАЧАЛОПЕРИОДА(ВТ_ТаблицаЗимы.ДатаНачалаЗимы, МЕСЯЦ)
	|								ТОГДА ВТ_ТаблицаЗимы.ДатаНачалаЗимы
	|							ИНАЧЕ ВТ_ТаблицаПотребности.ДатаПотребности
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаПотребности.ДатаПотребности
	|	КОНЕЦ КАК ДатаПотребности,
	|	ВТ_ТаблицаПотребности.ЭтоЗима КАК ЭтоЗима,
	|	ВТ_ТаблицаПотребности.КоличествоПотребность КАК КоличествоПотребность,
	|	ВТ_ТаблицаЗимы.ДатаНачалаЗимы КАК ДатаНачалаЗимы,
	|	ВТ_ТаблицаЗимы.ДатаОкончанияЗимы КАК ДатаОкончанияЗимы,
	|	ВТ_ТаблицаПотребности.ДатаПотребности КАК ДатаПотребностиБезУчетаЗимы,
	|	ВТ_ТаблицаПотребности.ПроцентИзноса КАК ПроцентИзноса
	|ИЗ
	|	ВТ_ТаблицаПотребности КАК ВТ_ТаблицаПотребности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаЗимы КАК ВТ_ТаблицаЗимы
	|		ПО (НАЧАЛОПЕРИОДА(ВТ_ТаблицаПотребности.ДатаПотребности, ДЕНЬ) = НАЧАЛОПЕРИОДА(ВТ_ТаблицаЗимы.ДатаПериода, ДЕНЬ))
	|			И ВТ_ТаблицаПотребности.Подразделение = ВТ_ТаблицаЗимы.Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НормаВыдачи,
	|	НоменклатураНормы";
	
	Запрос.УстановитьПараметр("ТаблицаЗимы",		ТаблицаЗимы);
	Запрос.УстановитьПараметр("ТаблицаПотребности",	ТаблицаПотребности);
	Запрос.УстановитьПараметр("ЭтоСписание",		ЭтоСписание);
	
	ТаблицаПотребности = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура УточнитьПотребностьПоОтсутствиюНаРабочемМесте(ТаблицаПотребности, Организация, ДатаАнализа) Экспорт
	
	Если ТаблицаПотребности.Колонки.Найти("ПроцентИзноса") = Неопределено Тогда //добавим колонку, чтобы запрос не валился в ошибку
		ТаблицаПотребности.Колонки.Добавить("ПроцентИзноса",ОбщегоНазначения.ОписаниеТипаЧисло(2));
		ТаблицаПотребности.ЗаполнитьЗначения(0,"ПроцентИзноса");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПотребности.Сотрудник КАК Сотрудник,
	|	ТаблицаПотребности.Подразделение КАК Подразделение,
	|	ТаблицаПотребности.ЭтоЗима КАК ЭтоЗима,
	|	ТаблицаПотребности.НормаВыдачи КАК НормаВыдачи,
	|	ТаблицаПотребности.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаПотребности.ПроцентИзноса КАК ПроцентИзноса,
	|	ТаблицаПотребности.ДатаПотребности КАК ДатаПотребности,
	|	ТаблицаПотребности.КоличествоПотребность КАК КоличествоПотребность,
	|	ТаблицаПотребности.КоличествоВыдано КАК КоличествоВыдано
	|ПОМЕСТИТЬ ВТ_ТаблицаПотребности
	|ИЗ
	|	&ТаблицаПотребности КАК ТаблицаПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтсутствиеНаРабочемМесте.Период) КАК Период,
	|	ОтсутствиеНаРабочемМесте.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_МаксимальныйПериод
	|ИЗ
	|	РегистрСведений.ОтсутствиеНаРабочемМесте КАК ОтсутствиеНаРабочемМесте
	|ГДЕ
	|	ОтсутствиеНаРабочемМесте.Организация = &Организация
	|	И ОтсутствиеНаРабочемМесте.Период <= &ДатаАнализа
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтсутствиеНаРабочемМесте.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаксимальныйПериод.Сотрудник КАК Сотрудник,
	|	ОтсутствиеНаРабочемМестеСрезПоследних.ДатаНачала КАК ДатаНачала,
	|	ОтсутствиеНаРабочемМестеСрезПоследних.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ОтсутствиеНаРабочемМесте
	|ИЗ
	|	ВТ_МаксимальныйПериод КАК ВТ_МаксимальныйПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтсутствиеНаРабочемМесте.СрезПоследних(&ПериодРасчета, Организация = &Организация) КАК ОтсутствиеНаРабочемМестеСрезПоследних
	|		ПО ВТ_МаксимальныйПериод.Период = ОтсутствиеНаРабочемМестеСрезПоследних.Период
	|			И ВТ_МаксимальныйПериод.Сотрудник = ОтсутствиеНаРабочемМестеСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПотребности.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаПотребности.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаПотребности.ЭтоЗима КАК ЭтоЗима,
	|	ВТ_ТаблицаПотребности.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаПотребности.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаПотребности.ПроцентИзноса КАК ПроцентИзноса,
	|	ВТ_ТаблицаПотребности.КоличествоПотребность КАК КоличествоПотребность,
	|	ВТ_ТаблицаПотребности.КоличествоВыдано КАК КоличествоВыдано,
	|	ВЫБОР
	|		КОГДА ВТ_ОтсутствиеНаРабочемМесте.ДатаОкончания ЕСТЬ NULL
	|			ТОГДА ВТ_ТаблицаПотребности.ДатаПотребности
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НАЧАЛОПЕРИОДА(ВТ_ТаблицаПотребности.ДатаПотребности, ДЕНЬ) >= НАЧАЛОПЕРИОДА(ВТ_ОтсутствиеНаРабочемМесте.ДатаНачала, ДЕНЬ)
	|						И НАЧАЛОПЕРИОДА(ВТ_ТаблицаПотребности.ДатаПотребности, ДЕНЬ) <= НАЧАЛОПЕРИОДА(ВТ_ОтсутствиеНаРабочемМесте.ДатаОкончания, ДЕНЬ)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ВТ_ОтсутствиеНаРабочемМесте.ДатаОкончания, ДЕНЬ, 1)
	|				ИНАЧЕ ВТ_ТаблицаПотребности.ДатаПотребности
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаПотребности,
	|	ВЫБОР
	|		КОГДА ВТ_ОтсутствиеНаРабочемМесте.ДатаОкончания ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТ_ОтсутствиеНаРабочемМесте.ДатаОкончания, ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаОкончанияОтсутствияНаРабочемМесте
	|ИЗ
	|	ВТ_ТаблицаПотребности КАК ВТ_ТаблицаПотребности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтсутствиеНаРабочемМесте КАК ВТ_ОтсутствиеНаРабочемМесте
	|		ПО ВТ_ТаблицаПотребности.Сотрудник = ВТ_ОтсутствиеНаРабочемМесте.Сотрудник";
	
	Запрос.УстановитьПараметр("ТаблицаПотребности",	ТаблицаПотребности);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ПериодРасчета",		ДатаАнализа);
	Запрос.УстановитьПараметр("ДатаАнализа",		ДатаАнализа.Значение.Дата);
	
	ТаблицаПотребности = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

//возвращает значение периодичности выдачи номенклатуры нормы в заданной норме выдачи
//если периодичность не определена, возвращает пустое значение справочника "Периодичность выдачи СИЗ"
Функция ПолучитьПериодичностьВыдачиНоменклатурыНормы(НормаВыдачи,НоменклатураНормы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи
	|ИЗ
	|	Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|ГДЕ
	|	НормыВыдачиСИЗСоставНормы.Ссылка = &НормаВыдачи
	|	И НормыВыдачиСИЗСоставНормы.НоменклатураНормы = &НоменклатураНормы";
	
	Запрос.УстановитьПараметр("НормаВыдачи",		НормаВыдачи);
	Запрос.УстановитьПараметр("НоменклатураНормы",	НоменклатураНормы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПериодичностьВыдачи;
	Иначе
		Возврат Справочники.ПериодичностьВыдачиСИЗ.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция РассчитатьДатуПотребностиПоИзносу(ИсходнаяДата,ТипПериода,КоличествоПериодов,ПроцентИзноса) Экспорт
	
	//+++АСТБ_Горюшин_Алексей_26205
	Счетчик = 1;
	ПроверяемыйПериод = ИсходнаяДата;
	КоличествоДней = 0;
	Пока Счетчик <= КоличествоПериодов Цикл
		Если ТипПериода = Перечисления.ДоступныеПериодыОтчета.Год Тогда
			ПроверяемыйПериод = ДобавитьМесяц(ПроверяемыйПериод,12);
			Если ДеньГода(КонецГода(ПроверяемыйПериод)) = 366 Тогда
				КоличествоДней = КоличествоДней + 366;
			Иначе
				КоличествоДней = КоличествоДней + 365;
			КонецЕсли;
		Иначе
			ПроверяемыйПериод = ДобавитьМесяц(ПроверяемыйПериод,1);
			Если ДеньГода(КонецГода(ПроверяемыйПериод)) = 366 Тогда
				КоличествоДней = КоличествоДней + 30.5;
			Иначе
				КоличествоДней = КоличествоДней + 30.42;
			КонецЕсли;
		КонецЕсли;	
		Счетчик = Счетчик + 1;
	КонецЦикла;	
 	//было
	//Если ТипПериода = Перечисления.ДоступныеПериодыОтчета.Год Тогда
	//	КоличествоДней = КоличествоПериодов * 365;
	//Иначе //месяц
	//	КоличествоДней = КоличествоПериодов * 30.42;
	//КонецЕсли;
	//---АСТБ_Горюшин_Алексей_26205
	
	ОстаточноеКоличествоДнейНоски = Окр(((100-ПроцентИзноса)/100*КоличествоДней),0,2);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ИсходнаяДата, ДЕНЬ, &Количество), ДЕНЬ) КАК Дата");
	
	Запрос.УстановитьПараметр("ИсходнаяДата", 	ИсходнаяДата); 
	Запрос.УстановитьПараметр("Количество", 	ОстаточноеКоличествоДнейНоски); 
	
	Возврат	Запрос.Выполнить().Выгрузить()[0].Дата;
	
КонецФункции

Процедура ЗагрузкаСертификатов() Экспорт
	
	МетаданныеОбъекта = Метаданные.РегламентныеЗадания.ЗагрузкаСертификатов;
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(МетаданныеОбъекта,"Регламентная загрузка сертификатов отменена, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаОбъект = Обработки.ЗагрузкаСертификатовНоменклатурыВостокСервис.Создать();
	ОбработкаОбъект.ТипИсточника 					= Перечисления.ТипыИсточниковДляЗагрузки.FTPРесурс;
	ОбработкаОбъект.ФайлСертификатовНоменклатуры 	= "certificate2.zip";
	
	ИдентификаторОбработки = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Обработка.ЗагрузкаСертификатовНоменклатурыВостокСервис");
	
	Если ЗначениеЗаполнено(ИдентификаторОбработки) Тогда
		
		НаборЗаписей = РегистрыСведений.НастройкиПодключенияFTPДляДополнительныхОбработок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторОбъекта.Установить(ИдентификаторОбработки);
		НаборЗаписей.Прочитать();
		
		Если НЕ НаборЗаписей.Количество() = 0 Тогда
			СтруктураНастроек 									= НаборЗаписей[0].НастройкиПодключенияFTP.Получить();
			ОбработкаОбъект.FTPСоединениеАдрес 					= СтруктураНастроек.FTPСоединениеАдрес;
			ОбработкаОбъект.FTPСоединениеПароль 				= СтруктураНастроек.FTPСоединениеПароль;
			ОбработкаОбъект.FTPСоединениеПассивноеСоединение 	= СтруктураНастроек.FTPСоединениеПассивноеСоединение;
			ОбработкаОбъект.FTPСоединениеПользователь 			= СтруктураНастроек.FTPСоединениеПользователь;
			ОбработкаОбъект.FTPСоединениеПорт 					= СтруктураНастроек.FTPСоединениеПорт;
			ОбработкаОбъект.FTPСоединениеПуть 					= СтруктураНастроек.FTPСоединениеПуть;
			ОбработкаОбъект.FTPСоединениеЗащищенноеСоединение 	= СтруктураНастроек.FTPСоединениеЗащищенноеСоединение;
		Иначе
			ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,МетаданныеОбъекта,,"Не определены настройки подключения к FTP.");
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,МетаданныеОбъекта,,"Не определен идентификатор обработки.");
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура("КаталогОбменаИнформацией, ТипИсточника, ФайлСертификатовНоменклатуры, FTPСоединениеАдрес, 
	|FTPСоединениеПароль, FTPСоединениеПассивноеСоединение, FTPСоединениеПользователь, FTPСоединениеПорт, FTPСоединениеПуть",
	ОбработкаОбъект.КаталогОбменаИнформацией, 	ОбработкаОбъект.ТипИсточника, 			ОбработкаОбъект.ФайлСертификатовНоменклатуры, 
	ОбработкаОбъект.FTPСоединениеАдрес, 		ОбработкаОбъект.FTPСоединениеПароль, 	ОбработкаОбъект.FTPСоединениеПассивноеСоединение, 
	ОбработкаОбъект.FTPСоединениеПользователь, 	ОбработкаОбъект.FTPСоединениеПорт, 		ОбработкаОбъект.FTPСоединениеПуть);
	
	ТаблицаСертификатов = Новый ТаблицаЗначений;
	ТаблицаСертификатов.Колонки.Добавить("КодОракл", 					Новый ОписаниеТипов("Число"));
	ТаблицаСертификатов.Колонки.Добавить("ОбобщенноеНаименование",		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(60, ДопустимаяДлина.Переменная)));
	ТаблицаСертификатов.Колонки.Добавить("КодВидаСертификата",			Новый ОписаниеТипов("Число"));
	ТаблицаСертификатов.Колонки.Добавить("НомерСертификата", 			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(30, ДопустимаяДлина.Переменная)));
	ТаблицаСертификатов.Колонки.Добавить("ДатаНачалаДействия",			Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаСертификатов.Колонки.Добавить("ДатаОкончанияДействия",		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаСертификатов.Колонки.Добавить("ИмяФайла", 					Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(80, ДопустимаяДлина.Переменная)));
	ТаблицаСертификатов.Колонки.Добавить("ОписаниеФайла", 				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаСертификатов.Колонки.Добавить("НаименованиеВидаСертификата", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	
	Соединение = Обработки.ЗагрузкаСертификатовНоменклатурыВостокСервис.УстановитьFTPСоединение(ПараметрыЗагрузки);
	Если Соединение = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,МетаданныеОбъекта,,"Ошибка подключения к FTP.");
		Возврат;
	КонецЕсли;
	
	Найдено = Соединение.НайтиФайлы(ПараметрыЗагрузки.ФайлСертификатовНоменклатуры);
	
	Если Найдено.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,МетаданныеОбъекта,,"Не найден файл: "  + ПараметрыЗагрузки.ФайлСертификатовНоменклатуры);
		Возврат;
	КонецЕсли;
	
	Попытка
		ФайлАрхива = КаталогВременныхФайлов() + ПараметрыЗагрузки.ФайлСертификатовНоменклатуры;
		Соединение.Получить(ПараметрыЗагрузки.ФайлСертификатовНоменклатуры,ФайлАрхива);
		Архив = Новый ЧтениеZipФайла(ФайлАрхива);
		Для Каждого ВходящийФайл Из Архив.Элементы Цикл
			Архив.Извлечь(ВходящийФайл, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		КонецЦикла;
		Архив.Закрыть();
		УдалитьФайлы(ФайлАрхива);
	Исключение
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,МетаданныеОбъекта,,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ВременныйФайлСертификатов = ПолучитьИмяВременногоФайла();
	ПереместитьФайл(КаталогВременныхФайлов() + СтрЗаменить(ПараметрыЗагрузки.ФайлСертификатовНоменклатуры,"2.zip",".txt"), ВременныйФайлСертификатов);
	
	Попытка
		Текст 			= Новый ЧтениеТекста(ВременныйФайлСертификатов, КодировкаТекста.ANSI);
		ПерваяСтрока 	= Текст.ПрочитатьСтроку();
		СтрокаТекста 	= Текст.ПрочитатьСтроку();
	Исключение
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,МетаданныеОбъекта,,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Пока НЕ СтрокаТекста = Неопределено Цикл	
		
		МассивЗначений = ИзСтрокиСРазделителями(СтрокаТекста, Символы.Таб);
		
		ИмяФайлаСертификата = СтрЗаменить(МассивЗначений[15],"""",""); //старый 13
		
		Если ЗначениеЗаполнено(ИмяФайлаСертификата) Тогда
			
			НоваяСтрока 							= ТаблицаСертификатов.Добавить();
			НоваяСтрока.КодОракл 					= Число(СтрЗаменить(МассивЗначений[0],"""","")); //не менялся
			НоваяСтрока.ОбобщенноеНаименование 		= СтрЗаменить(МассивЗначений[3],"""","");        //не менялся
			НоваяСтрока.КодВидаСертификата 			= Число(СтрЗаменить(МассивЗначений[4],"""","")); //не менялся
			НоваяСтрока.НомерСертификата 			= СтрЗаменить(МассивЗначений[5],"""","");        //не менялся
			НоваяСтрока.ДатаНачалаДействия 			= ?(ЗначениеЗаполнено(СтрЗаменить(МассивЗначений[11],"""","")),Дата(Сред(СтрЗаменить(МассивЗначений[11],"""",""),7,4) + Сред(СтрЗаменить(МассивЗначений[11],"""",""),4,2) + Лев(СтрЗаменить(МассивЗначений[11],"""",""),2)),Дата("00010101")); //старый 8
			НоваяСтрока.ДатаОкончанияДействия 		= ?(ЗначениеЗаполнено(СтрЗаменить(МассивЗначений[12],"""","")),Дата(Сред(СтрЗаменить(МассивЗначений[12],"""",""),7,4) + Сред(СтрЗаменить(МассивЗначений[12],"""",""),4,2) + Лев(СтрЗаменить(МассивЗначений[12],"""",""),2)),Дата("00010101")); //старый 9
			НоваяСтрока.ИмяФайла 					= ИмяФайлаСертификата;
			НоваяСтрока.ОписаниеФайла 				= СтрЗаменить(МассивЗначений[16],"""",""); //старый 14
			НоваяСтрока.НаименованиеВидаСертификата = Обработки.ЗагрузкаСертификатовНоменклатурыВостокСервис.ПолучитьНаименованиеСертификата(НоваяСтрока.КодВидаСертификата);
			Если НоваяСтрока.НаименованиеВидаСертификата = Неопределено Тогда
				ЗаписьЖурналаРегистрации("Сертификат не загружен",УровеньЖурналаРегистрации.Предупреждение,МетаданныеОбъекта,,"Не найден вид сертификата по коду: " + СокрЛП(НоваяСтрока.КодВидаСертификата));
				ТаблицаСертификатов.Удалить(НоваяСтрока);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТекста = Текст.ПрочитатьСтроку();
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСертификатов.КодОракл,
	|	ТаблицаСертификатов.ОбобщенноеНаименование,
	|	ТаблицаСертификатов.КодВидаСертификата,
	|	ТаблицаСертификатов.НаименованиеВидаСертификата,
	|	ТаблицаСертификатов.НомерСертификата,
	|	ТаблицаСертификатов.ДатаНачалаДействия,
	|	ТаблицаСертификатов.ДатаОкончанияДействия,
	|	ТаблицаСертификатов.ИмяФайла,
	|	ТаблицаСертификатов.ОписаниеФайла
	|ПОМЕСТИТЬ ТаблицаСертификатов
	|ИЗ
	|	&ТаблицаСертификатов КАК ТаблицаСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ТаблицаСертификатов.КодОракл КАК КодОракл,
	|	ТаблицаСертификатов.ОбобщенноеНаименование,
	|	ТаблицаСертификатов.КодВидаСертификата,
	|	ТаблицаСертификатов.НаименованиеВидаСертификата,
	|	ТаблицаСертификатов.НомерСертификата КАК НомерСертификата,
	|	ТаблицаСертификатов.ДатаНачалаДействия,
	|	ТаблицаСертификатов.ДатаОкончанияДействия,
	|	ТаблицаСертификатов.ИмяФайла КАК ИмяФайла,
	|	ТаблицаСертификатов.ОписаниеФайла,
	|	ЕСТЬNULL(СертификатыНоменклатурыФайлыСертификата.Ссылка, ЗНАЧЕНИЕ(Справочник.СертификатыНоменклатуры.ПустаяСсылка)) КАК Сертификат
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры.ФайлыСертификата КАК СертификатыНоменклатурыФайлыСертификата
	|			ПО ТаблицаСертификатов.НомерСертификата = СертификатыНоменклатурыФайлыСертификата.Ссылка.НомерСертификата
	|				И ТаблицаСертификатов.ИмяФайла = СертификатыНоменклатурыФайлыСертификата.ИмяФайла
	|		ПО Номенклатура.КодСинхронизации = ТаблицаСертификатов.КодОракл
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И НЕ ТаблицаСертификатов.НомерСертификата ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодОракл,
	|	НомерСертификата,
	|	ИмяФайла";
	
	Запрос.УстановитьПараметр("ТаблицаСертификатов",ТаблицаСертификатов);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Сертификат) Тогда
			СтруктураСертификата = НОВЫЙ Структура("НомерСертификата,КодВидаСертификата,НаименованиеВидаСертификата,ДатаНачалаДействия,ДатаОкончанияДействия",
			СтрокаТаблицыЗапроса.НомерСертификата,				
			СтрокаТаблицыЗапроса.КодВидаСертификата,
			СтрокаТаблицыЗапроса.НаименованиеВидаСертификата,	
			СтрокаТаблицыЗапроса.ДатаНачалаДействия,
			СтрокаТаблицыЗапроса.ДатаОкончанияДействия);
			ТекущийСертификат = Обработки.ЗагрузкаСертификатовНоменклатурыВостокСервис.ПолучитьСертификатНоменклатуры(СтруктураСертификата);
		Иначе
			ТекущийСертификат = СтрокаТаблицыЗапроса.Сертификат;			
		КонецЕсли;
		
		Обработки.ЗагрузкаСертификатовНоменклатурыВостокСервис.ЗаписатьСертификатНоменклатуры(СтрокаТаблицыЗапроса.Номенклатура,ТекущийСертификат);
		Обработки.ЗагрузкаСертификатовНоменклатурыВостокСервис.ЗаписатьФайлСертификата(ТекущийСертификат,СтрокаТаблицыЗапроса.ИмяФайла,СтрокаТаблицыЗапроса.ОписаниеФайла);
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Выполнена загрузка сертификатов",УровеньЖурналаРегистрации.Информация,МетаданныеОбъекта);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьМаксимальныйШтрихкодДокументаЧислом(ТекущийДокумент) Экспорт
	
	ТипДокумента 				= ТекущийДокумент.Метаданные().Имя;
	ПрефиксШтрихкодаНомеклатуры = ТекущийДокумент.Организация.ПрефиксШтрихкодаНоменклатуры;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(ШтрихкодыНоменклатуры.Штрихкод, 6, 7)) КАК Код
	|ИЗ
	|	Документ." + ТипДокумента + ".ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО ""22" + ПрефиксШтрихкодаНомеклатуры + "________""
	|	И ШтрихкодыНоменклатуры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ТекущийДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
		ЗначениеКодаЧислом = ОписаниеТипаЧисла.ПривестиЗначение(Выборка.Код);
	Иначе
		ЗначениеКодаЧислом = 0;
	КонецЕсли;
	
	Возврат ЗначениеКодаЧислом;
	
КонецФункции

Процедура ЗаписьДокументовБудущейДатойПриЗаписи(Источник, Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		
		Если НачалоДня(ТекущаяДата()) < НачалоДня(Источник.Дата) Тогда
			
			НаборЗаписей = РегистрыСведений.ДокументыКПроведениюБудущейДатой.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументКПроведению.Установить(Источник.Ссылка);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				
				НоваяЗапись 					= НаборЗаписей.Добавить();
				НоваяЗапись.ДокументКПроведению = Источник.Ссылка;
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОПроведенииДокументов() Экспорт
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.СообщитьОПроведенииДокументов,"Регламентное сообщение о проведении документов не выполнено, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ДокументыКПроведениюБудущейДатой.ДокументКПроведению) КАК ДокументКПроведению,
	|	СпискиРассылкиПолучатели.АдресЭП
	|ИЗ
	|	РегистрСведений.ДокументыКПроведениюБудущейДатой КАК ДокументыКПроведениюБудущейДатой
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпискиРассылки.Получатели КАК СпискиРассылкиПолучатели
	|		ПО (ДокументыКПроведениюБудущейДатой.ДокументКПроведению.Организация = СпискиРассылкиПолучатели.Организация
	|				ИЛИ СпискиРассылкиПолучатели.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|ГДЕ
	|	НЕ ДокументыКПроведениюБудущейДатой.ДокументКПроведению.ПометкаУдаления
	|	И НЕ ДокументыКПроведениюБудущейДатой.ДокументКПроведению.Проведен
	|	И НАЧАЛОПЕРИОДА(ДокументыКПроведениюБудущейДатой.ДокументКПроведению.Дата, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|	И СпискиРассылкиПолучатели.Ссылка = &СписокРассылки
	|	И НЕ СпискиРассылкиПолучатели.АдресЭП ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыКПроведениюБудущейДатой.ДокументКПроведению.МоментВремени";
	
	Запрос.УстановитьПараметр("ТекущаяДата",	ТекущаяДата());
	Запрос.УстановитьПараметр("СписокРассылки",	Справочники.СпискиРассылки.СообщениеОПроведенииДокументов);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗапроса = Результат.Выгрузить();
	ТаблицаЗапроса.Свернуть("ДокументКПроведению, АдресЭП");
	
	Для Каждого СтрокаТаблицыПолучатели Из Справочники.СпискиРассылки.СообщениеОПроведенииДокументов.Получатели	Цикл
		
		СтруктураПоиска = Новый Структура("АдресЭП",СтрокаТаблицыПолучатели.АдресЭП);
		
		НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстПисьма = 	"Имя компьютера: " 		+ ИмяКомпьютера() 						+ Символы.ПС + 
		"Пользователь: " 		+ ПараметрыСеанса.ТекущийПользователь 	+ Символы.ПС + 
		"Информационная база: " + СтрокаСоединенияИнформационнойБазы()	+ Символы.ПС + 
		Символы.ПС + "В базе есть документы к проведению, записанные будущей датой: ";
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ТекстПисьма = ТекстПисьма + Символы.ПС + НайденнаяСтрока.ДокументКПроведению;
			
		КонецЦикла;
		
		НовоеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		НовоеПисьмо.Заполнить(Неопределено);
		
		НовоеПисьмо.Дата 					= ТекущаяДата();
		НовоеПисьмо.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
		НовоеПисьмо.Тема 					= "АСТБ: Проведение документов, введенных будущей датой";
		НовоеПисьмо.Текст 					= ТекстПисьма;
		//НовоеПисьмо.СписокПолучателейПисьма = "astb_support@vostok.ru";
		НовоеПисьмо.ТипТекста 				= Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		
		Если НЕ ЗначениеЗаполнено(НовоеПисьмо.УчетнаяЗапись) Тогда
			НовоеПисьмо.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
		КонецЕсли;
		
		НовоеПисьмо.ОтправительПредставление = НовоеПисьмо.УчетнаяЗапись.АдресЭлектроннойПочты;
		
		МассивАдресовЭП = СтрРазделить(СтрокаТаблицыПолучатели.АдресЭП, "; ", Ложь);
		
		Для Каждого ЭлементМассиваАдресовЭП Из МассивАдресовЭП Цикл
			
			Получатель 					= НовоеПисьмо.ПолучателиПисьма.Добавить();
			//Получатель.Адрес 			= "astb_support@vostok.ru";
			//Получатель.Представление 	= "Служба поддержки АСТБ";
			Получатель.Представление 	= ?(ЗначениеЗаполнено(СтрокаТаблицыПолучатели.Получатель),СтрокаТаблицыПолучатели.Получатель.Наименование,ЭлементМассиваАдресовЭП);
			Получатель.Адрес 			= ЭлементМассиваАдресовЭП;
			Получатель.Контакт			= СтрокаТаблицыПолучатели.Получатель;
			
			НовоеПисьмо.СписокПолучателейПисьма = НовоеПисьмо.СписокПолучателейПисьма + 
			?(ЗначениеЗаполнено(СтрокаТаблицыПолучатели.Получатель),СтрокаТаблицыПолучатели.Получатель.Наименование,ЭлементМассиваАдресовЭП) + 
			?(ЗначениеЗаполнено(СтрокаТаблицыПолучатели.Получатель)," <" + ЭлементМассиваАдресовЭП + ">","") + "; ";
			
		КонецЦикла;
		
		Попытка
			ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(НовоеПисьмо);
		Исключение
			ЗаписьЖурналаРегистрации("Регламентная операция. Сообщить о проведении документов.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецПопытки;
		
		НовоеПисьмо.ИдентификаторСообщения 	= ИдентификаторПисьма;
		НовоеПисьмо.СтатусПисьма    		= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
		НовоеПисьмо.ДатаОтправления 		= ТекущаяДатаСеанса();
		
		НовоеПисьмо.УстановитьНовыйНомер();
		
		Попытка 
			НовоеПисьмо.Записать(РежимЗаписиДокумента.Запись);
			ЗаписьЖурналаРегистрации("Регламентная операция. Сообщить о проведении документов.",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,"Документ сформирован.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		Исключение
			ЗаписьЖурналаРегистрации("Регламентная операция. Сообщить о проведении документов.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецПопытки;
		
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(НовоеПисьмо.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(НовоеПисьмо.Ссылка));
		
	КонецЦикла;
	
КонецПроцедуры

//возвращает таблицу вида:
// | Период | Сотрудник | Подразделение | Должность | Рабочее место | Условие | Использовать |
//
//параметры:
//
// 1. ТаблицаУсловий - таблица вида:
// | Период | Подразделение | Должность | Рабочее место | Условие нормы | Использовать |
//
// 2. ТаблицаЗанятыхРабочихМест - таблица вида:
//
// | Сотрудник | Подразделение | Должность | Рабочее место |
//
Функция ПолучитьТаблицуУсловийРаботыСотрудников(ТаблицаУсловий, ТаблицаЗанятыхРабочихМест) Экспорт
	
	РезультирующаяТаблица = Новый ТаблицаЗначений;
	РезультирующаяТаблица.Колонки.Добавить("Период",		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	РезультирующаяТаблица.Колонки.Добавить("Сотрудник",		Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РезультирующаяТаблица.Колонки.Добавить("Подразделение",	Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	РезультирующаяТаблица.Колонки.Добавить("Должность",		Новый ОписаниеТипов("СправочникСсылка.ДолжностиИПрофессии"));
	РезультирующаяТаблица.Колонки.Добавить("РабочееМесто",	Новый ОписаниеТипов("СправочникСсылка.РабочиеМестаАСТБ"));
	РезультирующаяТаблица.Колонки.Добавить("Условие",		Новый ОписаниеТипов("СправочникСсылка.УсловияНорм"));
	РезультирующаяТаблица.Колонки.Добавить("Использовать",	Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаТаблицыЗанятыхРабочихМест Из ТаблицаЗанятыхРабочихМест Цикл
		
		УсловиеПоПодразделениюНайдено = Ложь;
		
		СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто",СтрокаТаблицыЗанятыхРабочихМест.Подразделение,СтрокаТаблицыЗанятыхРабочихМест.Должность,СтрокаТаблицыЗанятыхРабочихМест.РабочееМесто);
		
		НайденныеСтроки = ТаблицаУсловий.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			//обход иерархии выключен 13.03.2017 - решили не использовать
			//Если ЗначениеЗаполнено(СтрокаТаблицыЗанятыхРабочихМест.Подразделение.Родитель) Тогда
			//	
			//	ОбойтиПодразделенияРекурсивно(УсловиеПоПодразделениюНайдено,ТаблицаУсловий,РезультирующаяТаблица,СтрокаТаблицыЗанятыхРабочихМест,СтрокаТаблицыЗанятыхРабочихМест.Подразделение.Родитель);				
			//	
			//КонецЕсли;
			
		Иначе
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				НоваяСтрока = РезультирующаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗанятыхРабочихМест);
				НоваяСтрока.Условие = НайденнаяСтрока.УсловиеНормы;
				НоваяСтрока.Период = НайденнаяСтрока.Период;
				НоваяСтрока.Использовать = НайденнаяСтрока.Использовать;
				
			КонецЦикла;
			
			УсловиеПоПодразделениюНайдено = Истина;
			
		КонецЕсли;
		
		//поиск по пустому подразделению
		Если НЕ УсловиеПоПодразделениюНайдено Тогда
			СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто",Справочники.Подразделения.ПустаяСсылка(),СтрокаТаблицыЗанятыхРабочихМест.Должность,СтрокаТаблицыЗанятыхРабочихМест.РабочееМесто);
			
			НайденныеСтроки = ТаблицаУсловий.НайтиСтроки(СтруктураПоиска);
			
			Если НЕ НайденныеСтроки.Количество() = 0 Тогда
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					НоваяСтрока = РезультирующаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗанятыхРабочихМест);
					НоваяСтрока.Условие = НайденнаяСтрока.УсловиеНормы;
					НоваяСтрока.Период = НайденнаяСтрока.Период;
					НоваяСтрока.Использовать = НайденнаяСтрока.Использовать;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультирующаяТаблица;
	
КонецФункции

Процедура ОбойтиПодразделенияРекурсивно(УсловиеПоПодразделениюНайдено,ТаблицаУсловий,РезультирующаяТаблица,СтрокаТаблицыЗанятыхРабочихМест,ГоловноеПодразделение)
	
	СтруктураПоиска = Новый Структура("Подразделение, Должность, РабочееМесто",ГоловноеПодразделение,СтрокаТаблицыЗанятыхРабочихМест.Должность,СтрокаТаблицыЗанятыхРабочихМест.РабочееМесто);
	
	НайденныеСтроки = ТаблицаУсловий.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		Если ЗначениеЗаполнено(ГоловноеПодразделение.Родитель) Тогда
			
			ОбойтиПодразделенияРекурсивно(УсловиеПоПодразделениюНайдено,ТаблицаУсловий,РезультирующаяТаблица,СтрокаТаблицыЗанятыхРабочихМест,ГоловноеПодразделение.Родитель);				
			
		КонецЕсли;
		
		Возврат;
		
	Иначе
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НоваяСтрока = РезультирующаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗанятыхРабочихМест);
			НоваяСтрока.Условие = НайденнаяСтрока.УсловиеНормы;
			НоваяСтрока.Период = НайденнаяСтрока.Период;
			НоваяСтрока.Использовать = НайденнаяСтрока.Использовать;
			
		КонецЦикла;
		
		УсловиеПоПодразделениюНайдено = Истина;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НужныШтрихкоды(МассивНоменклатуры) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.ИспользоватьШтрихкод
	|	И Номенклатура.Ссылка В(&МассивНоменклатуры)";
	
	Запрос.УстановитьПараметр("МассивНоменклатуры",МассивНоменклатуры);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

//АСТБ_ALEXEY_70409**************************************************************
Функция ПолучитьМОЛСклада(Склад,Организация,СоздательДокумента = Неопределено) Экспорт
//АСТБ_ALEXEY_70409**************************************************************

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкладыМатериальноОтветственныеЛица.МОЛ
	|ИЗ
	|	Справочник.Склады.МатериальноОтветственныеЛица КАК СкладыМатериальноОтветственныеЛица
	|ГДЕ
	|	СкладыМатериальноОтветственныеЛица.Ссылка = &Ссылка
	|	И СкладыМатериальноОтветственныеЛица.МОЛ.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Ссылка",		Склад);
	Запрос.УстановитьПараметр("Владелец",	Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		//АСТБ_ALEXEY_70409**************************************************************
		Если СоздательДокумента = Неопределено Тогда
			Возврат Выборка.МОЛ;
		Иначе
			Возврат УточнитьМОЛПоСоздателюДокумента(Склад, Выборка.МОЛ, СоздательДокумента, Организация);
		КонецЕсли;
		//АСТБ_ALEXEY_70409**************************************************************
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьМассивМОЛСклада(Склад,Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкладыМатериальноОтветственныеЛица.МОЛ
	|ИЗ
	|	Справочник.Склады.МатериальноОтветственныеЛица КАК СкладыМатериальноОтветственныеЛица
	|ГДЕ
	|	СкладыМатериальноОтветственныеЛица.Ссылка = &Ссылка
	|	И СкладыМатериальноОтветственныеЛица.МОЛ.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Ссылка",		Склад);
	Запрос.УстановитьПараметр("Владелец",	Организация);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МОЛ");
	
КонецФункции

//параметры
// 1. ТаблицаНоменклатурыНормСотрудников - таблица вида:
// | Сотрудник | НоменклатураНормы |
// 2. ДатаАнализа - граница (дата) анализа данных регистров
// 3. Организация - организация для анализа
//
//возвращает таблицу вида:
// | Сотрудник 
// | НоменклатураНормы 
// | Номенклатура 
// | ХарактеристикаНоменклатуры 
// | ПолНоменклатуры 
// | ЕстьРазмеры 
// | ПриоритетСоответствия 
// | Приоритет 
// | ПриоритетРазмера 
// | ТолькоДляСотрудника 
// | ВидАнтропометрии 
// | ЗначениеАнтропометрии 
// | Рост 
// | ИспользоватьРост 
// | ВидСИЗ 
// | Комплект
// | КоличествоВКомплекте 
//
Функция ПодобратьРазмерыДляСотрудников(ТаблицаНоменклатурыНормСотрудников,ДатаАнализа,Организация,ВыводитьКомплектующиеСНеподобранымиРазмерами = Ложь) Экспорт
	
	ТаблицаДляОпределенияМассиваСотрудников = ТаблицаНоменклатурыНормСотрудников.Скопировать(,"Сотрудник");
	ТаблицаДляОпределенияМассиваСотрудников.Свернуть("Сотрудник");
	
	МассивСотрудников = ТаблицаДляОпределенияМассиваСотрудников.ВыгрузитьКолонку("Сотрудник");
	
	ТаблицаДляОпределенияМассиваСотрудников.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНоменклатурыНормСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаНоменклатурыНормСотрудников.НоменклатураНормы КАК НоменклатураНормы
	|ПОМЕСТИТЬ ВТ_ТаблицаНоменклатурыНормСотрудников
	|ИЗ
	|	&ТаблицаНоменклатурыНормСотрудников КАК ТаблицаНоменклатурыНормСотрудников
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник,
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность
	|ПОМЕСТИТЬ ВТ_ЗанятыеРабочиеМеста
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(&ПериодРасчета, Сотрудник В (&МассивСотрудников)) КАК ЗанятыеРабочиеМестаОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Подразделение,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ХарактеристикиНоменклатуры
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураКомплектующие.Номенклатура КАК Номенклатура,
	|	НоменклатураКомплектующие.Ссылка КАК Комплект,
	|	ВЫБОР
	|		КОГДА ВТ_ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРазмеры,
	|	НоменклатураКомплектующие.Количество КАК КоличествоВКомплекте
	|ПОМЕСТИТЬ ВТ_Комплектующие
	|ИЗ
	|	Справочник.Номенклатура.Комплектующие КАК НоменклатураКомплектующие
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиНоменклатуры КАК ВТ_ХарактеристикиНоменклатуры
	|		ПО НоменклатураКомплектующие.Номенклатура = ВТ_ХарактеристикиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Сотрудник КАК Сотрудник,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Подразделение КАК Подразделение,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Должность КАК Должность,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.УсловиеСоответствия КАК УсловиеСоответствия,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.НоменклатураНормыОрганизации КАК НоменклатураНормы,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура КАК Номенклатура,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура.Пол КАК Пол,
	|	ВЫБОР
	|		КОГДА ВТ_ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРазмеры,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Приоритет КАК Приоритет,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура.КоличествоРазмеровМеньше КАК КоличествоРазмеровМеньше,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура.КоличествоРазмеровБольше КАК КоличествоРазмеровБольше,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Комплект,
	|	0 КАК КоличествоВКомплекте
	|ПОМЕСТИТЬ ВТ_Маппинг
	|ИЗ
	|	РегистрСведений.СоответствияНоменклатурыВыдачи.СрезПоследних(&ПериодРасчета, НоменклатураНормыОрганизации В (&МассивНоменклатурыНорм)) КАК СоответствияНоменклатурыВыдачиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиНоменклатуры КАК ВТ_ХарактеристикиНоменклатуры
	|		ПО СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура = ВТ_ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Использовать
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Подразделение,
	|	Должность,
	|	НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Комплектующие.Номенклатура КАК Номенклатура,
	//+++АСТБ_Горюшин_Алексей_26451
	|   ВЫБОР
	|		КОГДА ВТ_Комплектующие.Номенклатура.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|			ТОГДА ВТ_Комплектующие.Комплект.Пол
	|		ИНАЧЕ ВТ_Комплектующие.Номенклатура.Пол
	|   КОНЕЦ КАК НоменклатураПол,
	//было
	//|	ВТ_Комплектующие.Номенклатура.Пол КАК НоменклатураПол,
	//---АСТБ_Горюшин_Алексей_26451
	|	ВТ_Комплектующие.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	ВТ_Комплектующие.Номенклатура.КоличествоРазмеровМеньше КАК НоменклатураКоличествоРазмеровМеньше,
	|	ВТ_Комплектующие.Номенклатура.КоличествоРазмеровБольше КАК НоменклатураКоличествоРазмеровБольше,
	|	ВТ_Комплектующие.Комплект КАК Комплект,
	|	ВТ_Комплектующие.КоличествоВКомплекте КАК КоличествоВКомплекте
	|ПОМЕСТИТЬ ВТ_МаппингКомплектующие
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Комплектующие КАК ВТ_Комплектующие
	|		ПО ВТ_Маппинг.Номенклатура = ВТ_Комплектующие.Комплект
	|ГДЕ
	|	ВТ_Маппинг.Номенклатура.Комплект
	|	И НЕ ВТ_Комплектующие.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Маппинг.Сотрудник КАК Сотрудник,
	|	ВТ_Маппинг.Подразделение КАК Подразделение,
	|	ВТ_Маппинг.Должность КАК Должность,
	|	ВТ_Маппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_Маппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Маппинг.Номенклатура КАК Номенклатура,
	|	ВТ_Маппинг.Пол КАК Пол,
	|	ВТ_Маппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Маппинг.Приоритет КАК Приоритет,
	|	ВТ_Маппинг.КоличествоРазмеровМеньше КАК КоличествоРазмеровМеньше,
	|	ВТ_Маппинг.КоличествоРазмеровБольше КАК КоличествоРазмеровБольше,
	|	ВТ_Маппинг.Комплект КАК Комплект,
	|	ВТ_Маппинг.КоличествоВКомплекте КАК КоличествоВКомплекте
	|ПОМЕСТИТЬ ВТ_ОбщийМаппинг
	|ИЗ
	|	ВТ_Маппинг КАК ВТ_Маппинг
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_МаппингКомплектующие.Сотрудник,
	|	ВТ_МаппингКомплектующие.Подразделение,
	|	ВТ_МаппингКомплектующие.Должность,
	|	ВТ_МаппингКомплектующие.УсловиеСоответствия,
	|	ВТ_МаппингКомплектующие.НоменклатураНормы,
	|	ВТ_МаппингКомплектующие.Номенклатура,
	|	ВТ_МаппингКомплектующие.НоменклатураПол,
	|	ВТ_МаппингКомплектующие.ЕстьРазмеры,
	|	ВТ_МаппингКомплектующие.Приоритет,
	|	ВТ_МаппингКомплектующие.НоменклатураКоличествоРазмеровМеньше,
	|	ВТ_МаппингКомплектующие.НоменклатураКоличествоРазмеровБольше,
	|	ВТ_МаппингКомплектующие.Комплект,
	|	ВТ_МаппингКомплектующие.КоличествоВКомплекте
	|ИЗ
	|	ВТ_МаппингКомплектующие КАК ВТ_МаппингКомплектующие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбщийМаппинг.Сотрудник КАК Сотрудник,
	|	ВТ_ОбщийМаппинг.Подразделение КАК Подразделение,
	|	ВТ_ОбщийМаппинг.Должность КАК Должность,
	|	ВТ_ОбщийМаппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_ОбщийМаппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ОбщийМаппинг.Номенклатура КАК Номенклатура,
	|	ВТ_ОбщийМаппинг.Пол КАК Пол,
	|	ВТ_ОбщийМаппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_ОбщийМаппинг.Приоритет КАК Приоритет,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровМеньше КАК КоличествоРазмеровМеньше,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровБольше КАК КоличествоРазмеровБольше,
	|	ВТ_ОбщийМаппинг.Комплект КАК Комплект,
	|	ВТ_ОбщийМаппинг.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	10 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_Сотрудник_Подразделение_Должность
	|ИЗ
	|	ВТ_ОбщийМаппинг КАК ВТ_ОбщийМаппинг
	|ГДЕ
	|	НЕ ВТ_ОбщийМаппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_ОбщийМаппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_ОбщийМаппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Подразделение,
	|	Должность,
	|	НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбщийМаппинг.Сотрудник КАК Сотрудник,
	|	ВТ_ОбщийМаппинг.Подразделение КАК Подразделение,
	|	ВТ_ОбщийМаппинг.Должность КАК Должность,
	|	ВТ_ОбщийМаппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_ОбщийМаппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ОбщийМаппинг.Номенклатура КАК Номенклатура,
	|	ВТ_ОбщийМаппинг.Пол КАК Пол,
	|	ВТ_ОбщийМаппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_ОбщийМаппинг.Приоритет КАК Приоритет,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровМеньше КАК КоличествоРазмеровМеньше,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровБольше КАК КоличествоРазмеровБольше,
	|	ВТ_ОбщийМаппинг.Комплект КАК Комплект,
	|	ВТ_ОбщийМаппинг.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	20 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность
	|ИЗ
	|	ВТ_ОбщийМаппинг КАК ВТ_ОбщийМаппинг
	|ГДЕ
	|	НЕ ВТ_ОбщийМаппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВТ_ОбщийМаппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_ОбщийМаппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Подразделение,
	|	Должность,
	|	НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбщийМаппинг.Сотрудник КАК Сотрудник,
	|	ВТ_ОбщийМаппинг.Подразделение КАК Подразделение,
	|	ВТ_ОбщийМаппинг.Должность КАК Должность,
	|	ВТ_ОбщийМаппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_ОбщийМаппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ОбщийМаппинг.Номенклатура КАК Номенклатура,
	|	ВТ_ОбщийМаппинг.Пол КАК Пол,
	|	ВТ_ОбщийМаппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_ОбщийМаппинг.Приоритет КАК Приоритет,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровМеньше КАК КоличествоРазмеровМеньше,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровБольше КАК КоличествоРазмеровБольше,
	|	ВТ_ОбщийМаппинг.Комплект КАК Комплект,
	|	ВТ_ОбщийМаппинг.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	30 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность
	|ИЗ
	|	ВТ_ОбщийМаппинг КАК ВТ_ОбщийМаппинг
	|ГДЕ
	|	НЕ ВТ_ОбщийМаппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_ОбщийМаппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И ВТ_ОбщийМаппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Подразделение,
	|	Должность,
	|	НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбщийМаппинг.Сотрудник КАК Сотрудник,
	|	ВТ_ОбщийМаппинг.Подразделение КАК Подразделение,
	|	ВТ_ОбщийМаппинг.Должность КАК Должность,
	|	ВТ_ОбщийМаппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_ОбщийМаппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ОбщийМаппинг.Номенклатура КАК Номенклатура,
	|	ВТ_ОбщийМаппинг.Пол КАК Пол,
	|	ВТ_ОбщийМаппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_ОбщийМаппинг.Приоритет КАК Приоритет,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровМеньше КАК КоличествоРазмеровМеньше,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровБольше КАК КоличествоРазмеровБольше,
	|	ВТ_ОбщийМаппинг.Комплект КАК Комплект,
	|	ВТ_ОбщийМаппинг.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	40 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность
	|ИЗ
	|	ВТ_ОбщийМаппинг КАК ВТ_ОбщийМаппинг
	|ГДЕ
	|	НЕ ВТ_ОбщийМаппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВТ_ОбщийМаппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И ВТ_ОбщийМаппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Подразделение,
	|	Должность,
	|	НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбщийМаппинг.Сотрудник КАК Сотрудник,
	|	ВТ_ОбщийМаппинг.Подразделение КАК Подразделение,
	|	ВТ_ОбщийМаппинг.Должность КАК Должность,
	|	ВТ_ОбщийМаппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_ОбщийМаппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ОбщийМаппинг.Номенклатура КАК Номенклатура,
	|	ВТ_ОбщийМаппинг.Пол КАК Пол,
	|	ВТ_ОбщийМаппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_ОбщийМаппинг.Приоритет КАК Приоритет,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровМеньше КАК КоличествоРазмеровМеньше,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровБольше КАК КоличествоРазмеровБольше,
	|	ВТ_ОбщийМаппинг.Комплект КАК Комплект,
	|	ВТ_ОбщийМаппинг.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	50 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность
	|ИЗ
	|	ВТ_ОбщийМаппинг КАК ВТ_ОбщийМаппинг
	|ГДЕ
	|	ВТ_ОбщийМаппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_ОбщийМаппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_ОбщийМаппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Подразделение,
	|	Должность,
	|	НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбщийМаппинг.Сотрудник КАК Сотрудник,
	|	ВТ_ОбщийМаппинг.Подразделение КАК Подразделение,
	|	ВТ_ОбщийМаппинг.Должность КАК Должность,
	|	ВТ_ОбщийМаппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_ОбщийМаппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ОбщийМаппинг.Номенклатура КАК Номенклатура,
	|	ВТ_ОбщийМаппинг.Пол КАК Пол,
	|	ВТ_ОбщийМаппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_ОбщийМаппинг.Приоритет КАК Приоритет,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровМеньше КАК КоличествоРазмеровМеньше,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровБольше КАК КоличествоРазмеровБольше,
	|	ВТ_ОбщийМаппинг.Комплект КАК Комплект,
	|	ВТ_ОбщийМаппинг.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	60 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность
	|ИЗ
	|	ВТ_ОбщийМаппинг КАК ВТ_ОбщийМаппинг
	|ГДЕ
	|	ВТ_ОбщийМаппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВТ_ОбщийМаппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_ОбщийМаппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Подразделение,
	|	Должность,
	|	НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбщийМаппинг.Сотрудник КАК Сотрудник,
	|	ВТ_ОбщийМаппинг.Подразделение КАК Подразделение,
	|	ВТ_ОбщийМаппинг.Должность КАК Должность,
	|	ВТ_ОбщийМаппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_ОбщийМаппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ОбщийМаппинг.Номенклатура КАК Номенклатура,
	|	ВТ_ОбщийМаппинг.Пол КАК Пол,
	|	ВТ_ОбщийМаппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_ОбщийМаппинг.Приоритет КАК Приоритет,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровМеньше КАК КоличествоРазмеровМеньше,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровБольше КАК КоличествоРазмеровБольше,
	|	ВТ_ОбщийМаппинг.Комплект КАК Комплект,
	|	ВТ_ОбщийМаппинг.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	70 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность
	|ИЗ
	|	ВТ_ОбщийМаппинг КАК ВТ_ОбщийМаппинг
	|ГДЕ
	|	ВТ_ОбщийМаппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_ОбщийМаппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И ВТ_ОбщийМаппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Подразделение,
	|	Должность,
	|	НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбщийМаппинг.Сотрудник КАК Сотрудник,
	|	ВТ_ОбщийМаппинг.Подразделение КАК Подразделение,
	|	ВТ_ОбщийМаппинг.Должность КАК Должность,
	|	ВТ_ОбщийМаппинг.УсловиеСоответствия КАК УсловиеСоответствия,
	|	ВТ_ОбщийМаппинг.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ОбщийМаппинг.Номенклатура КАК Номенклатура,
	|	ВТ_ОбщийМаппинг.Пол КАК Пол,
	|	ВТ_ОбщийМаппинг.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_ОбщийМаппинг.Приоритет КАК Приоритет,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровМеньше КАК КоличествоРазмеровМеньше,
	|	ВТ_ОбщийМаппинг.КоличествоРазмеровБольше КАК КоличествоРазмеровБольше,
	|	ВТ_ОбщийМаппинг.Комплект КАК Комплект,
	|	ВТ_ОбщийМаппинг.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	80 КАК ПриоритетСоответствия
	|ПОМЕСТИТЬ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность
	|ИЗ
	|	ВТ_ОбщийМаппинг КАК ВТ_ОбщийМаппинг
	|ГДЕ
	|	ВТ_ОбщийМаппинг.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВТ_ОбщийМаппинг.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И ВТ_ОбщийМаппинг.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Подразделение,
	|	Должность,
	|	НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ЗанятыеРабочиеМеста.Сотрудник КАК Сотрудник,
	|	ВТ_ЗанятыеРабочиеМеста.Подразделение КАК Подразделение,
	|	ВТ_ЗанятыеРабочиеМеста.Должность КАК Должность,
	|	ВТ_ТаблицаНоменклатурыНормСотрудников.НоменклатураНормы КАК НоменклатураНормы
	|ПОМЕСТИТЬ ВТ_Сотрудники_ЗРМ
	|ИЗ
	|	ВТ_ТаблицаНоменклатурыНормСотрудников КАК ВТ_ТаблицаНоменклатурыНормСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗанятыеРабочиеМеста КАК ВТ_ЗанятыеРабочиеМеста
	|		ПО ВТ_ТаблицаНоменклатурыНормСотрудников.Сотрудник = ВТ_ЗанятыеРабочиеМеста.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Подразделение,
	|	Должность,
	|	НоменклатураНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаНоменклатурыНормСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЗанятыеРабочиеМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сотрудники_ЗРМ.Сотрудник КАК Сотрудник,
	|	ВТ_Сотрудники_ЗРМ.НоменклатураНормы КАК НоменклатураНормы,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Номенклатура ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Номенклатура ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Номенклатура ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|																								ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Номенклатура
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Номенклатура
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Номенклатура
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Номенклатура
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Номенклатура
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.ЕстьРазмеры ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.ЕстьРазмеры ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.ЕстьРазмеры ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.ЕстьРазмеры ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.ЕстьРазмеры ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.ЕстьРазмеры ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.ЕстьРазмеры ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.ЕстьРазмеры ЕСТЬ NULL
	|																								ТОГДА ЛОЖЬ
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.ЕстьРазмеры
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.ЕстьРазмеры
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.ЕстьРазмеры
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.ЕстьРазмеры
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.ЕстьРазмеры
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.ЕстьРазмеры
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.ЕстьРазмеры
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.ЕстьРазмеры
	|	КОНЕЦ КАК ЕстьРазмеры,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.ПриоритетСоответствия ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.ПриоритетСоответствия ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.ПриоритетСоответствия ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.ПриоритетСоответствия ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.ПриоритетСоответствия ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.ПриоритетСоответствия ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.ПриоритетСоответствия ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.ПриоритетСоответствия ЕСТЬ NULL
	|																								ТОГДА 0
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.ПриоритетСоответствия
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.ПриоритетСоответствия
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.ПриоритетСоответствия
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.ПриоритетСоответствия
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.ПриоритетСоответствия
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.ПриоритетСоответствия
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.ПриоритетСоответствия
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.ПриоритетСоответствия
	|	КОНЕЦ КАК ПриоритетСоответствия,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Приоритет ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Приоритет ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Приоритет ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Приоритет ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Приоритет ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Приоритет ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Приоритет ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Приоритет ЕСТЬ NULL
	|																								ТОГДА 0
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Приоритет
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Приоритет
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Приоритет
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Приоритет
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Приоритет
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Приоритет
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Приоритет
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.Приоритет
	|	КОНЕЦ КАК Приоритет,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Номенклатура ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Номенклатура ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Номенклатура ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Номенклатура ЕСТЬ NULL
	|																								ТОГДА ЛОЖЬ
	|																							ИНАЧЕ ЛОЖЬ
	|																						КОНЕЦ
	|																				ИНАЧЕ ЛОЖЬ
	|																			КОНЕЦ
	|																	ИНАЧЕ ЛОЖЬ
	|																КОНЕЦ
	|														ИНАЧЕ ЛОЖЬ
	|													КОНЕЦ
	|											ИНАЧЕ ИСТИНА
	|										КОНЕЦ
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТолькоДляСотрудника,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.КоличествоРазмеровМеньше ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.КоличествоРазмеровМеньше ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.КоличествоРазмеровМеньше ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.КоличествоРазмеровМеньше ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.КоличествоРазмеровМеньше ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.КоличествоРазмеровМеньше ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.КоличествоРазмеровМеньше ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.КоличествоРазмеровМеньше ЕСТЬ NULL
	|																								ТОГДА 0
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.КоличествоРазмеровМеньше
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.КоличествоРазмеровМеньше
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.КоличествоРазмеровМеньше
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.КоличествоРазмеровМеньше
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.КоличествоРазмеровМеньше
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.КоличествоРазмеровМеньше
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.КоличествоРазмеровМеньше
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.КоличествоРазмеровМеньше
	|	КОНЕЦ КАК КоличествоРазмеровМеньше,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.КоличествоРазмеровБольше ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.КоличествоРазмеровБольше ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.КоличествоРазмеровБольше ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.КоличествоРазмеровБольше ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.КоличествоРазмеровБольше ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.КоличествоРазмеровБольше ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.КоличествоРазмеровБольше ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.КоличествоРазмеровБольше ЕСТЬ NULL
	|																								ТОГДА 0
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.КоличествоРазмеровБольше
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.КоличествоРазмеровБольше
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.КоличествоРазмеровБольше
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.КоличествоРазмеровБольше
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.КоличествоРазмеровБольше
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.КоличествоРазмеровБольше
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.КоличествоРазмеровБольше
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.КоличествоРазмеровБольше
	|	КОНЕЦ КАК КоличествоРазмеровБольше,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Комплект ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Комплект ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Комплект ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Комплект ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Комплект ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Комплект ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Комплект ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Комплект ЕСТЬ NULL
	|																								ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Комплект
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Комплект
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Комплект
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Комплект
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Комплект
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Комплект
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Комплект
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.Комплект
	|	КОНЕЦ КАК Комплект,
	|	ВЫБОР
	|		КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.КоличествоВКомплекте ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.КоличествоВКомплекте ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.КоличествоВКомплекте ЕСТЬ NULL
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.КоличествоВКомплекте ЕСТЬ NULL
	|												ТОГДА ВЫБОР
	|														КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.КоличествоВКомплекте ЕСТЬ NULL
	|															ТОГДА ВЫБОР
	|																	КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.КоличествоВКомплекте ЕСТЬ NULL
	|																		ТОГДА ВЫБОР
	|																				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.КоличествоВКомплекте ЕСТЬ NULL
	|																					ТОГДА ВЫБОР
	|																							КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.КоличествоВКомплекте ЕСТЬ NULL
	|																								ТОГДА 0
	|																							ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.КоличествоВКомплекте
	|																						КОНЕЦ
	|																				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.КоличествоВКомплекте
	|																			КОНЕЦ
	|																	ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.КоличествоВКомплекте
	|																КОНЕЦ
	|														ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.КоличествоВКомплекте
	|													КОНЕЦ
	|											ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.КоличествоВКомплекте
	|										КОНЕЦ
	|								ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.КоличествоВКомплекте
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.КоличествоВКомплекте
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.КоличествоВКомплекте
	|	КОНЕЦ КАК КоличествоВКомплекте
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_Сотрудники_ЗРМ КАК ВТ_Сотрудники_ЗРМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность КАК ВТ_Маппинг_Сотрудник_Подразделение_Должность
	|		ПО ВТ_Сотрудники_ЗРМ.Сотрудник = ВТ_Маппинг_Сотрудник_Подразделение_Должность.Сотрудник
	|			И ВТ_Сотрудники_ЗРМ.Подразделение = ВТ_Маппинг_Сотрудник_Подразделение_Должность.Подразделение
	|			И ВТ_Сотрудники_ЗРМ.Должность = ВТ_Маппинг_Сотрудник_Подразделение_Должность.Должность
	|			И ВТ_Сотрудники_ЗРМ.НоменклатураНормы = ВТ_Маппинг_Сотрудник_Подразделение_Должность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_Сотрудник_Подразделение_Должность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_Должность.Пол = ВТ_Сотрудники_ЗРМ.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность КАК ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность
	|		ПО ВТ_Сотрудники_ЗРМ.Сотрудник = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Сотрудник
	|			И ВТ_Сотрудники_ЗРМ.Должность = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Должность
	|			И ВТ_Сотрудники_ЗРМ.НоменклатураНормы = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_Должность.Пол = ВТ_Сотрудники_ЗРМ.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность КАК ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность
	|		ПО ВТ_Сотрудники_ЗРМ.Сотрудник = ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Сотрудник
	|			И ВТ_Сотрудники_ЗРМ.Подразделение = ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Подразделение
	|			И ВТ_Сотрудники_ЗРМ.НоменклатураНормы = ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_Сотрудник_Подразделение_ПустаяДолжность.Пол = ВТ_Сотрудники_ЗРМ.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность КАК ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность
	|		ПО ВТ_Сотрудники_ЗРМ.Подразделение = ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Подразделение
	|			И ВТ_Сотрудники_ЗРМ.Должность = ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Должность
	|			И ВТ_Сотрудники_ЗРМ.НоменклатураНормы = ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_Должность.Пол = ВТ_Сотрудники_ЗРМ.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность КАК ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность
	|		ПО ВТ_Сотрудники_ЗРМ.Должность = ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Должность
	|			И ВТ_Сотрудники_ЗРМ.НоменклатураНормы = ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_Должность.Пол = ВТ_Сотрудники_ЗРМ.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность КАК ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность
	|		ПО ВТ_Сотрудники_ЗРМ.Подразделение = ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Подразделение
	|			И ВТ_Сотрудники_ЗРМ.НоменклатураНормы = ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_Подразделение_ПустаяДолжность.Пол = ВТ_Сотрудники_ЗРМ.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность КАК ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность
	|		ПО ВТ_Сотрудники_ЗРМ.НоменклатураНормы = ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_ПустойСотрудник_ПустоеПодразделение_ПустаяДолжность.Пол = ВТ_Сотрудники_ЗРМ.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность КАК ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность
	|		ПО ВТ_Сотрудники_ЗРМ.Сотрудник = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Сотрудник
	|			И ВТ_Сотрудники_ЗРМ.НоменклатураНормы = ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.НоменклатураНормы
	|			И (ВЫБОР
	|				КОГДА ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Маппинг_Сотрудник_ПустоеПодразделение_ПустаяДолжность.Пол = ВТ_Сотрудники_ЗРМ.Сотрудник.ФизическоеЛицо.Пол
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Сотрудники_ЗРМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК ЗначениеСвойства
	|ПОМЕСТИТЬ ВТ_РостСотрудников
	|ИЗ
	|	РегистрСведений.ЗначенияАнтропометрическихСвойств КАК ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.Рост)
	|	И ЗначенияАнтропометрическихСвойств.Сотрудник В(&МассивСотрудников)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	//+++АСТБ_ALEXEY_110616_**************************************************************
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК ЗначениеСвойства
	|ПОМЕСТИТЬ ВТ_РостВерхОдеждыСотрудников
	|ИЗ
	|	РегистрСведений.ЗначенияАнтропометрическихСвойств КАК ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РостВерхОдежды)
	|	И ЗначенияАнтропометрическихСвойств.Сотрудник В(&МассивСотрудников)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК ЗначениеСвойства
	|ПОМЕСТИТЬ ВТ_РостНизОдеждыСотрудников
	|ИЗ
	|	РегистрСведений.ЗначенияАнтропометрическихСвойств КАК ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РостНизОдежды)
	|	И ЗначенияАнтропометрическихСвойств.Сотрудник В(&МассивСотрудников)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	//---АСТБ_ALEXEY_110616_**************************************************************
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.ЕстьРазмеры КАК ЕстьРазмеры,
	|	МИНИМУМ(ВТ_Результат.ПриоритетСоответствия) КАК ПриоритетСоответствия,
	|	МИНИМУМ(ВТ_Результат.Приоритет) КАК Приоритет,
	|	ВТ_Результат.ТолькоДляСотрудника КАК ТолькоДляСотрудника,
	|	ВТ_Результат.КоличествоРазмеровМеньше КАК КоличествоРазмеровМеньше,
	|	ВТ_Результат.КоличествоРазмеровБольше КАК КоличествоРазмеровБольше,
	|	ВТ_Результат.Номенклатура.ВидАнтропометрическогоСвойства КАК ВидАнтропометрии,
	|	ЕСТЬNULL(ВложенныйЗапрос.ЗначениеСвойства, 0) КАК ЗначениеАнтропометрии,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ЗначениеСвойства ЕСТЬ NULL
	|			ТОГДА 1000
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриоритетРазмера,
	//+++АСТБ_Горюшин_Алексей_26451
	|   ВЫБОР
	|		КОГДА ВТ_Результат.Номенклатура.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка)
	|			ТОГДА ВТ_Результат.Комплект.Пол
	|		ИНАЧЕ ВТ_Результат.Номенклатура.Пол
	|   КОНЕЦ КАК ПолНоменклатуры,
	//было
	//|	ВТ_Результат.Номенклатура.Пол КАК ПолНоменклатуры,
	//---АСТБ_Горюшин_Алексей_26451
	|	ВТ_Результат.Номенклатура.ИспользоватьРост КАК ИспользоватьРост,
	|	ВТ_Результат.Номенклатура.ВидСИЗ КАК ВидСИЗ,
	//+++АСТБ_ALEXEY_110616_**************************************************************
	//|	ВЫБОР
	//|		КОГДА ВТ_Результат.Номенклатура.ИспользоватьРост
	//|			ТОГДА ЕСТЬNULL(ВТ_РостСотрудников.ЗначениеСвойства, 0)
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК Рост,
	|	ВЫБОР
	|		КОГДА ВТ_Результат.Номенклатура.ИспользоватьРост
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Результат.Номенклатура.ВидРоста = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.Рост)
	|						ТОГДА ЕСТЬNULL(ВТ_РостСотрудников.ЗначениеСвойства, 0)
	|					КОГДА ВТ_Результат.Номенклатура.ВидРоста = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РостВерхОдежды)
	|						ТОГДА ЕСТЬNULL(ВТ_РостВерхОдеждыСотрудников.ЗначениеСвойства, 0)
	|					КОГДА ВТ_Результат.Номенклатура.ВидРоста = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РостНизОдежды)
	|						ТОГДА ЕСТЬNULL(ВТ_РостНизОдеждыСотрудников.ЗначениеСвойства, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Рост,
	//---АСТБ_ALEXEY_110616_**************************************************************
	|	ВТ_Результат.Сотрудник.ФизическоеЛицо.Пол КАК ПолСотрудника,
	|	ВТ_Результат.Комплект КАК Комплект,
	|	ВТ_Результат.КоличествоВКомплекте КАК КоличествоВКомплекте
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РостСотрудников КАК ВТ_РостСотрудников
	|		ПО ВТ_Результат.Сотрудник = ВТ_РостСотрудников.Сотрудник
	//+++АСТБ_ALEXEY_110616_**************************************************************
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РостВерхОдеждыСотрудников КАК ВТ_РостВерхОдеждыСотрудников
	|		ПО ВТ_Результат.Сотрудник = ВТ_РостВерхОдеждыСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РостНизОдеждыСотрудников КАК ВТ_РостНизОдеждыСотрудников
	|		ПО ВТ_Результат.Сотрудник = ВТ_РостНизОдеждыСотрудников.Сотрудник
	//---АСТБ_ALEXEY_110616_**************************************************************
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|			ЗначенияАнтропометрическихСвойств.ВидСвойства КАК ВидСвойства,
	|			ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК ЗначениеСвойства
	|		ИЗ
	|			РегистрСведений.ЗначенияАнтропометрическихСвойств КАК ЗначенияАнтропометрическихСвойств
	|		ГДЕ
	|			ЗначенияАнтропометрическихСвойств.Сотрудник В(&МассивСотрудников)
	//+++АСТБ_ALEXEY_110616_**************************************************************
	//|			И НЕ ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.Рост)) КАК ВложенныйЗапрос
	|			И НЕ (ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.Рост) ИЛИ ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РостВерхОдежды) ИЛИ ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РостНизОдежды))) КАК ВложенныйЗапрос
	//---АСТБ_ALEXEY_110616_**************************************************************
	|		ПО ВТ_Результат.Сотрудник = ВложенныйЗапрос.Сотрудник
	|			И ВТ_Результат.Номенклатура.ВидАнтропометрическогоСвойства = ВложенныйЗапрос.ВидСвойства
	|ГДЕ
	|	НЕ ВТ_Результат.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.Сотрудник,
	|	ВТ_Результат.НоменклатураНормы,
	|	ВТ_Результат.Номенклатура,
	|	ВТ_Результат.ЕстьРазмеры,
	|	ВТ_Результат.ТолькоДляСотрудника,
	|	ВТ_Результат.Комплект,
	|	ВТ_Результат.КоличествоРазмеровМеньше,
	|	ВТ_Результат.КоличествоРазмеровБольше,
	|	ВТ_Результат.Номенклатура.ВидАнтропометрическогоСвойства,
	|	ВТ_Результат.Номенклатура.Пол,
	|	ВТ_Результат.Номенклатура.ИспользоватьРост,
	|	ВТ_Результат.Номенклатура.ВидСИЗ,
	//+++АСТБ_ALEXEY_110616_**************************************************************
	//|	ВЫБОР
	//|		КОГДА ВТ_Результат.Номенклатура.ИспользоватьРост
	//|			ТОГДА ЕСТЬNULL(ВТ_РостСотрудников.ЗначениеСвойства, 0)
	//|		ИНАЧЕ 0
	//|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Результат.Номенклатура.ИспользоватьРост
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Результат.Номенклатура.ВидРоста = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.Рост)
	|						ТОГДА ЕСТЬNULL(ВТ_РостСотрудников.ЗначениеСвойства, 0)
	|					КОГДА ВТ_Результат.Номенклатура.ВидРоста = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РостВерхОдежды)
	|						ТОГДА ЕСТЬNULL(ВТ_РостВерхОдеждыСотрудников.ЗначениеСвойства, 0)
	|					КОГДА ВТ_Результат.Номенклатура.ВидРоста = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РостНизОдежды)
	|						ТОГДА ЕСТЬNULL(ВТ_РостНизОдеждыСотрудников.ЗначениеСвойства, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	//---АСТБ_ALEXEY_110616_**************************************************************
	|	ВТ_Результат.Сотрудник.ФизическоеЛицо.Пол,
	|	ВТ_Результат.КоличествоВКомплекте,
	|	ЕСТЬNULL(ВложенныйЗапрос.ЗначениеСвойства, 0),
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ЗначениеСвойства ЕСТЬ NULL
	|			ТОГДА 1000
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НоменклатураНормы,
	|	ПриоритетСоответствия,
	|	Приоритет,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопустимыеЗначенияАнтропометрическихСвойств.ВидСвойства КАК ВидСвойства,
	|	ДопустимыеЗначенияАнтропометрическихСвойств.ДопустимоеЗначение КАК ДопустимоеЗначение
	|ИЗ
	|	РегистрСведений.ДопустимыеЗначенияАнтропометрическихСвойств КАК ДопустимыеЗначенияАнтропометрическихСвойств
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидСвойства,
	|	ДопустимоеЗначение";
	
	Запрос.УстановитьПараметр("ПериодРасчета",						ДатаАнализа);
	Запрос.УстановитьПараметр("МассивНоменклатурыНорм",				ТаблицаНоменклатурыНормСотрудников.ВыгрузитьКолонку("НоменклатураНормы"));
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыНормСотрудников",	ТаблицаНоменклатурыНормСотрудников);
	Запрос.УстановитьПараметр("МассивСотрудников",					МассивСотрудников);
	
	//иначе под ограниченными правами возникает бесконечный цикл
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаНоменклатурыНормСотрудников.Очистить();
	
	//+++АСТБ_ALEXEY_110616_**************************************************************
	//ВыходнаяТаблица 		= Результат[21].Выгрузить();
	//ДопустимаяАнтропометрия = Результат[22].Выгрузить();
	ВыходнаяТаблица 		= Результат[23].Выгрузить();
	ДопустимаяАнтропометрия = Результат[24].Выгрузить();
	//---АСТБ_ALEXEY_110616_**************************************************************
	
	РезультирующаяТаблица = ВыходнаяТаблица.Скопировать();
	
	//добавляем допустимые размеры
	Для Каждого СтрокаВыходнойТаблицы Из ВыходнаяТаблица Цикл
		
		Если НЕ СтрокаВыходнойТаблицы.ЕстьРазмеры Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(СтрокаВыходнойТаблицы.ЗначениеАнтропометрии) Тогда
		    Продолжить;
		КонецЕсли;
		
		Если СтрокаВыходнойТаблицы.КоличествоРазмеровМеньше = 0 
			И СтрокаВыходнойТаблицы.КоличествоРазмеровБольше = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		ТекущиеДопустимыеЗначения = ДопустимаяАнтропометрия.Скопировать(НОВЫЙ Структура("ВидСвойства",СтрокаВыходнойТаблицы.ВидАнтропометрии));
		
		Если ТекущиеДопустимыеЗначения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НайденныеСтроки = ТекущиеДопустимыеЗначения.НайтиСтроки(Новый Структура("ДопустимоеЗначение",СтрокаВыходнойТаблицы.ЗначениеАнтропометрии));
		
		ИндексНайденнойСтроки = ТекущиеДопустимыеЗначения.Индекс(НайденныеСтроки[0]);
		
		ТекущийПриоритетРазмера = 0;
		
		Для Сч = 1 По СтрокаВыходнойТаблицы.КоличествоРазмеровБольше Цикл
			
			ИндексДляПоиска = ИндексНайденнойСтроки + Сч;
			
			Если ИндексДляПоиска = ТекущиеДопустимыеЗначения.Количество() Тогда
				Прервать;
			КонецЕсли;	
			
			НоваяСтрока = РезультирующаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаВыходнойТаблицы);
			НоваяСтрока.ЗначениеАнтропометрии = ТекущиеДопустимыеЗначения[ИндексДляПоиска].ДопустимоеЗначение;
			
			НоваяСтрока.КоличествоРазмеровМеньше = 0;
			НоваяСтрока.КоличествоРазмеровБольше = 0;
			
			НоваяСтрока.ПриоритетРазмера 	= ТекущийПриоритетРазмера + 1;
			ТекущийПриоритетРазмера 		= ТекущийПриоритетРазмера + 1;
			
		КонецЦикла;
		
		Для Сч = 1 По СтрокаВыходнойТаблицы.КоличествоРазмеровМеньше Цикл
			
			ИндексДляПоиска = ИндексНайденнойСтроки - Сч;
			
			Если ИндексДляПоиска < 0 Тогда
				Прервать;
			КонецЕсли;
			
			НоваяСтрока = РезультирующаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаВыходнойТаблицы);
			НоваяСтрока.ЗначениеАнтропометрии = ТекущиеДопустимыеЗначения[ИндексДляПоиска].ДопустимоеЗначение;
			
			НоваяСтрока.КоличествоРазмеровМеньше = 0;
			НоваяСтрока.КоличествоРазмеровБольше = 0;
			
			НоваяСтрока.ПриоритетРазмера 	= ТекущийПриоритетРазмера + 1;
			ТекущийПриоритетРазмера 		= ТекущийПриоритетРазмера + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//подбор размеров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультирующаяТаблица.Сотрудник КАК Сотрудник,
	|	РезультирующаяТаблица.НоменклатураНормы КАК НоменклатураНормы,
	|	РезультирующаяТаблица.Номенклатура КАК Номенклатура,
	|	РезультирующаяТаблица.ПолНоменклатуры КАК ПолНоменклатуры,
	|	РезультирующаяТаблица.ПолСотрудника КАК ПолСотрудника,
	|	РезультирующаяТаблица.ЕстьРазмеры КАК ЕстьРазмеры,
	|	РезультирующаяТаблица.ПриоритетСоответствия КАК ПриоритетСоответствия,
	|	РезультирующаяТаблица.Приоритет КАК Приоритет,
	|	РезультирующаяТаблица.ПриоритетРазмера КАК ПриоритетРазмера,
	|	РезультирующаяТаблица.ТолькоДляСотрудника КАК ТолькоДляСотрудника,
	|	РезультирующаяТаблица.ВидАнтропометрии КАК ВидАнтропометрии,
	|	РезультирующаяТаблица.ЗначениеАнтропометрии КАК ЗначениеАнтропометрии,
	|	РезультирующаяТаблица.Рост КАК Рост,
	|	РезультирующаяТаблица.ИспользоватьРост КАК ИспользоватьРост,
	|	РезультирующаяТаблица.ВидСИЗ КАК ВидСИЗ,
	|	РезультирующаяТаблица.Комплект КАК Комплект,
	|	РезультирующаяТаблица.КоличествоВКомплекте КАК КоличествоВКомплекте
	|ПОМЕСТИТЬ ВТ_РезультирующаяТаблица
	|ИЗ
	|	&РезультирующаяТаблица КАК РезультирующаяТаблица
	|;
	//+++АСТБ_Горюшин_Алексей_26451
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиНоменклатуры.Метрика КАК Метрика
	|ПОМЕСТИТЬ ВТ_Характеристики_Метрики
	|ИЗ
	|	ВТ_РезультирующаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВТ_РезультирующаяТаблица.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|;
	//---АСТБ_Горюшин_Алексей_26451
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствияХарактеристикНоменклатуры.Размер КАК Размер,
	|	СоответствияХарактеристикНоменклатуры.Рост КАК Рост,
	|	СоответствияХарактеристикНоменклатуры.Пол КАК Пол,
	|	СоответствияХарактеристикНоменклатуры.ДополнительноеУсловие КАК ДополнительноеУсловие,
	|	СоответствияХарактеристикНоменклатуры.Метрика КАК Метрика
	|ПОМЕСТИТЬ ВТ_СоответствияХарактеристикНоменклатуры
	|ИЗ
	//+++АСТБ_Горюшин_Алексей_26451
	|	ВТ_Характеристики_Метрики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияХарактеристикНоменклатуры КАК СоответствияХарактеристикНоменклатуры
	|		ПО ВТ_Характеристики_Метрики.Метрика = СоответствияХарактеристикНоменклатуры.Метрика
	//было
	//|	РегистрСведений.СоответствияХарактеристикНоменклатуры КАК СоответствияХарактеристикНоменклатуры
	//---АСТБ_Горюшин_Алексей_26451
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Метрика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РезультирующаяТаблица.Сотрудник КАК Сотрудник,
	|	ВТ_РезультирующаяТаблица.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_РезультирующаяТаблица.Номенклатура КАК Номенклатура,
	|	ВТ_РезультирующаяТаблица.ПолНоменклатуры КАК ПолНоменклатуры,
	|	ВТ_РезультирующаяТаблица.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_РезультирующаяТаблица.ПриоритетСоответствия КАК ПриоритетСоответствия,
	|	ВТ_РезультирующаяТаблица.Приоритет КАК Приоритет,
	|	ВТ_РезультирующаяТаблица.ПриоритетРазмера КАК ПриоритетРазмера,
	|	ВТ_РезультирующаяТаблица.ТолькоДляСотрудника КАК ТолькоДляСотрудника,
	|	ВТ_РезультирующаяТаблица.ВидАнтропометрии КАК ВидАнтропометрии,
	|	ВТ_РезультирующаяТаблица.ЗначениеАнтропометрии КАК ЗначениеАнтропометрии,
	|	ВТ_РезультирующаяТаблица.Рост КАК Рост,
	|	ВТ_РезультирующаяТаблица.ИспользоватьРост КАК ИспользоватьРост,
	|	ВТ_РезультирующаяТаблица.ВидСИЗ КАК ВидСИЗ,
	//+++АСТБ_Горюшин_Алексей_54949
	//+++АСТБ_Горюшин_Алексей_67538
	//Возврат к изначальному варианту
	|	ЕСТЬNULL(ВТ_СоответствияХарактеристикНоменклатуры.Метрика, ЗНАЧЕНИЕ(Справочник.Метрики.ПустаяСсылка)) КАК Метрика,
	//было
	//|	МАКСИМУМ(ЕСТЬNULL(ВТ_СоответствияХарактеристикНоменклатуры.Метрика, ЗНАЧЕНИЕ(Справочник.Метрики.ПустаяСсылка))) КАК Метрика,
	//---АСТБ_Горюшин_Алексей_67538
	//было
	//|	ЕСТЬNULL(ВТ_СоответствияХарактеристикНоменклатуры.Метрика, ЗНАЧЕНИЕ(Справочник.Метрики.ПустаяСсылка)) КАК Метрика,
	//---АСТБ_Горюшин_Алексей_54949
	|	ВТ_РезультирующаяТаблица.Комплект КАК Комплект,
	|	ВТ_РезультирующаяТаблица.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	ВТ_СоответствияХарактеристикНоменклатуры.Пол КАК ПолСоответствия
	|ПОМЕСТИТЬ ВТ_Метрики
	|ИЗ
	|	ВТ_РезультирующаяТаблица КАК ВТ_РезультирующаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствияХарактеристикНоменклатуры КАК ВТ_СоответствияХарактеристикНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА ВТ_РезультирующаяТаблица.ЕстьРазмеры
	|					ТОГДА ВТ_РезультирующаяТаблица.ЗначениеАнтропометрии = ВТ_СоответствияХарактеристикНоменклатуры.Размер
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ВТ_РезультирующаяТаблица.ЕстьРазмеры
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_РезультирующаяТаблица.ИспользоватьРост
	|								ТОГДА ВТ_РезультирующаяТаблица.Рост = ВТ_СоответствияХарактеристикНоменклатуры.Рост
	|							ИНАЧЕ ВТ_СоответствияХарактеристикНоменклатуры.Рост = 0
	|						КОНЕЦ
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ВТ_РезультирующаяТаблица.ЕстьРазмеры
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_СоответствияХарактеристикНоменклатуры.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|								ТОГДА ВТ_РезультирующаяТаблица.ПолСотрудника = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|							КОГДА ВТ_СоответствияХарактеристикНоменклатуры.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|								ТОГДА ВТ_РезультирующаяТаблица.ПолСотрудника = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ВТ_РезультирующаяТаблица.ЕстьРазмеры
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_СоответствияХарактеристикНоменклатуры.ДополнительноеУсловие = ЗНАЧЕНИЕ(Справочник.ВидыСИЗ.ПустаяСсылка)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ВТ_РезультирующаяТаблица.ВидСИЗ = ВТ_СоответствияХарактеристикНоменклатуры.ДополнительноеУсловие
	|						КОНЕЦ
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	//+++АСТБ_Горюшин_Алексей_54949
	//+++АСТБ_Горюшин_Алексей_67538
	//Возврат к изначальному варианту
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ_РезультирующаяТаблица.Сотрудник,
	//|	ВТ_РезультирующаяТаблица.НоменклатураНормы,
	//|	ВТ_РезультирующаяТаблица.Номенклатура,
	//|	ВТ_РезультирующаяТаблица.ПолНоменклатуры,
	//|	ВТ_РезультирующаяТаблица.ЕстьРазмеры,
	//|	ВТ_РезультирующаяТаблица.ПриоритетСоответствия,
	//|	ВТ_РезультирующаяТаблица.Приоритет,
	//|	ВТ_РезультирующаяТаблица.ПриоритетРазмера,
	//|	ВТ_РезультирующаяТаблица.ТолькоДляСотрудника,
	//|	ВТ_РезультирующаяТаблица.ВидАнтропометрии,
	//|	ВТ_РезультирующаяТаблица.ЗначениеАнтропометрии,
	//|	ВТ_РезультирующаяТаблица.Рост,
	//|	ВТ_РезультирующаяТаблица.ИспользоватьРост,
	//|	ВТ_РезультирующаяТаблица.ВидСИЗ,
	//|	ВТ_РезультирующаяТаблица.Комплект,
	//|	ВТ_РезультирующаяТаблица.КоличествоВКомплекте,
	//|	ВТ_СоответствияХарактеристикНоменклатуры.Пол
	//---АСТБ_Горюшин_Алексей_67538
	//---АСТБ_Горюшин_Алексей_54949
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РезультирующаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Метрики.Сотрудник КАК Сотрудник,
	|	ВТ_Метрики.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Метрики.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК ХарактеристикаНоменклатуры,
	|	ВТ_Метрики.ПолНоменклатуры КАК ПолНоменклатуры,
	|	ВТ_Метрики.ЕстьРазмеры КАК ЕстьРазмеры,
	|	ВТ_Метрики.ПриоритетСоответствия КАК ПриоритетСоответствия,
	|	ВТ_Метрики.Приоритет КАК Приоритет,
	|	ВТ_Метрики.ПриоритетРазмера КАК ПриоритетРазмера,
	|	ВТ_Метрики.ТолькоДляСотрудника КАК ТолькоДляСотрудника,
	|	ВТ_Метрики.ВидАнтропометрии КАК ВидАнтропометрии,
	|	ВТ_Метрики.ЗначениеАнтропометрии КАК ЗначениеАнтропометрии,
	|	ВТ_Метрики.Рост КАК Рост,
	|	ВТ_Метрики.ИспользоватьРост КАК ИспользоватьРост,
	|	ВТ_Метрики.ВидСИЗ КАК ВидСИЗ,
	|	ВТ_Метрики.Комплект КАК Комплект,
	|	ВТ_Метрики.КоличествоВКомплекте КАК КоличествоВКомплекте,
	|	ВТ_Метрики.ПолСоответствия КАК ПолСоответствия
	|ИЗ
	|	ВТ_Метрики КАК ВТ_Метрики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВТ_Метрики.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|			И ВТ_Метрики.Метрика = ХарактеристикиНоменклатуры.Метрика
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_Метрики.Комплект = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ИЛИ &ВыводитьКомплектующиеСНеподобранымиРазмерами
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВТ_Метрики.ЕстьРазмеры
	|						ТОГДА НЕ ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					ИНАЧЕ ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Метрики.Сотрудник,
	|	ВТ_Метрики.НоменклатураНормы,
	|	ВТ_Метрики.Номенклатура,
	|	ВТ_Метрики.ПолНоменклатуры,
	|	ВТ_Метрики.ЕстьРазмеры,
	|	ВТ_Метрики.ПриоритетСоответствия,
	|	ВТ_Метрики.Приоритет,
	|	ВТ_Метрики.ПриоритетРазмера,
	|	ВТ_Метрики.ТолькоДляСотрудника,
	|	ВТ_Метрики.ВидАнтропометрии,
	|	ВТ_Метрики.ЗначениеАнтропометрии,
	|	ВТ_Метрики.Рост,
	|	ВТ_Метрики.ИспользоватьРост,
	|	ВТ_Метрики.ВидСИЗ,
	|	ВТ_Метрики.Комплект,
	|	ВТ_Метрики.КоличествоВКомплекте,
	|	ВТ_Метрики.ПолСоответствия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НоменклатураНормы,
	|	ПриоритетСоответствия,
	|	Приоритет,
	|	ПриоритетРазмера,
	|	ХарактеристикаНоменклатуры УБЫВ,
	|	ПолСоответствия УБЫВ";
	
	Запрос.УстановитьПараметр("МассивСотрудников",								МассивСотрудников);
	Запрос.УстановитьПараметр("Организация",									Организация);
	Запрос.УстановитьПараметр("РезультирующаяТаблица",							РезультирующаяТаблица);
	Запрос.УстановитьПараметр("ВыводитьКомплектующиеСНеподобранымиРазмерами",	ВыводитьКомплектующиеСНеподобранымиРазмерами);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСписокПроцентовИзносаПоОстаткам(Номенклатура,ХарактеристикаНоменклатуры,Склад,Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиНоменклатурыОстатки.ПроцентИзноса КАК ПроцентИзноса
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И Номенклатура = &Номенклатура
	|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ОстаткиНоменклатурыОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиНоменклатурыОстатки.ПроцентИзноса.Код";
	
	Запрос.УстановитьПараметр("Организация",				?(ПолучитьФункциональнуюОпцию("НеВестиУчетОстатковНоменклатурыПоОрганизации"),Справочники.Организации.ПустаяСсылка(),Организация));
	Запрос.УстановитьПараметр("Склад",						Склад);
	Запрос.УстановитьПараметр("Номенклатура",				Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",	ХарактеристикаНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПроцентИзноса");
	
КонецФункции  

//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 <<<

Функция ПолучитьСписокПроцентовИзносаПоОстаткамДляКомплектующего(ТекущийКомплект,ТаблицаТоваров,Склад,Организация) Экспорт
	
	КоличествоКомплектующих = ТаблицаТоваров.Количество();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ВТ_ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНоменклатурыОстатки.ПроцентИзноса КАК ПроцентИзноса,
	|	СУММА(1) КАК КоличествоПроцентовИзноса
	|ИЗ
	|	ВТ_ТаблицаТоваров КАК ВТ_ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|				,
	|				Организация = &Организация
	|					И Склад = &Склад
	|					И Номенклатура В (&МассивНоменклатуры)
	|					И ХарактеристикаНоменклатуры В (&МассивХарактеристикНоменклатуры)
	|					И НЕ ПроцентИзноса = ЗНАЧЕНИЕ(Справочник.ПроцентыИзноса.ПустаяСсылка)) КАК ОстаткиНоменклатурыОстатки
	|		ПО ВТ_ТаблицаТоваров.Номенклатура = ОстаткиНоменклатурыОстатки.Номенклатура
	|			И ВТ_ТаблицаТоваров.ХарактеристикаНоменклатуры = ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатурыОстатки.ПроцентИзноса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроцентИзноса";
	
	Запрос.УстановитьПараметр("Организация",						?(ПолучитьФункциональнуюОпцию("НеВестиУчетОстатковНоменклатурыПоОрганизации"),Справочники.Организации.ПустаяСсылка(),Организация));
	Запрос.УстановитьПараметр("Склад",								Склад); 
	Запрос.УстановитьПараметр("ТаблицаТоваров",						ТаблицаТоваров);
	Запрос.УстановитьПараметр("МассивНоменклатуры",					ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("МассивХарактеристикНоменклатуры",	ТаблицаТоваров.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));      
	
	МассивПроцентовИзноса = Новый Массив;
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если НЕ СтрокаТаблицыЗапроса.КоличествоПроцентовИзноса = КоличествоКомплектующих Тогда //не все остатки есть для процента износа - не используем его
		    Продолжить;
		КонецЕсли;
		
		Если МассивПроцентовИзноса.Найти(СтрокаТаблицыЗапроса.ПроцентИзноса) = Неопределено Тогда
			МассивПроцентовИзноса.Добавить(СтрокаТаблицыЗапроса.ПроцентИзноса);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат МассивПроцентовИзноса;
	
КонецФункции 

//Танцюра А.Н. -- №133496 Возможность проставлять процент износа в документе выдачи для комплектующих -- 13.10.2021 >>>

Функция ПолучитьСписокДопустимыхПроцентовИзноса(Организация, МаксимальноеЗначение = 100) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроцентыИзноса.Ссылка КАК ПроцентИзноса
	|ИЗ
	|	Справочник.ПроцентыИзноса КАК ПроцентыИзноса
	|ГДЕ
	|	ПроцентыИзноса.Владелец = &Организация
	|	И ПроцентыИзноса.ИспользоватьДляИзмененияСрокаНоски
	|	И ПроцентыИзноса.Код <= &МаксимальноеЗначение
	|	И НЕ ПроцентыИзноса.Код = 100
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроцентыИзноса.Код";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("МаксимальноеЗначение",МаксимальноеЗначение);
	
	МассивПроцентовИзноса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПроцентИзноса");
	МассивПроцентовИзноса.Вставить(0,Справочники.ПроцентыИзноса.ПустаяСсылка());
	
	Возврат МассивПроцентовИзноса;
	
КонецФункции

// функция формирует таблицу периодов зимы вида:
// | Подразделение | Начало зимы | Конец зимы |
// 
// параметры:
// МассивПодразделений 	- массив подразделений для анализа
// Организация 			- организация для анализа
// ДатаАнализа  		- граница (дата), на которую выполняется анализ
//
Функция ПолучитьТаблицуНачалаИКонцаЗимы(МассивПодразделений,Организация,ДатаАнализа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодыЗимыСрезПоследних.Подразделение,
	|	ПериодыЗимыСрезПоследних.НачалоЗимы,
	|	ПериодыЗимыСрезПоследних.КонецЗимы
	|ПОМЕСТИТЬ ВТ_ПериодыЗимы
	|ИЗ
	|	РегистрСведений.ПериодыЗимы.СрезПоследних(&ПериодРасчета, Организация = &Организация) КАК ПериодыЗимыСрезПоследних
	|ГДЕ
	|	ПериодыЗимыСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПериодыЗимы.Подразделение,
	|	ВТ_ПериодыЗимы.НачалоЗимы,
	|	ВТ_ПериодыЗимы.КонецЗимы
	|ИЗ
	|	ВТ_ПериодыЗимы КАК ВТ_ПериодыЗимы
	|ГДЕ
	|	ВТ_ПериодыЗимы.Подразделение В(&МассивПодразделений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПериодыЗимы.Подразделение,
	|	ВТ_ПериодыЗимы.НачалоЗимы,
	|	ВТ_ПериодыЗимы.КонецЗимы
	|ИЗ
	|	ВТ_ПериодыЗимы КАК ВТ_ПериодыЗимы
	|ГДЕ
	|	ВТ_ПериодыЗимы.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПериодыЗимы.Подразделение,
	|	ВТ_ПериодыЗимы.НачалоЗимы,
	|	ВТ_ПериодыЗимы.КонецЗимы
	|ИЗ
	|	ВТ_ПериодыЗимы КАК ВТ_ПериодыЗимы
	|ГДЕ
	|	НЕ ВТ_ПериодыЗимы.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И НЕ ВТ_ПериодыЗимы.Подразделение В (&МассивПодразделений)";
	
	Запрос.УстановитьПараметр("МассивПодразделений",МассивПодразделений);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ПериодРасчета",		ДатаАнализа);
	
	Результат 						= Запрос.ВыполнитьПакет();
	ТаблицаПоПодразделениям 		= Результат[1].Выгрузить();
	ТаблицаПоПустымПодразделениям 	= Результат[2].Выгрузить();
	ТаблицаПоДругимПодразделениям 	= Результат[3].Выгрузить();
	
	Для Каждого ЭлементМассиваПодразделений Из МассивПодразделений Цикл
		
		НайденнаяСтрока = ТаблицаПоПодразделениям.Найти(ЭлементМассиваПодразделений,"Подразделение");
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			ДанныеНайденыВИерархии = ПолучитьПериодЗимыРекурсивно(ЭлементМассиваПодразделений,ЭлементМассиваПодразделений.Родитель,ТаблицаПоПодразделениям,ТаблицаПоДругимПодразделениям);
			
			Если НЕ ДанныеНайденыВИерархии Тогда
				
				Если ТаблицаПоПустымПодразделениям.Количество() > 0 Тогда
					
					НоваяСтрока 				= ТаблицаПоПодразделениям.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТаблицаПоПустымПодразделениям[0]);
					НоваяСтрока.Подразделение 	= ЭлементМассиваПодразделений;
					
				Иначе
					
					НоваяСтрока 				= ТаблицаПоПодразделениям.Добавить();
					НоваяСтрока.Подразделение 	= ЭлементМассиваПодразделений;
					НоваяСтрока.НачалоЗимы 		= Перечисления.МесяцыГода.ПустаяСсылка();
					НоваяСтрока.КонецЗимы 		= Перечисления.МесяцыГода.ПустаяСсылка();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПоПодразделениям;
	
КонецФункции

Функция ФизическоеЛицоМожетЯвлятьсяВнешнимПользователем(ФизическоеЛицо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	|	И Сотрудники.Владелец.РазрешитьДоступСотрудникамКБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗанятыеРабочиеМестаОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	ВТ_Сотрудник КАК ВТ_Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеРабочиеМеста.Остатки КАК ЗанятыеРабочиеМестаОстатки
	|		ПО ВТ_Сотрудник.Ссылка = ЗанятыеРабочиеМестаОстатки.Сотрудник";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо",ФизическоеЛицо);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции	

Процедура БлокировкаВнешнихПользователей() Экспорт
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.БлокировкаВнешнихПользователей,"Регламентная блокировка внешних пользователей не выполнена, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ИмяСобытия = НСтр("ru = 'Блокировка внешних пользователей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка КАК Ссылка,
	|	ВнешниеПользователи.ОбъектАвторизации КАК ОбъектАвторизации
	|ПОМЕСТИТЬ ВТ_ВнешниеПользователи
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	НЕ ВнешниеПользователи.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ЗанятыеРабочиеМестаОстатки.КоличествоОстаток ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗанятыеРабочиеМестаОстатки.Сотрудник.Владелец.РазрешитьДоступСотрудникамКБазе
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДоступКБазе
	|ПОМЕСТИТЬ ВТ_ФизЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеРабочиеМеста.Остатки КАК ЗанятыеРабочиеМестаОстатки
	|		ПО ФизическиеЛица.Ссылка = ЗанятыеРабочиеМестаОстатки.Сотрудник.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВнешниеПользователи.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ВнешниеПользователи КАК ВТ_ВнешниеПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизЛица КАК ВТ_ФизЛица
	|		ПО ВТ_ВнешниеПользователи.ОбъектАвторизации = ВТ_ФизЛица.ФизЛицо
	|ГДЕ
	|	(ВТ_ФизЛица.ДоступКБазе ЕСТЬ NULL
	|			ИЛИ НЕ ВТ_ФизЛица.ДоступКБазе)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		ВнешнийПользовательОбъект = СтрокаТаблицыЗапроса.Ссылка.ПолучитьОбъект();
		ВнешнийПользовательОбъект.Недействителен = Истина;
		Попытка
			ВнешнийПользовательОбъект.Записать();
			ЗаписьЖурналаРегистрации(ИмяСобытия,УровеньЖурналаРегистрации.Информация,Метаданные.РегламентныеЗадания.БлокировкаВнешнихПользователей,ВнешнийПользовательОбъект.Ссылка,"Внешний пользователь заблокирован");
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытия,УровеньЖурналаРегистрации.Ошибка,Метаданные.РегламентныеЗадания.БлокировкаВнешнихПользователей,ВнешнийПользовательОбъект.Ссылка,ОписаниеОшибки());
		КонецПопытки;	
		
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗавершениеРаботыВнешнихПользователей() Экспорт
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,"Регламентное завершение работы внешних пользователей не выполнено, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ИмяСобытия = НСтр("ru = 'Завершение работы внешних пользователей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ПолучитьБлокировкуСеансов().Установлена Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,,"Завершение работы внешних пользователей.");
		Возврат; 
	КонецЕсли;
	
	МассивСтрокСоединения = СтрРазделить(СтрокаСоединенияИнформационнойБазы(), ";");
	
	ИмяСервера = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(МассивСтрокСоединения[0], 7));
	ИмяИБ      = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(МассивСтрокСоединения[1], 6));
	
	Если ИмяИБ = "" Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,,"Завершение работы внешних пользователей.");
		Возврат;
	КонецЕсли;	
	
	ПараметрыКластера = Новый Структура("ПортКластераСерверов, ПортАгентаСервера, ИмяАдминистратораКластера, ПарольАдминистратораКластера");
	
	КомОбъект = Новый COMОбъект("V83.ComConnector");
	ПараметрыКластера.ПортАгентаСервера    = КомОбъект.RAgentPortDefault;
	ПараметрыКластера.ПортКластераСерверов = КомОбъект.RMngrPortDefault;
	
	ПараметрыКластера.ИмяАдминистратораКластера = "";
	ПараметрыКластера.ПарольАдминистратораКластера = "";
	
	РазделительПорта = Найти(ИмяСервера, ":");
	
	Если РазделительПорта > 0 Тогда
		ИмяИПортСервера = ИмяСервера;
		ИмяСервера = Сред(ИмяИПортСервера, 1, РазделительПорта - 1);
		НомерПортаКластера = Число(Сред(ИмяИПортСервера, РазделительПорта + 1));
	ИначеЕсли ПараметрыКластера.ПортКластераСерверов <> 0 Тогда
		НомерПортаКластера = ПараметрыКластера.ПортКластераСерверов;
	КонецЕсли;
	
	ИдентификаторАгентаСервера = ИмяСервера;
	Если ПараметрыКластера.ПортАгентаСервера <> 0 Тогда
		ИдентификаторАгентаСервера = "" + ИдентификаторАгентаСервера + ":" + Формат(ПараметрыКластера.ПортАгентаСервера, "ЧГ=0");
	КонецЕсли;

	АгентСервера = КомОбъект.ConnectAgent(ИдентификаторАгентаСервера);
	
	ТаблицаСеансов = НОВЫЙ ТаблицаЗначений();
	ТаблицаСеансов.Колонки.Добавить("НомерСессии");
	ТаблицаСеансов.Колонки.Добавить("Пользователь");
	ТаблицаСеансов.Колонки.Добавить("НачалоРаботы");
	ТаблицаСеансов.Колонки.Добавить("ВремяПростоя");
	ТаблицаСеансов.Колонки.Добавить("СпящийСеанс");
	ТаблицаСеансов.Колонки.Добавить("ЗавершатьСеанс");
	ТаблицаСеансов.Колонки.Добавить("Комментарий");
	
	Для каждого Кластер Из АгентСервера.GetClusters() Цикл
		
		Если Кластер.MainPort <> НомерПортаКластера Тогда
			Продолжить;
		КонецЕсли;
		
		АгентСервера.Authenticate(Кластер, ПараметрыКластера.ИмяАдминистратораКластера,ПараметрыКластера.ПарольАдминистратораКластера);
			
		ТекущийМоментВремени = ТекущаяДата();
		
		НомерТекущегоСеанса = НомерСеансаИнформационнойБазы();
		
		СписокСеансов = АгентСервера.GetSessions(Кластер);
		
		Для Каждого Сеанс из СписокСеансов Цикл
			
			Если Сеанс.InfoBase.Name <> ИмяИБ Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НомерТекущегоСеанса <> Сеанс.SessionID Тогда
				
				Если НЕ Сеанс.AppID = "WebClient" Тогда
					Продолжить;
				КонецЕсли;	
				
				НоваяСтрока = ТаблицаСеансов.Добавить();
				
				НоваяСтрока.НомерСессии		= Сеанс.SessionID;
				НоваяСтрока.Пользователь	= Сеанс.UserName;
				НоваяСтрока.НачалоРаботы	= Сеанс.StartedAt;
				НоваяСтрока.ВремяПростоя	= ТекущийМоментВремени - Сеанс.LastActiveAt;
				НоваяСтрока.СпящийСеанс		= Сеанс.Hibernate;
				НоваяСтрока.ЗавершатьСеанс	= ЛОЖЬ;
				НоваяСтрока.Комментарий		= "";
				
			КонецЕсли;
			
		КонецЦикла;		
		
	КонецЦикла;
	
	ТаблицаСеансов.Сортировать("Пользователь,НачалоРаботы убыв");
	
	МассивЗалогиненныхПользователей = Новый Массив;
	
	Для Каждого СтрокаТаблицыСеансов Из ТаблицаСеансов Цикл
		
		Если НЕ МассивЗалогиненныхПользователей.Найти(СтрокаТаблицыСеансов.Пользователь) = Неопределено Тогда
			СтрокаТаблицыСеансов.ЗавершатьСеанс = Истина;
			СтрокаТаблицыСеансов.Комментарий = "Пользователь: " + СтрокаТаблицыСеансов.Пользователь + " залогинен несколько раз.";
		ИначеЕсли СтрокаТаблицыСеансов.СпящийСеанс Тогда
			СтрокаТаблицыСеансов.ЗавершатьСеанс = Истина;
			СтрокаТаблицыСеансов.Комментарий = "Спящий сеанс пользователя: " + СтрокаТаблицыСеансов.Пользователь + ".";
		ИначеЕсли СтрокаТаблицыСеансов.ВремяПростоя > 300 Тогда
			СтрокаТаблицыСеансов.ЗавершатьСеанс = Истина;
			СтрокаТаблицыСеансов.Комментарий = "Время простоя пользователя: " + СтрокаТаблицыСеансов.Пользователь + " более 5 минут.";
		КонецЕсли;	
		
		МассивЗалогиненныхПользователей.Добавить(СтрокаТаблицыСеансов.Пользователь);
		
	КонецЦикла;	
	
	//удаление сеансов
	Для каждого Кластер Из АгентСервера.GetClusters() Цикл
		
		Если Кластер.MainPort <> НомерПортаКластера Тогда
			Продолжить;
		КонецЕсли;
		
		АгентСервера.Authenticate(Кластер, ПараметрыКластера.ИмяАдминистратораКластера,ПараметрыКластера.ПарольАдминистратораКластера);
		
		СписокСеансов = АгентСервера.GetSessions(Кластер);
		
		Для Каждого Сеанс из СписокСеансов Цикл
			
			Если Сеанс.InfoBase.Name <> ИмяИБ Тогда
				Продолжить;
			КонецЕсли; 
			
		    НайденныеСтроки = ТаблицаСеансов.НайтиСтроки(Новый Структура("НомерСессии,ЗавершатьСеанс",Сеанс.SessionID,ИСТИНА));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			АгентСервера.TerminateSession(Кластер,Сеанс);
			ЗаписьЖурналаРегистрации(ИмяСобытия,УровеньЖурналаРегистрации.Информация,Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,,НайденныеСтроки[0].Комментарий);
			
		КонецЦикла;
		
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗачетУпрощеннойВыдачи() Экспорт
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,"Регламентный зачет упрощенной выдачи не выполнен, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ИмяСобытия = НСтр("ru = 'Зачет упрощенной выдачи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ПолучитьБлокировкуСеансов().Установлена Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.ЗачетУпрощеннойВыдачи,,"Зачет упрощенной выдачи.");
		Возврат; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыданныеСредстваЗащитыОстатки.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ВыданныеСредстваЗащиты.Остатки(, НормаВыдачи = ЗНАЧЕНИЕ(Справочник.НормыВыдачиСИЗ.ПустаяСсылка)) КАК ВыданныеСредстваЗащитыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиНоскиПоУпрощеннойВыдаче КАК СрокиНоскиПоУпрощеннойВыдаче
	|		ПО ВыданныеСредстваЗащитыОстатки.Организация = СрокиНоскиПоУпрощеннойВыдаче.Организация
	|			И ВыданныеСредстваЗащитыОстатки.Сотрудник = СрокиНоскиПоУпрощеннойВыдаче.Сотрудник
	|			И ВыданныеСредстваЗащитыОстатки.НоменклатураНормы = СрокиНоскиПоУпрощеннойВыдаче.НоменклатураНормы
	|			И ВыданныеСредстваЗащитыОстатки.Номенклатура = СрокиНоскиПоУпрощеннойВыдаче.Номенклатура
	|			И ВыданныеСредстваЗащитыОстатки.ХарактеристикаНоменклатуры = СрокиНоскиПоУпрощеннойВыдаче.ХарактеристикаНоменклатуры
	|			И ВыданныеСредстваЗащитыОстатки.ДатаВыдачи = СрокиНоскиПоУпрощеннойВыдаче.ДатаВыдачи
	|ГДЕ
	|	НЕ СрокиНоскиПоУпрощеннойВыдаче.ПериодичностьВыдачи ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыданныеСредстваЗащитыОстатки.Организация.Наименование";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
	    ЗаписьЖурналаРегистрации(ИмяСобытия,УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.ЗачетУпрощеннойВыдачи,,"Данные для зачета отсутствуют.");
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НовыйДокумент 				= Документы.ЗачетУпрощеннойВыдачи.СоздатьДокумент();
		НовыйДокумент.Организация 	= Выборка.Организация;
		НовыйДокумент.Комментарий 	= "Сформирован регламентной операцией";
		НовыйДокумент.Дата 			= ТекущаяДата();
		Документы.ЗачетУпрощеннойВыдачи.ЗаполнитьТаблицуДокумента(НовыйДокумент,"Полностью");
		НовыйДокумент.УстановитьНовыйНомер();
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УведомлениеОПолученииСредствЗащиты() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	Если НЕ ЗначениеЗаполнено(Константы.КлючДоступаОтправителяУведомлений.Получить()) Тогда //push-уведомления не активированы
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,"Регламентное уведомление о получении средств защиты не выполнено, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'PUSH-уведомление о получении средств защиты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ПолучитьБлокировкуСеансов().Установлена Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.УведомлениеОПолученииСредствЗащиты,,"PUSH-уведомление о получении средств защиты.");
		Возврат; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_Потребность
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(
	|			,
	|			НАЧАЛОПЕРИОДА(ДатаПотребности, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
	|				И НормаВыдачи.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача)) КАК ПотребностьВыдачиСИЗОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнешниеПользователи.ОбъектАвторизации КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_ВнешниеПользователи
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	НЕ ВнешниеПользователи.ОбъектАвторизации = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И НЕ ВнешниеПользователи.Недействителен
	|	И НЕ ВнешниеПользователи.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Потребность.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВнешниеПользователи КАК ВТ_ВнешниеПользователи
	|		ПО ВТ_Потребность.ФизическоеЛицо = ВТ_ВнешниеПользователи.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	|		ПО ВТ_Потребность.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	|ГДЕ
	|	НЕ ВТ_ВнешниеПользователи.ФизическоеЛицо ЕСТЬ NULL
	|	И ВТ_Потребность.ФизическоеЛицо.УведомлятьОПолученииСредствЗащиты";
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
	    ЗаписьЖурналаРегистрации(ИмяСобытия,УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.УведомлениеОПолученииСредствЗащиты,,"Данные для уведомления о получении средств защиты отсутствуют.");
		Возврат;
	КонецЕсли;
	
	СклоненияМесяцев = Новый Соответствие;
	СклоненияМесяцев.Вставить(1,"январе");
	СклоненияМесяцев.Вставить(2,"феврале");
	СклоненияМесяцев.Вставить(3,"марте");
	СклоненияМесяцев.Вставить(4,"апреле");
	СклоненияМесяцев.Вставить(5,"мае");
	СклоненияМесяцев.Вставить(6,"июне");
	СклоненияМесяцев.Вставить(7,"июле");
	СклоненияМесяцев.Вставить(8,"августе");
	СклоненияМесяцев.Вставить(9,"сентябре");
	СклоненияМесяцев.Вставить(10,"октябре");
	СклоненияМесяцев.Вставить(11,"ноябре");
	СклоненияМесяцев.Вставить(12,"декабре");
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//проверка возможности отправки push-уведомления
		Если НЕ Выборка.ФизическоеЛицо.ИдентификаторПодписчикаДоставляемыхУведомлений = Неопределено Тогда
			Идентификатор = Выборка.ФизическоеЛицо.ИдентификаторПодписчикаДоставляемыхУведомлений.Получить();
			Если Идентификатор = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Уведомление = Новый ДоставляемоеУведомление;
		Уведомление.Данные = "ПолучениеСредствЗащиты";
		Уведомление.Текст = Выборка.Имя + " " + Выборка.Отчество + ", в " + СклоненияМесяцев.Получить(Месяц(ТекущаяДата())) + " " + Формат(Год(ТекущаяДата()),"ЧГ=0") + " года Вам положены к выдаче средства защиты.";
		ОтправкаPUSHВызовСервера.ОтправитьУведомление(Уведомление,Выборка.ФизическоеЛицо,Перечисления.ВидыУведомлений.ПолучениеСредствЗащиты);
		
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура SMSИнформированиеОВозвратеИзЧистки() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	Если НЕ Константы.ИспользоватьПрочиеВзаимодействия.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,"Регламентное уведомление о возврате средств защиты из чистки не выполнено, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'SMS-информирование о возврате средств защиты из чистки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ПолучитьБлокировкуСеансов().Установлена Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.УведомлениеОПолученииСредствЗащиты,,"SMS-информирование о возврате средств защиты из чистки.");
		Возврат; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ФизлицаСТелефонами
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	НЕ ФизическиеЛицаКонтактнаяИнформация.НомерТелефона = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратИзЧисткиТовары.Ссылка КАК Ссылка,
	|	ВозвратИзЧисткиТовары.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ВозвратыИзЧистки
	|ИЗ
	|	Документ.ВозвратИзЧистки.Товары КАК ВозвратИзЧисткиТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизлицаСТелефонами КАК ВТ_ФизлицаСТелефонами
	|		ПО ВозвратИзЧисткиТовары.Сотрудник.ФизическоеЛицо = ВТ_ФизлицаСТелефонами.Ссылка
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ВозвратИзЧисткиТовары.Ссылка.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
	|	И ВозвратИзЧисткиТовары.Ссылка.Проведен
	|	И ВозвратИзЧисткиТовары.Ссылка.Организация.SMSИнформированиеОВозвратеИзЧистки
	|	И НЕ ВТ_ФизлицаСТелефонами.Ссылка ЕСТЬ NULL
	|	И НЕ ВозвратИзЧисткиТовары.Ссылка.Организация.SMSШаблонОВозвратеИзЧистки = ЗНАЧЕНИЕ(Справочник.ШаблоныСообщений.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщениеSMSАдресаты.Ссылка.ВзаимодействиеОснование КАК ВзаимодействиеОснование,
	|	СообщениеSMSАдресаты.Контакт КАК Контакт
	|ПОМЕСТИТЬ ВТ_СообщенияSMS
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|ГДЕ
	|	НЕ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.НеДоставлено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СогласияНаИнформированиеСрезПоследних.Сотрудник КАК Сотрудник,
	|	СогласияНаИнформированиеСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_СогласияНаSMS
	|ИЗ
	|	РегистрСведений.СогласияНаИнформирование.СрезПоследних КАК СогласияНаИнформированиеСрезПоследних
	|ГДЕ
	|	СогласияНаИнформированиеСрезПоследних.SMS
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВозвратыИзЧистки.Ссылка КАК Ссылка,
	|	ВТ_ВозвратыИзЧистки.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТ_ВозвратыИзЧистки КАК ВТ_ВозвратыИзЧистки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияSMS КАК ВТ_СообщенияSMS
	|		ПО ВТ_ВозвратыИзЧистки.Ссылка = ВТ_СообщенияSMS.ВзаимодействиеОснование
	|			И ВТ_ВозвратыИзЧистки.Сотрудник.ФизическоеЛицо = ВТ_СообщенияSMS.Контакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СогласияНаSMS КАК ВТ_СогласияНаSMS
	|		ПО ВТ_ВозвратыИзЧистки.Ссылка.Организация = ВТ_СогласияНаSMS.Организация
	|			И ВТ_ВозвратыИзЧистки.Сотрудник = ВТ_СогласияНаSMS.Сотрудник
	|ГДЕ
	|	ВТ_СообщенияSMS.Контакт ЕСТЬ NULL
	|	И НЕ ВТ_СогласияНаSMS.Сотрудник ЕСТЬ NULL
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	
	ВыборкаПоВозвратам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоВозвратам.Следующий() Цикл
		
		ВыборкаПоСотрудникам = ВыборкаПоВозвратам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		МассивСотрудников = Новый Массив;
		
		Пока ВыборкаПоСотрудникам.Следующий() Цикл
			
			МассивСотрудников.Добавить(ВыборкаПоСотрудникам.Сотрудник);
			
		КонецЦикла;
		
		МассивАдресатов = Справочники.Сотрудники.ПолучитьМассивАдресатовSMS(МассивСотрудников);
		
		Если МассивАдресатов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		//АСТБ_ALEXEY_55408_**************************************************************
		//НовоеСообщениеSMS 							= Документы.СообщениеSMS.СоздатьДокумент();
		//НовоеСообщениеSMS.ТекстСообщения 			= ВыборкаПоВозвратам.Ссылка.Организация.SMSШаблонОВозвратеИзЧистки.ТекстШаблонаSMS;
		//НовоеСообщениеSMS.ВзаимодействиеОснование 	= ВыборкаПоВозвратам.Ссылка;
		//НовоеСообщениеSMS.Важность 					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		//НовоеСообщениеSMS.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
		//НовоеСообщениеSMS.Автор 					= ПараметрыСеанса.ТекущийПользователь;
		//НовоеСообщениеSMS.Дата 						= ТекущаяДата();
		Сч = 1;		
		
		Для Каждого ЭлементМассива Из МассивАдресатов Цикл
			
			Если Сч = 1 Тогда
				
				НовоеСообщениеSMS 							= Документы.СообщениеSMS.СоздатьДокумент();
				НовоеСообщениеSMS.ТекстСообщения 			= ВыборкаПоВозвратам.Ссылка.Организация.SMSШаблонОВозвратеИзЧистки.ТекстШаблонаSMS;
				НовоеСообщениеSMS.ВзаимодействиеОснование 	= ВыборкаПоВозвратам.Ссылка;
				НовоеСообщениеSMS.Важность 					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
				НовоеСообщениеSMS.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
				НовоеСообщениеSMS.Автор 					= ПараметрыСеанса.ТекущийПользователь;
				НовоеСообщениеSMS.Дата 						= ТекущаяДата();
				
				ДокументЗаписан 	= Ложь;
				МассивОрганизаций 	= Новый Массив;
				
			КонецЕсли;
			
			НоваяСтрока 						= НовоеСообщениеSMS.Адресаты.Добавить();
			НоваяСтрока.КакСвязаться          	= ЭлементМассива.Телефон;
			НоваяСтрока.НомерДляОтправки        = ЭлементМассива.НомерДляОтправки;
			НоваяСтрока.ПредставлениеКонтакта 	= ЭлементМассива.Представление;
			НоваяСтрока.Контакт               	= ЭлементМассива.ИсточникКонтактнойИнформации;
			
			Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ЭлементМассива.ИсточникКонтактнойИнформации);
			
			Если Не Сотрудник.Пустая() Тогда
				Если МассивОрганизаций.Найти(Сотрудник.Владелец) = Неопределено Тогда
					МассивОрганизаций.Добавить(Сотрудник.Владелец);
				КонецЕсли;	
			КонецЕсли;
			
			Сч = Сч + 1;
			
			Если Сч = 201 Тогда //больше 200 адресатов в один документ не добавляем 
				ТекстОрганизации = "";
				Для Каждого ЭлементМассиваОрганизаций Из МассивОрганизаций Цикл
					ТекстОрганизации = ТекстОрганизации + ЭлементМассиваОрганизаций + Символы.ПС;
				КонецЦикла;
				НовоеСообщениеSMS.Комментарий = ТекстОрганизации;
				ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(НовоеСообщениеSMS);
				НовоеСообщениеSMS.УстановитьНовыйНомер();
				НовоеСообщениеSMS.Записать(РежимЗаписиДокумента.Запись);
				ДокументЗаписан = Истина;
				Сч = 1;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если Не ДокументЗаписан Тогда
			ТекстОрганизации = "";
			Для Каждого ЭлементМассиваОрганизаций Из МассивОрганизаций Цикл
				ТекстОрганизации = ТекстОрганизации + ЭлементМассиваОрганизаций + Символы.ПС;
			КонецЦикла;
			НовоеСообщениеSMS.Комментарий = ТекстОрганизации;
			ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(НовоеСообщениеSMS);
			НовоеСообщениеSMS.УстановитьНовыйНомер();
			НовоеСообщениеSMS.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		//АСТБ_ALEXEY_55408_**************************************************************
		
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура SMSИнформированиеОПолученииСредствЗащиты() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	Если НЕ Константы.ИспользоватьПрочиеВзаимодействия.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,"Регламентное уведомление о получении средств защиты не выполнено, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'SMS-информирование о получении средств защиты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ПолучитьБлокировкуСеансов().Установлена Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.УведомлениеОПолученииСредствЗащиты,,"SMS-информирование о получении средств защиты.");
		Возврат; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ФизлицаСТелефонами
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	НЕ ФизическиеЛицаКонтактнаяИнформация.НомерТелефона = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник КАК Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_Потребность
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(
	|			,
	|			НАЧАЛОПЕРИОДА(ДатаПотребности, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
	|				И НормаВыдачи.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача)
	|				И Организация.SMSИнформированиеОПолученииСредствЗащиты
	|				И НЕ Организация.SMSШаблонОПолученииСредствЗащиты = ЗНАЧЕНИЕ(Справочник.ШаблоныСообщений.ПустаяСсылка)) КАК ПотребностьВыдачиСИЗОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизлицаСТелефонами КАК ВТ_ФизлицаСТелефонами
	|		ПО ПотребностьВыдачиСИЗОстатки.Сотрудник.ФизическоеЛицо = ВТ_ФизлицаСТелефонами.Ссылка
	|ГДЕ
	|	НЕ ВТ_ФизлицаСТелефонами.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщениеSMSАдресаты.Контакт КАК Контакт
	|ПОМЕСТИТЬ ВТ_СообщенияSMS
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|ГДЕ
	|	НЕ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.НеДоставлено)
	|	И ПОДСТРОКА(СообщениеSMSАдресаты.Ссылка.Комментарий, 1, 1000) ПОДОБНО &Комментарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СогласияНаИнформированиеСрезПоследних.Сотрудник КАК Сотрудник,
	|	СогласияНаИнформированиеСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_СогласияНаSMS
	|ИЗ
	|	РегистрСведений.СогласияНаИнформирование.СрезПоследних КАК СогласияНаИнформированиеСрезПоследних
	|ГДЕ
	|	СогласияНаИнформированиеСрезПоследних.SMS
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Потребность.Организация КАК Организация,
	|	ВТ_Потребность.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияSMS КАК ВТ_СообщенияSMS
	|		ПО ВТ_Потребность.Сотрудник.ФизическоеЛицо = ВТ_СообщенияSMS.Контакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СогласияНаSMS КАК ВТ_СогласияНаSMS
	|		ПО ВТ_Потребность.Организация = ВТ_СогласияНаSMS.Организация
	|			И ВТ_Потребность.Сотрудник = ВТ_СогласияНаSMS.Сотрудник
	|ГДЕ
	|	ВТ_СообщенияSMS.Контакт ЕСТЬ NULL
	|	И НЕ ВТ_СогласияНаSMS.Сотрудник ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Потребность.Сотрудник.Наименование
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("Комментарий","%Потребность на " + Формат(ТекущаяДата(),"ДФ='MMMM yyyy'") + " года%");
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
	    Возврат;
	КонецЕсли;
	
	ВыборкаПоОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		ВыборкаПоСотруднику = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		МассивСотрудников = Новый Массив;
		
		Пока ВыборкаПоСотруднику.Следующий() Цикл
			
			МассивСотрудников.Добавить(ВыборкаПоСотруднику.Сотрудник);
			
		КонецЦикла;
		
		Если МассивСотрудников.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивАдресатов = Справочники.Сотрудники.ПолучитьМассивАдресатовSMS(МассивСотрудников);
		
		Если МассивАдресатов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//АСТБ_ALEXEY_55408_**************************************************************
		//НовоеСообщениеSMS 					= Документы.СообщениеSMS.СоздатьДокумент();
		//НовоеСообщениеSMS.ТекстСообщения	= ВыборкаПоОрганизации.Организация.SMSШаблонОПолученииСредствЗащиты.ТекстШаблонаSMS;
		//НовоеСообщениеSMS.Комментарий 		= "Потребность на " + Формат(ТекущаяДата(),"ДФ='MMMM yyyy'") + " года";
		//НовоеСообщениеSMS.Важность 			= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		//НовоеСообщениеSMS.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
		//НовоеСообщениеSMS.Автор 			= ПараметрыСеанса.ТекущийПользователь;
		//НовоеСообщениеSMS.Дата 				= ТекущаяДата();
		
		Сч = 1;
		
		Для Каждого ЭлементМассива Из МассивАдресатов Цикл
			
			Если Сч = 1 Тогда
				
				НовоеСообщениеSMS 					= Документы.СообщениеSMS.СоздатьДокумент();
				НовоеСообщениеSMS.ТекстСообщения	= ВыборкаПоОрганизации.Организация.SMSШаблонОПолученииСредствЗащиты.ТекстШаблонаSMS;
				НовоеСообщениеSMS.Комментарий 		= "Потребность на " + Формат(ТекущаяДата(),"ДФ='MMMM yyyy'") + " года";
				НовоеСообщениеSMS.Важность 			= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
				НовоеСообщениеSMS.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
				НовоеСообщениеSMS.Автор 			= ПараметрыСеанса.ТекущийПользователь;
				НовоеСообщениеSMS.Дата 				= ТекущаяДата();
				
				ДокументЗаписан 	= Ложь;
				МассивОрганизаций 	= Новый Массив;
				
			КонецЕсли;
			
			НоваяСтрока 						= НовоеСообщениеSMS.Адресаты.Добавить();
			НоваяСтрока.КакСвязаться          	= ЭлементМассива.Телефон;
			НоваяСтрока.НомерДляОтправки        = ЭлементМассива.НомерДляОтправки;
			НоваяСтрока.ПредставлениеКонтакта 	= ЭлементМассива.Представление;
			НоваяСтрока.Контакт               	= ЭлементМассива.ИсточникКонтактнойИнформации;
			
			Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ЭлементМассива.ИсточникКонтактнойИнформации);
			
			Если Не Сотрудник.Пустая() Тогда
				Если МассивОрганизаций.Найти(Сотрудник.Владелец) = Неопределено Тогда
					МассивОрганизаций.Добавить(Сотрудник.Владелец);
				КонецЕсли;	
			КонецЕсли;
			
			Сч = Сч + 1;
			
			Если Сч = 201 Тогда //больше 200 адресатов в один документ не добавляем 
				ТекстОрганизации = "";
				Для Каждого ЭлементМассиваОрганизаций Из МассивОрганизаций Цикл
					ТекстОрганизации = ТекстОрганизации + ЭлементМассиваОрганизаций + Символы.ПС;
				КонецЦикла;
				НовоеСообщениеSMS.Комментарий = НовоеСообщениеSMS.Комментарий + Символы.ПС + ТекстОрганизации;
				ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(НовоеСообщениеSMS);
				НовоеСообщениеSMS.УстановитьНовыйНомер();
				НовоеСообщениеSMS.Записать(РежимЗаписиДокумента.Запись);
				ДокументЗаписан = Истина;
				Сч = 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ДокументЗаписан Тогда
			ТекстОрганизации = "";
			Для Каждого ЭлементМассиваОрганизаций Из МассивОрганизаций Цикл
				ТекстОрганизации = ТекстОрганизации + ЭлементМассиваОрганизаций + Символы.ПС;
			КонецЦикла;
			НовоеСообщениеSMS.Комментарий = НовоеСообщениеSMS.Комментарий + Символы.ПС + ТекстОрганизации;
			ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(НовоеСообщениеSMS);
			НовоеСообщениеSMS.УстановитьНовыйНомер();
			НовоеСообщениеSMS.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		//АСТБ_ALEXEY_55408_**************************************************************
	
	КонецЦикла;	
		
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

Процедура SMSИнформированиеОПоступленииСредствЗащитыНаСклад() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	Если НЕ Константы.ИспользоватьПрочиеВзаимодействия.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,"Регламентное уведомление о получении средств защиты не выполнено, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'SMS-информирование о поступлении средств защиты на склад'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ПолучитьБлокировкуСеансов().Установлена Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.УведомлениеОПолученииСредствЗащиты,,"SMS-информирование о поступлении средств защиты на склад.");
		Возврат; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ФизлицаСТелефонами
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	НЕ ФизическиеЛицаКонтактнаяИнформация.НомерТелефона = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщениеSMSАдресаты.Ссылка.ВзаимодействиеОснование КАК ВзаимодействиеОснование,
	|	СообщениеSMSАдресаты.Контакт КАК Контакт
	|ПОМЕСТИТЬ ВТ_СообщенияSMS
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|ГДЕ
	|	НЕ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.НеДоставлено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СогласияНаИнформированиеСрезПоследних.Сотрудник КАК Сотрудник,
	|	СогласияНаИнформированиеСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_СогласияНаSMS
	|ИЗ
	|	РегистрСведений.СогласияНаИнформирование.СрезПоследних КАК СогласияНаИнформированиеСрезПоследних
	|ГДЕ
	|	СогласияНаИнформированиеСрезПоследних.SMS
	|;
	|
	//АсТБ_Alexey_79639_********************************************************************
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СредстваЗащитыКПолучениюОбороты.Сотрудник КАК Сотрудник,
	|	СредстваЗащитыКПолучениюОбороты.Регистратор КАК Поступление
	|ПОМЕСТИТЬ ВТ_Поступления
	|ИЗ
	|	РегистрНакопления.СредстваЗащитыКПолучению.Обороты(, , Регистратор, ) КАК СредстваЗащитыКПолучениюОбороты
	|ГДЕ
	|	СредстваЗащитыКПолучениюОбороты.Регистратор ССЫЛКА Документ.ПоступлениеНоменклатуры
	|;
	|
	//АсТБ_Alexey_79639_********************************************************************
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Поступления.Поступление КАК Ссылка,
	|	ВТ_Поступления.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ПоступленияНаСклад
	|ИЗ
	|	ВТ_Поступления КАК ВТ_Поступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизлицаСТелефонами КАК ВТ_ФизлицаСТелефонами
	|		ПО ВТ_Поступления.Сотрудник.ФизическоеЛицо = ВТ_ФизлицаСТелефонами.Ссылка
	|ГДЕ
	|	НЕ ВТ_ФизлицаСТелефонами.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоступленияНаСклад.Ссылка КАК Ссылка,
	|	ВТ_ПоступленияНаСклад.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТ_ПоступленияНаСклад КАК ВТ_ПоступленияНаСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияSMS КАК ВТ_СообщенияSMS
	|		ПО ВТ_ПоступленияНаСклад.Ссылка = ВТ_СообщенияSMS.ВзаимодействиеОснование
	|			И ВТ_ПоступленияНаСклад.Сотрудник.ФизическоеЛицо = ВТ_СообщенияSMS.Контакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СогласияНаSMS КАК ВТ_СогласияНаSMS
	|		ПО ВТ_ПоступленияНаСклад.Ссылка.Организация = ВТ_СогласияНаSMS.Организация
	|			И ВТ_ПоступленияНаСклад.Сотрудник = ВТ_СогласияНаSMS.Сотрудник
	|ГДЕ
	|	ВТ_СообщенияSMS.Контакт ЕСТЬ NULL
	|	И НЕ ВТ_СогласияНаSMS.Сотрудник ЕСТЬ NULL
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	
	ВыборкаПоПоступлениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоПоступлениям.Следующий() Цикл
		
		ВыборкаПоСотрудникам = ВыборкаПоПоступлениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		МассивСотрудников = Новый Массив;
		
		Пока ВыборкаПоСотрудникам.Следующий() Цикл
			
			МассивСотрудников.Добавить(ВыборкаПоСотрудникам.Сотрудник);
			
		КонецЦикла;
		
		МассивАдресатов = Справочники.Сотрудники.ПолучитьМассивАдресатовSMS(МассивСотрудников);
		
		Если МассивАдресатов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		//АСТБ_ALEXEY_55408_**************************************************************
		//НовоеСообщениеSMS 							= Документы.СообщениеSMS.СоздатьДокумент();
		//НовоеСообщениеSMS.ТекстСообщения 			= ВыборкаПоПоступлениям.Ссылка.Организация.SMSШаблонОПоступленииНаСклад.ТекстШаблонаSMS;
		//НовоеСообщениеSMS.ВзаимодействиеОснование 	= ВыборкаПоПоступлениям.Ссылка;
		//НовоеСообщениеSMS.Важность 					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		//НовоеСообщениеSMS.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
		//НовоеСообщениеSMS.Автор 					= ПараметрыСеанса.ТекущийПользователь;
		//НовоеСообщениеSMS.Дата 						= ТекущаяДата();
		
		Сч = 1;
		
		Для Каждого ЭлементМассива Из МассивАдресатов Цикл
			
			Если Сч = 1 Тогда
				
				НовоеСообщениеSMS 							= Документы.СообщениеSMS.СоздатьДокумент();
				НовоеСообщениеSMS.ТекстСообщения 			= ВыборкаПоПоступлениям.Ссылка.Организация.SMSШаблонОПоступленииНаСклад.ТекстШаблонаSMS;
				НовоеСообщениеSMS.ВзаимодействиеОснование 	= ВыборкаПоПоступлениям.Ссылка;
				НовоеСообщениеSMS.Важность 					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
				НовоеСообщениеSMS.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
				НовоеСообщениеSMS.Автор 					= ПараметрыСеанса.ТекущийПользователь;
				НовоеСообщениеSMS.Дата 						= ТекущаяДата();
				
				ДокументЗаписан 	= Ложь;
				МассивОрганизаций 	= Новый Массив;
				
			КонецЕсли;
			
			НоваяСтрока 						= НовоеСообщениеSMS.Адресаты.Добавить();
			НоваяСтрока.КакСвязаться          	= ЭлементМассива.Телефон;
			НоваяСтрока.НомерДляОтправки        = ЭлементМассива.НомерДляОтправки;
			НоваяСтрока.ПредставлениеКонтакта 	= ЭлементМассива.Представление;
			НоваяСтрока.Контакт               	= ЭлементМассива.ИсточникКонтактнойИнформации;
			
			Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ЭлементМассива.ИсточникКонтактнойИнформации);
			
			Если Не Сотрудник.Пустая() Тогда
				Если МассивОрганизаций.Найти(Сотрудник.Владелец) = Неопределено Тогда
					МассивОрганизаций.Добавить(Сотрудник.Владелец);
				КонецЕсли;	
			КонецЕсли;	
			
			Сч = Сч + 1;
			
			Если Сч = 201 Тогда //больше 200 адресатов в один документ не добавляем 
				ТекстОрганизации = "";
				Для Каждого ЭлементМассиваОрганизаций Из МассивОрганизаций Цикл
					ТекстОрганизации = ТекстОрганизации + ЭлементМассиваОрганизаций + Символы.ПС;
				КонецЦикла;
				НовоеСообщениеSMS.Комментарий = ТекстОрганизации;
				ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(НовоеСообщениеSMS);
				НовоеСообщениеSMS.УстановитьНовыйНомер();
				НовоеСообщениеSMS.Записать(РежимЗаписиДокумента.Запись);
				ДокументЗаписан = Истина;
				Сч = 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ДокументЗаписан Тогда
			ТекстОрганизации = "";
			Для Каждого ЭлементМассиваОрганизаций Из МассивОрганизаций Цикл
				ТекстОрганизации = ТекстОрганизации + ЭлементМассиваОрганизаций + Символы.ПС;
			КонецЦикла;
			НовоеСообщениеSMS.Комментарий = ТекстОрганизации;
			ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(НовоеСообщениеSMS);
			НовоеСообщениеSMS.УстановитьНовыйНомер();
			НовоеСообщениеSMS.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		//АСТБ_ALEXEY_55408_**************************************************************
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура EmailИнформированиеОВозвратеИзЧистки() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	Если НЕ Константы.ИспользоватьПочтовыйКлиент.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,"Регламентное уведомление о возврате средств защиты из чистки не выполнено, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'Информирование о возврате средств защиты из чистки по e-mail'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ПолучитьБлокировкуСеансов().Установлена Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.УведомлениеОПолученииСредствЗащиты,,"Информирование о возврате средств защиты из чистки по e-mail.");
		Возврат; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ФизлицаСПочтой
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	НЕ ФизическиеЛицаКонтактнаяИнформация.АдресЭП = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратИзЧисткиТовары.Ссылка КАК Ссылка,
	|	ВозвратИзЧисткиТовары.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ВозвратыИзЧистки
	|ИЗ
	|	Документ.ВозвратИзЧистки.Товары КАК ВозвратИзЧисткиТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизлицаСПочтой КАК ВТ_ФизлицаСПочтой
	|		ПО ВозвратИзЧисткиТовары.Сотрудник.ФизическоеЛицо = ВТ_ФизлицаСПочтой.Ссылка
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ВозвратИзЧисткиТовары.Ссылка.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
	|	И ВозвратИзЧисткиТовары.Ссылка.Проведен
	|	И ВозвратИзЧисткиТовары.Ссылка.Организация.EmailИнформированиеОВозвратеИзЧистки
	|	И НЕ ВТ_ФизлицаСПочтой.Ссылка ЕСТЬ NULL
	|	И НЕ ВозвратИзЧисткиТовары.Ссылка.Организация.EmailШаблонОВозвратеИзЧистки = ЗНАЧЕНИЕ(Справочник.ШаблоныСообщений.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка.ВзаимодействиеОснование КАК ВзаимодействиеОснование,
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт КАК Контакт
	|ПОМЕСТИТЬ ВТ_ЭлектронныеПисьма
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СогласияНаИнформированиеСрезПоследних.Сотрудник КАК Сотрудник,
	|	СогласияНаИнформированиеСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_СогласияНаEmail
	|ИЗ
	|	РегистрСведений.СогласияНаИнформирование.СрезПоследних КАК СогласияНаИнформированиеСрезПоследних
	|ГДЕ
	|	СогласияНаИнформированиеСрезПоследних.Email
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВозвратыИзЧистки.Ссылка КАК Ссылка,
	|	ВТ_ВозвратыИзЧистки.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТ_ВозвратыИзЧистки КАК ВТ_ВозвратыИзЧистки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЭлектронныеПисьма КАК ВТ_ЭлектронныеПисьма
	|		ПО ВТ_ВозвратыИзЧистки.Ссылка = ВТ_ЭлектронныеПисьма.ВзаимодействиеОснование
	|			И ВТ_ВозвратыИзЧистки.Сотрудник.ФизическоеЛицо = ВТ_ЭлектронныеПисьма.Контакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СогласияНаEmail КАК ВТ_СогласияНаEmail
	|		ПО ВТ_ВозвратыИзЧистки.Ссылка.Организация = ВТ_СогласияНаEmail.Организация
	|			И ВТ_ВозвратыИзЧистки.Сотрудник = ВТ_СогласияНаEmail.Сотрудник
	|ГДЕ
	|	ВТ_ЭлектронныеПисьма.Контакт ЕСТЬ NULL
	|	И НЕ ВТ_СогласияНаEmail.Сотрудник ЕСТЬ NULL
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	
	ВыборкаПоВозвратам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоВозвратам.Следующий() Цикл
		
		ВыборкаПоСотрудникам = ВыборкаПоВозвратам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		МассивСотрудников = Новый Массив;
		
		Пока ВыборкаПоСотрудникам.Следующий() Цикл
			
			МассивСотрудников.Добавить(ВыборкаПоСотрудникам.Сотрудник);
			
		КонецЦикла;
		
		МассивАдресатов = Справочники.Сотрудники.ПолучитьМассивАдресатовEmail(МассивСотрудников);
		
		Если МассивАдресатов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		НовоеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		НовоеПисьмо.Заполнить(Неопределено);
		
		НовоеПисьмо.Дата 					= ТекущаяДата();
		НовоеПисьмо.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
		НовоеПисьмо.Тема 					= ВыборкаПоВозвратам.Ссылка.Организация.EmailШаблонОВозвратеИзЧистки.ТемаПисьма;
		НовоеПисьмо.Текст 					= ВыборкаПоВозвратам.Ссылка.Организация.EmailШаблонОВозвратеИзЧистки.ТекстШаблонаПисьма;
		НовоеПисьмо.ТипТекста 				= Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		
		Если НЕ ЗначениеЗаполнено(НовоеПисьмо.УчетнаяЗапись) Тогда
			НовоеПисьмо.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
		КонецЕсли;
		
		НовоеПисьмо.ОтправительПредставление = НовоеПисьмо.УчетнаяЗапись.АдресЭлектроннойПочты;
		
		Для Каждого ЭлементМассива Из МассивАдресатов Цикл
			
			Получатель 					= НовоеПисьмо.ПолучателиПисьма.Добавить();
			Получатель.Представление 	= ЭлементМассива.Представление;
			Получатель.Адрес 			= ЭлементМассива.Адрес;
			Получатель.Контакт			= ЭлементМассива.ИсточникКонтактнойИнформации;
			
			НовоеПисьмо.СписокПолучателейПисьма = НовоеПисьмо.СписокПолучателейПисьма + 
													ЭлементМассива.ИсточникКонтактнойИнформации.Наименование + 
													" <" + ЭлементМассива.Адрес + ">" + "; ";
			
		КонецЦикла;
		
		Попытка
			ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(НовоеПисьмо);
		Исключение
			ЗаписьЖурналаРегистрации("Информирование о возврате средств защиты из чистки по e-mail.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецПопытки;
		
		НовоеПисьмо.ИдентификаторСообщения 	= ИдентификаторПисьма;
		НовоеПисьмо.СтатусПисьма    		= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
		НовоеПисьмо.ДатаОтправления 		= ТекущаяДатаСеанса();
		НовоеПисьмо.ВзаимодействиеОснование = ВыборкаПоВозвратам.Ссылка;
		НовоеПисьмо.УстановитьНовыйНомер();
		
		Попытка 
			НовоеПисьмо.Записать(РежимЗаписиДокумента.Запись);
			ЗаписьЖурналаРегистрации("Информирование о возврате средств защиты из чистки по e-mail.",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,"Документ сформирован.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		Исключение
			ЗаписьЖурналаРегистрации("Информирование о возврате средств защиты из чистки по e-mail.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецПопытки;
		
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(НовоеПисьмо.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(НовоеПисьмо.Ссылка));
		
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	          	
КонецПроцедуры

Процедура EmailИнформированиеОПолученииСредствЗащиты() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	Если НЕ Константы.ИспользоватьПочтовыйКлиент.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,"Регламентное уведомление о получении средств защиты не выполнено, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'Информирование о получении средств защиты по e-mail'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ПолучитьБлокировкуСеансов().Установлена Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.УведомлениеОПолученииСредствЗащиты,,"Информирование о получении средств защиты по e-mail.");
		Возврат; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ФизлицаСПочтой
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	НЕ ФизическиеЛицаКонтактнаяИнформация.АдресЭП = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник КАК Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_Потребность
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(
	|			,
	|			НАЧАЛОПЕРИОДА(ДатаПотребности, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
	|				И НормаВыдачи.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача)
	|				И Организация.EmailИнформированиеОПолученииСредствЗащиты
	|				И НЕ Организация.EmailШаблонОПолученииСредствЗащиты = ЗНАЧЕНИЕ(Справочник.ШаблоныСообщений.ПустаяСсылка)) КАК ПотребностьВыдачиСИЗОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизлицаСПочтой КАК ВТ_ФизлицаСПочтой
	|		ПО ПотребностьВыдачиСИЗОстатки.Сотрудник.ФизическоеЛицо = ВТ_ФизлицаСПочтой.Ссылка
	|ГДЕ
	|	НЕ ВТ_ФизлицаСПочтой.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучатели.Контакт КАК Контакт
	|ПОМЕСТИТЬ ВТ_Письма
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучатели
	|ГДЕ
	|	ПОДСТРОКА(ЭлектронноеПисьмоИсходящееПолучатели.Ссылка.Комментарий, 1, 1000) ПОДОБНО &Комментарий
	|	И ЭлектронноеПисьмоИсходящееПолучатели.Ссылка.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СогласияНаИнформированиеСрезПоследних.Сотрудник КАК Сотрудник,
	|	СогласияНаИнформированиеСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_СогласияНаEmail
	|ИЗ
	|	РегистрСведений.СогласияНаИнформирование.СрезПоследних КАК СогласияНаИнформированиеСрезПоследних
	|ГДЕ
	|	СогласияНаИнформированиеСрезПоследних.Email
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Потребность.Организация КАК Организация,
	|	ВТ_Потребность.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Письма КАК ВТ_Письма
	|		ПО ВТ_Потребность.Сотрудник.ФизическоеЛицо = ВТ_Письма.Контакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СогласияНаEmail КАК ВТ_СогласияНаEmail
	|		ПО ВТ_Потребность.Организация = ВТ_СогласияНаEmail.Организация
	|			И ВТ_Потребность.Сотрудник = ВТ_СогласияНаEmail.Сотрудник
	|ГДЕ
	|	ВТ_Письма.Контакт ЕСТЬ NULL
	|	И НЕ ВТ_СогласияНаEmail.Сотрудник ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Потребность.Сотрудник.Наименование
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("Комментарий","%Потребность на " + Формат(ТекущаяДата(),"ДФ='MMMM yyyy'") + " года%");
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
	    Возврат;
	КонецЕсли;
	
	ВыборкаПоОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		ВыборкаПоСотруднику = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		МассивСотрудников = Новый Массив;
		
		Пока ВыборкаПоСотруднику.Следующий() Цикл
			
			МассивСотрудников.Добавить(ВыборкаПоСотруднику.Сотрудник);
			
		КонецЦикла;
		
		Если МассивСотрудников.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивАдресатов = Справочники.Сотрудники.ПолучитьМассивАдресатовEmail(МассивСотрудников);
		
		Если МассивАдресатов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		НовоеПисьмо.Заполнить(Неопределено);
		
		НовоеПисьмо.Дата 					= ТекущаяДата();
		НовоеПисьмо.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
		НовоеПисьмо.Тема 					= ВыборкаПоОрганизации.Организация.EmailШаблонОПолученииСредствЗащиты.ТемаПисьма;
		НовоеПисьмо.Текст 					= ВыборкаПоОрганизации.Организация.EmailШаблонОПолученииСредствЗащиты.ТекстШаблонаПисьма;
		НовоеПисьмо.ТипТекста 				= Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		
		Если НЕ ЗначениеЗаполнено(НовоеПисьмо.УчетнаяЗапись) Тогда
			НовоеПисьмо.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
		КонецЕсли;
		
		НовоеПисьмо.ОтправительПредставление = НовоеПисьмо.УчетнаяЗапись.АдресЭлектроннойПочты;
		
		Для Каждого ЭлементМассива Из МассивАдресатов Цикл
			
			Получатель 					= НовоеПисьмо.ПолучателиПисьма.Добавить();
			Получатель.Представление 	= ЭлементМассива.Представление;
			Получатель.Адрес 			= ЭлементМассива.Адрес;
			Получатель.Контакт			= ЭлементМассива.ИсточникКонтактнойИнформации;
			
			НовоеПисьмо.СписокПолучателейПисьма = НовоеПисьмо.СписокПолучателейПисьма + 
													ЭлементМассива.ИсточникКонтактнойИнформации.Наименование + 
													" <" + ЭлементМассива.Адрес + ">" + "; ";
			
		КонецЦикла;
		
		Попытка
			ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(НовоеПисьмо);
		Исключение
			ЗаписьЖурналаРегистрации("Информирование о получении средств защиты по e-mail.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецПопытки;
		
		НовоеПисьмо.ИдентификаторСообщения 	= ИдентификаторПисьма;
		НовоеПисьмо.СтатусПисьма    		= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
		НовоеПисьмо.ДатаОтправления 		= ТекущаяДатаСеанса();
		НовоеПисьмо.Комментарий 			= "Потребность на " + Формат(ТекущаяДата(),"ДФ='MMMM yyyy'") + " года";
		НовоеПисьмо.УстановитьНовыйНомер();
		
		Попытка 
			НовоеПисьмо.Записать(РежимЗаписиДокумента.Запись);
			ЗаписьЖурналаРегистрации("Информирование о получении средств защиты по e-mail.",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,"Документ сформирован.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		Исключение
			ЗаписьЖурналаРегистрации("Информирование о получении средств защиты по e-mail.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецПопытки;
		
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(НовоеПисьмо.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(НовоеПисьмо.Ссылка));
		
	КонецЦикла;	
		
	УстановитьПривилегированныйРежим(Ложь);		
	
КонецПроцедуры

Процедура EmailИнформированиеОПоступленииСредствЗащитыНаСклад() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	Если НЕ Константы.ИспользоватьПочтовыйКлиент.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,"Регламентное уведомление о получении средств защиты не выполнено, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'Информирование о поступлении средств защиты на склад по e-mail'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ПолучитьБлокировкуСеансов().Установлена Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.УведомлениеОПолученииСредствЗащиты,,"Информирование о поступлении средств защиты на склад по e-mail.");
		Возврат; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ФизлицаСПочтой
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	НЕ ФизическиеЛицаКонтактнаяИнформация.АдресЭП = """"
	|;
	|
	//АсТБ_Alexey_79639_********************************************************************
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СредстваЗащитыКПолучениюОбороты.Сотрудник КАК Сотрудник,
	|	СредстваЗащитыКПолучениюОбороты.Регистратор КАК Поступление
	|ПОМЕСТИТЬ ВТ_Поступления
	|ИЗ
	|	РегистрНакопления.СредстваЗащитыКПолучению.Обороты(, , Регистратор, ) КАК СредстваЗащитыКПолучениюОбороты
	|ГДЕ
	|	СредстваЗащитыКПолучениюОбороты.Регистратор ССЫЛКА Документ.ПоступлениеНоменклатуры
	|;
	//АсТБ_Alexey_79639_********************************************************************
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Поступления.Поступление КАК Ссылка,
	|	ВТ_Поступления.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ПоступленияНаСклад
	|ИЗ
	|	ВТ_Поступления КАК ВТ_Поступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизлицаСПочтой КАК ВТ_ФизлицаСПочтой
	|		ПО ВТ_Поступления.Сотрудник.ФизическоеЛицо = ВТ_ФизлицаСПочтой.Ссылка
	|ГДЕ
	|	НЕ ВТ_ФизлицаСПочтой.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка.ВзаимодействиеОснование КАК ВзаимодействиеОснование,
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт КАК Контакт
	|ПОМЕСТИТЬ ВТ_ЭлектронныеПисьма
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СогласияНаИнформированиеСрезПоследних.Сотрудник КАК Сотрудник,
	|	СогласияНаИнформированиеСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_СогласияНаEmail
	|ИЗ
	|	РегистрСведений.СогласияНаИнформирование.СрезПоследних КАК СогласияНаИнформированиеСрезПоследних
	|ГДЕ
	|	СогласияНаИнформированиеСрезПоследних.Email
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоступленияНаСклад.Ссылка КАК Ссылка,
	|	ВТ_ПоступленияНаСклад.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТ_ПоступленияНаСклад КАК ВТ_ПоступленияНаСклад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЭлектронныеПисьма КАК ВТ_ЭлектронныеПисьма
	|		ПО ВТ_ПоступленияНаСклад.Ссылка = ВТ_ЭлектронныеПисьма.ВзаимодействиеОснование
	|			И ВТ_ПоступленияНаСклад.Сотрудник.ФизическоеЛицо = ВТ_ЭлектронныеПисьма.Контакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СогласияНаEmail КАК ВТ_СогласияНаEmail
	|		ПО ВТ_ПоступленияНаСклад.Ссылка.Организация = ВТ_СогласияНаEmail.Организация
	|			И ВТ_ПоступленияНаСклад.Сотрудник = ВТ_СогласияНаEmail.Сотрудник
	|ГДЕ
	|	ВТ_ЭлектронныеПисьма.Контакт ЕСТЬ NULL
	|	И НЕ ВТ_СогласияНаEmail.Сотрудник ЕСТЬ NULL
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	
	ВыборкаПоПоступлениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоПоступлениям.Следующий() Цикл
		
		ВыборкаПоСотрудникам = ВыборкаПоПоступлениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		МассивСотрудников = Новый Массив;
		
		Пока ВыборкаПоСотрудникам.Следующий() Цикл
			
			МассивСотрудников.Добавить(ВыборкаПоСотрудникам.Сотрудник);
			
		КонецЦикла;
		
		МассивАдресатов = Справочники.Сотрудники.ПолучитьМассивАдресатовEmail(МассивСотрудников);
		
		Если МассивАдресатов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		НовоеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		НовоеПисьмо.Заполнить(Неопределено);
		
		НовоеПисьмо.Дата 					= ТекущаяДата();
		НовоеПисьмо.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
		НовоеПисьмо.Тема 					= ВыборкаПоПоступлениям.Ссылка.Организация.EmailШаблонОПоступленииНаСклад.ТемаПисьма;
		НовоеПисьмо.Текст 					= ВыборкаПоПоступлениям.Ссылка.Организация.EmailШаблонОПоступленииНаСклад.ТекстШаблонаПисьма;
		НовоеПисьмо.ТипТекста 				= Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		
		Если НЕ ЗначениеЗаполнено(НовоеПисьмо.УчетнаяЗапись) Тогда
			НовоеПисьмо.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
		КонецЕсли;
		
		НовоеПисьмо.ОтправительПредставление = НовоеПисьмо.УчетнаяЗапись.АдресЭлектроннойПочты;
		
		Для Каждого ЭлементМассива Из МассивАдресатов Цикл
			
			Получатель 					= НовоеПисьмо.ПолучателиПисьма.Добавить();
			Получатель.Представление 	= ЭлементМассива.Представление;
			Получатель.Адрес 			= ЭлементМассива.Адрес;
			Получатель.Контакт			= ЭлементМассива.ИсточникКонтактнойИнформации;
			
			НовоеПисьмо.СписокПолучателейПисьма = НовоеПисьмо.СписокПолучателейПисьма + 
													ЭлементМассива.ИсточникКонтактнойИнформации.Наименование + 
													" <" + ЭлементМассива.Адрес + ">" + "; ";
			
		КонецЦикла;
		
		Попытка
			ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(НовоеПисьмо);
		Исключение
			ЗаписьЖурналаРегистрации("Информирование о поступлении средств защиты на склад по e-mail.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецПопытки;
		
		НовоеПисьмо.ИдентификаторСообщения 	= ИдентификаторПисьма;
		НовоеПисьмо.СтатусПисьма    		= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
		НовоеПисьмо.ДатаОтправления 		= ТекущаяДатаСеанса();
		НовоеПисьмо.ВзаимодействиеОснование = ВыборкаПоПоступлениям.Ссылка;
		НовоеПисьмо.УстановитьНовыйНомер();
		
		Попытка 
			НовоеПисьмо.Записать(РежимЗаписиДокумента.Запись);
			ЗаписьЖурналаРегистрации("Информирование о поступлении средств защиты на склад по e-mail.",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,"Документ сформирован.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		Исключение
			ЗаписьЖурналаРегистрации("Информирование о поступлении средств защиты на склад по e-mail.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецПопытки;
		
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(НовоеПисьмо.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(НовоеПисьмо.Ссылка));
		
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

Функция НайтиСотрудникаПоМагнитнойКарте(МКод) Экспорт
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("Идентификатор", МКод);
	Если Сотрудник.Пустая() Тогда
		Сотрудник = Неопределено;
	КонецЕсли;
	Возврат Сотрудник;
	
КонецФункции

// Функция возвращает результат проверки кода магнитной карты на предмет уникальности в информационной базе.
//
// Если объект уже записан и редактируется, тогда для исключения этого объекта из результат запроса
// добавляется дополнительное условие и устанавливается параметр.
//
// Параметры:
// СпрОбъект - СправочникОбъект.Сотрудники - элемент справочника Сотрудники.
//
// Возвращаемое значение:
// Булево - результат проверки.
//
Функция ПроверитьУникальностьМагнитногоКода(СпрОбъект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СпрОбъект.Идентификатор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	| Сотрудники.Идентификатор
	|ИЗ
	| Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Идентификатор = &МКод";
	
	МКод = СпрОбъект.Идентификатор;
	
	Запрос.УстановитьПараметр("МКод", МКод);
	Если НЕ СпрОбъект.ЭтоНовый() Тогда
		ЭлементСсылка = СпрОбъект.Ссылка;
		Запрос.Текст = Запрос.Текст + " И Сотрудники.Ссылка <> &ЭлементСсылка";
		Запрос.УстановитьПараметр("ЭлементСсылка", ЭлементСсылка);
	КонецЕсли;
	Результат = Запрос.Выполнить().Пустой();
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОтсортированнуюТаблицуСертификатов(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураСертификаты.Сертификат КАК Сертификат,
	|	НоменклатураСертификаты.Сертификат.ВидСертификата.Приоритет КАК СертификатВидСертификатаПриоритет
	|ИЗ
	|	Справочник.Номенклатура.Сертификаты КАК НоменклатураСертификаты
	|ГДЕ
	|	НоменклатураСертификаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СертификатВидСертификатаПриоритет";
	
	Запрос.УстановитьПараметр("Ссылка",Номенклатура);
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

//Возвращает приоритет:
	//1)	Сертификат ЕАЭС               (будет с начала 2019 года)
	//2)	Таможенный сертификат
	//3)	Декларация ЕАЭС
	//4)	Таможенная декларация
	//5)	Декларация
	//6)	Добровольный сертификат
	//7)	Сертификат соответствия
	//8)	Письмо: товар не подлежит обязательной сертификации
	//10)   Все остальные
Функция ПолучитьПриоритетВидаСертификата(КодВидаСертификата) Экспорт
	
	ПеречислениеВидов = Новый Соответствие;
	ПеречислениеВидов.Вставить(33,1); //Сертификат ЕАЭС
	ПеречислениеВидов.Вставить(13,2); //Таможенный сертификат
	ПеречислениеВидов.Вставить(34,3); //Декларация ЕАЭС
	ПеречислениеВидов.Вставить(15,4); //Таможенная декларация
	ПеречислениеВидов.Вставить(4,5);  //Декларация
	ПеречислениеВидов.Вставить(5,6);  //Добровольный сертификат
	ПеречислениеВидов.Вставить(1,7);  //Сертификат соответствия
	ПеречислениеВидов.Вставить(19,8); //Письмо: товар не подлежит обязательной сертификации
	ПеречислениеВидов.Вставить(2,10); //Протокол испытаний
	ПеречислениеВидов.Вставить(3,10); //Гигиеническое заключение
	ПеречислениеВидов.Вставить(7,10); //Письмо: товар на сертификации
	ПеречислениеВидов.Вставить(10,10);//Свидетельство
	ПеречислениеВидов.Вставить(25,10);//Европейский сертификат
	ПеречислениеВидов.Вставить(26,10);//Экспертное заключение
	ПеречислениеВидов.Вставить(31,10);//Регистрационное удостоверение
	
	Возврат ПеречислениеВидов.Получить(КодВидаСертификата);
	
КонецФункции	

Процедура ПриОтменеПроведенияДокументовПотребностиОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Если Не РольДоступна("АдминистраторСистемы") Тогда
	
	    Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПотребностьВыдачиСИЗ.Сотрудник КАК Сотрудник,
		|	ПотребностьВыдачиСИЗ.НоменклатураНормы КАК НоменклатураНормы
		|ПОМЕСТИТЬ ВТ_СтарыеДвижения
		|ИЗ
		|	РегистрНакопления.ПотребностьВыдачиСИЗ КАК ПотребностьВыдачиСИЗ
		|ГДЕ
		|	ПотребностьВыдачиСИЗ.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПотребностьВыдачиСИЗ.Сотрудник КАК Сотрудник,
		|	ПотребностьВыдачиСИЗ.НоменклатураНормы КАК НоменклатураНормы
		|ПОМЕСТИТЬ ВТ_ОстальныеДвижения
		|ИЗ
		|	РегистрНакопления.ПотребностьВыдачиСИЗ КАК ПотребностьВыдачиСИЗ
		|ГДЕ
		|	НЕ ПотребностьВыдачиСИЗ.Регистратор = &Регистратор
		|	И ПотребностьВыдачиСИЗ.Период >= &Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СтарыеДвижения.Сотрудник КАК Сотрудник,
		|	ВТ_СтарыеДвижения.НоменклатураНормы КАК НоменклатураНормы
		|ИЗ
		|	ВТ_СтарыеДвижения КАК ВТ_СтарыеДвижения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстальныеДвижения КАК ВТ_ОстальныеДвижения
		|		ПО ВТ_СтарыеДвижения.Сотрудник = ВТ_ОстальныеДвижения.Сотрудник
		|			И ВТ_СтарыеДвижения.НоменклатураНормы = ВТ_ОстальныеДвижения.НоменклатураНормы
		|ГДЕ
		|	НЕ ВТ_ОстальныеДвижения.НоменклатураНормы ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("Регистратор",Источник.Ссылка);
		Запрос.УстановитьПараметр("Период",		Источник.Ссылка.Дата);
		
		Результат = Запрос.Выполнить();
		
		Отказ = НЕ Результат.Пустой();
		
		Если Отказ Тогда
			
			ТаблицаСтарыхДвижений = Результат.Выгрузить();
			
			ТекстСообщения = "";
			
			Для Каждого СтрокаТаблицыЗапроса Из ТаблицаСтарыхДвижений Цикл
				
				ТекстСообщения = ТекстСообщения + Символы.ПС + "У сотрудника: " + СтрокаТаблицыЗапроса.Сотрудник.Наименование + " существуют движения по номенклатуре нормы: " + СтрокаТаблицыЗапроса.НоменклатураНормы.Наименование + " позже: " + Формат(Источник.Ссылка.Дата,"ДЛФ=DDT");
				
			КонецЦикла;
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстСообщения;
			СообщениеПользователю.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьИнформациюОбОсновномМестеРаботыНаСервере(ТекущийСотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Подразделение,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Должность,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.РабочееМесто
	|ИЗ
	|	РегистрСведений.ОсновноеМестоРаботыСотрудника.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК ОсновноеМестоРаботыСотрудникаСрезПоследних
	|ГДЕ
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.ОсновноеМестоРаботы";
	
	Запрос.УстановитьПараметр("Период",		ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник",	ТекущийСотрудник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат "Основное место работы не определено";
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если НЕ ЗначениеЗаполнено(Выборка.Должность.Источник) ИЛИ Выборка.Должность.Источник = Перечисления.ИсточникиДолжностей.ВведеныВручную Тогда
			
			ВидДолжности = "";
			
		Иначе
			
			ВидДолжности = " (" + Выборка.Должность.Источник + ")";
			
		КонецЕсли;	
		
		Если ТекущийСотрудник.Владелец.ИспользоватьРабочиеМеста Тогда
			Возврат "Подразделение: " + Выборка.Подразделение.ПолноеНаименование() + Символы.ПС + "Должность: " + Выборка.Должность.Наименование + ВидДолжности + Символы.ПС + "Рабочее место: " + Выборка.РабочееМесто.Наименование;
		Иначе
			Возврат "Подразделение: " + Выборка.Подразделение.ПолноеНаименование() + Символы.ПС + "Должность: " + Выборка.Должность.Наименование + ВидДолжности;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура ПриЗаписиДокументаППСПриЗаписи(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Отказ = ДокументППСВыгруженВСАП(Источник.Ссылка);	
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Документ, выгруженный в SAP, доступен только на просмотр.";
	Сообщение.Сообщить();
	
КонецПроцедуры

Функция ДокументППСВыгруженВСАП(ДокументППС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанныхСАП") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгруженныеДокументыППСвСАП.ДокументППС КАК ДокументППС
	|ИЗ
	|	РегистрСведений.ВыгруженныеДокументыППСвСАП КАК ВыгруженныеДокументыППСвСАП
	|ГДЕ
	|	ВыгруженныеДокументыППСвСАП.ДокументППС = &ДокументППС";
	
	Запрос.УстановитьПараметр("ДокументППС",ДокументППС);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции	

Процедура ОтсутвиеНаРабочемМестеПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ОтсутствиеНаРабочемМесте.КорректируемыйДокумент КАК КорректируемыйДокумент
	|ПОМЕСТИТЬ ВТ_СкорректированныеДокументы
	|ИЗ
	|	Документ.ОтсутствиеНаРабочемМесте КАК ОтсутствиеНаРабочемМесте
	|ГДЕ
	|	ОтсутствиеНаРабочемМесте.Сотрудник = &Сотрудник
	|	И ОтсутствиеНаРабочемМесте.Проведен
	|	И НЕ ОтсутствиеНаРабочемМесте.КорректируемыйДокумент = ЗНАЧЕНИЕ(Документ.ОтсутствиеНаРабочемМесте.ПустаяСсылка)
	|	И НЕ ОтсутствиеНаРабочемМесте.Ссылка = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтсутствиеНаРабочемМесте.КорректируемыйДокумент.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ПотребностьВыдачиСИЗОбороты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_Потребность
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Сотрудник = &Сотрудник
	|				И ДатаПотребности > &ДатаАнализа) КАК ПотребностьВыдачиСИЗОбороты
	|ГДЕ
	|	ПотребностьВыдачиСИЗОбороты.КоличествоПриход > 0
	|	И ПотребностьВыдачиСИЗОбороты.Регистратор ССЫЛКА Документ.ОтсутствиеНаРабочемМесте
	|	И ПотребностьВыдачиСИЗОбороты.Регистратор.ДатаОкончания > &ДатаОкончания
	|	И ПотребностьВыдачиСИЗОбороты.Регистратор.ДатаНачала <= &ДатаОкончания
	|	И НЕ ПотребностьВыдачиСИЗОбороты.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПотребностьВыдачиСИЗОбороты.Регистратор.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Потребность.Регистратор КАК Регистратор
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкорректированныеДокументы КАК ВТ_СкорректированныеДокументы
	|		ПО ВТ_Потребность.Регистратор = ВТ_СкорректированныеДокументы.КорректируемыйДокумент
	|ГДЕ
	|	ВТ_СкорректированныеДокументы.КорректируемыйДокумент ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Сотрудник",		Источник.Сотрудник);
	Запрос.УстановитьПараметр("ДатаАнализа",	Источник.Дата);
	Запрос.УстановитьПараметр("ДатаОкончания",	Источник.ДатаОкончания);
	Запрос.УстановитьПараметр("Регистратор",	Источник.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Источник.КорректируемыйДокумент = Документы.ОтсутствиеНаРабочемМесте.ПустаяСсылка();
		
	Иначе
		
		Источник.КорректируемыйДокумент = Результат.Выгрузить()[0].Регистратор;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьПараметрыПодключенияКСервисуДляПроверкиКодовМаркировки(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыПодключенияКСервисуДляПроверкиКодовМаркировки.Источник КАК Источник,
	|	ПараметрыПодключенияКСервисуДляПроверкиКодовМаркировки.Адрес КАК Адрес,
	|	ПараметрыПодключенияКСервисуДляПроверкиКодовМаркировки.Пользователь КАК Пользователь,
	|	ПараметрыПодключенияКСервисуДляПроверкиКодовМаркировки.Пароль КАК Пароль
	|ИЗ
	|	РегистрСведений.ПараметрыПодключенияКСервисуДляПроверкиКодовМаркировки КАК ПараметрыПодключенияКСервисуДляПроверкиКодовМаркировки
	|ГДЕ
	|	ПараметрыПодключенияКСервисуДляПроверкиКодовМаркировки.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат.Выгрузить()[0]);
	КонецЕсли;
	
КонецФункции	

Процедура ПроверитьКодМаркировки(ПараметрыСервиса,КодМаркировки,ТекстСообщения) Экспорт
	
	Если ПараметрыСервиса.Источник = Перечисления.ИсточникиДляПроверкиКодовМаркировки.SAPВостокСервис Тогда
		
		Прокси = ПолучитьWSПроксиДляПроверкиКодаМаркировки(ТекстСообщения,ПараметрыСервиса);
		
		IV_SERIAL_NUM = КодМаркировки;
		IV_MODE = "T";
		IV_RESULT = "";
		IV_MESSAGE = "";
		
		Если ТекстСообщения = "" Тогда
			
			Попытка
				
				Прокси.ZTT_CHECK_SN_USED(IV_MODE,IV_SERIAL_NUM,IV_MESSAGE,IV_RESULT);
				
				Если IV_RESULT = "X" Тогда
					ТекстСообщения = "";
				ИначеЕсли IV_RESULT = "" Тогда
					ТекстСообщения = "Код маркировки не найден в SAP! Попробуйте поменять раскладку клавиатуры на латинскую.";
				Иначе
					ТекстСообщения = IV_RESULT;
				КонецЕсли;			
				
			Исключение
				
				ТекстСообщения = ОписаниеОшибки();
				
			КонецПопытки;	
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыСервиса.Источник = Перечисления.ИсточникиДляПроверкиКодовМаркировки.ЕИСФ Тогда
		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыСервиса.Адрес,,ПараметрыСервиса.Пользователь,ПараметрыСервиса.Пароль,,,Новый ЗащищенноеСоединениеOpenSSL(),Ложь);
		
		МассивДляЗапроса = Новый Массив;
		МассивДляЗапроса.Добавить(Новый Структура("КодМаркировки",КодМаркировки));
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON,МассивДляЗапроса);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
		Запрос = Новый HTTPЗапрос;
		Запрос.АдресРесурса = "/Enable_KM";
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON,КодировкаТекста.UTF8);
		
		ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(Запрос);
		
		Если ОтветHTTP.КодСостояния = 200 Тогда
			
			СтрокаJSON = ОтветHTTP.ПолучитьТелоКакСтроку();	
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
			МассивОтвета = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
		Иначе
			
			ТекстСообщения = "Ошибка подключения к HTTP-сервису!";
			
		КонецЕсли;
		
		Если МассивОтвета[0].КодМаркировкиСуществует = 1 Тогда
		    ТекстСообщения = "";
		Иначе
			ТекстСообщения = "Код маркировки не найден в ЕИСФ! Попробуйте поменять раскладку клавиатуры на латинскую.";
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = "Неверно заданы параметры подключения к сервису для проверки кодов маркировки!";
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьWSПроксиДляПроверкиКодаМаркировки(ОписаниеОшибки, ПараметрыСервиса) Экспорт
	
	Прокси = Неопределено;
	
	//подключение без защищенного соединения
	ЕстьПодключение = Истина;
	Попытка
		Определение 		= Новый WSОпределения(ПараметрыСервиса.Адрес,ПараметрыСервиса.Пользователь,ПараметрыСервиса.Пароль,,60);
		WSСервис 			= Определение.Сервисы[0];
		Прокси 				= Новый WSПрокси(Определение, WSСервис.URIПространстваИмен, "ZTT_CHECK_SN_USED", "ZTT_CHECK_SN_USED");
		Прокси.Пользователь = ПараметрыСервиса.Пользователь;
		Прокси.Пароль 		= ПараметрыСервиса.Пароль;
	Исключение
		ОписаниеОшибки = "Не удалось установить соединение с сервером." + ОписаниеОшибки();
		ЕстьПодключение = Ложь;
	КонецПопытки;
	
	Если НЕ ЕстьПодключение Тогда //подключение с защищенным соединением
		Попытка
			Определение 		= Новый WSОпределения(ПараметрыСервиса.Адрес,ПараметрыСервиса.Пользователь,ПараметрыСервиса.Пароль,,60,Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено));
			WSСервис 			= Определение.Сервисы[0];
			Прокси 				= Новый WSПрокси(Определение, WSСервис.URIПространстваИмен, "ZTT_CHECK_SN_USED", "ZTT_CHECK_SN_USED",,,Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено));
			Прокси.Пользователь = ПараметрыСервиса.Пользователь;
			Прокси.Пароль 		= ПараметрыСервиса.Пароль;
		Исключение
			ОписаниеОшибки 	= "Не удалось установить соединение с сервером." + ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;	
		
	Возврат Прокси;
	
КонецФункции

Процедура НоменклатураПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если НЕ Источник.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Источник.ВидАнтропометрическогоСвойства) Тогда
			Источник.ВидАнтропометрическогоСвойства = Справочники.ВидыАнтропометрическихСвойств.НеОпределен;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Источник.КодСинхронизации) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не заполнен код синхронизации!";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НоменклатураНормПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если НЕ Источник.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Источник.ВидАнтропометрическогоСвойства) Тогда
			Источник.ВидАнтропометрическогоСвойства = Справочники.ВидыАнтропометрическихСвойств.НеОпределен;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СотрудникиПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Источник.Идентификатор) Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Идентификатор = &Идентификатор
	|	И НЕ Сотрудники.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Идентификатор",	Источник.Идентификатор);
	Запрос.УстановитьПараметр("Ссылка",			Источник.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сотрудник с идентификатором <<" + Источник.Идентификатор + ">> уже существует.";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;		
	
КонецПроцедуры

// Слияние адресов ячеек через разделитель "-"
Функция СлитьАдреса(Знач АдресРодителя, Знач АдресЯчейки) Экспорт
	
	АдресРодителя = СокрЛП(АдресРодителя);
	АдресЯчейки = СокрЛП(АдресЯчейки);
	Если АдресРодителя <> "" Тогда
		Возврат АдресРодителя + "-" + АдресЯчейки;
	Иначе
		Возврат АдресЯчейки;
	КонецЕсли;
	
КонецФункции

// Функция возвращает полный адрес ячейки
Функция ПолучитьПолныйАдресТочкиХранения(ТочкаХранения) Экспорт
	
	// Если не задали ячейку - возвращаем ""
	Если (ТочкаХранения = Неопределено) Или ТочкаХранения.Пустая() Тогда
		Возврат "";
	Иначе
		Возврат ТочкаХранения.ПолныйАдрес;
	КонецЕсли;
	
КонецФункции

//возвращает таблицу вида: Номенклатура|ТочкаХранения или НЕОПРЕДЕЛЕНО, если точек хранения нет.
//
//Параметры: 
//			МассивНоменклатуры 	- массив элементов справочника "Номенклатура"
//			Склад 				- склад выдачи из документа выдачи СИЗ
//
Функция ПолучитьТочкиХраненияНоменклатуры(МассивНоменклатуры,Склад) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТочкиХранения.Ссылка КАК ТочкаХранения
	|ИЗ
	|	Справочник.ТочкиХранения КАК ТочкиХранения
	|ГДЕ
	|	ТочкиХранения.ВидТочкиХранения = ЗНАЧЕНИЕ(Справочник.ВидыТочекХранения.Склад)
	|	И ТочкиХранения.ЭтоГруппа
	|	И (ТочкиХранения.Склад = &Склад
	|			ИЛИ ТочкиХранения.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	//по-хорошему, запрос должен вернуть одну запись, если склады выдачи привязаны к точкам хранения
	//но всякое может быть...
	ТаблицаЗапроса = Результат.Выгрузить();
	
	ТаблицаТочекХранения = Новый ТаблицаЗначений;
	ТаблицаТочекХранения.Колонки.Добавить("Номенклатура");
	ТаблицаТочекХранения.Колонки.Добавить("ТочкаХранения");
	
	ЗапросПоТочкамХранения = Новый Запрос;
	ЗапросПоТочкамХранения.Текст = 
	"ВЫБРАТЬ
	|	ТочкиХраненияНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТочкиХраненияНоменклатуры.ТочкаХранения КАК ТочкаХранения
	|ИЗ
	|	РегистрСведений.ТочкиХраненияНоменклатуры КАК ТочкиХраненияНоменклатуры
	|ГДЕ
	|	ТочкиХраненияНоменклатуры.Номенклатура В(&МассивНоменклатуры)
	|	И ТочкиХраненияНоменклатуры.ТочкаХранения В ИЕРАРХИИ(&ТочкаХранения)";
	
	ЗапросПоТочкамХранения.УстановитьПараметр("МассивНоменклатуры",МассивНоменклатуры);
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		ЗапросПоТочкамХранения.УстановитьПараметр("ТочкаХранения",СтрокаТаблицыЗапроса.ТочкаХранения);
		
		ТаблицаЗапросаПоТочкамХранения = ЗапросПоТочкамХранения.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицыЗапросаПоТочкамХранения Из ТаблицаЗапросаПоТочкамХранения Цикл
			
			ЗаполнитьЗначенияСвойств(ТаблицаТочекХранения.Добавить(),СтрокаТаблицыЗапросаПоТочкамХранения);
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Если ТаблицаТочекХранения.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТаблицаТочекХранения;
	КонецЕсли;
	
КонецФункции	

Функция ПолучитьСписокТочекХраненияПоСкладу(Склад) Экспорт
	
	МассивТочекХранения = Новый Массив;
	МассивТочекХранения.Добавить(Справочники.ТочкиХранения.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТочкиХранения.Ссылка КАК ТочкаХранения
	|ИЗ
	|	Справочник.ТочкиХранения КАК ТочкиХранения
	|ГДЕ
	|	ТочкиХранения.ВидТочкиХранения = ЗНАЧЕНИЕ(Справочник.ВидыТочекХранения.Склад)
	|	И ТочкиХранения.ЭтоГруппа
	|	И ТочкиХранения.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат МассивТочекХранения;
	КонецЕсли;	
	
	ТочкаХраненияСоСкладом = Результат.Выгрузить()[0].ТочкаХранения;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТочкиХранения.Ссылка КАК ТочкаХранения
	|ИЗ
	|	Справочник.ТочкиХранения КАК ТочкиХранения
	|ГДЕ
	|	ТочкиХранения.Ссылка В ИЕРАРХИИ(&ТочкаХраненияСоСкладом)
	|	И НЕ ТочкиХранения.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("ТочкаХраненияСоСкладом", ТочкаХраненияСоСкладом);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат МассивТочекХранения;
	КонецЕсли;
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("ТочкаХранения");
	
КонецФункции	

//+++АсТБ_Alexey_56458_********************************************************************

//разбирает или собирает комплекты, согласно виду учета номенклатуры
Функция ОбработатьКомплектыДляППС(ТаблицаДокумента,ТекущийОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобственныеСИЗОбороты.МВЗ КАК МВЗ,
	|	СобственныеСИЗОбороты.Номенклатура КАК Номенклатура,
	|	СобственныеСИЗОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СобственныеСИЗОбороты.ДокументВыдачи КАК ДокументВыдачи,
	|	СУММА(СобственныеСИЗОбороты.КоличествоОборот) КАК КоличествоОборот
	|ИЗ
	|	РегистрНакопления.СобственныеСИЗ.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Организация = &Организация) КАК СобственныеСИЗОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	СобственныеСИЗОбороты.МВЗ,
	|	СобственныеСИЗОбороты.Номенклатура,
	|	СобственныеСИЗОбороты.ХарактеристикаНоменклатуры,
	|	СобственныеСИЗОбороты.ДокументВыдачи";
	
	Запрос.УстановитьПараметр("ДатаНачала", 	НачалоДня(ТекущийОбъект.НачалоПериода));
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецДня(ТекущийОбъект.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ТекущийОбъект.Организация);
	
	ТаблицаОбротовПоСобственнымСИЗ = Запрос.Выполнить().Выгрузить();
	
	РезультрующаяТаблица = ТаблицаДокумента.Скопировать();
	РезультрующаяТаблица.Очистить();
	
	МассивОбработанныхСтрок = Новый Массив; //нужен для сборки комплектов, чтобы не добавлять лишние строки
	
	Для Каждого СтрокаТаблицыДокумента Из ТаблицаДокумента Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицыДокумента.Комплект) Тогда //комплект разобран при выдаче
			
			Если СтрокаТаблицыДокумента.Комплект.ВидУчетаКомплектаДляППС = Перечисления.ВидыУчетаКомплектов.УчитыватьСогласноВыдаче
				ИЛИ СтрокаТаблицыДокумента.Комплект.ВидУчетаКомплектаДляППС = Перечисления.ВидыУчетаКомплектов.УчитыватьКакКомплектующие Тогда //ничего не делаем
				ЗаполнитьЗначенияСвойств(РезультрующаяТаблица.Добавить(),СтрокаТаблицыДокумента);
				Продолжить;
			КонецЕсли;
			
			Если НЕ МассивОбработанныхСтрок.Найти(ТаблицаДокумента.Индекс(СтрокаТаблицыДокумента)) = Неопределено Тогда //комплект обработан
				Продолжить;
			КонецЕсли;	
			
			ПервоеКомплектующее 			= СтрокаТаблицыДокумента.Комплект.Комплектующие[0].Номенклатура;
			ПервоеКомплектующееКоличество 	= СтрокаТаблицыДокумента.Комплект.Комплектующие[0].Количество;
			
			//нужно собрать комплект
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Комплект",		СтрокаТаблицыДокумента.Комплект);
			//АсТБ_Alexey_103067_********************************************************************
			СтруктураПоиска.Вставить("НомерСтрокиКомплекта",СтрокаТаблицыДокумента.НомерСтрокиКомплекта);
			//АсТБ_Alexey_103067_********************************************************************
			СтруктураПоиска.Вставить("ДокументВыдачи",	СтрокаТаблицыДокумента.ДокументВыдачи);
			СтруктураПоиска.Вставить("МВЗ",				СтрокаТаблицыДокумента.МВЗ);
			
			НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				МассивОбработанныхСтрок.Добавить(ТаблицаДокумента.Индекс(НайденнаяСтрока));
				
				Если НайденнаяСтрока.Номенклатура = ПервоеКомплектующее Тогда // подбираем размер комплекта и заполняем таблицу
					
					Если ЗначениеЗаполнено(НайденнаяСтрока.ХарактеристикаНоменклатуры) Тогда //ищем размер комплекта
						
						ХарактеристикаНоменклатуры 	= Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("Метрика",НайденнаяСтрока.ХарактеристикаНоменклатуры.Метрика,,СтрокаТаблицыДокумента.Комплект);
						Количество 					= СтрокаТаблицыДокумента.Количество / ?(ПервоеКомплектующееКоличество = 0, 1, ПервоеКомплектующееКоличество);
						
						СтруктураПоискаСобственныхСИЗ = Новый Структура;
						СтруктураПоискаСобственныхСИЗ.Вставить("Номенклатура",				СтрокаТаблицыДокумента.Комплект);
						СтруктураПоискаСобственныхСИЗ.Вставить("ХарактеристикаНоменклатуры",ХарактеристикаНоменклатуры);
						СтруктураПоискаСобственныхСИЗ.Вставить("ДокументВыдачи",			СтрокаТаблицыДокумента.ДокументВыдачи);
						СтруктураПоискаСобственныхСИЗ.Вставить("МВЗ",						СтрокаТаблицыДокумента.МВЗ);
						
						НайденныеСтрокиОбротовПоСобственнымСИЗ = ТаблицаОбротовПоСобственнымСИЗ.НайтиСтроки(СтруктураПоискаСобственныхСИЗ);
						
						Если НайденныеСтрокиОбротовПоСобственнымСИЗ.Количество() = 0 Тогда
							НоваяСтрока = РезультрующаяТаблица.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрока);
							НоваяСтрока.Номенклатура 				= СтрокаТаблицыДокумента.Комплект;
							НоваяСтрока.Количество 					= Количество;
							НоваяСтрока.Цена 						= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НоваяСтрока.Номенклатура,ТекущийОбъект.Организация,ТекущийОбъект.Дата,СтрокаТаблицыДокумента.Номенклатура.Поставщик);
							НоваяСтрока.Сумма 						= НоваяСтрока.Цена * НоваяСтрока.Количество;
							НоваяСтрока.ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;
						Иначе
							Если Количество > НайденныеСтрокиОбротовПоСобственнымСИЗ[0].КоличествоОборот Тогда
								НоваяСтрока = РезультрующаяТаблица.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрока);
								НоваяСтрока.Номенклатура 				= СтрокаТаблицыДокумента.Комплект;
								НоваяСтрока.Количество 					= Количество - НайденныеСтрокиОбротовПоСобственнымСИЗ[0].КоличествоОборот;
								НоваяСтрока.Цена 						= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НоваяСтрока.Номенклатура,ТекущийОбъект.Организация,ТекущийОбъект.Дата,СтрокаТаблицыДокумента.Номенклатура.Поставщик);
								НоваяСтрока.Сумма 						= НоваяСтрока.Цена * НоваяСтрока.Количество;
								НоваяСтрока.ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;								
							КонецЕсли;	
						КонецЕсли;
						
					Иначе
						
						Количество = СтрокаТаблицыДокумента.Количество / ?(ПервоеКомплектующееКоличество = 0, 1, ПервоеКомплектующееКоличество);
						
						СтруктураПоискаСобственныхСИЗ = Новый Структура;
						СтруктураПоискаСобственныхСИЗ.Вставить("Номенклатура",				СтрокаТаблицыДокумента.Комплект);
						СтруктураПоискаСобственныхСИЗ.Вставить("ХарактеристикаНоменклатуры",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
						СтруктураПоискаСобственныхСИЗ.Вставить("ДокументВыдачи",			СтрокаТаблицыДокумента.ДокументВыдачи);
						СтруктураПоискаСобственныхСИЗ.Вставить("МВЗ",						СтрокаТаблицыДокумента.МВЗ);
						
						НайденныеСтрокиОбротовПоСобственнымСИЗ = ТаблицаОбротовПоСобственнымСИЗ.НайтиСтроки(СтруктураПоискаСобственныхСИЗ);
						
						Если НайденныеСтрокиОбротовПоСобственнымСИЗ.Количество() = 0 Тогда
							НоваяСтрока = РезультрующаяТаблица.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрока);
							НоваяСтрока.Номенклатура 	= СтрокаТаблицыДокумента.Комплект;
							НоваяСтрока.Количество 		= Количество;
							НоваяСтрока.Цена 			= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НоваяСтрока.Номенклатура,ТекущийОбъект.Организация,ТекущийОбъект.Дата,СтрокаТаблицыДокумента.Номенклатура.Поставщик);
							НоваяСтрока.Сумма 			= НоваяСтрока.Цена * НоваяСтрока.Количество;
						Иначе
							Если Количество > НайденныеСтрокиОбротовПоСобственнымСИЗ[0].КоличествоОборот Тогда
								НоваяСтрока = РезультрующаяТаблица.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрока);
								НоваяСтрока.Номенклатура 	= СтрокаТаблицыДокумента.Комплект;
								НоваяСтрока.Количество 		= Количество - НайденныеСтрокиОбротовПоСобственнымСИЗ[0].КоличествоОборот;
								НоваяСтрока.Цена 			= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НоваяСтрока.Номенклатура,ТекущийОбъект.Организация,ТекущийОбъект.Дата,СтрокаТаблицыДокумента.Номенклатура.Поставщик);
								НоваяСтрока.Сумма 			= НоваяСтрока.Цена * НоваяСтрока.Количество;
							КонецЕсли;	
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		Иначе
			
			Если СтрокаТаблицыДокумента.Номенклатура.Комплект Тогда //комплект собран
				
				Если СтрокаТаблицыДокумента.Номенклатура.ВидУчетаКомплектаДляППС = Перечисления.ВидыУчетаКомплектов.УчитыватьСогласноВыдаче 
					ИЛИ СтрокаТаблицыДокумента.Номенклатура.ВидУчетаКомплектаДляППС = Перечисления.ВидыУчетаКомплектов.УчитыватьКакКомплект Тогда //ничего не делаем
					ЗаполнитьЗначенияСвойств(РезультрующаяТаблица.Добавить(),СтрокаТаблицыДокумента);
					Продолжить;
				КонецЕсли;
				
				//нужно разобрать комплект на комплектующие
				Если ЗначениеЗаполнено(СтрокаТаблицыДокумента.ХарактеристикаНоменклатуры) Тогда //подбор размеров комплектующих
					
					Для Каждого Комплектующее Из СтрокаТаблицыДокумента.Номенклатура.Комплектующие Цикл
						
						ХарактеристикаНоменклатуры 	= Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("Метрика",СтрокаТаблицыДокумента.ХарактеристикаНоменклатуры.Метрика,,Комплектующее.Номенклатура);
						Количество 					= СтрокаТаблицыДокумента.Количество * Комплектующее.Количество;
						
						СтруктураПоискаСобственныхСИЗ = Новый Структура;
						СтруктураПоискаСобственныхСИЗ.Вставить("Номенклатура",				Комплектующее.Номенклатура);
						СтруктураПоискаСобственныхСИЗ.Вставить("ХарактеристикаНоменклатуры",ХарактеристикаНоменклатуры);
						СтруктураПоискаСобственныхСИЗ.Вставить("ДокументВыдачи",			СтрокаТаблицыДокумента.ДокументВыдачи);
						СтруктураПоискаСобственныхСИЗ.Вставить("МВЗ",						СтрокаТаблицыДокумента.МВЗ);
						
						НайденныеСтрокиОбротовПоСобственнымСИЗ = ТаблицаОбротовПоСобственнымСИЗ.НайтиСтроки(СтруктураПоискаСобственныхСИЗ);
						
						Если НайденныеСтрокиОбротовПоСобственнымСИЗ.Количество() = 0 Тогда
							НоваяСтрока = РезультрующаяТаблица.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыДокумента);
							НоваяСтрока.Номенклатура 				= Комплектующее.Номенклатура;
							НоваяСтрока.Количество 					= Количество;
							НоваяСтрока.Цена 						= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НоваяСтрока.Номенклатура,ТекущийОбъект.Организация,ТекущийОбъект.Дата,СтрокаТаблицыДокумента.Номенклатура.Поставщик);
							НоваяСтрока.Сумма 						= НоваяСтрока.Цена * НоваяСтрока.Количество;
							НоваяСтрока.ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;
						Иначе
							Если Количество > НайденныеСтрокиОбротовПоСобственнымСИЗ[0].КоличествоОборот Тогда
								НоваяСтрока = РезультрующаяТаблица.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыДокумента);
								НоваяСтрока.Номенклатура 				= Комплектующее.Номенклатура;
								НоваяСтрока.Количество 					= Количество - НайденныеСтрокиОбротовПоСобственнымСИЗ[0].КоличествоОборот;
								НоваяСтрока.Цена 						= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НоваяСтрока.Номенклатура,ТекущийОбъект.Организация,ТекущийОбъект.Дата,СтрокаТаблицыДокумента.Номенклатура.Поставщик);
								НоваяСтрока.Сумма 						= НоваяСтрока.Цена * НоваяСтрока.Количество;
								НоваяСтрока.ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;								
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе //размеры комплектующих не подбираем
					
					Для Каждого Комплектующее Из СтрокаТаблицыДокумента.Номенклатура.Комплектующие Цикл
						
						Количество = СтрокаТаблицыДокумента.Количество * Комплектующее.Количество;
						
						СтруктураПоискаСобственныхСИЗ = Новый Структура;
						СтруктураПоискаСобственныхСИЗ.Вставить("Номенклатура",				Комплектующее.Номенклатура);
						СтруктураПоискаСобственныхСИЗ.Вставить("ХарактеристикаНоменклатуры",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
						СтруктураПоискаСобственныхСИЗ.Вставить("ДокументВыдачи",			СтрокаТаблицыДокумента.ДокументВыдачи);
						СтруктураПоискаСобственныхСИЗ.Вставить("МВЗ",						СтрокаТаблицыДокумента.МВЗ);
						
						НайденныеСтрокиОбротовПоСобственнымСИЗ = ТаблицаОбротовПоСобственнымСИЗ.НайтиСтроки(СтруктураПоискаСобственныхСИЗ);
						
						Если НайденныеСтрокиОбротовПоСобственнымСИЗ.Количество() = 0 Тогда
							НоваяСтрока = РезультрующаяТаблица.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыДокумента);
							НоваяСтрока.Номенклатура 	= Комплектующее.Номенклатура;
							НоваяСтрока.Количество 		= Количество;
							НоваяСтрока.Цена 			= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НоваяСтрока.Номенклатура,ТекущийОбъект.Организация,ТекущийОбъект.Дата,СтрокаТаблицыДокумента.Номенклатура.Поставщик);
							НоваяСтрока.Сумма 			= НоваяСтрока.Цена * НоваяСтрока.Количество;
						Иначе
							Если Количество > НайденныеСтрокиОбротовПоСобственнымСИЗ[0].КоличествоОборот Тогда
								НоваяСтрока = РезультрующаяТаблица.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыДокумента);
								НоваяСтрока.Номенклатура 	= Комплектующее.Номенклатура;
								НоваяСтрока.Количество 		= Количество - НайденныеСтрокиОбротовПоСобственнымСИЗ[0].КоличествоОборот;
								НоваяСтрока.Цена 			= ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НоваяСтрока.Номенклатура,ТекущийОбъект.Организация,ТекущийОбъект.Дата,СтрокаТаблицыДокумента.Номенклатура.Поставщик);
								НоваяСтрока.Сумма 			= НоваяСтрока.Цена * НоваяСтрока.Количество;								
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;	
					
				КонецЕсли;	
				
			Иначе //обычная номенклатура - ничего не делаем
				
				ЗаполнитьЗначенияСвойств(РезультрующаяТаблица.Добавить(),СтрокаТаблицыДокумента);
				
			КонецЕсли;	
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат РезультрующаяТаблица;
	
КонецФункции	

//---АсТБ_Alexey_56458_********************************************************************

//+++АСТБ_ALEXEY_69654_**************************************************************

Функция ПолучитьСкладОрганизации(Организация) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат Организация.СкладПоУмолчанию;
	Иначе
		Возврат Справочники.Склады.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции

//---АСТБ_ALEXEY_69654_**************************************************************

//+++АСТБ_ALEXEY_72838_**************************************************************

Процедура ДокументыВыдачиПриКопированииПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Источник.Товары.Очистить();
	Источник.ШтрихкодыНоменклатуры.Очистить();
	Источник.КодыМаркировки.Очистить();
	
КонецПроцедуры

//---АСТБ_ALEXEY_72838_**************************************************************

//+++АСТБ_ALEXEY_72252_**************************************************************
Процедура ВидыРемонтаСИЗПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Источник.Код) Тогда
		Источник.Код = ПолучитьКодНовогоВидаРемонтаСИЗ();
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Источник.Штрихкод) Тогда
		Источник.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатурыДляУчетаЧистки.ПолучитьШтрихкодПоКоду(Источник.Код,"2",111);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодНовогоВидаРемонтаСИЗ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВидыРемонтаСИЗ.Код) КАК Код
	|ИЗ
	|	Справочник.ВидыРемонтаСИЗ КАК ВидыРемонтаСИЗ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 1;
	Иначе
		Возврат Результат.Выгрузить()[0].Код + 1;
	КонецЕсли;	

КонецФункции	

Процедура ВидыРемонтаСИЗПриКопированииПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Источник.Штрихкод = "";
	
КонецПроцедуры

//---АСТБ_ALEXEY_72252_**************************************************************

//+++АСТБ_ALEXEY_79639_**************************************************************

Процедура ПоступлениеНоменклатурыПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Документы.ПоступлениеНоменклатуры.РаспределитьТабличнуюЧастьПоЗаказамПоставщику(Источник, НЕ ПолучитьФункциональнуюОпцию("НеВестиУчетОстатковНоменклатурыПоОрганизации"));
	
КонецПроцедуры

//АСТБ_ALEXEY_79639_**************************************************************
// {ЮМадатов (12.08.21): <#108824>
Функция ПолучитьМВЗСотрудника(Сотрудник, ДокументЗаявкаПроизвольнойВыдачи = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Подразделение КАК Подразделение,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Сотрудник КАК Сотрудник,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Организация КАК Организация,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Должность КАК Должность
	|ПОМЕСТИТЬ ВТ_ОсновноеМестоРаботы
	|ИЗ
	|	РегистрСведений.ОсновноеМестоРаботыСотрудника.СрезПоследних(&ПериодАнализа, Сотрудник = &Сотрудник) КАК ОсновноеМестоРаботыСотрудникаСрезПоследних
	|ГДЕ
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.ОсновноеМестоРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МВЗСотрудников.МВЗ КАК МВЗ,
	|	МВЗСотрудников.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ МВЗ_Сотрудника
	|ИЗ
	|	РегистрСведений.МВЗСотрудников КАК МВЗСотрудников
	|ГДЕ
	|	МВЗСотрудников.Сотрудник = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МВЗПодразделенийСрезПоследних.Подразделение КАК Подразделение,
	|	МВЗПодразделенийСрезПоследних.МВЗ КАК МВЗ
	|ПОМЕСТИТЬ ВТ_МВЗПодразделений
	|ИЗ
	|	РегистрСведений.МВЗПодразделений.СрезПоследних(&ПериодАнализа, ) КАК МВЗПодразделенийСрезПоследних
	|ГДЕ
	|	МВЗПодразделенийСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МВЗДолжностейСрезПоследних.Организация КАК Организация,
	|	МВЗДолжностейСрезПоследних.Должность КАК Должность,
	|	МВЗДолжностейСрезПоследних.МВЗ КАК МВЗ
	|ПОМЕСТИТЬ ВТ_МВЗДолжностей
	|ИЗ
	|	РегистрСведений.МВЗДолжностей.СрезПоследних(&ПериодАнализа, ) КАК МВЗДолжностейСрезПоследних
	|ГДЕ
	|	МВЗДолжностейСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОсновноеМестоРаботы.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА МВЗ_Сотрудника.МВЗ ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_МВЗПодразделений.МВЗ ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_МВЗДолжностей.МВЗ ЕСТЬ NULL
	|									ТОГДА ЗНАЧЕНИЕ(Справочник.МВЗ.ПустаяСсылка)
	|								ИНАЧЕ ВТ_МВЗДолжностей.МВЗ
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_МВЗПодразделений.МВЗ
	|				КОНЕЦ
	|		ИНАЧЕ МВЗ_Сотрудника.МВЗ
	|	КОНЕЦ КАК МВЗ
	|ИЗ
	|	ВТ_ОсновноеМестоРаботы КАК ВТ_ОсновноеМестоРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ МВЗ_Сотрудника КАК МВЗ_Сотрудника
	|		ПО ВТ_ОсновноеМестоРаботы.Сотрудник = МВЗ_Сотрудника.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МВЗПодразделений КАК ВТ_МВЗПодразделений
	|		ПО ВТ_ОсновноеМестоРаботы.Подразделение = ВТ_МВЗПодразделений.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МВЗДолжностей КАК ВТ_МВЗДолжностей
	|		ПО ВТ_ОсновноеМестоРаботы.Организация = ВТ_МВЗДолжностей.Организация
	|			И ВТ_ОсновноеМестоРаботы.Должность = ВТ_МВЗДолжностей.Должность";
	Запрос.УстановитьПараметр("ПериодАнализа", ?(ДокументЗаявкаПроизвольнойВыдачи = Неопределено, Новый Граница(ТекущаяДата(), ВидГраницы.Включая), ПолучитьГраницуАнализаПоДокументу(ДокументЗаявкаПроизвольнойВыдачи)));
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.МВЗ.ПустаяСсылка();
	Иначе
		Возврат Результат.Выгрузить()[0].МВЗ;
	КонецЕсли;
	
КонецФункции

//---АСТБ_ALEXEY_79639_**************************************************************

//+++АСТБ_ALEXEY_88432_**************************************************************

Процедура ПриПроведенииДокументовОбращенияЗаписиНаСкладОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.ВзаимодействиеОснование = &ВзаимодействиеОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АдресатыОповещенийОбОбращениях.Адресат КАК Адресат,
	|	ВложенныйЗапрос.АдресЭП КАК АдресЭП
	|ИЗ
	|	РегистрСведений.АдресатыОповещенийОбОбращениях КАК АдресатыОповещенийОбОбращениях
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|			ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК ФизЛицо
	|		ИЗ
	|			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ГДЕ
	|			ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			И НЕ ФизическиеЛицаКонтактнаяИнформация.АдресЭП = """") КАК ВложенныйЗапрос
	|		ПО АдресатыОповещенийОбОбращениях.Адресат = ВложенныйЗапрос.ФизЛицо
	|ГДЕ
	|	АдресатыОповещенийОбОбращениях.Организация = &Организация
	|	И (АдресатыОповещенийОбОбращениях.Склад = &Склад
	|			ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|	И НЕ ВложенныйЗапрос.АдресЭП ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ВзаимодействиеОснование",Источник.Ссылка);
	Запрос.УстановитьПараметр("Организация",			Источник.Сотрудник.Владелец);
	Запрос.УстановитьПараметр("Склад",					Источник.Склад);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИсходящиеПисьма 	= Результат[0].Выгрузить();
	ТаблицаАдресатов	= Результат[1].Выгрузить();
	
	Если НЕ ИсходящиеПисьма.Количество() = 0 Тогда //письмо уже сформировано
		Возврат;
	КонецЕсли;
	
	Если ТаблицаАдресатов.Количество() = 0 Тогда //некому отправлять письмо
		Возврат;
	КонецЕсли;
	
	//формируем текст письма
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ЗаписьНаСклад") Тогда
		ТекстПисьма = "Создана запись на склад: " + Источник.Склад.Наименование + " от сотрудника: " + Источник.Сотрудник.Наименование + " на " + Формат(Источник.День,"ДЛФ=DD") + " в " + Формат(Источник.Время,"ДФ=hh:mm");
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ОбращениеНаСклад") Тогда
		ТекстПисьма = "Создано обращение №" + Источник.Номер + " на тему: " + Источник.КатегорияОбращения.Наименование + " от сотрудника: " + Источник.Сотрудник.Наименование + " с текстом: " + Источник.СодержаниеОбращения;
	Иначе
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	Если НЕ Константы.ИспользоватьПочтовыйКлиент.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	НовоеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	НовоеПисьмо.Заполнить(Неопределено);
	
	НовоеПисьмо.Дата 					= ТекущаяДата();
	НовоеПисьмо.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
	НовоеПисьмо.Тема 					= "Оповещение об обращении";
	НовоеПисьмо.Текст 					= ТекстПисьма;
	НовоеПисьмо.ТипТекста 				= Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
	
	Если НЕ ЗначениеЗаполнено(НовоеПисьмо.УчетнаяЗапись) Тогда
		НовоеПисьмо.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	КонецЕсли;
	
	НовоеПисьмо.ОтправительПредставление = НовоеПисьмо.УчетнаяЗапись.АдресЭлектроннойПочты;
	
	Для Каждого СтрокаТаблицыАдресатов Из ТаблицаАдресатов Цикл
		
		Получатель 					= НовоеПисьмо.ПолучателиПисьма.Добавить();
		Получатель.Представление 	= СтрокаТаблицыАдресатов.АдресЭП;
		Получатель.Адрес 			= СтрокаТаблицыАдресатов.АдресЭП;
		Получатель.Контакт			= СтрокаТаблицыАдресатов.Адресат;
		
		НовоеПисьмо.СписокПолучателейПисьма = НовоеПисьмо.СписокПолучателейПисьма + 
		СтрокаТаблицыАдресатов.Адресат.Наименование + 
		" <" + СтрокаТаблицыАдресатов.АдресЭП + ">" + "; ";
		
	КонецЦикла;
	
	Попытка
		ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(НовоеПисьмо);
	Исключение
		ЗаписьЖурналаРегистрации("Оповещение об обращении по e-mail.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	КонецПопытки;
	
	НовоеПисьмо.ИдентификаторСообщения 	= ИдентификаторПисьма;
	НовоеПисьмо.СтатусПисьма    		= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
	НовоеПисьмо.ДатаОтправления 		= ТекущаяДатаСеанса();
	НовоеПисьмо.ВзаимодействиеОснование = Источник.Ссылка;
	НовоеПисьмо.УстановитьНовыйНомер();
	
	Попытка 
		НовоеПисьмо.Записать(РежимЗаписиДокумента.Запись);
		ЗаписьЖурналаРегистрации("Оповещение об обращении по e-mail.",УровеньЖурналаРегистрации.Информация,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,"Документ сформирован.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	Исключение
		ЗаписьЖурналаРегистрации("Оповещение об обращении по e-mail.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ЭлектронноеПисьмоИсходящее,НовоеПисьмо,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	КонецПопытки;
	
	ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(НовоеПисьмо.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(НовоеПисьмо.Ссылка));
			
	УстановитьПривилегированныйРежим(ЛОЖЬ);	
	
КонецПроцедуры

//---АСТБ_ALEXEY_88432_**************************************************************
