                                            
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Функция начинает подключение устройства.
//
Процедура НачатьПодключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ДополнительныеПараметры) Экспорт
	
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	ВыходныеПараметры = Новый Массив();
	
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОповещениеПриУстановкеПараметров = Новый ОписаниеОповещения("НачатьПодключениеУстройства_УстановкаПараметровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьУстановкуПараметров(ОповещениеПриУстановкеПараметров, ДополнительныеПараметры);
	
КонецПроцедуры

// Функция начинает подключение устройства - завершение установки параметров.
//
Процедура НачатьПодключениеУстройства_УстановкаПараметровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = МенеджерОборудованияКлиентПовтИсп.РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";

	ОповещениеПолучитьОписаниеЗавершение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ПолучитьОписаниеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Попытка
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОписание(ОповещениеПолучитьОписаниеЗавершение, НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования,
								РевизияИнтерфейса, ИнтеграционныйКомпонент, ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);
	Исключение
		ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьОписание>.'"));
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Функция начинает подключение устройства - завершение получения описание.
//
Процедура НачатьПодключениеУстройства_ПолучитьОписаниеЗавершение(РезультатВыполнения, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыВызова.Количество() > 3 Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		РевизияИнтерфейса = ОписаниеТипа.ПривестиЗначение(ПараметрыВызова[3]);
		ДополнительныеПараметры.ПараметрыПодключения.Вставить("РевизияИнтерфейса", РевизияИнтерфейса);
	КонецЕсли;
	
	ОповещениеПодключитьЗавершение = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ПодключитьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Попытка
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПодключить(ОповещениеПодключитьЗавершение, ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства) 
	Исключение
		ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Подключить>.'"));
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Функция начинает подключение устройства - завершение подключения.
//
Процедура НачатьПодключениеУстройства_ПодключитьЗавершение(РезультатВыполнения, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
			
	Если НЕ РезультатВыполнения Тогда
		
		ОповещениеПодключитьЗавершение = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Попытка
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПодключитьЗавершение, ПараметрыВызова[0]) 
		Исключение
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьОшибку>.'"));
			Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецПопытки;
		
	Иначе
		ИДУстройства = ПараметрыВызова[0];
		ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства = ИДУстройства;
		ПараметрыПодключения = ДополнительныеПараметры.ПараметрыПодключения;
		
		//АсТБ_Alexey_********************************************************************
		
		Если ПараметрыПодключения.ТипОборудования = "СканерШтрихкода" Тогда
			ВыходныеПараметры.Добавить(Строка(ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("Штрихкод");
			ВыходныеПараметры[1].Добавить("Barcode");
		ИначеЕсли ПараметрыПодключения.ТипОборудования = "СчитывательМагнитныхКарт" Тогда
			ВыходныеПараметры.Добавить(Строка(ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("ДанныеКарты");
			ВыходныеПараметры[1].Добавить("TracksData");
		КонецЕсли;  
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция начинает подключение устройства - завершение получение ширины строки.
//
Процедура НачатьПодключениеУстройства_ПолучениеШириныСтрокиЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ВремШиринаСтроки = РезультатВыполнения.ВыходныеПараметры[0];
		ШиринаСтроки = ?(ВремШиринаСтроки <> Неопределено И ВремШиринаСтроки > 0, ВремШиринаСтроки, 32);
	КонецЕсли;
	ДополнительныеПараметры.ПараметрыПодключения.Вставить("ШиринаСтроки", ШиринаСтроки);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения.Результат, ДополнительныеПараметры.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Функция начинает отключение устройства.
//
Процедура НачатьОтключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ПараметрыКоманды.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ПараметрыКоманды.Вставить("Параметры"              , Параметры);
	ПараметрыКоманды.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ПараметрыКоманды.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьОтключениеУстройства_Завершение", ЭтотОбъект, ПараметрыКоманды);
	
	Попытка
		ОбъектДрайвера.НачатьВызовОтключить(ОповещениеМетода, ПараметрыПодключения.ИДУстройства);
	Исключение
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Отключить>.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Функция начинает отключение устройства - завершение.
//
Процедура НачатьОтключениеУстройства_Завершение(РезультатВыполнения, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	ВыходныеПараметры.Добавить(0);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры = Неопределено, ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		НачатьТестУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "ВыполнитьДополнительноеДействие" ИЛИ Команда = "DoAdditionalAction" Тогда
		ИмяДействия = ВходныеПараметры[0];
		НачатьВыполнитьДополнительноеДействие(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры);
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		НачатьПолучениеВерсииДрайвера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера.
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		НачатьПолучениеОписаниеДрайвера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С УСТРОЙСТВАМИ ВВОДА ДАННЫХ
	
	// Обработка события от устройства.
	ИначеЕсли Команда = "ОбработатьСобытие" Тогда
		Событие = ВходныеПараметры[0];
		Данные  = ВходныеПараметры[1];
		Результат = ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры);
		
	//АсТБ_Alexey_********************************************************************
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ТЕРМИНАЛАМИ СБОРА ДАННЫМИ
	
	// Выгрузка таблицы в терминал сбора данных.
	ИначеЕсли Команда =  "UploadDirectory" ИЛИ Команда = "ВыгрузитьТаблицу" Тогда
		ТаблицаВыгрузки = ВходныеПараметры[1];
		ПолнаяВыгрузка = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], Истина);
		НачатьВыгрузкуТаблицы(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ПолнаяВыгрузка, ВыходныеПараметры);
		
	// Загрузка таблицы из терминала сбора данных.
	ИначеЕсли Команда = "DownloadDocument" ИЛИ Команда = "ЗагрузитьТаблицу" Тогда
		НачатьЗагрузкуТаблицы(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
		
	// Очищает загруженную ранее таблицу в терминале сбора данных.
	ИначеЕсли Команда = "ClearTable" ИЛИ Команда = "ОчиститьТаблицу" Тогда
		НачатьОчисткуТаблицу(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ПРИНТЕРАМИ ЭТИКЕТОК
	
	// Функция осуществляет печать этикеток на принтере этикеток.
	ИначеЕсли Команда = "PrintLabels" ИЛИ Команда = "ПечатьЭтикеток" Тогда
		ШаблонЭтикетки = ВходныеПараметры[0];
		МассивЭтикеток = ВходныеПараметры[1];
		НачатьПечатьЭтикеток(ОповещениеПриЗавершении,ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЭтикетки, МассивЭтикеток, ВыходныеПараметры);
	
	// Функция осуществляет инициализация принтера этикеток
	ИначеЕсли Команда = "InitializePrinter" ИЛИ Команда = "ИнициализацияПринтера" Тогда
		НачатьИнициализациюПринтера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли;

	//АсТБ_Alexey_********************************************************************
	
КонецПроцедуры

#КонецОбласти

#Область ТиповыеОбработчикиУведомлений 

// Процедура осуществляет завершение выполнения метода.    
//
Процедура ВыполнениеМетодаЗавершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		
		ОчисткаПараметров  = ?(ДополнительныеПараметры.Свойство("ОчисткаПараметров"), ДополнительныеПараметры.ОчисткаПараметров, Истина); 
		КоличествоПараметров = ?(ДополнительныеПараметры.Свойство("КоличествоПараметров"), ДополнительныеПараметры.КоличествоПараметров, 0); 
		
		Если ОчисткаПараметров Тогда
			ВыходныеПараметры.Очистить();
		КонецЕсли;
		
		Если КоличествоПараметров > 0 Тогда
			ВыходныеПараметры.Добавить(Параметры[1]);
		КонецЕсли;
		Если КоличествоПараметров > 1 Тогда
			ВыходныеПараметры.Добавить(Параметры[2]);
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет обработку получение ошибки.
//
Процедура ПолучениеОшибкиЗавершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(Параметры[0]);
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляУстройствВводаДанных

// Функция осуществляет обработку внешних событий подключаемого оборудования.
//
Функция ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	Если Событие = "Штрихкод" Или Событие = "Barcode" Тогда
		
		Штрихкод = СокрЛП(Данные);
		ВыходныеПараметры.Добавить("ScanData");
		ВыходныеПараметры.Добавить(Новый Массив());
		ВыходныеПараметры[1].Добавить(Штрихкод);
		ВыходныеПараметры[1].Добавить(Новый Массив());
		ВыходныеПараметры[1][1].Добавить(Данные);
		ВыходныеПараметры[1][1].Добавить(Штрихкод);
		ВыходныеПараметры[1][1].Добавить(0);
		Результат = Истина;
		
	ИначеЕсли Событие = "ДанныеКарты" Или Событие = "TracksData" Тогда
		
		КодКарты  = Данные;
		ПозицияПрефикса = 0;
		ПозицияСуффикса = 0;
		времКодКарты    = "";
		ДанныеКарты     = "";
		ПозицияДляЧтения = 1;
		
		ДанныеДорожек = Новый Массив();
		Если Параметры.Свойство("ПараметрыДорожек") И Параметры.ПараметрыДорожек <> Неопределено Тогда
			Для НомерДорожки = 1 По 3 Цикл
				ДанныеДорожек.Добавить("");
				ТекущаяДорожка = Параметры.ПараметрыДорожек[НомерДорожки - 1];
				Если ТекущаяДорожка.Использовать Тогда
					ПрефиксДрайвера = Символ(ТекущаяДорожка.Префикс);
					СуффиксДрайвера = Символ(ТекущаяДорожка.Суффикс);
					Если ПозицияДляЧтения < СтрДлина(КодКарты) Тогда
						ДанныеКарты = Сред(КодКарты, ПозицияДляЧтения);
						ПозицияПрефикса = Найти(ДанныеКарты, ПрефиксДрайвера);
						ПозицияСуффикса = Найти(ДанныеКарты, СуффиксДрайвера);
						времПозицияПрефикса = ?(ПозицияПрефикса = 0, 1, ПозицияПрефикса + СтрДлина(ПрефиксДрайвера));
						времДлинаДоСуффикса = ?(ПозицияСуффикса = 0, СтрДлина(ДанныеКарты) + 1 - времПозицияПрефикса, ПозицияСуффикса - времПозицияПрефикса);
						времКодКарты = времКодКарты + Сред(ДанныеКарты, времПозицияПрефикса, времДлинаДоСуффикса);
						ДанныеДорожек[НомерДорожки - 1] = Сред(ДанныеКарты, времПозицияПрефикса, времДлинаДоСуффикса);
						ПозицияДляЧтения = ПозицияДляЧтения + ?(ПозицияСуффикса = 0, СтрДлина(ДанныеКарты), ПозицияСуффикса + СтрДлина(СуффиксДрайвера) - 1);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КодКарты = времКодКарты;
		
		ВыходныеПараметры.Добавить("TracksData");
		ВыходныеПараметры.Добавить(Новый Массив());
		ВыходныеПараметры[1].Добавить(КодКарты);
		ВыходныеПараметры[1].Добавить(Новый Массив);
		ВыходныеПараметры[1][1].Добавить(Сред(Данные,2));
		ВыходныеПараметры[1][1].Добавить(ДанныеДорожек);
		ВыходныеПараметры[1][1].Добавить(0);
		Если Параметры.Свойство("ПараметрыДорожек") И Параметры.ПараметрыДорожек <> Неопределено Тогда
			ВыходныеПараметры[1][1].Добавить(МенеджерОборудованияВызовСервера.РасшифроватьКодМагнитнойКарты(ДанныеДорожек, Параметры.ПараметрыДорожек));
		Иначе
			ВыходныеПараметры[1][1].Добавить(Неопределено);
		КонецЕсли;
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Процедура вызывается, когда система готова принять следующее событие от устройства.
//
Функция ЗавершитьОбработкуСобытия(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//АсТБ_Alexey_********************************************************************

#Область ПроцедурыИФункцииОбщиеДляТерминаловСбораДанных

// Осуществляет выгрузку данных в терминал сбора данных.
//
Процедура НачатьВыгрузкуТаблицы(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ПолнаяВыгрузка, ВыходныеПараметры)
	
	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Подготовка данных...'"));
	
	РазмерПакета     = РазмерПакетаПоУмолчанию();
	ПакетыДляВыгрузки = МенеджерОборудованияВызовСервера.ПодготовитьПакетыДляЗагрузкиТСД(ТаблицаВыгрузки, РазмерПакета, ПолнаяВыгрузка);
	
	Попытка
		ТекущийПакет = 1;
		КоличествоПакетов = ПакетыДляВыгрузки.Количество();
		ДанныеДляВыгрузки = ПакетыДляВыгрузки[ТекущийПакет - 1];
		СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
		ПроцентИнкремент = 100 / (ТаблицаВыгрузки.Количество() / РазмерПакета);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ПакетыДляВыгрузки"      , ПакетыДляВыгрузки);
		ДополнительныеПараметры.Вставить("КоличествоПакетов"      , КоличествоПакетов);
		ДополнительныеПараметры.Вставить("ТекущийПакет"           , ТекущийПакет);
		ДополнительныеПараметры.Вставить("ПроцентИнкремент"       , ПроцентИнкремент);
		
		Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПакет * ПроцентИнкремент));
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьВыгрузкуТаблицы_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовВыгрузитьТаблицу(ОповещениеПриЗавершении, ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
	Исключение
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВыгрузитьТаблицу>.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Осуществляет выгрузку данных в терминал сбора данных - завершение.
//
Процедура НачатьВыгрузкуТаблицы_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		
		Если ДополнительныеПараметры.ТекущийПакет < ДополнительныеПараметры.КоличествоПакетов Тогда
			
			ДополнительныеПараметры.ТекущийПакет = ДополнительныеПараметры.ТекущийПакет + 1;
			ДанныеДляВыгрузки = ДополнительныеПараметры.ПакетыДляВыгрузки[ДополнительныеПараметры.ТекущийПакет - 1];
			СтатусПакета = ?(ДополнительныеПараметры.ТекущийПакет < ДополнительныеПараметры.КоличествоПакетов , "regular", "last");
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьВыгрузкуТаблицы_Завершение", ЭтотОбъект, ДополнительныеПараметры);
			
			Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ДополнительныеПараметры.ТекущийПакет * ДополнительныеПараметры.ПроцентИнкремент));
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовВыгрузитьТаблицу(ОповещениеПриЗавершении, 
				ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			
		Иначе
			ВыходныеПараметры.Очистить();
			Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецЕсли
		
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет загрузку таблицы из терминала сбора данных.
//
Процедура НачатьЗагрузкуТаблицы(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Попытка
		ДанныеЗагрузки = "";
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьЗагрузкуТаблицы_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовЗагрузитьТаблицу(ОповещениеПриЗавершении, ПараметрыПодключения.ИДУстройства, ДанныеЗагрузки);
	Исключение
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗагрузитьТаблицу>.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Осуществляет загрузку таблицы из терминала сбора данных - завершение.
//
Процедура НачатьЗагрузкуТаблицы_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	АлкогольнаяПродукция = Ложь;
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		ВыходныеПараметры.Очистить();
		ДанныеЗагрузки = Параметры[1];
		
		Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
			МассивДанных = МенеджерОборудованияВызовСервера.ТоварыТСД(ДанныеЗагрузки, АлкогольнаяПродукция);
		КонецЕсли;
	
		Если ПустаяСтрока(ДанныеЗагрузки) Или (МассивДанных.Количество() = 0) Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для загрузки.'"));
		Иначе
			ВыходныеПараметры.Добавить(МассивДанных);
			ВыходныеПараметры.Добавить(АлкогольнаяПродукция);
		КонецЕсли;   
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Очищает загруженную ранее таблицу товаров в ТСД.
//
Процедура НачатьОчисткуТаблицу(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Попытка
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовОчиститьТаблицу(ОповещениеПриЗавершении, ПараметрыПодключения.ИДУстройства);
	Исключение
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОчиститьТаблицу>.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляПринтеровЭтикеток

// Осуществляет инициализация принтера этикеток.
//
Процедура НачатьИнициализациюПринтера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Попытка
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("ВыполнениеМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовИнициализацияПринтера(Оповещение, ПараметрыПодключения.ИДУстройства);
	Исключение
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ИнициализацияПринтера>.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Осуществляет печать этикеток на принтере этикеток.
//
Процедура НачатьПечатьЭтикеток(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЭтикетки, МассивЭтикеток, ВыходныеПараметры)
	
	Если МассивЭтикеток.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для печати.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Подготовка данных...'"));
	
	РазмерПакета     = РазмерПакетаПоУмолчанию();
	ПакетыДляВыгрузки = МенеджерОборудованияВызовСервера.ПодготовитьПакетыДляПринтераЭтикеток(МассивЭтикеток, РазмерПакета, ШаблонЭтикетки);
	
	Попытка
		ТекущийПакет = 1;
		КоличествоПакетов = ПакетыДляВыгрузки.Количество();
		ДанныеДляВыгрузки = ПакетыДляВыгрузки[ТекущийПакет - 1];
		СтатусПакета = ?(КоличествоПакетов > 1 , "first", "last");
		ПроцентИнкремент = 100 / (МассивЭтикеток.Количество() / РазмерПакета);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
		ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
		ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ПакетыДляВыгрузки"      , ПакетыДляВыгрузки);
		ДополнительныеПараметры.Вставить("КоличествоПакетов"      , КоличествоПакетов);
		ДополнительныеПараметры.Вставить("ТекущийПакет"           , ТекущийПакет);
		ДополнительныеПараметры.Вставить("ПроцентИнкремент"       , ПроцентИнкремент);
		
		Состояние(НСтр("ru='Печать этикеток...'"), Окр(ТекущийПакет * ПроцентИнкремент));
		Оповещение = Новый ОписаниеОповещения("НачатьПечатьЭтикеток_Завершение", ЭтотОбъект, ДополнительныеПараметры);
		ОбъектДрайвера.НачатьВызовПечатьЭтикеток(Оповещение, ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
	Исключение
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПечатьЭтикеток>.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Осуществляет печать этикеток на принтере этикеток - завершение.
//
Процедура НачатьПечатьЭтикеток_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		
		Если ДополнительныеПараметры.ТекущийПакет < ДополнительныеПараметры.КоличествоПакетов Тогда
			
			ДополнительныеПараметры.ТекущийПакет = ДополнительныеПараметры.ТекущийПакет + 1;
			ДанныеДляВыгрузки = ДополнительныеПараметры.ПакетыДляВыгрузки[ДополнительныеПараметры.ТекущийПакет - 1];
			СтатусПакета = ?(ДополнительныеПараметры.ТекущийПакет < ДополнительныеПараметры.КоличествоПакетов , "regular", "last");
			Оповещение = Новый ОписаниеОповещения("НачатьПечатьЭтикеток_Завершение", ЭтотОбъект, ДополнительныеПараметры);
			Состояние(НСтр("ru='Печать этикеток...'"), Окр(ДополнительныеПараметры.ТекущийПакет * ДополнительныеПараметры.ПроцентИнкремент));
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПечатьЭтикеток(Оповещение, ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			
		Иначе
			ВыходныеПараметры.Очистить();
			Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецЕсли
		
	Иначе
		ОписаниеОшибки = "";
		ОповещениеПриОшибке = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриОшибке, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//АсТБ_Alexey_********************************************************************

#Область ПроцедурыИФункцииОбщиеДляВсехТиповДрайверов

// Процедура возвращает версию установленного драйвера.
//
Процедура НачатьПолучениеВерсииДрайвера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ПараметрыКоманды.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ПараметрыКоманды.Вставить("Параметры"              , Параметры);
	ПараметрыКоманды.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ПараметрыКоманды.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеВерсииДрайвера_Завершение", ЭтотОбъект, ПараметрыКоманды);
	
	Попытка
		ОбъектДрайвера.НачатьВызовПолучитьНомерВерсии(ОповещениеМетода);
	Исключение
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьНомерВерсии>.'"));
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура возвращает версию установленного драйвера - Завершение.
//
Процедура НачатьПолучениеВерсииДрайвера_Завершение(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ВыходныеПараметры[1] = РезультатВызова;
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ДополнительныеПараметры.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает параметры драйвера.
//
Процедура НачатьУстановкуПараметров(ОповещениеПриУстановкеПараметров, ДополнительныеПараметры) Экспорт
	
	ВремПараметры = Новый Структура();
	Если ДополнительныеПараметры.ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудования = ДополнительныеПараметры.ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		ВремПараметры.Вставить("P_EquipmentType", ТипОборудования) 
	КонецЕсли;
	
	Для Каждого Параметр Из ДополнительныеПараметры.Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ВремПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("ПараметрыДляУстановки", ВремПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриУстановкеПараметров", ОповещениеПриУстановкеПараметров);
	НачатьУстановкуПараметров_Завершение(Истина, Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура завершения установки параметров драйвера.
//
Процедура НачатьУстановкуПараметров_Завершение(РезультатВыполнения, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(ДополнительныеПараметры.ПараметрыДляУстановки) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПараметрыДляУстановки.Количество() > 0  Тогда
		Для Каждого Параметр Из ДополнительныеПараметры.ПараметрыДляУстановки Цикл
			ИмяТекПараметра = Параметр.Ключ;
			ЗначениеПараметра = Параметр.Значение;
			ДополнительныеПараметры.ПараметрыДляУстановки.Удалить(ИмяТекПараметра);
			ОповещениеМетода = Новый ОписаниеОповещения("НачатьУстановкуПараметров_Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовУстановитьПараметр(ОповещениеМетода, Сред(ИмяТекПараметра, 3), ЗначениеПараметра);
			Прервать;
		КонецЦикла;
	Иначе
		Если ДополнительныеПараметры.ОповещениеПриУстановкеПараметров <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриУстановкеПараметров, ДополнительныеПараметры);
		КонецЕсли;   
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет тестирование устройства.
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОповещениеПриУстановкеПараметров = Новый ОписаниеОповещения("НачатьТестУстройства_УстановкаПараметровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьУстановкуПараметров(ОповещениеПриУстановкеПараметров, ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура осуществляет тестирование устройства - Установка параметров.
//
Процедура НачатьТестУстройства_УстановкаПараметровЗавершение(Результат, Параметры) Экспорт
	
	РезультатТеста       = "";
	АктивированДемоРежим = "";  
	
	Попытка
		Оповещение = Новый ОписаниеОповещения("НачатьТестУстройства_Завершение", ЭтотОбъект, Параметры);
		Параметры.ОбъектДрайвера.НачатьВызовТестУстройства(Оповещение, РезультатТеста, АктивированДемоРежим);
	Исключение
		ВыходныеПараметры = Параметры.ВыходныеПараметры;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ТестУстройства>.'"));
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Процедура осуществляет тестирование устройства - Завершение.
//
Процедура НачатьТестУстройства_Завершение(РезультатВыполнения, Параметры, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если РезультатВыполнения Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(0);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
	КонецЕсли;
	ВыходныеПараметры.Добавить(Параметры[0]);
	ВыходныеПараметры.Добавить(Параметры[1]);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет выполнение дополнительного действия для устройства.
//
Процедура НачатьВыполнитьДополнительноеДействие(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры);
	
	ПараметрыПодключения.Вставить("ИДУстройства", Неопределено);
	ВыходныеПараметры = Новый Массив();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ИмяДействия"            , ИмяДействия);
	
	ОповещениеПриУстановкеПараметров = Новый ОписаниеОповещения("НачатьВыполнитьДополнительноеДействие_УстановкаПараметровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьУстановкуПараметров(ОповещениеПриУстановкеПараметров, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьВыполнитьДополнительноеДействие_УстановкаПараметровЗавершение(Результат, Параметры) Экспорт
	
	ОповещениеЗавершение = Новый ОписаниеОповещения("НачатьВыполнитьДополнительноеДействие_Завершение", ЭтотОбъект, Параметры);
	Попытка
		Параметры.ОбъектДрайвера.НачатьВызовВыполнитьДополнительноеДействие(ОповещениеЗавершение, Параметры.ИмяДействия) 
	Исключение
		ВыходныеПараметры = Параметры.ВыходныеПараметры;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВыполнитьДополнительноеДействие>.'"));
		Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьВыполнитьДополнительноеДействие_Завершение(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ДополнительныеПараметры.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучениеОшибкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Попытка
			ТекстОшибки = "";
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОшибку(ОповещениеПриЗавершении, ТекстОшибки)
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка дополнительного действия драйвера.'"));
		КонецПопытки;
	КонецЕсли
	
КонецПроцедуры

// Процедура возвращает описание установленного драйвера.
//
Процедура НачатьПолучениеОписаниеДрайвера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);

	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ПараметрыКоманды.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ПараметрыКоманды.Вставить("Параметры"              , Параметры);
	ПараметрыКоманды.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ПараметрыКоманды.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеОписаниеДрайвера_ПолучитьНомерВерсииЗавершение", ЭтотОбъект, ПараметрыКоманды);
	Попытка
		ОбъектДрайвера.НачатьВызовПолучитьНомерВерсии(ОповещениеМетода);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера.'"));
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПолучениеОписаниеДрайвера_ПолучитьНомерВерсииЗавершение(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ВыходныеПараметры[1] = РезультатВызова;
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Истина;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = МенеджерОборудованияКлиентПовтИсп.РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеОписаниеДрайвера_ПолучитьОписаниеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Попытка
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьОписание(ОповещениеМетода, НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования, РевизияИнтерфейса, 
									ИнтеграционныйКомпонент, ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера.'"));
	КонецПопытки;

КонецПроцедуры

Процедура НачатьПолучениеОписаниеДрайвера_ПолучитьОписаниеЗавершение(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ВыходныеПараметры[2] = ПараметрыВызова[0]; // НаименованиеДрайвера
	ВыходныеПараметры[3] = ПараметрыВызова[1]; // ОписаниеДрайвера
	ВыходныеПараметры[4] = ПараметрыВызова[2]; // ТипОборудования
	ВыходныеПараметры[5] = ПараметрыВызова[3]; // РевизияИнтерфейса
	ВыходныеПараметры[6] = ПараметрыВызова[4]; // ИнтеграционныйКомпонент
	ВыходныеПараметры[7] = ПараметрыВызова[5]; // ОсновнойДрайверУстановлен
	ВыходныеПараметры[8] = ПараметрыВызова[6]; // URLЗагрузкиДрайвера
	
	ПараметрыДрайвера = "";
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеОписаниеДрайвера_ПолучитьПараметрыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Попытка
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьПараметры(ОповещениеМетода, ПараметрыДрайвера);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера.'"));
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПолучениеОписаниеДрайвера_ПолучитьПараметрыЗавершение(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ВыходныеПараметры[9] = ПараметрыВызова[0];
	
	ДополнительныеДействия = "";
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеОписаниеДрайвера_ПолучитьДополнительныеДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Попытка                                    
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьДополнительныеДействия(ОповещениеМетода, ДополнительныеДействия);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера.'"));
	КонецПопытки;
	
КонецПроцедуры

Процедура НачатьПолучениеОписаниеДрайвера_ПолучитьДополнительныеДействияЗавершение(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ВыходныеПараметры[10] = ПараметрыВызова[0];
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ДополнительныеПараметры.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Размер пакета в элементах передаваемой информации в драйвер.
//
Функция РазмерПакетаПоУмолчанию()
	
	РазмерПакета = 200;
	Возврат РазмерПакета;
	
КонецФункции

#КонецОбласти     