////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "АсТБ";
  	Описание.Версия = "2.0.0.118";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.23";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_23";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.28";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_28";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.37";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_37";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.44";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_44";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.47";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_47";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.56";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_56";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.62";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_62";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.64";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_64";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.67";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_67";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.68";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_68";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.71";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_71";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.73";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_73";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.84";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_84";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.89";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_89";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.92";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_92";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.95";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_95";
	
	//+++АСТБ_Горюшин_Алексей_33597
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.99";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_99";
	//---АСТБ_Горюшин_Алексей_33597
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.101";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_101";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.103";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_103";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.106";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_106";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.111";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_111";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.112";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_112";
	
	//+++АСТБ_ALEXEY_110186_**************************************************************
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.114";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_114";
	//---АСТБ_ALEXEY_110186_**************************************************************   
	
	//Танцюра А.Н. -- №119948 Новые предопределенные виды антропометрии -- 03.09.2021 <<<
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.115";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_115";
	//Танцюра А.Н. -- №119948 Новые предопределенные виды антропометрии -- 03.09.2021 >>>
	
	//Трегубов А.А. -- №142456 Для сброса сохраненных параметров подключения к ФТП --  11.11.2021 <<<
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.117";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыАсТБ.ПерейтиНаВерсию_2_0_0_117";
	//Трегубов А.А. -- №142456 Для сброса сохраненных параметров подключения к ФТП --  11.11.2021 >>>
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПередОбновлениемИнформационнойБазы".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	//ЗаполнитьИдентификаторыПрофилейДоступа();
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	// Вызываем процедуры-обработчики служебного события "ПослеОбновленияИнформационнойБазы".
	// (Для быстрого перехода к процедурам-обработчикам выполнить глобальный поиск по имени события.)
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_1() Экспорт
	
	УправлениеСвойствами.ОбновитьНаименованияНаборовИСвойств();
	
	ОбновитьПредопределенныеВидыКонтактнойИнформацииПодразделений();
	ОбновитьПредопределенныеВидыКонтактнойИнформацииФизическихЛиц();
	ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов();
	//Рохин задача(76476)
	ОбновитьПредопределенныеВидыКонтактнойИнформацииСкладов();
	//Рохин задача(76476)
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_4() Экспорт
	
	ПользователиСлужебный.ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_6() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаСредствЗащитыСотруднику.Ссылка
	|ИЗ
	|	Документ.ВыдачаСредствЗащитыСотруднику КАК ВыдачаСредствЗащитыСотруднику
	|ГДЕ
	|	ВыдачаСредствЗащитыСотруднику.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыдачиСИЗ.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВыдачиСИЗ.ФактическаяВыдача;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_23() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаСредствЗащитыСотруднику.Ссылка
	|ИЗ
	|	Документ.ВыдачаСредствЗащитыСотруднику КАК ВыдачаСредствЗащитыСотруднику
	|ГДЕ
	|	ВыдачаСредствЗащитыСотруднику.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыдачиСИЗ.ПредварительнаяЗаявка)
	|	И ВыдачаСредствЗащитыСотруднику.Проведен
	|	И НЕ ВыдачаСредствЗащитыСотруднику.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И НЕ ВыдачаСредствЗащитыСотруднику.СкладОтправитель = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_28() Экспорт
	
	//перенос признака использования штрихкода
	Выборка = Справочники.Номенклатура.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = Выборка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(Выборка.ВидСИЗ) Тогда
			Номенклатура.ИспользоватьШтрихкод = Выборка.ВидСИЗ.ИспользоватьШтрихкод;
		Иначе
			Номенклатура.ИспользоватьШтрихкод = Ложь;
		КонецЕсли;
		
		Номенклатура.Записать();
		
	КонецЦикла;
	
	//перенос данных по штрихкодам
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	ШтрихкодыВыданнойНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыВыданнойНоменклатуры.Сотрудник.Владелец КАК Организация,
	|	ШтрихкодыВыданнойНоменклатуры.Сотрудник КАК Сотрудник,
	|	ШтрихкодыВыданнойНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыВыданнойНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ШтрихкодыВыданнойНоменклатуры.ДатаВыдачи КАК ДатаВыдачи
	|ИЗ
	|	РегистрСведений.ШтрихкодыВыданнойНоменклатуры КАК ШтрихкодыВыданнойНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ДатаВыдачи,
	|	Штрихкод";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДатаПереносаДанных = ТекущаяДата();
	
	НовыйДокумент = Документы.КорректировкаРегистров.СоздатьДокумент();
	НовыйДокумент.Дата 					= ДатаПереносаДанных;
	НовыйДокумент.Комментарий 			= "Сформирован автоматически при переходе на релиз 2.0.0.27";
	НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.УстановитьНовыйНомер();
	
	НоваяСтрока 	= НовыйДокумент.ТаблицаРегистров.Добавить();
	НоваяСтрока.Имя = "ШтрихкодыНоменклатурыДляУчетаЧистки";
	
	НовыйДокумент.Движения.ШтрихкодыНоменклатурыДляУчетаЧистки.Загрузить(ТаблицаЗапроса);
	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	
	Выборка = Справочники.Организации.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МаксимальныйШтрихкод = РегистрыСведений.ШтрихкодыНоменклатурыДляУчетаЧистки.ПолучитьМаксимальноеЗначениеКодаШтрихкодаЧислом("2",Выборка.ПрефиксШтрихкодаНоменклатуры);
		
		ОрганизацияОбъект = Выборка.ПолучитьОбъект();
		ОрганизацияОбъект.МаксимальноеЗначениеШтрихкода = МаксимальныйШтрихкод;
		ОрганизацияОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_37() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка,
	|	Склады.МОЛ
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.МОЛ = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если НЕ СтрокаТаблицыЗапроса.Ссылка.МатериальноОтветственныеЛица.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		ОбъектСклад = СтрокаТаблицыЗапроса.Ссылка.ПолучитьОбъект();
		НоваяСтрока = ОбъектСклад.МатериальноОтветственныеЛица.Добавить();
		НоваяСтрока.МОЛ = СтрокаТаблицыЗапроса.МОЛ;
		НоваяСтрока.Примечание = "Заполнен автоматически";
		ОбъектСклад.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_44() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкладыВыдачиСредствЗащиты.Получатель КАК Получатель,
	|	СкладыВыдачиСредствЗащиты.Склад КАК Склад
	|ПОМЕСТИТЬ ВТ_СкладыВыдачи
	|ИЗ
	|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
	|ГДЕ
	|	СкладыВыдачиСредствЗащиты.Получатель ССЫЛКА Справочник.Сотрудники
	|	И СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	ВТ_СкладыВыдачи.Склад КАК Склад
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкладыВыдачи КАК ВТ_СкладыВыдачи
	|		ПО Сотрудники.Ссылка = ВТ_СкладыВыдачи.Получатель
	|ГДЕ
	|	Сотрудники.ОтветственноеЛицо = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_СкладыВыдачи.Склад ЕСТЬ NULL";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если СтрокаТаблицыЗапроса.Склад.МатериальноОтветственныеЛица.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		ОбъектСотрудник 					= СтрокаТаблицыЗапроса.Сотрудник.ПолучитьОбъект();
		ОбъектСотрудник.ОтветственноеЛицо 	= СтрокаТаблицыЗапроса.Склад.МатериальноОтветственныеЛица[0].МОЛ;
		ОбъектСотрудник.Записать();
		
	КонецЦикла;
	
	ЗаполнитьКоэффициентыПоставкиДляГруппИЛИПоУмолчанию();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_47() Экспорт
	
	ПроцедурыРаботыСНормамиСервер.ВыполнитьЗагрузкуУточненныхПричинСписания();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_48() Экспорт
	
	ОбновитьПредопределенныеВидыКонтактнойИнформации();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_56() Экспорт
	
	//сбрасываем мужской пол номенклатуры
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		НоменклатураОбъект = СтрокаТаблицыЗапроса.Номенклатура.ПолучитьОбъект();
		НоменклатураОбъект.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
		НоменклатураОбъект.Записать();
		
	КонецЦикла;	
	
	//нужно восстановить сброшенные по приказам нормы
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник,
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ ВТ_ЗРМ
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки КАК ЗанятыеРабочиеМестаОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеУсловияРаботыСотрудника.Сотрудник КАК Сотрудник,
	|	ДоступныеУсловияРаботыСотрудника.Подразделение КАК Подразделение,
	|	ДоступныеУсловияРаботыСотрудника.Должность КАК Должность,
	|	ДоступныеУсловияРаботыСотрудника.РабочееМесто КАК РабочееМесто,
	|	ДоступныеУсловияРаботыСотрудника.Условие КАК Условие,
	|	ДоступныеУсловияРаботыСотрудника.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_СбросУсловий
	|ИЗ
	|	РегистрСведений.ДоступныеУсловияРаботыСотрудника КАК ДоступныеУсловияРаботыСотрудника
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗРМ КАК ВТ_ЗРМ
	|		ПО ДоступныеУсловияРаботыСотрудника.Сотрудник = ВТ_ЗРМ.Сотрудник
	|			И ДоступныеУсловияРаботыСотрудника.Подразделение = ВТ_ЗРМ.Подразделение
	|			И ДоступныеУсловияРаботыСотрудника.Должность = ВТ_ЗРМ.Должность
	|			И ДоступныеУсловияРаботыСотрудника.РабочееМесто = ВТ_ЗРМ.РабочееМесто
	|ГДЕ
	|	ДоступныеУсловияРаботыСотрудника.Регистратор ССЫЛКА Документ.ПриказПоНормамВыдачиСИЗ
	|	И НЕ ДоступныеУсловияРаботыСотрудника.Использовать
	|	И НЕ ВТ_ЗРМ.Сотрудник ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Подразделение КАК Подразделение,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Должность КАК Должность,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Условие КАК Условие
	|ПОМЕСТИТЬ ВТ_ДействующиеУсловия
	|ИЗ
	|	РегистрСведений.ДоступныеУсловияРаботыСотрудника.СрезПоследних КАК ДоступныеУсловияРаботыСотрудникаСрезПоследних
	|ГДЕ
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	&Период КАК Период,
	|	ВТ_СбросУсловий.Сотрудник КАК Сотрудник,
	|	ВТ_СбросУсловий.Подразделение КАК Подразделение,
	|	ВТ_СбросУсловий.Должность КАК Должность,
	|	ВТ_СбросУсловий.РабочееМесто КАК РабочееМесто,
	|	ВТ_СбросУсловий.Условие КАК Условие,
	|	ИСТИНА КАК Использовать
	|ИЗ
	|	ВТ_СбросУсловий КАК ВТ_СбросУсловий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДействующиеУсловия КАК ВТ_ДействующиеУсловия
	|		ПО ВТ_СбросУсловий.Сотрудник = ВТ_ДействующиеУсловия.Сотрудник
	|			И ВТ_СбросУсловий.Условие = ВТ_ДействующиеУсловия.Условие
	|ГДЕ
	|	ВТ_ДействующиеУсловия.Сотрудник ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	ДатаДокумента = ТекущаяДата();
	
	Запрос.УстановитьПараметр("Период",ДатаДокумента);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	НовыйДокумент = Документы.КорректировкаРегистров.СоздатьДокумент();
	НовыйДокумент.Дата 					= ДатаДокумента;
	НовыйДокумент.Комментарий 			= "Сформирован при переходе на релиз 2.0.0.56";
	НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.УстановитьНовыйНомер();
	
	НоваяСтрока 	= НовыйДокумент.ТаблицаРегистров.Добавить();
	НоваяСтрока.Имя = "ДоступныеУсловияРаботыСотрудника";
	
	НовыйДокумент.Движения.ДоступныеУсловияРаботыСотрудника.Загрузить(Запрос.Выполнить().Выгрузить());
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_62() Экспорт
	
	//увеличена длина кода справочника "Рабочие места АСТБ" - подставляем нули
	Выборка = Справочники.РабочиеМестаАСТБ.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтарыйКод 			= СокрЛП(Выборка.Код);
		НовыйКод 			= Лев(СтарыйКод,5) + "000" + Прав(СтарыйКод,4);
		ВыборкаОбъект 		= Выборка.Ссылка.ПолучитьОбъект();
		ВыборкаОбъект.Код 	= НовыйКод;
		ВыборкаОбъект.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_64() Экспорт
	
	//увеличена длина кода справочника "Рабочие места АСТБ" - подставляем нули
	Выборка = Справочники.ПериодичностьВыдачиСИЗ.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыборкаОбъект 				= Выборка.Ссылка.ПолучитьОбъект();
		ВыборкаОбъект.Наименование 	= СтрЗаменить(Выборка.Ссылка.Наименование,"на","в");
		ВыборкаОбъект.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_67() Экспорт
	
	//Справочники.КритерииПроверкиДанныхАСТБ.ЗаполнитьСправочникПолностью();	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_68() Экспорт
	
	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	
	НоваяЗапись 						= НаборЗаписей.Добавить();
	НоваяЗапись.ИмяПодсистемы 			= "БиблиотекаПодключаемогоОборудования";
	НоваяЗапись.Версия 					= "2.0.5.36";
	НоваяЗапись.ЭтоОсновнаяКонфигурация = Ложь;
	
	НаборЗаписей.Записать();	
	
	НоваяЗапись 						= НаборЗаписей.Добавить();
	НоваяЗапись.ИмяПодсистемы 			= "БиблиотекаТехнологииСервиса";
	НоваяЗапись.Версия 					= "1.0.5.4";
	НоваяЗапись.ЭтоОсновнаяКонфигурация = Ложь;
	
	НаборЗаписей.Записать();
	
	НоваяЗапись 						= НаборЗаписей.Добавить();
	НоваяЗапись.ИмяПодсистемы 			= "СтандартныеПодсистемы";
	НоваяЗапись.Версия 					= "2.3.4.88";
	НоваяЗапись.ЭтоОсновнаяКонфигурация = Ложь;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_2_0_0_71() Экспорт
	
	//обновление справочника "Виды сертификатов номенклатуры":
	//1, "Сертификат соответствия"
	//2, "Протокол испытаний"
	//3, "Гигиеническое заключение"
	//4, "Декларация"
	//5, "Добровольный сертификат"
	//7, "Письмо: товар на сертификации"
	//10,"Свидетельство"
	//13, "Таможенный сертификат"
	//15, "Таможенная декларация"
	//19, "Письмо: товар не подлежит обязательной сертификации"
	//25, "Европейский сертификат"
	//26, "Экспертное заключение"
	//31, "Регистрационное удостоверение"
	//33, "Сертификат ЕАЭС"
	//34, "Декларация ЕАЭС"
	
	//1-"Сертификат соответствия"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(1);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 1;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Сертификат соответствия";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(1);
	ВидСертификатаОбъект.Записать();
	
	//2-"Протокол испытаний"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(2);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 2;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Протокол испытаний";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(2);
	ВидСертификатаОбъект.Записать();
	
	//3-"Гигиеническое заключение"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(3);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 3;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Гигиеническое заключение";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(3);
	ВидСертификатаОбъект.Записать();
	
	//4-"Декларация"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(4);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 4;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Декларация";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(4);
	ВидСертификатаОбъект.Записать();
	
	//5-"Добровольный сертификат"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(5);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 5;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Добровольный сертификат";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(5);
	ВидСертификатаОбъект.Записать();
	
	//7-"Письмо: товар на сертификации"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(7);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 7;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Письмо: товар на сертификации";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(7);
	ВидСертификатаОбъект.Записать();
	
	//10-"Свидетельство"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(10);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 10;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Свидетельство";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(10);
	ВидСертификатаОбъект.Записать();
	
	//13-"Таможенный сертификат"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(13);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 13;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Таможенный сертификат";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(13);
	ВидСертификатаОбъект.Записать();
	
	//15-"Таможенная декларация"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(15);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 15;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Таможенная декларация";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(15);
	ВидСертификатаОбъект.Записать();
	
	//19-"Письмо: товар не подлежит обязательной сертификации"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(19);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 19;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Письмо: товар не подлежит обязательной сертификации";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(19);
	ВидСертификатаОбъект.Записать();
	
	//25-"Европейский сертификат"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(25);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 25;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Европейский сертификат";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(25);
	ВидСертификатаОбъект.Записать();
	
	//26-"Экспертное заключение"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(26);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 26;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Экспертное заключение";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(26);
	ВидСертификатаОбъект.Записать();
	
	//31-"Регистрационное удостоверение"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(31);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 31;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Регистрационное удостоверение";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(31);
	ВидСертификатаОбъект.Записать();
	
	//33-"Сертификат ЕАЭС"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(33);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 33;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Сертификат ЕАЭС";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(33);
	ВидСертификатаОбъект.Записать();
	
	//34-"Декларация ЕАЭС"
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(34);
	Если ВидСертификата.Пустая() Тогда
		ВидСертификатаОбъект 		= Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		ВидСертификатаОбъект.Код 	= 34;
	Иначе
		ВидСертификатаОбъект = ВидСертификата.ПолучитьОбъект();
	КонецЕсли;
	ВидСертификатаОбъект.Наименование 	= "Декларация ЕАЭС";
	ВидСертификатаОбъект.Приоритет		= ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(34);
	ВидСертификатаОбъект.Записать();
	
	//сортируем табличную часть "Сертификаты" справочника "Номенклатура" по приоритету вида сертификата
	ВыборкаНоменклатуры = Справочники.Номенклатура.Выбрать();
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		Если ВыборкаНоменклатуры.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
				
		Объект = ВыборкаНоменклатуры.ПолучитьОбъект();
		Объект.Сертификаты.Загрузить(ПроцедурыРаботыСНормамиСервер.ПолучитьОтсортированнуюТаблицуСертификатов(ВыборкаНоменклатуры.Ссылка));
		Объект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_73() Экспорт
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ПунктыТОН",						НОВЫЙ Структура("Используется",Истина));
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПриемСредствЗащитыНаХранение",		НОВЫЙ Структура("Используется",Истина));
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ВозвратСредствЗащитыСХранения",		НОВЫЙ Структура("Используется",Истина));
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПеремещениеСредствЗащитыНаХранении",НОВЫЙ Структура("Используется",Истина));
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_84() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.Комплект";
	
	ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		НоменклатураОбъект = ВыборкаНоменклатуры.Ссылка.ПолучитьОбъект();
		//+++АСТБ_Горюшин_Алексей_17125
		НоменклатураОбъект.ВидУчетаКомплектаДляППС = Перечисления.ВидыУчетаКомплектов.УчитыватьСогласноВыдаче;
		//было
		//НоменклатураОбъект.ВидУчетаКомплекта = Перечисления.ВидыУчетаКомплектов.УчитыватьСогласноВыдаче;
		//---АСТБ_Горюшин_Алексей_17125
		НоменклатураОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_89() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаСредствЗащитыСотруднику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВыдачаСредствЗащитыСотруднику КАК ВыдачаСредствЗащитыСотруднику
	|ГДЕ
	|	ВыдачаСредствЗащитыСотруднику.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыдачиСИЗ.ПустаяСсылка)";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВыдачиСИЗ.ФактическаяВыдача;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_92() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.ВидАнтропометрическогоСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураНормОрганизации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураНормОрганизации КАК НоменклатураНормОрганизации
	|ГДЕ
	|	НоменклатураНормОрганизации.ВидАнтропометрическогоСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.ПустаяСсылка)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатуры 	= Результат[0].Выгрузить();
	ТаблицаНоменклатурыНорм = Результат[1].Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
		
		СправочникОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ВидАнтропометрическогоСвойства = Справочники.ВидыАнтропометрическихСвойств.НеОпределен;
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНоменклатурыНорм Цикл
		
		СправочникОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ВидАнтропометрическогоСвойства = Справочники.ВидыАнтропометрическихСвойств.НеОпределен;
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_95() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыВыдачиСИЗ.Ссылка КАК НормаВыдачи,
	|	НормыВыдачиСИЗ.Код КАК СтарыйКод,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(НормыВыдачиСИЗ.Код, 10, 1) = """"
	|			ТОГДА ПОДСТРОКА(НормыВыдачиСИЗ.Код, 1, 2) + ""00-000"" + ПОДСТРОКА(НормыВыдачиСИЗ.Код, 6, 4)
	|		ИНАЧЕ ПОДСТРОКА(НормыВыдачиСИЗ.Код, 1, 2) + ""00-"" + ПОДСТРОКА(НормыВыдачиСИЗ.Код, 6, 7)
	|	КОНЕЦ КАК НовыйКод
	|ИЗ
	|	Справочник.НормыВыдачиСИЗ КАК НормыВыдачиСИЗ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НормыВыдачиСИЗ.Владелец,
	|	СтарыйКод УБЫВ";
	
	ТаблицаДляКорректировки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыДляКорректировки Из ТаблицаДляКорректировки Цикл
		
		НормаОбъект 	= СтрокаТаблицыДляКорректировки.НормаВыдачи.ПолучитьОбъект();
		НормаОбъект.Код = СтрокаТаблицыДляКорректировки.НовыйКод;
		
		Попытка
			НормаОбъект.Записать();
		Исключение
			НормаОбъект.УстановитьНовыйКод();
			НормаОбъект.Записать();
		КонецПопытки;	
		
	КонецЦикла;
	
	//+++АСТБ_Горюшин_Алексей_17125
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПредварительныйПереходПраваСобственности",НОВЫЙ Структура("Используется",Истина));
	//---АСТБ_Горюшин_Алексей_17125
	
КонецПроцедуры

//+++АСТБ_Горюшин_Алексей_33597
Процедура ПерейтиНаВерсию_2_0_0_99() Экспорт
	
	//Узлы обмена для выгрузки в Консолидацию
	ОбменС_Консолидацией_Узел_АСТБ = ПланыОбмена.ОбменС_Консолидацией.ЭтотУзел();
	
	Если ОбменС_Консолидацией_Узел_АСТБ = ПланыОбмена.ОбменС_Консолидацией.ПустаяСсылка() Тогда
		ОбменС_Консолидацией_Узел_АСТБ_Объект = ПланыОбмена.ОбменС_Консолидацией.СоздатьУзел();
		ОбменС_Консолидацией_Узел_АСТБ_Объект.Код = "ASTB";
		ОбменС_Консолидацией_Узел_АСТБ_Объект.Наименование = "Текущий";
		ОбменС_Консолидацией_Узел_АСТБ_Объект.ЭтотУзел = Истина;
		ОбменС_Консолидацией_Узел_АСТБ_Объект.Записать();
	Иначе	
		Если НЕ (ОбменС_Консолидацией_Узел_АСТБ.Код = "ASTB"
			И ОбменС_Консолидацией_Узел_АСТБ.Наименование = "Текущий") Тогда
			ОбменС_Консолидацией_Узел_АСТБ_Объект = ОбменС_Консолидацией_Узел_АСТБ.ПолучитьОбъект();
			ОбменС_Консолидацией_Узел_АСТБ_Объект.Код = "ASTB";
			ОбменС_Консолидацией_Узел_АСТБ_Объект.Наименование = "Текущий";
			ОбменС_Консолидацией_Узел_АСТБ_Объект.Записать();
		КонецЕсли;	
	КонецЕсли;
	
	ОбменС_Консолидацией_Узел_Консолидация = ПланыОбмена.ОбменС_Консолидацией.НайтиПоКоду("CONS");
	
	Если ОбменС_Консолидацией_Узел_Консолидация = ПланыОбмена.ОбменС_Консолидацией.ПустаяСсылка() Тогда
		ОбменС_Консолидацией_Узел_Консолидация_Объект = ПланыОбмена.ОбменС_Консолидацией.СоздатьУзел();
		ОбменС_Консолидацией_Узел_Консолидация_Объект.Код = "CONS";
		ОбменС_Консолидацией_Узел_Консолидация_Объект.Наименование = "Консолидация";
		ОбменС_Консолидацией_Узел_Консолидация_Объект.Записать();
	Иначе 
		Если НЕ (ОбменС_Консолидацией_Узел_Консолидация.Код = "CONS"
			И ОбменС_Консолидацией_Узел_Консолидация.Наименование = "Консолидация") Тогда
			ОбменС_Консолидацией_Узел_Консолидация_Объект = ОбменС_Консолидацией_Узел_Консолидация.ПолучитьОбъект();
			ОбменС_Консолидацией_Узел_Консолидация_Объект.Код = "CONS";
			ОбменС_Консолидацией_Узел_Консолидация_Объект.Наименование = "Консолидация";
			ОбменС_Консолидацией_Узел_Консолидация_Объект.Записать();
		КонецЕсли;	
	КонецЕсли;
	
	//Расисание выгрузки в Консолидацию со случайным времнем начала для уменьшения нагрузки
	Генератор = Новый ГенераторСлучайныхЧисел;
	ВремяНачала = Дата("00010101083000") + Генератор.СлучайноеЧисло(0, 1800);
	ЗаданиеВыгрузки = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ВыгрузкаФизическихЛицВ_БазуКонсолидации);
	ТекущееРасписание = ЗаданиеВыгрузки.Расписание;
	ТекущееРасписание.ВремяНачала = ВремяНачала;
	ЗаданиеВыгрузки.Расписание = ТекущееРасписание;
	ЗаданиеВыгрузки.Записать();	
		
КонецПроцедуры //---АСТБ_Горюшин_Алексей_33597

Процедура ПерейтиНаВерсию_2_0_0_101() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ТочкаХранения КАК ТочкаХранения
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ТочкаХранения = ЗНАЧЕНИЕ(Справочник.ТочкиХранения.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ТочкиХраненияНоменклатуры.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Номенклатура 	= Выборка.Номенклатура;
		НоваяЗапись.ТочкаХранения 	= Выборка.ТочкаХранения;
		
		НаборЗаписей.Записать();	
		
	КонецЦикла;
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_НормыВыдачиСИЗ", НОВЫЙ Структура("Используется",Истина));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСИЗ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыСИЗ КАК ВидыСИЗ
	|ГДЕ
	|	НЕ ВидыСИЗ.ЭтоГруппа
	|	И ВидыСИЗ.Дерматологический
	|	И ВидыСИЗ.КатегорияВидаСИЗ = ЗНАЧЕНИЕ(Перечисление.КатагорииВидовСИЗ.ПустаяСсылка)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		ВидСИЗОбъект = СтрокаТаблицыЗапроса.Ссылка.ПолучитьОбъект();
		ВидСИЗОбъект.КатегорияВидаСИЗ = Перечисления.КатагорииВидовСИЗ.ДСИЗ;
		ВидСИЗОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_103() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//корректировка данных регистра
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УточненныеОснованияНормВыдачи.НормаВыдачи КАК НормаВыдачи,
	|	УточненныеОснованияНормВыдачи.Должность КАК Должность,
	|	УточненныеОснованияНормВыдачи.Основание КАК Основание
	|ИЗ
	|	РегистрСведений.УточненныеОснованияНормВыдачи КАК УточненныеОснованияНормВыдачи
	|ГДЕ
	|	УточненныеОснованияНормВыдачи.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для КАждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
	
		НаборЗаписей = РегистрыСведений.УточненныеОснованияНормВыдачи.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НормаВыдачи.Установить(СтрокаТаблицыЗапроса.НормаВыдачи);
		НаборЗаписей.Отбор.Должность.Установить(СтрокаТаблицыЗапроса.Должность);
		НаборЗаписей.Прочитать();
		
		ЗаписьНабора = НаборЗаписей[0];
		ЗаписьНабора.Организация = СтрокаТаблицыЗапроса.НормаВыдачи.Владелец;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	//слетела установка доп. реквизитов - повторный запуск
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_НормыВыдачиСИЗ", НОВЫЙ Структура("Используется",Истина));
	
	//заполнение реквизита "Дата приема для личной карточки"
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботуРаботники.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ПриемНаРаботуРаботники.Ссылка.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ПриемНаРаботу
	|ИЗ
	|	Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
	|ГДЕ
	|	ПриемНаРаботуРаботники.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриемНаРаботуРаботники.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ЗРМ
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки КАК ЗанятыеРабочиеМестаОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗРМ.Сотрудник КАК Сотрудник,
	|	ВТ_ПриемНаРаботу.Дата КАК ДатаПриема
	|ИЗ
	|	ВТ_ЗРМ КАК ВТ_ЗРМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПриемНаРаботу КАК ВТ_ПриемНаРаботу
	|		ПО ВТ_ЗРМ.Сотрудник = ВТ_ПриемНаРаботу.Сотрудник
	|ГДЕ
	|	НЕ ВТ_ПриемНаРаботу.Дата ЕСТЬ NULL";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		СотрудникОбъект = СтрокаТаблицыЗапроса.Сотрудник.ПолучитьОбъект();
		СотрудникОбъект.ДатаПриемаДляЛичнойКарточки = СтрокаТаблицыЗапроса.ДатаПриема;
		Попытка
			СотрудникОбъект.Записать();
		Исключение КонецПопытки;
		
	КонецЦикла;	
	
	//заполнение документов выдачи и регистра номенклатурой и характеристиками, если они не заполнены
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыдачаДежурныхСредствЗащитыКодыМаркировки.Ссылка КАК ДокументВыдачи,
	|	ВыдачаДежурныхСредствЗащитыКодыМаркировки.КодМаркировки КАК КодМаркировки,
	|	ВыдачаДежурныхСредствЗащитыКодыМаркировки.Номенклатура КАК Номенклатура,
	|	ВыдачаДежурныхСредствЗащитыКодыМаркировки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ВТ_КодыМаркировки
	|ИЗ
	|	Документ.ВыдачаДежурныхСредствЗащиты.КодыМаркировки КАК ВыдачаДежурныхСредствЗащитыКодыМаркировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыдачаСредствЗащитыСотрудникуКодыМаркировки.Ссылка,
	|	ВыдачаСредствЗащитыСотрудникуКодыМаркировки.КодМаркировки,
	|	ВыдачаСредствЗащитыСотрудникуКодыМаркировки.Номенклатура,
	|	ВыдачаСредствЗащитыСотрудникуКодыМаркировки.ХарактеристикаНоменклатуры
	|ИЗ
	|	Документ.ВыдачаСредствЗащитыСотруднику.КодыМаркировки КАК ВыдачаСредствЗащитыСотрудникуКодыМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КодыМаркировки.ДокументВыдачи КАК ДокументВыдачи,
	|	ВТ_КодыМаркировки.КодМаркировки КАК КодМаркировки,
	|	ВЫБОР
	|		КОГДА ВТ_КодыМаркировки.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА GTINНоменклатуры.Номенклатура
	|		ИНАЧЕ ВТ_КодыМаркировки.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_КодыМаркировки.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА GTINНоменклатуры.ХарактеристикаНоменклатуры
	|		ИНАЧЕ ВТ_КодыМаркировки.ХарактеристикаНоменклатуры
	|	КОНЕЦ КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	ВТ_КодыМаркировки КАК ВТ_КодыМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.GTINНоменклатуры КАК GTINНоменклатуры
	|		ПО (ПОДСТРОКА(ВТ_КодыМаркировки.КодМаркировки, 4, 13) = GTINНоменклатуры.GTIN)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_КодыМаркировки.ДокументВыдачи КАК ДокументВыдачи
	|ИЗ
	|	ВТ_КодыМаркировки КАК ВТ_КодыМаркировки
	|ГДЕ
	|	ВТ_КодыМаркировки.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_КодыМаркировки.ДокументВыдачи.Дата";
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаКодовМаркировки 	= Результат[1].Выгрузить();
	ТаблицаДокументовВыдачи = Результат[2].Выгрузить();
	
	Для Каждого СтрокаТаблицыДокументовВыдачи Из ТаблицаДокументовВыдачи Цикл
		
		ДокументОбъект = СтрокаТаблицыДокументовВыдачи.ДокументВыдачи.ПолучитьОбъект();
		ДокументОбъект.КодыМаркировки.Очистить();
		
		НайденныеСтроки = ТаблицаКодовМаркировки.НайтиСтроки(Новый Структура("ДокументВыдачи",СтрокаТаблицыДокументовВыдачи.ДокументВыдачи));
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ЗаполнитьЗначенияСвойств(ДокументОбъект.КодыМаркировки.Добавить(),НайденнаяСтрока);
			
		КонецЦикла;	
		
		Если ДокументОбъект.Проведен Тогда //заполняем движения по регистру
			
			ТаблицаДляЗаписиДвижений = ДокументОбъект.КодыМаркировки.Выгрузить();
			ТаблицаДляЗаписиДвижений.Колонки.Добавить("Период");
			ТаблицаДляЗаписиДвижений.Колонки.Добавить("Активность");
			ТаблицаДляЗаписиДвижений.Колонки.Добавить("Регистратор");
			
			ТаблицаДляЗаписиДвижений.ЗаполнитьЗначения(ДокументОбъект.Дата,		"Период");
			ТаблицаДляЗаписиДвижений.ЗаполнитьЗначения(Истина,					"Активность");
			ТаблицаДляЗаписиДвижений.ЗаполнитьЗначения(ДокументОбъект.Ссылка,	"Регистратор");
			
			ДокументОбъект.Движения.КодыМаркировкиВыданныхСредствЗащиты.Записывать = Истина;
			ДокументОбъект.Движения.КодыМаркировкиВыданныхСредствЗащиты.Загрузить(ТаблицаДляЗаписиДвижений);
			
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;	
	
	//изменение настроек системной учетной записи
	УчетнаяЗаписьОбъект = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
	УчетнаяЗаписьОбъект.ИспользоватьДляПолучения = Ложь;
	УчетнаяЗаписьОбъект.СерверИсходящейПочты = "mail.vostok.ru";
	УчетнаяЗаписьОбъект.ПортСервераИсходящейПочты = 465;
	УчетнаяЗаписьОбъект.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты = Истина;
	УчетнаяЗаписьОбъект.ПользовательSMTP = "astb_notice@vostok.ru";
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(УчетнаяЗаписьОбъект.Ссылка, "K01aY#der", "ПарольSMTP");
	УчетнаяЗаписьОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_106() Экспорт
	
	//заполнение пустых кодов SAP в характеристиках номенклатуры
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Метрика КАК Метрика,
	|	МАКСИМУМ(ХарактеристикиНоменклатуры.КодSAP) КАК КодSAP
	|ПОМЕСТИТЬ ВТ_КодыСАПМетрик
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатуры.Метрика = ЗНАЧЕНИЕ(Справочник.Метрики.ПустаяСсылка)
	|	И НЕ ХарактеристикиНоменклатуры.КодSAP = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ХарактеристикиНоменклатуры.Метрика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Метрика КАК Метрика
	|ПОМЕСТИТЬ ВТ_ХарактеристикиБезКодаСАП
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатуры.Метрика = ЗНАЧЕНИЕ(Справочник.Метрики.ПустаяСсылка)
	|	И ХарактеристикиНоменклатуры.КодSAP = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ХарактеристикиБезКодаСАП.Характеристика КАК Характеристика,
	|	ВТ_КодыСАПМетрик.КодSAP КАК КодSAP
	|ИЗ
	|	ВТ_ХарактеристикиБезКодаСАП КАК ВТ_ХарактеристикиБезКодаСАП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КодыСАПМетрик КАК ВТ_КодыСАПМетрик
	|		ПО (ВТ_ХарактеристикиБезКодаСАП.Метрика = ВТ_КодыСАПМетрик.Метрика)
	|ГДЕ
	|	НЕ ВТ_КодыСАПМетрик.КодSAP ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ХарактеристикиБезКодаСАП.Характеристика.Наименование";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Попытка
			РазмерОбъект = СтрокаТаблицыЗапроса.Характеристика.ПолучитьОбъект();
			РазмерОбъект.КодSAP = СтрокаТаблицыЗапроса.КодSAP;
			РазмерОбъект.Записать();
		Исключение КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_111() Экспорт
	
	//заполнение пустых штрихкодов видов ремонта
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыРемонтаСИЗ.Ссылка КАК Ссылка,
	|	ВидыРемонтаСИЗ.Код КАК Код
	|ИЗ
	|	Справочник.ВидыРемонтаСИЗ КАК ВидыРемонтаСИЗ
	|ГДЕ
	|	ВидыРемонтаСИЗ.Штрихкод = """"";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Попытка
			ВидРемонтаОбъект = СтрокаТаблицыЗапроса.Ссылка.ПолучитьОбъект();
			ВидРемонтаОбъект.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатурыДляУчетаЧистки.ПолучитьШтрихкодПоКоду(СтрокаТаблицыЗапроса.Код,"2",111);
			ВидРемонтаОбъект.Записать();
		Исключение КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_2_0_0_112() Экспорт
	
	СправочникОбъект = Справочники.ВидыКонтактнойИнформации.СправочникСклады.ПолучитьОбъект();
	СправочникОбъект.Используется = Истина;
	СправочникОбъект.Записать();
	
	ОбновитьПредопределенныеВидыКонтактнойИнформации();
	
КонецПроцедуры

//+++АСТБ_ALEXEY_110186_**************************************************************

Процедура ПерейтиНаВерсию_2_0_0_114() Экспорт
	
	//установка параметров ввода телефонных номеров физ. лиц.
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизическиеЛица;
	ВидКонтактнойИнформацииОбъект = ВидКонтактнойИнформации.ПолучитьОбъект();
	ВидКонтактнойИнформацииОбъект.ТелефонCДобавочнымНомером = Ложь;
	ВидКонтактнойИнформацииОбъект.Записать();
	
	//заполнение вида роста
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.ИспользоватьРост
	|	И Номенклатура.ВидРоста = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.ПустаяСсылка)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		НоменклатураОбъект = СтрокаТаблицыЗапроса.Номенклатура.ПолучитьОбъект();
		НоменклатураОбъект.ВидРоста = Справочники.ВидыАнтропометрическихСвойств.Рост;
		
		Попытка
			НоменклатураОбъект.Записать();
		Исключение 
			ЗаписьЖурналаРегистрации("Обновление информационной базы на версию 2.0.0.114.",УровеньЖурналаРегистрации.Ошибка,,СтрокаТаблицыЗапроса.Номенклатура,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецПопытки;	
		
	КонецЦикла;
	
	//заполняем допустимые значения антропометрии
	РегистрыСведений.ДопустимыеЗначенияАнтропометрическихСвойств.ВыполнитьЗагрузкуДопустимыхЗначенийАнтропометрии();
	
КонецПроцедуры

//---АСТБ_ALEXEY_110186_**************************************************************    

//Танцюра А.Н. -- №119948 Новые предопределенные виды антропометрии -- 03.09.2021 <<<

Процедура ПерейтиНаВерсию_2_0_0_115() Экспорт
	
	//заполняем допустимые значения антропометрии
	РегистрыСведений.ДопустимыеЗначенияАнтропометрическихСвойств.ВыполнитьЗагрузкуДопустимыхЗначенийАнтропометрии();
	
	// {ЮМадатов (03.09.21): <#100180>
	//Установка использования доп реквизита для справочника ДолжностиИПрофессии
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ДолжностиИПрофессии", Новый Структура("Используется",Истина));
	// } ЮМадатов (03.09.21): <#100180>
КонецПроцедуры

//Танцюра А.Н. -- №119948 Новые предопределенные виды антропометрии -- 03.09.2021 >>>

//Трегубов А.А. -- №142456 Для сброса сохраненных параметров подключения к ФТП --  11.11.2021 
Процедура ПерейтиНаВерсию_2_0_0_117() Экспорт
	
	ИдентификаторОбработки = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Обработка.ЗагрузкаИзображенийНоменклатурыВостокСервис");
	
	НаборЗаписей = РегистрыСведений.НастройкиПодключенияFTPДляДополнительныхОбработок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторОбъекта.Установить(ИдентификаторОбработки);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьКоэффициентыПоставкиДляГруппИЛИПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыПоставкиДляГруппИЛИПоУмолчанию КАК КоэффициентыПоставкиДляГруппИЛИПоУмолчанию
	|		ПО Организации.Ссылка = КоэффициентыПоставкиДляГруппИЛИПоУмолчанию.Организация
	|ГДЕ
	|	Организации.ИспользоватьГруппыИЛИ
	|	И КоэффициентыПоставкиДляГруппИЛИПоУмолчанию.ПроцентПоставки ЕСТЬ NULL";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		//в группе 2 элемента
		НаборЗаписей = РегистрыСведений.КоэффициентыПоставкиДляГруппИЛИПоУмолчанию.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(СтрокаТаблицыЗапроса.Организация);
		НаборЗаписей.Отбор.КоличествоВГруппе.Установить(2); 
		НоваяЗапись 					= НаборЗаписей.Добавить();
		НоваяЗапись.Организация 		= СтрокаТаблицыЗапроса.Организация;
		НоваяЗапись.КоличествоВГруппе 	= 2;
		НоваяЗапись.ПроцентПоставки 	= 60;
		НаборЗаписей.Записать();
		
		//в группе 3 элемента
		НаборЗаписей = РегистрыСведений.КоэффициентыПоставкиДляГруппИЛИПоУмолчанию.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(СтрокаТаблицыЗапроса.Организация);
		НаборЗаписей.Отбор.КоличествоВГруппе.Установить(3); 
		НоваяЗапись 					= НаборЗаписей.Добавить();
		НоваяЗапись.Организация 		= СтрокаТаблицыЗапроса.Организация;
		НоваяЗапись.КоличествоВГруппе 	= 3;
		НоваяЗапись.ПроцентПоставки 	= 40;
		НаборЗаписей.Записать();
		
		//в группе 4 элемента
		НаборЗаписей = РегистрыСведений.КоэффициентыПоставкиДляГруппИЛИПоУмолчанию.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(СтрокаТаблицыЗапроса.Организация);
		НаборЗаписей.Отбор.КоличествоВГруппе.Установить(4); 
		НоваяЗапись 					= НаборЗаписей.Добавить();
		НоваяЗапись.Организация 		= СтрокаТаблицыЗапроса.Организация;
		НоваяЗапись.КоличествоВГруппе 	= 4;
		НоваяЗапись.ПроцентПоставки 	= 30;
		НаборЗаписей.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыПрофилейДоступа()
	
	ВыборкаСпр = Справочники.ПрофилиГруппДоступа.Выбрать();
	
	Пока ВыборкаСпр.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаСпр.ИдентификаторПоставляемыхДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		ИзменяемыйЭлемент = ВыборкаСпр.ПолучитьОбъект();
		ИзменяемыйЭлемент.ИдентификаторПоставляемыхДанных = ВыборкаСпр.Ссылка.УникальныйИдентификатор();
		ИзменяемыйЭлемент.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры	

// Обновляет значения реквизитов предопределенных видов контактной информации (для редакции 2.3).
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	// Справочник "Контрагенты"
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 4;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Справочник "Физические лица".
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.АдресФизическиеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонФизическиеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизическиеЛица;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 4;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Справочник "Подразделения"
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресПодразделения;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресПодразделения;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПодразделения;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФаксПодразделения;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 4;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailПодразделения;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресПодразделения;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПодразделения;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	//Рохин задача(76476)
	// Справочник "Склады".
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияСклада;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Используется = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресСклада;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Используется = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСклада;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Используется = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailСклада;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Используется = Истина;
	ПараметрыВида.Порядок = 4;
	ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.КонтактноеЛицо;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Используется = Истина;
	ПараметрыВида.Порядок = 5;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	//Рохин задача(76476)
	
КонецПроцедуры

//для редакции 2.2
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииПодразделений() 
	
	ПараметрыПроверкиАдреса = Новый Структура;
	ПараметрыПроверкиАдреса.Вставить("АдресТолькоРоссийский", Истина);
	ПараметрыПроверкиАдреса.Вставить("ПроверятьКорректность", Ложь);
	ПараметрыПроверкиАдреса.Вставить("ЗапрещатьВводНекорректного", Ложь);
	ПараметрыПроверкиАдреса.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	ПараметрыПроверкиАдреса.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ЮрАдресПодразделения,          Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Юридический адрес подразделения'"), Истина, Ложь, Ложь, 1, , ПараметрыПроверкиАдреса);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ФактАдресПодразделения,        Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Фактический адрес подразделения'"), Истина, Ложь, Ложь, 2);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонПодразделения,          Перечисления.ТипыКонтактнойИнформации.Телефон,
		НСтр("ru='Телефон подразделения'"), Истина, Ложь, Ложь, 3, Истина);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ФаксПодразделения,             Перечисления.ТипыКонтактнойИнформации.Факс,
		НСтр("ru='Факс подразделения'"), Истина, Ложь, Ложь, 4, Истина);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.EmailПодразделения,            Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
		НСтр("ru='Адрес электронной почты подразделения'"), Истина, Ложь, Ложь, 5, Истина);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресПодразделения,    Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Почтовый адрес подразделения'"), Истина, Ложь, Ложь, 6);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПодразделения, Перечисления.ТипыКонтактнойИнформации.Другое,
		НСтр("ru='Любая другая контактная информация'"), Истина, Ложь, Ложь, 7);	
	
КонецПроцедуры
	
//для редакции 2.2
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииФизическихЛиц() 
	
	ПараметрыПроверкиАдреса = Новый Структура;
	ПараметрыПроверкиАдреса.Вставить("АдресТолькоРоссийский", Истина);
	ПараметрыПроверкиАдреса.Вставить("ПроверятьКорректность", Ложь);
	ПараметрыПроверкиАдреса.Вставить("ЗапрещатьВводНекорректного", Ложь);
	ПараметрыПроверкиАдреса.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	ПараметрыПроверкиАдреса.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ФактАдресФизическиеЛица,       Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Фактический адрес физ. лица'"), Истина, Ложь, Ложь, 1, , ПараметрыПроверкиАдреса);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонФизическиеЛица, 		Перечисления.ТипыКонтактнойИнформации.Телефон,
		НСтр("ru='Телефон физ. лица'"), Истина, Ложь, Ложь, 2);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица,           Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
		НСтр("ru='Адрес электронной почты физ. лица'"), Истина, Ложь, Ложь, 3, Истина);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресФизическиеЛица,   Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Почтовый адрес физ. лица'"), Истина, Ложь, Ложь, 4);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизическиеЛица,Перечисления.ТипыКонтактнойИнформации.Другое,
		НСтр("ru='Любая другая контактная информация'"), Истина, Ложь, Ложь, 5);	
	
КонецПроцедуры	
	
//для редакции 2.2
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов() 
	
	ПараметрыПроверкиАдреса = Новый Структура;
	ПараметрыПроверкиАдреса.Вставить("АдресТолькоРоссийский", Истина);
	ПараметрыПроверкиАдреса.Вставить("ПроверятьКорректность", Ложь);
	ПараметрыПроверкиАдреса.Вставить("ЗапрещатьВводНекорректного", Ложь);
	ПараметрыПроверкиАдреса.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	ПараметрыПроверкиАдреса.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ЮрАдресконтрагента,          Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Юридический адрес контрагента'"), Истина, Ложь, Ложь, 1, , ПараметрыПроверкиАдреса);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ФактАдресконтрагента,        Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Фактический адрес контрагента'"), Истина, Ложь, Ложь, 2);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.Телефонконтрагента,          Перечисления.ТипыКонтактнойИнформации.Телефон,
		НСтр("ru='Телефон контрагента'"), Истина, Ложь, Ложь, 3, Истина);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.Факсконтрагента,             Перечисления.ТипыКонтактнойИнформации.Факс,
		НСтр("ru='Факс контрагента'"), Истина, Ложь, Ложь, 4, Истина);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.Emailконтрагента,            Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
		НСтр("ru='Адрес электронной почты контрагента'"), Истина, Ложь, Ложь, 5, Истина);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресконтрагента,    Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Почтовый адрес контрагента'"), Истина, Ложь, Ложь, 6);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияконтрагента, Перечисления.ТипыКонтактнойИнформации.Другое,
		НСтр("ru='Любая другая контактная контрагента'"), Истина, Ложь, Ложь, 7);	
	
КонецПроцедуры	

//Рохин задача(76476)
//для редакции 2.2
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииСкладов() 
	
	ПараметрыПроверкиАдреса = Новый Структура;
	ПараметрыПроверкиАдреса.Вставить("АдресТолькоРоссийский", Истина);
	ПараметрыПроверкиАдреса.Вставить("ПроверятьКорректность", Ложь);
	ПараметрыПроверкиАдреса.Вставить("ЗапрещатьВводНекорректного", Ложь);
	ПараметрыПроверкиАдреса.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	ПараметрыПроверкиАдреса.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ФактАдресСклада,       Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Фактический адрес '"), Истина, Ложь, Ложь, 1, , ПараметрыПроверкиАдреса);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияСклада,Перечисления.ТипыКонтактнойИнформации.Другое,
		НСтр("ru='Любая другая контактная информация'"), Истина, Ложь, Ложь, 2);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.КонтактноеЛицо,		Перечисления.ТипыКонтактнойИнформации.Другое,
		НСтр("ru='Контактное лицо'"), Истина, Ложь, Ложь, 3);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонСклада, 		Перечисления.ТипыКонтактнойИнформации.Телефон,
		НСтр("ru='Телефон склада'"), Истина, Ложь, Ложь, 4);
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.EmailСклада,           Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
		НСтр("ru='Адрес электронной почты склада'"), Истина, Ложь, Ложь, 5, Истина);

КонецПроцедуры	
//Рохин задача(76476)