Процедура ВендингБоксЗарегистрироватьИзменениеПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрироватьИзменения = Ложь;	
	
	Если ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Ссылка = Источник.Ссылка; 
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда 
		Ссылка = Источник.Ссылка.Владелец;

	КонецЕсли;
	
	Если НЕ Ссылка.ЭтоГруппа и Ссылка.ВозможнаАвтоматизированнаяВыдача Тогда 
		
		РегистрироватьИзменения = Истина;
		
	КонецЕсли;	
	
	Если РегистрироватьИзменения Тогда
		
		ВыборкаУзлов = ПланыОбмена.ВендингБокс.Выбрать();
		
		Пока ВыборкаУзлов.Следующий() Цикл
			
			Если ВыборкаУзлов.Ссылка = ПланыОбмена.ВендингБокс.ЭтотУзел() Тогда
				Продолжить;
			КонецЕсли;
			
			ПланыОбмена.ЗарегистрироватьИзменения(ВыборкаУзлов.Ссылка,Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ВендингВыполнитьПервоначальнуюРегистрацию(Узел) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВозможнаАвтоматизированнаяВыдача
	|	И НЕ Номенклатура.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл 
		ПланыОбмена.ЗарегистрироватьИзменения(Узел,Выборка.Номенклатура);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВендингУдалитьРегистрацию(Узел) Экспорт 
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел);

КонецПроцедуры


Процедура ВендингВыгрузитьДанныеПоРасписанию() Экспорт
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.ЗавершениеРаботыВнешнихПользователей,"Регламентная выгрузка данных для вендинга не выполнена, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ВыгрузитьНСИ();
	
КонецПроцедуры	   

#Область ВебСервис

Функция ПолучитьНормыВыдачи(ВходящиеДанные) Экспорт
	
	ИдентификаторСклада = ВходящиеДанные.DATA.BOX_ID;
	ИдентификаторСотрудника = ВходящиеДанные.DATA.USER_TAB;
	СверхНорм = ?(НЕ ЗначениеЗаполнено(ВходящиеДанные.DATA.EXTRA_NORM), Ложь, ВходящиеДанные.DATA.EXTRA_NORM);

	Попытка
		
		СтруктураРеквизитов = ПолучитьОсновныеРеквизитыПоПолучениюНорм(ИдентификаторСклада,ИдентификаторСотрудника);
		Если ЗначениеЗаполнено(СтруктураРеквизитов.ТекстОшибки) Тогда 
			
			Возврат СформироватьXMLОтветПоЗапросуНормВыдачи(ИдентификаторСотрудника,"ERROR",СтруктураРеквизитов.ТекстОшибкиВВендинг,СтруктураРеквизитов.ТекстОшибки);
			
		КонецЕсли;
		
		// {ЮМадатов (11.08.21): <#108824>
		Если СверхНорм и СтруктураРеквизитов.АлгоритмВыдачиСверхНорм = Справочники.АлгоритмыВыдачиСверхНорм.ПоСкладу Тогда
			
			ЗапросОстатковПоСкладу = Новый Запрос;
			ЗапросОстатковПоСкладу.Текст = "ВЫБРАТЬ
			                               |	ОстаткиНоменклатурыОстатки.Номенклатура КАК Номенклатура,
			                               |	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			                               |	ОстаткиНоменклатурыОстатки.КоличествоОстаток КАК КоличествоОстаток
			                               |ИЗ
			                               |	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
			                               |			,
			                               |			Склад = &Склад
			                               |				И Номенклатура.ВозможнаАвтоматизированнаяВыдача) КАК ОстаткиНоменклатурыОстатки";

			ЗапросОстатковПоСкладу.УстановитьПараметр("Склад",  СтруктураРеквизитов.Склад);
					
			РезультатЗапроса = ЗапросОстатковПоСкладу.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
			
				Возврат СформироватьXMLОтветПоЗапросуНормВыдачи(ИдентификаторСотрудника,"ERROR","Нет остатков по складу","Нет остатков по складу",СтруктураРеквизитов.ФИОСотрудника);
			
			КонецЕсли; 
			
			ТаблицаРезультат = РезультатЗапроса.Выгрузить();
			Возврат СформироватьXMLОтветПоЗапросуНормВыдачи(ИдентификаторСотрудника,"OK",,,СтруктураРеквизитов.ФИОСотрудника,ТаблицаРезультат,СтруктураРеквизитов.Руководитель);						
			
		КонецЕсли; 
		
		// } ЮМадатов (11.08.21): <#108824>
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;   		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		Запрос.Текст = ПолучитьТекстЗапросаНормамВыдачи();
		
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		Запрос.УстановитьПараметр("ПериодРасчета", ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Неопределено));
		Запрос.УстановитьПараметр("Организация",   СтруктураРеквизитов.Организация);
		Запрос.УстановитьПараметр("Сотрудник",     СтруктураРеквизитов.Сотрудник);	
		Запрос.УстановитьПараметр("СверхНорм",     СверхНорм);     
		
		МассивВидовВыдачи = Новый Массив;
		МассивВидовВыдачи.Добавить(Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача);
		МассивВидовВыдачи.Добавить(Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача);
		
		Запрос.УстановитьПараметр("МассивВидовВыдачи", МассивВидовВыдачи);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ТаблицаНоменклатурыНормСотрудников 	= Результат[2].Выгрузить();
		ТаблицаСоответствия 				= ПроцедурыРаботыСНормамиСервер.ПолучитьСоответствияНоменклатурыДляСотрудников(ТаблицаНоменклатурыНормСотрудников,ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(""));
		
		Запрос.УстановитьПараметр("ТаблицаСоответствия",ТаблицаСоответствия);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Потребность.НоменклатураНормы КАК НоменклатураНормы,
		|	СУММА(ВТ_Потребность.КоличествоОстаток) КАК КоличествоОстаток
		|ПОМЕСТИТЬ ВТ_ПотребностьПоНорме
		|ИЗ
		|	ВТ_Потребность КАК ВТ_Потребность
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Потребность.НоменклатураНормы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ТаблицаСоответствия.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ТаблицаСоответствия.НоменклатураНормы КАК НоменклатураНормы,
		|	ТаблицаСоответствия.ЕстьРазмеры КАК ЕстьРазмеры
		|ПОМЕСТИТЬ ВТ_ТаблицаСоответствия
		|ИЗ
		|	&ТаблицаСоответствия КАК ТаблицаСоответствия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаСоответствия.Номенклатура КАК Номенклатура,
		|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры,
		|	СУММА(ВТ_ПотребностьПоНорме.КоличествоОстаток) КАК КоличествоОстаток
		|ИЗ
		|	ВТ_ТаблицаСоответствия КАК ВТ_ТаблицаСоответствия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ВТ_ТаблицаСоответствия.Номенклатура = ХарактеристикиНоменклатуры.Владелец
		|			И (ВТ_ТаблицаСоответствия.ЕстьРазмеры)
		|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПотребностьПоНорме КАК ВТ_ПотребностьПоНорме
		|		ПО (ВТ_ПотребностьПоНорме.НоменклатураНормы = ВТ_ТаблицаСоответствия.НоменклатураНормы)
		|ГДЕ
		|	НЕ ВТ_ПотребностьПоНорме.КоличествоОстаток ЕСТЬ NULL
		|	И ВТ_ТаблицаСоответствия.Номенклатура.ВозможнаАвтоматизированнаяВыдача
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаСоответствия.Номенклатура,
		|	ХарактеристикиНоменклатуры.Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаРезультат = РезультатЗапроса.Выгрузить();
		
		Если ТаблицаРезультат.Количество() = 0 Тогда
			Возврат СформироватьXMLОтветПоЗапросуНормВыдачи(ИдентификаторСотрудника,"ERROR","Нет норм","Нет норм",СтруктураРеквизитов.ФИОСотрудника,ТаблицаРезультат);
		Иначе
			// {ЮМадатов (11.08.21): <#108824>
			//Возврат СформироватьXMLОтветПоЗапросуНормВыдачи(ИдентификаторСотрудника,"OK",,,СтруктураРеквизитов.ФИОСотрудника,ТаблицаРезультат);			
			Возврат СформироватьXMLОтветПоЗапросуНормВыдачи(ИдентификаторСотрудника,"OK",,,СтруктураРеквизитов.ФИОСотрудника,ТаблицаРезультат,СтруктураРеквизитов.Руководитель);						
			// } ЮМадатов (11.08.21): <#108824>
		КонецЕсли;
		
			
	Исключение
		
		ТекстОшибкиВВендинг = "Возникли проблемы с получением норм. Пожалуйста, обратитесь на склад";
		
		Инфо = ИнформацияОбОшибке();
		Возврат СформироватьXMLОтветПоЗапросуНормВыдачи(ИдентификаторСотрудника,"ERROR",ТекстОшибкиВВендинг,ПодробноеПредставлениеОшибки(Инфо));
		
	КонецПопытки;
	
КонецФункции // ЗапросНормВыдачи()

//заготовка на случай, когда будет приходить несколько товаров в ТЧ и необходимо распределять на разные виды выдачи и т.д.
//
Функция НеИспользуетсяЗагрузитьВыдачу(ВходящиеДанные) Экспорт
	
	//Попытка		
	//	
	//	ВходящаяТаблица = ВходящиеДанные.DATA;
	//	
	//	ТаблицаДанных = Новый ТаблицаЗначений;
	//	ТаблицаДанных.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//	ТаблицаДанных.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	//	ТаблицаДанных.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 3)));
	//	
	//	ТекстОшибки = "";
	//	
	//	ПервыйПроход = Истина;
	//	Для Каждого СтрокаВходящейТаблицы из ВходящаяТаблица.Items Цикл 
	//		
	//		Если ПервыйПроход Тогда 
	//			
	//			СтруктураРеквизитов = ПолучитьОсновныеРеквизитыПоЗагрузкеВыдачи(СтрокаВходящейТаблицы.BOX_ID,СтрокаВходящейТаблицы.USER_TAB);
	//			Если ЗначениеЗаполнено(СтруктураРеквизитов.ТекстОшибки) Тогда 
	//				
	//				ТекстОшибки = СтруктураРеквизитов.ТекстОшибки;
	//				
	//			КонецЕсли;
	//			
	//			ПервыйПроход = Ложь;
	//			
	//		КонецЕсли;
	//		
	//		НоваяСтрока  = ТаблицаДанных.Добавить();
	//		
	//		Ссылка = ПолучитьСсылкуСправочникаПоИдентификатору("Номенклатура",СтрокаВходящейТаблицы.ITEM_ID);
	//		
	//		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда 
	//			Ссылка = ПолучитьСсылкуСправочникаПоИдентификатору("ХарактеристикиНоменклатуры",СтрокаВходящейТаблицы.ITEM_ID);
	//		КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено(Ссылка) Тогда 
	//			
	//			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда 
	//				НоваяСтрока.Номенклатура = Ссылка;
	//			Иначе
	//				НоваяСтрока.Номенклатура = Ссылка.Владелец;
	//				НоваяСтрока.ХарактеристикаНоменклатуры = Ссылка;
	//			КонецЕсли;
	//			
	//			НоваяСтрока.Количество = СтрокаВходящейТаблицы.QUANTITY;
	//			
	//		Иначе
	//			
	//			ТекстОшибки = ТекстОшибки + "Не удалось найти элемент справочника Номенклатура/Характеристика номенклатуры по ID: " + СтрокаВходящейТаблицы.ITEM_ID + Символы.ПС;
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	Если ТекстОшибки <> "" Тогда
	//		
	//		Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("ERROR",ТекстОшибки);
	//	Иначе
	//		
	//		
	//		НовыйДокумент 						= Документы.ВыдачаСредствЗащитыСотруднику.СоздатьДокумент();
	//		
	//		НовыйДокумент.ВидВыдачиСИЗ 			= Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача;
	//		НовыйДокумент.ВидОперации 			= Перечисления.ВидыОперацийВыдачиСИЗ.ФактическаяВыдача;
	//		НовыйДокумент.Дата 					= ТекущаяДата();
	//		НовыйДокумент.Комментарий 			= "Загружен из сервиса вендинг бокса";
	//		НовыйДокумент.Организация 			= СтруктураРеквизитов.Организация;
	//		НовыйДокумент.МОЛ 					= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(СтруктураРеквизитов.Склад,СтруктураРеквизитов.Организация);
	//		НовыйДокумент.Склад 				= СтруктураРеквизитов.Склад;
	//		НовыйДокумент.Сотрудник 			= СтруктураРеквизитов.Сотрудник;
	//		
	//		НовыйДокумент.УстановитьНовыйНомер();
	//		
	//		
	//		МенеджерВТ = Новый МенеджерВременныхТаблиц;
	//		
	//		Запрос = Новый Запрос;   		
	//		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	//		
	//		Запрос.Текст = ПолучитьТекстЗапросаНормамВыдачи();
	//		
	//		Запрос.УстановитьПараметр("Период", ТекущаяДата());
	//		Запрос.УстановитьПараметр("ПериодРасчета", ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Неопределено));			
	//		Запрос.УстановитьПараметр("Организация",  СтруктураРеквизитов.Организация);
	//		Запрос.УстановитьПараметр("Сотрудник",    СтруктураРеквизитов.Сотрудник);
	//		
	//		МассивВидовВыдачи = Новый Массив;
	//		МассивВидовВыдачи.Добавить(Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача);
	//		МассивВидовВыдачи.Добавить(Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача);
	//		
	//		Запрос.УстановитьПараметр("МассивВидовВыдачи", МассивВидовВыдачи);
	//		
	//		Результат = Запрос.ВыполнитьПакет();
	//		
	//		ТаблицаНоменклатурыНормСотрудников 	= Результат[2].Выгрузить();
	//		ТаблицаСоответствия 				= ПроцедурыРаботыСНормамиСервер.ПолучитьСоответствияНоменклатурыДляСотрудников(ТаблицаНоменклатурыНормСотрудников,ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(""));
	//		
	//		Запрос.УстановитьПараметр("ТаблицаСоответствия",ТаблицаСоответствия);
	//		Запрос.УстановитьПараметр("СписокНоменклатуры" ,ТаблицаДанных.ВыгрузитьКолонку("Номенклатура"));
	//		Запрос.Текст = 
	//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//		|	ВЫРАЗИТЬ(ТаблицаСоответствия.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	//		|	ТаблицаСоответствия.НоменклатураНормы КАК НоменклатураНормы
	//		|ПОМЕСТИТЬ ВТ_ТаблицаСоответствия
	//		|ИЗ
	//		|	&ТаблицаСоответствия КАК ТаблицаСоответствия
	//		|ГДЕ
	//		|	ТаблицаСоответствия.Номенклатура В(&СписокНоменклатуры)
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	ЦеныНоменклатуры.Период КАК Период,
	//		|	ЦеныНоменклатуры.Организация КАК Организация,
	//		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	//		|	ЦеныНоменклатуры.Цена КАК Цена,
	//		|	ЦеныНоменклатуры.МоментВремени КАК МоментВремени
	//		|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	//		|ИЗ
	//		|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	//		|ГДЕ
	//		|	ЦеныНоменклатуры.Активность
	//		|	И ЦеныНоменклатуры.Номенклатура В(&СписокНоменклатуры)
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	ВТ_ЦеныНоменклатуры.Организация КАК Организация,
	//		|	ВТ_ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	//		|	ВТ_ЦеныНоменклатуры.Период КАК НачалоПериода,
	//		|	МИНИМУМ(ЕСТЬNULL(ВТ_ЦеныНоменклатуры1.Период, &Период)) КАК КонецПериода,
	//		|	ВТ_ЦеныНоменклатуры.Цена КАК Цена
	//		|ПОМЕСТИТЬ ВТ_ПериодыЦен
	//		|ИЗ
	//		|	ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры1
	//		|		ПО ВТ_ЦеныНоменклатуры.Организация = ВТ_ЦеныНоменклатуры1.Организация
	//		|			И ВТ_ЦеныНоменклатуры.Номенклатура = ВТ_ЦеныНоменклатуры1.Номенклатура
	//		|			И ВТ_ЦеныНоменклатуры.МоментВремени < ВТ_ЦеныНоменклатуры1.МоментВремени
	//		|
	//		|СГРУППИРОВАТЬ ПО
	//		|	ВТ_ЦеныНоменклатуры.Организация,
	//		|	ВТ_ЦеныНоменклатуры.Номенклатура,
	//		|	ВТ_ЦеныНоменклатуры.Период,
	//		|	ВТ_ЦеныНоменклатуры.Цена
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	ВТ_Потребность.Организация КАК Организация,
	//		|	ВТ_Потребность.Сотрудник КАК Сотрудник,
	//		|	ВЫРАЗИТЬ(ВТ_Потребность.НормаВыдачи КАК Справочник.НормыВыдачиСИЗ) КАК НормаВыдачи,
	//		|	ВТ_Потребность.НоменклатураНормы КАК НоменклатураНормы,
	//		|	ВТ_Потребность.ДатаПотребности КАК ДатаПотребности,
	//		|	ВТ_Потребность.КоличествоОстаток КАК КоличествоОстаток,
	//		|	ВТ_ТаблицаСоответствия.Номенклатура КАК Номенклатура,
	//		|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи
	//		|ПОМЕСТИТЬ ВТ_Свод
	//		|ИЗ
	//		|	ВТ_Потребность КАК ВТ_Потребность
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаСоответствия КАК ВТ_ТаблицаСоответствия
	//		|		ПО ВТ_Потребность.НоменклатураНормы = ВТ_ТаблицаСоответствия.НоменклатураНормы
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	//		|		ПО ВТ_Потребность.НоменклатураНормы = НормыВыдачиСИЗСоставНормы.НоменклатураНормы
	//		|			И ВТ_Потребность.НормаВыдачи = НормыВыдачиСИЗСоставНормы.Ссылка
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	ВТ_Свод.Организация КАК Организация,
	//		|	ВТ_Свод.Сотрудник КАК Сотрудник,
	//		|	ВТ_Свод.НормаВыдачи КАК НормаВыдачи,
	//		|	ВТ_Свод.НоменклатураНормы КАК НоменклатураНормы,
	//		|	ВТ_Свод.ДатаПотребности КАК ДатаПотребности,
	//		|	ВТ_Свод.КоличествоОстаток КАК КоличествоОстаток,
	//		|	ВТ_Свод.Номенклатура КАК Номенклатура,
	//		|	ВТ_Свод.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	//		|	ЕСТЬNULL(ВТ_ПериодыЦен.Цена, 0) КАК Цена
	//		|ИЗ
	//		|	ВТ_Свод КАК ВТ_Свод
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыЦен КАК ВТ_ПериодыЦен
	//		|		ПО ВТ_Свод.Организация = ВТ_ПериодыЦен.Организация
	//		|			И ВТ_Свод.Номенклатура = ВТ_ПериодыЦен.Номенклатура
	//		|			И ВТ_Свод.ДатаПотребности > ВТ_ПериодыЦен.НачалоПериода
	//		|			И ВТ_Свод.ДатаПотребности <= ВТ_ПериодыЦен.КонецПериода
	//		|
	//		|УПОРЯДОЧИТЬ ПО
	//		|	ДатаПотребности
	//		|ИТОГИ
	//		|	МИНИМУМ(КоличествоОстаток)
	//		|ПО
	//		|	ВТ_Свод.НормаВыдачи.ВидВыдачиСИЗ,
	//		|	НоменклатураНормы,
	//		|	НормаВыдачи,
	//		|	ДатаПотребности";
	//		
	//		РезультатЗапроса = Запрос.Выполнить();
	//		
	//		ВыборкаВидВыдачиСИЗ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//		Пока ВыборкаВидВыдачиСИЗ.Следующий() Цикл 
	//			
	//			
	//			ВыборкаНоменклатураНормы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//			Пока ВыборкаНоменклатураНормы.Следующий() Цикл 
	//				
	//				ВыборкаНормаВыдачи = ВыборкаНоменклатураНормы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//				Пока ВыборкаНормаВыдачи.Следующий() Цикл 
	//					
	//					ВыборкаДатапотребности = ВыборкаНормаВыдачи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//					Пока ВыборкаДатапотребности.Следующий() Цикл 
	//						
	//						НужноРаспределить = ВыборкаДатапотребности.КоличествоОстаток;
	//						
	//						Выборка = ВыборкаДатапотребности.Выбрать();
	//						Пока Выборка.Следующий() И НужноРаспределить > 0 Цикл
	//							
	//							СтруктураОтбора = Новый Структура("Номенклатура",Выборка.Номенклатура);
	//							
	//							МассивНайденныхСтрок = ТаблицаДанных.НайтиСтроки(СтруктураОтбора);
	//							Для Каждого НайденнаяСтрока из МассивНайденныхСтрок Цикл
	//								
	//								Если НайденнаяСтрока.Количество > 0 и НужноРаспределить > 0 Тогда
	//									
	//									НоваяСтрока = НовыйДокумент.Товары.Добавить();
	//									НоваяСтрока.Сотрудник 				   = Выборка.Сотрудник;
	//									НоваяСтрока.НормаВыдачи 		 	   = Выборка.НормаВыдачи;
	//									НоваяСтрока.НоменклатураНормы 		   = Выборка.НоменклатураНормы;
	//									
	//									НовыйДокумент.ВидВыдачиСИЗ = Выборка.НормаВыдачи.ВидВыдачиСИЗ;
	//									
	//									НоваяСтрока.ПериодичностьВыдачи 	   = Выборка.ПериодичностьВыдачи;
	//									НоваяСтрока.КоличествоПотребность 	   = Выборка.КоличествоОстаток;
	//									НоваяСтрока.Номенклатура 			   = НайденнаяСтрока.Номенклатура;
	//									НоваяСтрока.ХарактеристикаНоменклатуры = НайденнаяСтрока.ХарактеристикаНоменклатуры;
	//									
	//									НоваяСтрока.Количество                 = Мин(НужноРаспределить,НайденнаяСтрока.Количество);
	//									НоваяСтрока.Цена                       = Выборка.Цена;
	//									НоваяСтрока.Сумма					   = НоваяСтрока.Количество * НоваяСтрока.Цена;
	//									
	//									Если НовыйДокумент.Организация.ИспользоватьАлгоритм_0_0_1_2 Тогда
	//										НоваяСтрока.ДатаВыдачи = НовыйДокумент.ДатаДокумента;
	//									Иначе
	//										НоваяСтрока.ДатаВыдачи = Выборка.ДатаПотребности;
	//									КонецЕсли;					
	//									
	//									НайденнаяСтрока.Количество             = НайденнаяСтрока.Количество - НоваяСтрока.Количество;
	//									НужноРаспределить                      = НужноРаспределить - НоваяСтрока.Количество; 
	//									
	//								КонецЕсли;
	//								
	//							КонецЦикла;
	//							
	//							//удаляем строки с нулевым количеством.
	//							
	//							СтруктураПоиска = Новый Структура("Количество",0);
	//							МассивНайденныхСтрок = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
	//							Для Каждого НайденнаяСтрока из МассивНайденныхСтрок Цикл 
	//								ТаблицаДанных.Удалить(НайденнаяСтрока);								
	//							КонецЦикла;
	//							
	//							
	//						КонецЦикла;
	//					КонецЦикла;
	//				КонецЦикла;
	//			КонецЦикла;
	//		КонецЦикла;
	//		
	//		
	//		Если ТаблицаДанных.Количество() <> 0 Тогда
	//			
	//			ТекстОшибки = "";
	//			Для Каждого СтрокаТаблицы из ТаблицаДанных Цикл					
	//				ТекстОшибки = ТекстОшибки + "Не удалось закрыть потребность.По товару: " + СтрокаТаблицы.Номенклатура + " превышена потребность. " + Символы.ПС;										
	//			КонецЦикла;
	//			
	//			Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("ERROR",ТекстОшибки);
	//			
	//		КонецЕсли;
	//		
	//		Попытка
	//			
	//			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	//			Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("OK");
	//			
	//		Исключение
	//			
	//			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	//			
	//			ТекстОшибки = "Не удалось выполнить проведение выдачи №:" + НовыйДокумент.Номер + " от " + НовыйДокумент.Дата;
	//			Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("ERROR",ТекстОшибки);
	//			
	//		КонецПопытки;
	//		
	//	КонецЕсли;
	//	
	//Исключение
	//	
	//	Инфо = ИнформацияОбОшибке();
	//	Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("ERROR",ПодробноеПредставлениеОшибки(Инфо));
	//	
	//КонецПопытки;
	
КонецФункции // ЗагрузитьВыдачу()

Функция ЗагрузитьВыдачу(ВходящиеДанные) Экспорт
	
	Попытка	
		
		ТекстОшибки = "";
		ТекстОшибкиВВендинг = "Возникли проблемы с выдачей. Пожалуйста, обратитесь на склад";

		ВходящаяТаблица = ВходящиеДанные.DATA.Items;
		
		КодСинхронизацииВендинг		 = ВходящаяТаблица[0].BOX_ID;
		ИдентификаторСотрудника		 = ВходящаяТаблица[0].USER_TAB;
		// {ЮМадатов (11.08.21): <#108824>
		СверхНорм					 = ?(НЕ ЗначениеЗаполнено(ВходящаяТаблица[0].EXTRA_NORM), Ложь, ВходящаяТаблица[0].EXTRA_NORM);
		ИдентификаторРуководителя    = ?(НЕ ЗначениеЗаполнено(ВходящаяТаблица[0].EXECUTOR_TAB), "", ВходящаяТаблица[0].EXECUTOR_TAB);
		// } ЮМадатов (11.08.21): <#108824>
		
		СтруктураРеквизитов = ОсновныеРеквизитыПоЗагрузкеВыдачи(КодСинхронизацииВендинг,ИдентификаторСотрудника,ИдентификаторРуководителя);	
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаДанных.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаДанных.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 3)));
		
		Для Каждого СтрокаВходящейТаблицы из ВходящаяТаблица Цикл 
			
			НоваяСтрока  = ТаблицаДанных.Добавить();
			
			Ссылка = ПолучитьСсылкуСправочникаПоИдентификатору("Номенклатура",СтрокаВходящейТаблицы.ITEM_ID);
			
			Если НЕ ЗначениеЗаполнено(Ссылка) Тогда 
				Ссылка = ПолучитьСсылкуСправочникаПоИдентификатору("ХарактеристикиНоменклатуры",СтрокаВходящейТаблицы.ITEM_ID);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ссылка) Тогда 
				
				Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда 
					НоваяСтрока.Номенклатура = Ссылка;
				Иначе
					НоваяСтрока.Номенклатура = Ссылка.Владелец;
					НоваяСтрока.ХарактеристикаНоменклатуры = Ссылка;
				КонецЕсли;
				
				НоваяСтрока.Количество = СтрокаВходящейТаблицы.QUANTITY;
				Если НоваяСтрока.Количество <> 1 Тогда
					ТекстОшибки = ТекстОшибки + "По товару " + НоваяСтрока.Номенклатура + " с размером: " + НоваяСтрока.ХарактеристикаНоменклатуры + " количество = " + НоваяСтрока.Количество + Символы.ПС;
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = ТекстОшибки + "Не удалось найти элемент справочника Номенклатура/Характеристика номенклатуры по ID: " + СтрокаВходящейТаблицы.ITEM_ID + Символы.ПС;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаДанных.Количество() > 1 Тогда			
			ТекстОшибки = ТекстОшибки + "Входящая таблица содержит более одной записи. Количество записей: " + ВходящаяТаблица.Количество();			
		КонецЕсли;
		
		// {ЮМадатов (12.08.21): <#108824>
		Если СверхНорм И Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатПроизвольнойВыдачи = ПроизвольнаяВыдача(ТаблицаДанных, СтруктураРеквизитов);
			Если ЗначениеЗаполнено(РезультатПроизвольнойВыдачи.Ошибка) Тогда
				Если РезультатПроизвольнойВыдачи.Свойство("ПроизвольнаяВыдача") Тогда
					Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("ERROR",ТекстОшибкиВВендинг,РезультатПроизвольнойВыдачи.Ошибка,ИдентификаторСотрудника,РезультатПроизвольнойВыдачи.ПроизвольнаяВыдача);
				Иначе
					Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("ERROR",ТекстОшибкиВВендинг,РезультатПроизвольнойВыдачи.Ошибка,ИдентификаторСотрудника);
				КонецЕсли;
			Иначе	
			    Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("OK");
			КонецЕсли; 
		КонецЕсли; 
		// } ЮМадатов (12.08.21): <#108824>
		
		НовыйДокумент 						= Документы.ВыдачаСредствЗащитыСотруднику.СоздатьДокумент();
		НовыйДокумент.ВидОперации 			= Перечисления.ВидыОперацийВыдачиСИЗ.ФактическаяВыдача;
		НовыйДокумент.Дата 					= ТекущаяДата();
		НовыйДокумент.Организация 			= СтруктураРеквизитов.Организация;
		НовыйДокумент.Склад 				= СтруктураРеквизитов.Склад;
		НовыйДокумент.Сотрудник 			= СтруктураРеквизитов.Сотрудник;
		НовыйДокумент.МОЛ 					= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(СтруктураРеквизитов.Склад,СтруктураРеквизитов.Организация);
		
		НовыйДокумент.УстановитьНовыйНомер();
		
		Для Каждого СтрокаТаблицы из ТаблицаДанных Цикл 
			
			НоваяСтрока = НовыйДокумент.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			
		КонецЦикла;
		
		ТекстОшибки = ТекстОшибки + СтруктураРеквизитов.ТекстОшибки;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
			
			//появилась какая то ошибка, которых быть не должно:
			//1. По идентификатору несколько сотрудников
			//2. По идентификатору сотрудник не найден
			//3. По идентификатору не найден склад
			//4. По ГУИДу не найдена номенклатура / характеристика
			//6. Количество по товару <> 1
			//7. Количество позиций в пакете больше 1.
			
			НовыйДокумент.Комментарий = ТекстОшибки;
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			
			Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("ERROR",ТекстОшибкиВВендинг,ТекстОшибки,ИдентификаторСотрудника,НовыйДокумент.Ссылка);
			
		КонецЕсли;
		
		//заполняем документ.

		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;   		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		Запрос.Текст = ПолучитьТекстЗапросаНормамВыдачи();
		
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		Запрос.УстановитьПараметр("ПериодРасчета", ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(Неопределено));			
		Запрос.УстановитьПараметр("Организация",  СтруктураРеквизитов.Организация);
		Запрос.УстановитьПараметр("Сотрудник",    СтруктураРеквизитов.Сотрудник);
		Запрос.УстановитьПараметр("СверхНорм",    Ложь);
	
		МассивВидовВыдачи = Новый Массив;
		МассивВидовВыдачи.Добавить(Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача);
		МассивВидовВыдачи.Добавить(Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача);
		
		Запрос.УстановитьПараметр("МассивВидовВыдачи", МассивВидовВыдачи);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ТаблицаНоменклатурыНормСотрудников 	= Результат[2].Выгрузить();
		ТаблицаСоответствия 				= ПроцедурыРаботыСНормамиСервер.ПолучитьСоответствияНоменклатурыДляСотрудников(ТаблицаНоменклатурыНормСотрудников,ПроцедурыРаботыСНормамиСервер.ПолучитьГраницуАнализаПоДокументу(""));
		
		Запрос.УстановитьПараметр("ТаблицаСоответствия",ТаблицаСоответствия);
		Запрос.УстановитьПараметр("СписокНоменклатуры" ,ТаблицаДанных.ВыгрузитьКолонку("Номенклатура"));
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ТаблицаСоответствия.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ТаблицаСоответствия.НоменклатураНормы КАК НоменклатураНормы
		|ПОМЕСТИТЬ ВТ_ТаблицаСоответствия
		|ИЗ
		|	&ТаблицаСоответствия КАК ТаблицаСоответствия
		|ГДЕ
		|	ТаблицаСоответствия.Номенклатура В(&СписокНоменклатуры)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.Период КАК Период,
		|	ЦеныНоменклатуры.Организация КАК Организация,
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Цена КАК Цена,
		|	ЦеныНоменклатуры.МоментВремени КАК МоментВремени
		|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|ГДЕ
		|	ЦеныНоменклатуры.Активность
		|	И ЦеныНоменклатуры.Номенклатура В(&СписокНоменклатуры)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ЦеныНоменклатуры.Организация КАК Организация,
		|	ВТ_ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВТ_ЦеныНоменклатуры.Период КАК НачалоПериода,
		|	МИНИМУМ(ЕСТЬNULL(ВТ_ЦеныНоменклатуры1.Период, &Период)) КАК КонецПериода,
		|	ВТ_ЦеныНоменклатуры.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ПериодыЦен
		|ИЗ
		|	ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры1
		|		ПО ВТ_ЦеныНоменклатуры.Организация = ВТ_ЦеныНоменклатуры1.Организация
		|			И ВТ_ЦеныНоменклатуры.Номенклатура = ВТ_ЦеныНоменклатуры1.Номенклатура
		|			И ВТ_ЦеныНоменклатуры.МоментВремени < ВТ_ЦеныНоменклатуры1.МоментВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ЦеныНоменклатуры.Организация,
		|	ВТ_ЦеныНоменклатуры.Номенклатура,
		|	ВТ_ЦеныНоменклатуры.Период,
		|	ВТ_ЦеныНоменклатуры.Цена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыданныеСредстваЗащитыОстатки.Сотрудник КАК Сотрудник,
		|	ВыданныеСредстваЗащитыОстатки.НормаВыдачи КАК НормаВыдачи,
		|	ВыданныеСредстваЗащитыОстатки.НоменклатураНормы КАК НоменклатураНормы,
		|	СУММА(ВыданныеСредстваЗащитыОстатки.КоличествоОстаток) КАК КоличествоВыдано,
		|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи КАК ДатаВыдачи
		|ПОМЕСТИТЬ ВТ_Выдано
		|ИЗ
		|	РегистрНакопления.ВыданныеСредстваЗащиты.Остатки(
		|			&ПериодРасчета,
		|			Организация = &Организация
		|				И Сотрудник = &Сотрудник
		|				И НормаВыдачи.ВидВыдачиСИЗ В (&МассивВидовВыдачи)) КАК ВыданныеСредстваЗащитыОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыданныеСредстваЗащитыОстатки.Сотрудник,
		|	ВыданныеСредстваЗащитыОстатки.НормаВыдачи,
		|	ВыданныеСредстваЗащитыОстатки.НоменклатураНормы,
		|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Выдано.Сотрудник КАК Сотрудник,
		|	ВТ_Выдано.НоменклатураНормы КАК НоменклатураНормы,
		|	МАКСИМУМ(ВТ_Выдано.ДатаВыдачи) КАК ДатаВыдачи
		|ПОМЕСТИТЬ ВТ_МаксимальнаяДатаВыдачи
		|ИЗ
		|	ВТ_Выдано КАК ВТ_Выдано
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Выдано.Сотрудник,
		|	ВТ_Выдано.НоменклатураНормы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Выдано.Сотрудник КАК Сотрудник,
		|	ВТ_Выдано.НормаВыдачи КАК НормаВыдачи,
		|	ВТ_Выдано.НоменклатураНормы КАК НоменклатураНормы,
		|	ВТ_Выдано.КоличествоВыдано КАК КоличествоВыдано,
		|	ВТ_Выдано.ДатаВыдачи КАК ДатаВыдачи
		|ПОМЕСТИТЬ ВТ_ВыданоПоМаксимальнойДате
		|ИЗ
		|	ВТ_МаксимальнаяДатаВыдачи КАК ВТ_МаксимальнаяДатаВыдачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выдано КАК ВТ_Выдано
		|		ПО ВТ_МаксимальнаяДатаВыдачи.Сотрудник = ВТ_Выдано.Сотрудник
		|			И ВТ_МаксимальнаяДатаВыдачи.НоменклатураНормы = ВТ_Выдано.НоменклатураНормы
		|			И ВТ_МаксимальнаяДатаВыдачи.ДатаВыдачи = ВТ_Выдано.ДатаВыдачи
		|ГДЕ
		|	НЕ ВТ_Выдано.Сотрудник ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Потребность.Организация КАК Организация,
		|	ВТ_Потребность.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(ВТ_Потребность.НормаВыдачи КАК Справочник.НормыВыдачиСИЗ) КАК НормаВыдачи,
		|	ВТ_Потребность.НоменклатураНормы КАК НоменклатураНормы,
		|	ВТ_Потребность.ДатаПотребности КАК ДатаПотребности,
		|	ВТ_Потребность.КоличествоОстаток КАК КоличествоОстаток,
		|	ВТ_ТаблицаСоответствия.Номенклатура КАК Номенклатура,
		|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи
		|ПОМЕСТИТЬ ВТ_Свод
		|ИЗ
		|	ВТ_Потребность КАК ВТ_Потребность
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаСоответствия КАК ВТ_ТаблицаСоответствия
		|		ПО ВТ_Потребность.НоменклатураНормы = ВТ_ТаблицаСоответствия.НоменклатураНормы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
		|		ПО ВТ_Потребность.НоменклатураНормы = НормыВыдачиСИЗСоставНормы.НоменклатураНормы
		|			И ВТ_Потребность.НормаВыдачи = НормыВыдачиСИЗСоставНормы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Организация КАК Организация,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.Поставщик КАК Поставщик
		|ПОМЕСТИТЬ ВТ_ЦеныСрезПоследних
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			(Организация, Номенклатура) В
		|				(ВЫБРАТЬ
		|					ВТ_Свод.Организация КАК Организация,
		|					ВТ_Свод.Номенклатура КАК Номенклатура
		|				ИЗ
		|					ВТ_Свод КАК ВТ_Свод)) КАК ЦеныНоменклатурыСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.Организация,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Свод.Организация КАК Организация,
		|	ВТ_Свод.Сотрудник КАК Сотрудник,
		|	ВТ_Свод.НормаВыдачи КАК НормаВыдачи,
		|	ВТ_Свод.НоменклатураНормы КАК НоменклатураНормы,
		|	ВТ_Свод.ДатаПотребности КАК ДатаПотребности,
		|	ВТ_Свод.КоличествоОстаток КАК КоличествоОстаток,
		|	ВТ_Свод.Номенклатура КАК Номенклатура,
		|	ВТ_Свод.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
		|	ЕСТЬNULL(ВТ_ЦеныСрезПоследних.Цена, 0) КАК Цена,
		|	ВЫБОР
		|		КОГДА ВТ_ВыданоПоМаксимальнойДате.ДатаВыдачи ЕСТЬ NULL
		|			ТОГДА &Период
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НАЧАЛОПЕРИОДА(ВЫБОР
		|							КОГДА ВТ_Свод.ПериодичностьВыдачи.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Год)
		|								ТОГДА ДОБАВИТЬКДАТЕ(ВТ_ВыданоПоМаксимальнойДате.ДатаВыдачи, МЕСЯЦ, ВТ_Свод.ПериодичностьВыдачи.КоличествоПериодов * 12)
		|							ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТ_ВыданоПоМаксимальнойДате.ДатаВыдачи, МЕСЯЦ, ВТ_Свод.ПериодичностьВыдачи.КоличествоПериодов)
		|						КОНЕЦ, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
		|					ТОГДА &Период
		|				ИНАЧЕ ВТ_ВыданоПоМаксимальнойДате.ДатаВыдачи
		|			КОНЕЦ
		|	КОНЕЦ КАК ДатаВыдачи
		|ИЗ
		|	ВТ_Свод КАК ВТ_Свод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныСрезПоследних КАК ВТ_ЦеныСрезПоследних
		|		ПО ВТ_Свод.Организация = ВТ_ЦеныСрезПоследних.Организация
		|			И ВТ_Свод.Номенклатура = ВТ_ЦеныСрезПоследних.Номенклатура
		|			И ВТ_Свод.Номенклатура.Поставщик = ВТ_ЦеныСрезПоследних.Поставщик
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыданоПоМаксимальнойДате КАК ВТ_ВыданоПоМаксимальнойДате
		|		ПО ВТ_Свод.НоменклатураНормы = ВТ_ВыданоПоМаксимальнойДате.НоменклатураНормы
		|			И ВТ_Свод.Сотрудник = ВТ_ВыданоПоМаксимальнойДате.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПотребности";
		
		РезультатЗапроса = Запрос.Выполнить();		
		ТаблицаРезультат = РезультатЗапроса.Выгрузить();
		
		СтрокаТабличнойЧасти = НовыйДокумент.Товары[0];
		
		МассивНайденныхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура("Номенклатура",СтрокаТаблицы.Номенклатура));
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			
			//По данной номенклатуре нормы не найдены;		
			НовыйДокумент.Комментарий =  "Не удалось закрыть потребность.По товару: " + СтрокаТабличнойЧасти.Номенклатура + " превышена потребность. " + Символы.ПС;
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			
			Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("ERROR",ТекстОшибкиВВендинг,НовыйДокумент.Комментарий,ИдентификаторСотрудника,НовыйДокумент.Ссылка);
			
		Иначе
			
			НайденнаяСтрока = МассивНайденныхСтрок[0];
			
			НовыйДокумент.ВидВыдачиСИЗ = НайденнаяСтрока.НормаВыдачи.ВидВыдачиСИЗ;
			НовыйДокумент.Комментарий = "Создан с помощью сервиса Vending box";
			
			СтрокаТабличнойЧасти.Сотрудник 			   = НовыйДокумент.Сотрудник;							
			СтрокаТабличнойЧасти.НормаВыдачи           = НайденнаяСтрока.НормаВыдачи;
			СтрокаТабличнойЧасти.НоменклатураНормы     = НайденнаяСтрока.НоменклатураНормы;						
			СтрокаТабличнойЧасти.ПериодичностьВыдачи   = НайденнаяСтрока.ПериодичностьВыдачи;
			СтрокаТабличнойЧасти.КоличествоПотребность = НайденнаяСтрока.КоличествоОстаток;
			
			СтрокаТабличнойЧасти.Цена                  = НайденнаяСтрока.Цена;
			СтрокаТабличнойЧасти.Сумма                 = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
			
			Если НовыйДокумент.Организация.ИспользоватьАлгоритм_0_0_1_2 Тогда
				//СтрокаТабличнойЧасти.ДатаВыдачи = НовыйДокумент.Дата;
				СтрокаТабличнойЧасти.ДатаВыдачи = НайденнаяСтрока.ДатаВыдачи;
			Иначе
				СтрокаТабличнойЧасти.ДатаВыдачи = НайденнаяСтрока.ДатаПотребности;
			КонецЕсли;								
			
		КонецЕсли;
		
		Попытка
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("OK");
			
		Исключение
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			
			ТекстОшибки = "Не удалось выполнить проведение выдачи №:" + НовыйДокумент.Номер + " от " + НовыйДокумент.Дата;
			Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("ERROR",ТекстОшибкиВВендинг,ТекстОшибки,ИдентификаторСотрудника,НовыйДокумент.Ссылка);
			
		КонецПопытки;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		Возврат СформироватьXMLОтветПоЗагрузкеВыданныхТоваров("ERROR",ТекстОшибкиВВендинг,ПодробноеПредставлениеОшибки(Инфо),ИдентификаторСотрудника);
		
	КонецПопытки;
					
КонецФункции // ЗагрузитьВыдачу()
// {ЮМадатов (11.08.21): <#108824>
	//Функция СформироватьXMLОтветПоЗапросуНормВыдачи(USER_TAB,STATUS,ТекстОшибкиВВендинг = "",ТекстОшибки = "",FIO = Неопределено,Items = Неопределено)
Функция СформироватьXMLОтветПоЗапросуНормВыдачи(USER_TAB,STATUS,ТекстОшибкиВВендинг = "",ТекстОшибки = "",FIO = Неопределено,Items = Неопределено,EXECUTOR = Ложь)
// } ЮМадатов (11.08.21): <#108824>	
	Если STATUS = "ERROR" Тогда
		
		ЗаписьЖурналаРегистрации(нСтр("ru='Ошибка обработки пакета MT_ResponseRequestMaterials по формированию норм выдач '", "ru"),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.WebСервисы.VendingBox,
		,
		ТекстОшибки);	
		
	КонецЕсли;
	
	MT_Response = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://vending-box.com/", "MT_ResponseRequestMaterials"));
	Header      = ФабрикаXDTO.Создать(MT_Response.Свойства().Получить("Header").Тип);
	
	Header.USER_TAB = USER_TAB;
	Header.STATUS   = STATUS;
	Header.MES 		= ТекстОшибкиВВендинг;
	Header.FIO 		= FIO;
	// {ЮМадатов (11.08.21): <#108824>
	Header.EXECUTOR	= EXECUTOR;
	// } ЮМадатов (11.08.21): <#108824>
	MT_Response.Header = Header;
	
	Если Items <> неопределено Тогда 
		
		Для Каждого СтрокаТЧ из Items Цикл 			
			
			ДобавляемыеСтрокиТип = MT_Response.Свойства().Получить("Items").Тип;
			ДобавляемаяСтрока = ФабрикаXDTO.Создать(ДобавляемыеСтрокиТип);
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ХарактеристикаНоменклатуры) Тогда
				
				ИдентификаторНоменклатуры = Строка(СтрокаТЧ.ХарактеристикаНоменклатуры.УникальныйИдентификатор());
			Иначе
				ИдентификаторНоменклатуры = Строка(СтрокаТЧ.Номенклатура.УникальныйИдентификатор());
				
			КонецЕсли;
			
			ДобавляемаяСтрока.ITEM_ID  = ИдентификаторНоменклатуры;
			ДобавляемаяСтрока.QUANTITY = СтрокаТЧ.КоличествоОстаток;
			
			MT_Response.Items.Добавить(ДобавляемаяСтрока);
			
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат MT_Response
	
КонецФункции // СформироватьОтветПоЗапросуНормВыдачиСОшибкой()

Функция СформироватьXMLОтветПоЗагрузкеВыданныхТоваров(STATUS,ТекстОшибкиВВендинг = "",ТекстОшибки = "",ИдентификаторСотрудника = Неопределено,ДокументСсылка = Неопределено)
	
	Если STATUS = "ERROR" Тогда
		
		ЗаписьЖурналаРегистрации(нСтр("ru='Ошибка обработки пакета MT_ResponseMovementMaterials по загрузке выданных товаров '", "ru"),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.WebСервисы.VendingBox,
		,
		ТекстОшибки);	
		
		МенеджерЗаписи = РегистрыСведений.ЗапретВыдачиВендингБокс.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = ТекущаяДата();
		МенеджерЗаписи.Документ = ДокументСсылка;
		МенеджерЗаписи.ИдентификаторСотрудника = ИдентификаторСотрудника;
		МенеджерЗаписи.ОписаниеОшибки = ТекстОшибки;
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
	MT_Response = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://vending-box.com/", "MT_ResponseMovementMaterials"));
	Header      = ФабрикаXDTO.Создать(MT_Response.Свойства().Получить("Header").Тип);
	
	Header.STATUS   = STATUS;
	Header.MES 		= ТекстОшибкиВВендинг;
	
	MT_Response.Header = Header;
	
	Возврат MT_Response;
	
КонецФункции // СформироватьXMLОтветПоЗагрузкеВыданныхТоваров()

Функция ПолучитьТекстЗапросаНормамВыдачи()
	
	ТекстЗапроса =  
	"ВЫБРАТЬ
	|	ПотребностьВыдачиСИЗОстатки.Организация КАК Организация,
	|	ПотребностьВыдачиСИЗОстатки.Сотрудник КАК Сотрудник,
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи КАК НормаВыдачи,
	|	ПотребностьВыдачиСИЗОстатки.НоменклатураНормы КАК НоменклатураНормы,
	|	ПотребностьВыдачиСИЗОстатки.ДатаПотребности КАК ДатаПотребности,
	|	ПотребностьВыдачиСИЗОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Потребность
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(
	|			&ПериодРасчета,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник
	|				И НормаВыдачи.ВидВыдачиСИЗ В (&МассивВидовВыдачи)
	|				И ВЫБОР
	|					КОГДА &СверхНорм
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ НАЧАЛОПЕРИОДА(ДатаПотребности, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|				КОНЕЦ) КАК ПотребностьВыдачиСИЗОстатки
	|ГДЕ
	|	ПотребностьВыдачиСИЗОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник,
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность
	|ПОМЕСТИТЬ ВТ_ЗРМ
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(
	|			&ПериодРасчета,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК ЗанятыеРабочиеМестаОстатки
	|ГДЕ
	|	ЗанятыеРабочиеМестаОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Потребность.Сотрудник КАК Сотрудник,
	|	ВТ_Потребность.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ЗРМ.Подразделение КАК Подразделение,
	|	ВТ_ЗРМ.Должность КАК Должность
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗРМ КАК ВТ_ЗРМ
	|		ПО ВТ_Потребность.Сотрудник = ВТ_ЗРМ.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗРМ.Сотрудник КАК Сотрудник,
	|	ВТ_ЗРМ.Подразделение КАК Подразделение,
	|	ВТ_ЗРМ.Должность КАК Должность
	|ИЗ
	|	ВТ_ЗРМ КАК ВТ_ЗРМ";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьОсновныеРеквизитыПоПолучениюНорм(ИдентификаторСклада,ИдентификаторСотрудника)
	
	ТекстОшибки = "";
	ТекстОшибкиВВендинг = "";
	// {ЮМадатов (11.08.21): <#108824>
	//СтруктураРезультат = Новый Структура("ТекстОшибки,ТекстОшибкиВВендинг,Организация,Склад,Сотрудник,ФИОСотрудника");
	СтруктураРезультат = Новый Структура("ТекстОшибки,ТекстОшибкиВВендинг,Организация,Склад,Сотрудник,ФИОСотрудника,Руководитель,АлгоритмВыдачиСверхНорм");
	// } ЮМадатов (11.08.21): <#108824>
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СкладыВыдачиСредствЗащиты.Организация КАК Организация,
	|	СкладыВыдачиСредствЗащиты.Склад КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(СкладыВыдачиСредствЗащиты.Организация) КАК ОрганизацияПредставление
	|ПОМЕСТИТЬ ВТ_Склады
	|ИЗ
	|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
	|ГДЕ
	|	СкладыВыдачиСредствЗащиты.Склад.КодСинхронизацииВендинг = &КодСинхронизации
	|	И СкладыВыдачиСредствЗащиты.Склад.КодСинхронизацииВендинг <> """"
	|	И СкладыВыдачиСредствЗащиты.Склад.АвтоматизированнаяВыдача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.Владелец КАК Организация,
	|	Сотрудники.Наименование КАК ФИО,
	|	Сотрудники.Руководитель КАК Руководитель,
	|	ПРЕДСТАВЛЕНИЕ(Сотрудники.Владелец) КАК ОрганизацияПредставление
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Идентификатор = &Идентификатор
	|	И НЕ Сотрудники.ПометкаУдаления
	|	И Сотрудники.Идентификатор <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Склады.Организация КАК Организация,
	|	ВТ_Склады.Склад КАК Склад,
	|	ВТ_Склады.ОрганизацияПредставление КАК ОрганизацияПредставление,
	|	ВТ_Склады.Склад.АлгоритмВыдачиСверхНорм КАК АлгоритмВыдачиСверхНорм
	|ИЗ
	|	ВТ_Склады КАК ВТ_Склады
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сотрудники.Сотрудник КАК Сотрудник,
	|	ВТ_Сотрудники.Организация КАК Организация,
	|	ВТ_Сотрудники.ФИО КАК ФИО,
	|	ВТ_Сотрудники.Руководитель КАК Руководитель,
	|	ВТ_Сотрудники.ОрганизацияПредставление КАК ОрганизацияПредставление
	|ИЗ
	|	ВТ_Сотрудники КАК ВТ_Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапретВыдачиВендингБокс.ИдентификаторСотрудника КАК ИдентификаторСотрудника
	|ИЗ
	|	РегистрСведений.ЗапретВыдачиВендингБокс КАК ЗапретВыдачиВендингБокс
	|ГДЕ
	|	ЗапретВыдачиВендингБокс.ИдентификаторСотрудника = &Идентификатор";
	
	Запрос.УстановитьПараметр("Период", 		  ТекущаяДата());
	Запрос.УстановитьПараметр("Идентификатор",    ИдентификаторСотрудника);
	Запрос.УстановитьПараметр("КодСинхронизации", ИдентификаторСклада);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаСкладов    = МассивРезультатов[2].Выгрузить();		
	ТаблицаСотрудники = МассивРезультатов[3].Выгрузить();	
	
	//проверка на сотрудника
	Если ТаблицаСотрудники.Количество() = 0 Тогда
		
		ТекстОшибки 		= "В АСТБ не найден сотрудник с идентификаторм СКУД: " + ИдентификаторСотрудника + Символы.ПС;
		ТекстОшибкиВВендинг = "Не найден сотрудник с таким пропуском"; 
	ИначеЕсли ТаблицаСотрудники.Количество() > 1 Тогда  
		ТекстОшибки 	    = "В АСТБ найдено несколько пользователей с идентификатором СКУД: " + ИдентификаторСотрудника + Символы.ПС;
		ТекстОшибкиВВендинг = "Не найден сотрудник с таким пропуском"; 		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда	
		СтруктураРезультат.ТекстОшибки = ТекстОшибки;
		СтруктураРезультат.ТекстОшибкиВВендинг = ТекстОшибкиВВендинг;
		Возврат СтруктураРезультат;		
	КонецЕсли;
	
	СтрокаСотрудник = ТаблицаСотрудники[0];
	
	МассивНайденныхСтрок = ТаблицаСкладов.НайтиСтроки(Новый Структура("Организация",СтрокаСотрудник.Организация));
	Если МассивНайденныхСтрок.Количество() = 0 Тогда
		
		ШаблонСообщения = "По сотруднику: %1 с организаций: %2 не удалось получить нормы, т.к. аппарат не привязан к данной организации";
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,СтрокаСотрудник.ФИО,СтрокаСотрудник.ОрганизацияПредставление) + Символы.ПС;
		ТекстОшибкиВВендинг = "Нет норм";
		
	КонецЕсли;
	
	Если НЕ МассивРезультатов[4].Пустой() Тогда 
		ТекстОшибки = ТекстОшибки + "По сотруднику: " + СтрокаСотрудник.ФИО + " не удалось получить нормы, т.к были ошибки в закрытии потребности";		
		ТекстОшибкиВВендинг = "Возникли проблемы с выдачей. Пожалуйста, обратитесь на склад";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда	
		СтруктураРезультат.ТекстОшибки = ТекстОшибки;
		СтруктураРезультат.ТекстОшибкиВВендинг = ТекстОшибкиВВендинг;
		Возврат СтруктураРезультат;		
	КонецЕсли; 
	
	СтруктураРезультат.Организация  		   = СтрокаСотрудник.Организация;
	СтруктураРезультат.Сотрудник     		   = СтрокаСотрудник.Сотрудник;
	СтруктураРезультат.Склад        		   = ТаблицаСкладов[0].Склад;
	СтруктураРезультат.АлгоритмВыдачиСверхНорм = ТаблицаСкладов[0].АлгоритмВыдачиСверхНорм;
	СтруктураРезультат.ФИОСотрудника 		   = СтрокаСотрудник.ФИО;
	// {ЮМадатов (11.08.21): <#108824>
	СтруктураРезультат.Руководитель 		   = СтрокаСотрудник.Руководитель;
	// } ЮМадатов (11.08.21): <#108824>
	
	Возврат СтруктураРезультат;
	
КонецФункции // РезультатЗаполненияСотрудникаИСклада()
// {ЮМадатов (11.08.21): <#108824>
//Функция ОсновныеРеквизитыПоЗагрузкеВыдачи(ИдентификаторСклада,ИдентификаторСотрудника)
Функция ОсновныеРеквизитыПоЗагрузкеВыдачи(ИдентификаторСклада,ИдентификаторСотрудника,ИдентификаторРуководителя)
// } ЮМадатов (11.08.21): <#108824>	
	ТекстОшибки = "";
	Склад 		= Неопределено;
	Организация = Неопределено;
	Сотрудник   = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.КодСинхронизацииВендинг = &КодСинхронизации
	|	И Склады.КодСинхронизацииВендинг <> """"
	|	И Склады.АвтоматизированнаяВыдача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.Владелец КАК Организация,
	|	Сотрудники.Наименование КАК ФИО,
	|	ПРЕДСТАВЛЕНИЕ(Сотрудники.Владелец) КАК ОрганизацияПредставление
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Идентификатор = &Идентификатор
	|	И НЕ Сотрудники.ПометкаУдаления
	|	И Сотрудники.Идентификатор <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Руководитель,
	|	Сотрудники.Владелец КАК Организация,
	|	Сотрудники.Наименование КАК ФИО,
	|	ПРЕДСТАВЛЕНИЕ(Сотрудники.Владелец) КАК ОрганизацияПредставление
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.ПометкаУдаления
	|	И Сотрудники.Идентификатор = &ИдентификаторРуководителя
	|	И Сотрудники.Идентификатор <> """"
	|	И Сотрудники.Руководитель = ИСТИНА";
	
	Запрос.УстановитьПараметр("Идентификатор",    ИдентификаторСотрудника);
	Запрос.УстановитьПараметр("КодСинхронизации", ИдентификаторСклада);
	// {ЮМадатов (11.08.21): <#108824>
	Запрос.УстановитьПараметр("ИдентификаторРуководителя", ИдентификаторРуководителя);
	// } ЮМадатов (11.08.21): <#108824>
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаСклад = МассивРезультатов[0].Выбрать();
	Если НЕ ВыборкаСклад.Следующий() Тогда 
		
		ТекстОшибки = "В АСТБ не найден склад с кодом синхронизации вендинг: " + ИдентификаторСклада + Символы.ПС;	
	Иначе
		Склад = ВыборкаСклад.Склад;
		
	КонецЕсли;
	
	ВыборкаСотрудники = МассивРезультатов[1].Выбрать();
	Если ВыборкаСотрудники.Количество() = 0 Тогда
		
		ТекстОшибки = ТекстОшибки + "В АСТБ не найден сотрудник с идентификаторм СКУД: " + ИдентификаторСотрудника + Символы.ПС;
	ИначеЕсли ВыборкаСотрудники.Количество() > 1 Тогда  
		ТекстОшибки = ТекстОшибки + "В АСТБ найдено несколько пользователей с идентификатором СКУД: " + ИдентификаторСотрудника + Символы.ПС;
		
	Иначе
		
		ВыборкаСотрудники.Следующий();
		
		Сотрудник   = ВыборкаСотрудники.Сотрудник;
		Организация = ВыборкаСотрудники.Организация;
		
	КонецЕсли;
	
	// {ЮМадатов (11.08.21): <#108824>
	Если ЗначениеЗаполнено(ИдентификаторРуководителя) Тогда
		
		ВыборкаСотрудники = МассивРезультатов[2].Выбрать();
		
		Если ВыборкаСотрудники.Количество() = 0 И ЗначениеЗаполнено(ИдентификаторРуководителя) Тогда
			ТекстОшибки = ТекстОшибки + "В АСТБ не найден руководитель с идентификаторм СКУД: " + ИдентификаторРуководителя + Символы.ПС;
		ИначеЕсли ВыборкаСотрудники.Количество() И ЗначениеЗаполнено(ИдентификаторРуководителя) > 1 Тогда  
			ТекстОшибки = ТекстОшибки + "В АСТБ найдено несколько руководителей с идентификатором СКУД: " + ИдентификаторРуководителя + Символы.ПС;
		ИначеЕсли Не ЗначениеЗаполнено(ИдентификаторРуководителя) Тогда 
			Руководитель = Справочники.Сотрудники.ПустаяСсылка();
		Иначе
			ВыборкаСотрудники.Следующий();
			Руководитель   = ВыборкаСотрудники.Руководитель;
		КонецЕсли;
		
	Иначе
		
		Руководитель = Неопределено;	
		
	КонецЕсли; 
		
	//СтруктураРеквизитов = Новый Структура("Организация,Сотрудник,Склад,ТекстОшибки");
	СтруктураРеквизитов = Новый Структура("Организация,Сотрудник,Склад,ТекстОшибки,Руководитель");
	СтруктураРеквизитов.Руководитель = Руководитель;
	// } ЮМадатов (11.08.21): <#108824>
	
	СтруктураРеквизитов.Организация = Организация;
	СтруктураРеквизитов.Сотрудник   = Сотрудник;
	СтруктураРеквизитов.Склад		= Склад;
	СтруктураРеквизитов.ТекстОшибки = ТекстОшибки;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции // ПолучитьОсновныеРеквизитыПоЗагрузкеВыдачи()

Функция ПолучитьСсылкуСправочникаПоИдентификатору(ИмяОбъекта,ИдентификаторСправочника)
	
	Идентификатор = Новый УникальныйИдентификатор(ИдентификаторСправочника);
	Ссылка = Справочники[ИмяОбъекта].ПолучитьСсылку(Идентификатор);
	
	Если Ссылка.ПолучитьОбъект() = Неопределено Тогда 
		Возврат Справочники[ИмяОбъекта].ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции // ПолучитьСсылкуПоИдентификатору()

Функция ЗагрузитьПеремещение(ВходящиеДанные) Экспорт
	
	Попытка
		
		СкладОтправитель = Неопределено;
		СкладПолучатель  = Неопределено;
		Организация 	 = Неопределено;
		
		ИдентификаторСклада = ВходящиеДанные.BOX_ID;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Склад,
		|	Склады.СкладОтправитель КАК СкладОтправитель,
		|	Склады.ТранзитныйСклад КАК СкладТранзитный
		|ПОМЕСТИТЬ ВТ_Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.КодСинхронизацииВендинг = &КодСинхронизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СкладыВыдачиСредствЗащиты.Организация КАК Организация,
		|	СкладыВыдачиСредствЗащиты.Склад КАК Склад,
		|	ПРЕДСТАВЛЕНИЕ(СкладыВыдачиСредствЗащиты.Организация) КАК ОрганизацияПредставление,
		|	СкладыВыдачиСредствЗащиты.Склад.ТранзитныйСклад КАК СкладТранзитный,
		|	СкладыВыдачиСредствЗащиты.Склад.СкладОтправитель КАК СкладОтправитель
		|ИЗ
		|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
		|ГДЕ
		|	СкладыВыдачиСредствЗащиты.Склад В
		|			(ВЫБРАТЬ
		|				ВТ_Склад.Склад КАК Склад
		|			ИЗ
		|				ВТ_Склад КАК ВТ_Склад)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Склад.Склад КАК Склад,
		|	ВТ_Склад.СкладОтправитель КАК СкладОтправитель,
		|	ВТ_Склад.СкладТранзитный КАК СкладТранзитный
		|ИЗ
		|	ВТ_Склад КАК ВТ_Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОрганизацияПоУмолчанию";
		
		Запрос.УстановитьПараметр("КодСинхронизации", ИдентификаторСклада);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ТаблицаСкладовИОрганизаций = МассивРезультатов[1].Выгрузить();
		
		//склад отправитель, получатель
		ВыборкаСклад = МассивРезультатов[2].Выбрать();
		Если ВыборкаСклад.Следующий() Тогда 
			
			Если ВходящиеДанные.TypeDocument = "Upload" Тогда //загрузка аппарата
				
				Если ВходящиеДанные.TypeOperation = "In layout" Тогда //на склад транзитный
					
					СкладОтправитель = ВыборкаСклад.СкладОтправитель;
					СкладПолучатель  = ВыборкаСклад.СкладТранзитный;
					
				Иначе
					
					//подтверждение загрузки. с транзитного на вендинг
					СкладОтправитель = ВыборкаСклад.СкладТранзитный;
					СкладПолучатель  = ВыборкаСклад.Склад;
					
				КонецЕсли;
				
			Иначе
				
				//прямая загрузка с вендига на отправитель
				
				СкладОтправитель = ВыборкаСклад.Склад;
				СкладПолучатель  = ВыборкаСклад.СкладОтправитель;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//определяем организацию
		//Если не ведется учет в разрезе, то орг по умолчанию
		//Иначе если в таблице соответствий одна привязка к организации, то берем ее. Во всех остальных случаях заполняет пользователь.
		
		Если Константы.НеВестиУчетОстатковНоменклатурыПоОрганизации.Получить() Тогда 
			
			ВыборкаОрганизации = МассивРезультатов[3].Выбрать();
			Если ВыборкаОрганизации.Следующий() Тогда 
				
				Организация = ВыборкаОрганизации.Ссылка;
				
			КонецЕсли;
			
		Иначе
			
			Если ТаблицаСкладовИОрганизаций.Количество() = 1 Тогда
				
				Организация = ТаблицаСкладовИОрганизаций[0].Организация;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НовыйДокумент = Документы.ПеремещениеНоменклатуры.СоздатьДокумент();
		НовыйДокумент.Дата 					= ТекущаяДата();
		НовыйДокумент.Организация 			= Организация;
		НовыйДокумент.СкладПолучатель 		= СкладПолучатель;
		НовыйДокумент.МОЛСкладаПолучателя	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(НовыйДокумент.СкладПолучатель,НовыйДокумент.Организация);
		НовыйДокумент.СкладОтправитель		= СкладОтправитель;
		НовыйДокумент.МОЛСкладаОтправителя	= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(НовыйДокумент.СкладОтправитель,НовыйДокумент.Организация);
		
		ТекстОшибки = "";
		
		Для Каждого СтрокаВходящейТаблицы из ВходящиеДанные.Items.Item Цикл
			
			НоваяСтрока  = НовыйДокумент.Товары.Добавить();
			
			Ссылка = ПолучитьСсылкуСправочникаПоИдентификатору("Номенклатура",СтрокаВходящейТаблицы.ITEM_ID);
			
			Если НЕ ЗначениеЗаполнено(Ссылка) Тогда 
				Ссылка = ПолучитьСсылкуСправочникаПоИдентификатору("ХарактеристикиНоменклатуры",СтрокаВходящейТаблицы.ITEM_ID);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ссылка) Тогда 
				
				Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда 
					НоваяСтрока.Номенклатура = Ссылка;
				Иначе
					НоваяСтрока.Номенклатура = Ссылка.Владелец;
					НоваяСтрока.ХарактеристикаНоменклатуры = Ссылка;
				КонецЕсли;
				
				НоваяСтрока.Количество = СтрокаВходящейТаблицы.QUANTITY;
				
			Иначе
				
				ТекстОшибки = ТекстОшибки + "Не удалось найти элемент справочника Номенклатура/Характеристика номенклатуры по ID: " + СтрокаВходящейТаблицы.ITEM_ID + Символы.ПС;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НовыйДокумент.Комментарий = "Загружен из базы Vending Box'a по документу Выгрузка/Загрузка с №: " + ВходящиеДанные.DocNumber + "." + ТекстОшибки;
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		
		Если ЗначениеЗаполнено(ТекстОшибки) ИЛИ НЕ НовыйДокумент.ПроверитьЗаполнение() Тогда 
			
			ТекстОшибки = "Необходимо выполнить проведение документа в ручном режиме : " + НовыйДокумент.Ссылка;
			Возврат СформироватьXMLОтветПоЗагрузкеПеремещения("ERROR",ТекстОшибки);		
			
		Иначе
			
			
			Попытка
				
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				Возврат СформироватьXMLОтветПоЗагрузкеПеремещения("OK","Документ: " + НовыйДокумент.Ссылка + " загружен успешно");	
				
			Исключение
				
				ТекстОшибки = "Необходимо выполнить проведение документа в ручном режиме : " + НовыйДокумент.Ссылка;
				Возврат СформироватьXMLОтветПоЗагрузкеПеремещения("ERROR",ТекстОшибки);					
				
			КонецПопытки;
			
		КонецЕсли;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		Возврат СформироватьXMLОтветПоЗагрузкеПеремещения("ERROR",ПодробноеПредставлениеОшибки(Инфо));		
		
	КонецПопытки;
	
КонецФункции // ЗагрузитьПеремещение()

Функция СформироватьXMLОтветПоЗагрузкеПеремещения(STATUS,MES = Неопределено)
	
	Если STATUS = "ERROR" Тогда
		
		ЗаписьЖурналаРегистрации(нСтр("ru='Ошибка обработки пакета MT_UploadDownload '", "ru"),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.WebСервисы.VendingBox,
		,
		MES);	
		
	КонецЕсли;
	
	MT_Response = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://vending-box.com/", "MT_ResponseUploadDownload"));
	Header      = ФабрикаXDTO.Создать(MT_Response.Свойства().Получить("Header").Тип);
	
	Header.STATUS   = STATUS;
	Header.MES 		= MES;
	
	MT_Response.Header = Header;
	
	Возврат MT_Response;
	
КонецФункции // СформироватьXMLОтветПоЗагрузкеПеремещения()

#КонецОбласти

#Область ВыгрузкаНСИ

Процедура ВыгрузитьНСИ() Экспорт
	
	Попытка
		
		ВыборкаУзлов = ПланыОбмена.ВендингБокс.Выбрать();
		
		Пока ВыборкаУзлов.Следующий() Цикл
			
			Если ВыборкаУзлов.Ссылка = ПланыОбмена.ВендингБокс.ЭтотУзел() Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНоменклатуры = Новый Массив;
			
			КаталогВыгрузкиНСИ      = ВыборкаУзлов.ПутьККаталогуВыгрузкиНСИ;
			КаталогАрхиваНСИ        = ВыборкаУзлов.ПутьКАрхивуВыгрузкиНСИ;
			КаталогВыгрузкиКартинок = ВыборкаУзлов.ПутьККаталогуКартинок;
			
			Если НЕ ЗначениеЗаполнено(КаталогВыгрузкиНСИ) ИЛИ Не ЗначениеЗаполнено(КаталогВыгрузкиКартинок) ИЛИ НЕ ЗначениеЗаполнено(КаталогАрхиваНСИ) Тогда 
				
				ТекстОшибки = "В плане обмена: " + ВыборкаУзлов.Ссылка + " не заполнен каталог выгрузки НСИ или каталог выгрузки картинок ИЛИ каталог архива выгрузки НСИ";
				
				//регистрируем ошибку в журнале
				ЗаписьЖурналаРегистрации(нСтр("ru='Ошибка при выгрузки НСИ в excel '", "ru"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ПланыОбмена.ВендингБокс,
				,
				ТекстОшибки);
				
				Продолжить;
			КонецЕсли;
			
			ПоследнийСимвол = Прав(КаталогВыгрузкиНСИ,1);
			Если НЕ (ПоследнийСимвол = "/" ИЛИ ПоследнийСимвол = "\") Тогда
				КаталогВыгрузкиНСИ = КаталогВыгрузкиНСИ + "\";
			КонецЕсли;
			
			ПоследнийСимвол = Прав(КаталогАрхиваНСИ,1);
			Если НЕ (ПоследнийСимвол = "/" ИЛИ ПоследнийСимвол = "\") Тогда
				КаталогАрхиваНСИ = КаталогАрхиваНСИ + "\";
			КонецЕсли;
			
			ИмяФайлаКопии = "Номенклатура от " + Формат(ТекущаяДата(), "ДЛФ=DT");
			ИмяФайлаКопии = СтрЗаменить(ИмяФайлаКопии,".","");
			ИмяФайлаКопии = СтрЗаменить(ИмяФайлаКопии,":","");
			
			ИмяФайла = "Номенклатура"; 
			
			ПутьКФайлу = КаталогВыгрузкиНСИ + ИмяФайла;
			ПутьКФайлуАрхив = КаталогАрхиваНСИ + ИмяФайлаКопии; 
			
			ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ВыборкаУзлов.Ссылка,1);
			
			Пока ВыборкаИзменений.Следующий() Цикл
				
				ДанныеВыборки = ВыборкаИзменений.Получить();
				
				Если ТипЗнч(ДанныеВыборки) = Тип("СправочникОбъект.Номенклатура") Тогда
					МассивНоменклатуры.Добавить(ДанныеВыборки.Ссылка);
				КонецЕсли;
				
			КонецЦикла;
			
			Если МассивНоменклатуры.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОшибкаExcel      = Ложь;
			ОшибкаOpenOffice = Ложь;
			
			ТекстОшибкиExcel      = "";
			ТекстОшибкиOpenOffice = "";
			
			Попытка
				
				Excel  				= Новый COMОбъект("Excel.Application");  
				Excel.DisplayAlerts = Ложь;
				
				Книга = Excel.WorkBooks.Add();
				
				//создадим три листа. Возможно в каких то версия создает автоматически с тремя листами
				//но ничего страшного что будет больше, главное исключить программную ошибку.
				Книга.Sheets.Add();
				Книга.Sheets.Add();
				
			Исключение
				
				ТекстОшибкиExcel 	= "Ошибка создания обьекта Microsoft Excel" + ОписаниеОшибки();
				ОшибкаExcel 		= Истина;
				
			КонецПопытки;
			
			Если НЕ ОшибкаExcel Тогда 
				
				СтруктураТаблиц = СтруктураТаблицДляОбработкиНСИ(МассивНоменклатуры);
				
				СформироватьЛистНоменклатуры_Excel(Книга,СтруктураТаблиц.ТаблицаНоменклатуры);
				СформироватьЛистГруппНоменклатуры_Excel(Книга,СтруктураТаблиц.ТаблицаГруппНоменклатуры);
				СформироватьЛистЕдиницИзмерения_Excel(Книга,СтруктураТаблиц.ТаблицаЕдиницИзмерения);		
				ЗаписатьИзображенияВКаталог(СтруктураТаблиц.ТаблицаФайлов,КаталогВыгрузкиКартинок);
				
				//Книга.SaveAs(ПутьКФайлу + ".xlsx");				
				Excel.ActiveWorkbook.SaveCopyAs(ПутьКФайлу + ".xls");
				Excel.ActiveWorkbook.SaveCopyAs(ПутьКФайлуАрхив + ".xls");
				
				ПланыОбмена.УдалитьРегистрациюИзменений(ВыборкаУзлов.Ссылка);
				
				Книга.Close();
				Excel.Application.Quit(); 
				Excel = Неопределено;	
				
			Иначе
				
				Попытка
					ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
					ОшибкаOpenOffice = Ложь;
				Исключение
					ТекстОшибкиOpenOffice 	= "Не удалось открыть файл в OpenOffice/LibreOffice" + Символы.ПС + ОписаниеОшибки();
					ОшибкаOpenOffice 		= Истина;
				КонецПопытки;
				
				Если НЕ ОшибкаOpenOffice Тогда 
					
					Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");
					Свойства = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
					
					Свойства.Name = "AsTemplate";
					Свойства.Value = Истина;
					Args = Новый COMSafeArray("VT_VARIANT", 3);
					Args.SetValue(0, Свойства);
					
					Свойства1 = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
					Свойства1.Name = "Hidden";
					Свойства1.Value = Истина;
					Args.SetValue(1, Свойства1);
					
					Document = Desktop.LoadComponentFromURL("private:factory/scalc", "_blank", 0, Args);
					
					Книга = Document.getSheets();
					
					СтруктураТаблиц   = СтруктураТаблицДляОбработкиНСИ(МассивНоменклатуры);
					ТаблицаРезультата = СтруктураТаблиц.ТаблицаНоменклатуры;			
					
					СформироватьЛистНоменклатуры_LibreOffice(Книга,СтруктураТаблиц.ТаблицаНоменклатуры);
					СформироватьЛистГруппНоменклатуры_LibreOffice(Книга,СтруктураТаблиц.ТаблицаГруппНоменклатуры);
					СформироватьЛистЕдиницИзмерения_LibreOffice(Книга,СтруктураТаблиц.ТаблицаЕдиницИзмерения);		
					ЗаписатьИзображенияВКаталог(СтруктураТаблиц.ТаблицаФайлов,КаталогВыгрузкиКартинок);
					
					Свойства2 = ServiceManager.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
					Свойства2.Name = "FilterName";
					Свойства2.Value = "MS Excel 97";
					Args.SetValue(2,Свойства2);
					
					Document.storeToURL(ПривестиФайлКУРЛ(ПутьКФайлу + ".xls"),Args);
					Document.storeToURL(ПривестиФайлКУРЛ(ПутьКФайлуАрхив + ".xls"),Args);
					
					ПланыОбмена.УдалитьРегистрациюИзменений(ВыборкаУзлов.Ссылка);
					
					Document.unLockControllers();
					Document.removeActionLock();
					Document.close(-1);
					Document = Неопределено;
					
				КонецЕсли;
				
				Если ОшибкаOpenOffice Тогда 	
					
					ТекстОшибки = ТекстОшибкиExcel + Символы.ПС + ТекстОшибкиOpenOffice;
					
					//регистрируем ошибку в журнале
					ЗаписьЖурналаРегистрации(нСтр("ru='Ошибка при выгрузки НСИ в excel '", "ru"),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.ПланыОбмена.ВендингБокс,
					,
					ТекстОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		
	Исключение
		
		Excel = Неопределено;
		Document = Неопределено;
		
		Инфо = ИнформацияОбОшибке();
		
		//регистрируем ошибку в журнале
		ЗаписьЖурналаРегистрации(нСтр("ru='Ошибка при выгрузки НСИ в excel '", "ru"),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ПланыОбмена.ВендингБокс,
		,
		ПодробноеПредставлениеОшибки(Инфо));
		
	КонецПопытки;
	
	
КонецПроцедуры

Функция СтруктураТаблицДляОбработкиНСИ(МассивНоменклатуры) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номенклатура.Ссылка.Артикул КАК Артикул,
	|	ВТ_Номенклатура.Ссылка.Ссылка КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВТ_Номенклатура.Ссылка.Наименование КАК СТРОКА(25)) КАК НаименованиеКраткое,
	|	ВЫРАЗИТЬ(ВТ_Номенклатура.Ссылка.НаименованиеПолное КАК СТРОКА(100)) КАК НаименованиеПолное,
	|	ВЫРАЗИТЬ(ВТ_Номенклатура.Ссылка.Описание КАК СТРОКА(250)) КАК Описание,
	|	ВТ_Номенклатура.Ссылка.ФайлКартинки КАК ФайлКартинки,
	|	ЛОЖЬ КАК ПризнакСИЗ,
	|	ВТ_Номенклатура.Ссылка.ЕдиницаИзмерения.Код КАК КодЕИ,
	|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры,
	|	ХарактеристикиНоменклатуры.Наименование КАК НаименованиеХарактеристики,
	|	ВТ_Номенклатура.Ссылка.Родитель.Код КАК КодГруппы,
	|	ВТ_Номенклатура.Ссылка.ПометкаУдаления КАК ПометкаУдаленияНоменклатуры,
	|	ХарактеристикиНоменклатуры.ПометкаУдаления КАК ПометкаУдаленияХарактеристики
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВТ_Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Номенклатура.Ссылка.ЕдиницаИзмерения.Код КАК КодЕИ,
	|	ВТ_Номенклатура.Ссылка.ЕдиницаИзмерения.Наименование КАК НаименованиеЕИ
	|ИЗ
	//АсТБ_Alexey_71988_********************************************************************
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|ГДЕ
	|	НЕ ВТ_Номенклатура.Ссылка.ЕдиницаИзмерения.Код ЕСТЬ NULL";
	//АсТБ_Alexey_71988_********************************************************************
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаГруппНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаГруппНоменклатуры.Колонки.Добавить("НаименованиеГруппы");
	ТаблицаГруппНоменклатуры.Колонки.Добавить("КодГруппы");
	ТаблицаГруппНоменклатуры.Колонки.Добавить("КодРодителя");
	ТаблицаГруппНоменклатуры.Колонки.Добавить("Изображение");
	
	ВыборкаГруппы = МассивРезультатов[1].Выбрать();
	Пока ВыборкаГруппы.Следующий() Цикл
		
		Если НЕ ВыборкаГруппы.Ссылка.ЭтоГруппа Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаГруппНоменклатуры.Добавить();
		НоваяСтрока.НаименованиеГруппы = ВыборкаГруппы.Ссылка.Наименование;
		НоваяСтрока.КодГруппы = ВыборкаГруппы.Ссылка.Код;
		
		Если ЗначениеЗаполнено(ВыборкаГруппы.Ссылка.Родитель) Тогда  
			НоваяСтрока.КодРодителя = ВыборкаГруппы.Ссылка.Родитель.Код;				
		КонецЕсли;
		
	КонецЦикла;	
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("ИмяФайла");
	ТаблицаФайлов.Колонки.Добавить("ДвоичныеДанные");
	
	ТаблицаНоменклатуры = МассивРезультатов[2].Выгрузить();
	ТаблицаНоменклатуры.Колонки.Добавить("ИзображениеНоменклатуры");
	
	Для Каждого СтрокаТаблицыНоменклатуры из ТаблицаНоменклатуры Цикл 
		
		Если ЗначениеЗаполнено(СтрокаТаблицыНоменклатуры.ФайлКартинки) Тогда 
			
			ДанныеФайла    = ПрисоединенныеФайлы.ПолучитьДанныеФайла(СтрокаТаблицыНоменклатуры.ФайлКартинки,,Ложь);
			ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(СтрокаТаблицыНоменклатуры.ФайлКартинки);
			
			СтрокаТаблицыФайлов = ТаблицаФайлов.Добавить();
			СтрокаТаблицыФайлов.ИмяФайла = ДанныеФайла.ИмяФайла;
			СтрокаТаблицыФайлов.ДвоичныеДанные = ДвоичныеДанные;
			
			СтрокаТаблицыНоменклатуры.ИзображениеНоменклатуры = СтрокаТаблицыФайлов.ИмяФайла;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	ТаблицаЕдиницИзмерения = МассивРезультатов[3].Выгрузить();	
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаГруппНоменклатуры",ТаблицаГруппНоменклатуры);
	СтруктураТаблиц.Вставить("ТаблицаНоменклатуры",     ТаблицаНоменклатуры);
	СтруктураТаблиц.Вставить("ТаблицаЕдиницИзмерения",  ТаблицаЕдиницИзмерения);
	СтруктураТаблиц.Вставить("ТаблицаФайлов",	        ТаблицаФайлов);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Процедура СформироватьЛистНоменклатуры_Excel(Книга,ТаблицаНоменклатуры)
	
	ЛистНоменклатура = Книга.Worksheets(1);		
	ЛистНоменклатура.Name = "Номенклатура";		
	
	НумерацияПолей = Новый СписокЗначений;
	НумерацияПолей.Добавить(1,"Артикул");
	НумерацияПолей.Добавить(2,"КодНоменклатуры");
	НумерацияПолей.Добавить(3,"НаименованиеКраткое");
	НумерацияПолей.Добавить(4,"НаименованиеПолное");
	НумерацияПолей.Добавить(5,"Описание");
	НумерацияПолей.Добавить(6,"КодГруппы");
	НумерацияПолей.Добавить(7,"ИзображениеНоменклатуры");
	НумерацияПолей.Добавить(8,"ПризнакСИЗ");
	НумерацияПолей.Добавить(9,"КодЕИ");
	НумерацияПолей.Добавить(10,"ПометкаУдаления");
	
	НумерацияПолей.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	//Заполняем шапку
	Для Каждого Поле из НумерацияПолей Цикл 		
		ЛистНоменклатура.Cells(1, Поле.Значение).Value = Поле.Представление;		
	КонецЦикла;
	
	НомерСтроки = 2;
	
	//заполняем данные
	Для Каждого СтрокаТаблицы из ТаблицаНоменклатуры Цикл
		
		Для Каждого Поле из НумерацияПолей Цикл 
			
			ЛистНоменклатура.Cells(НомерСтроки, Поле.Значение).NumberFormat = "@";
			
			Если Поле.Представление = "КодНоменклатуры" Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда 
					Ссылка = СтрокаТаблицы.ХарактеристикаНоменклатуры;
				Иначе
					Ссылка = СтрокаТаблицы.Номенклатура;
				КонецЕсли;
				
				ЛистНоменклатура.Cells(НомерСтроки, Поле.Значение).Value = Строка(Ссылка.УникальныйИдентификатор());
				
			ИначеЕсли Поле.Представление = "ПометкаУдаления" Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда 
					ПометкаУдаления = СтрокаТаблицы.ПометкаУдаленияХарактеристики;
				Иначе
					ПометкаУдаления = СтрокаТаблицы.ПометкаУдаленияНоменклатуры;
				КонецЕсли;
				
				ЛистНоменклатура.Cells(НомерСтроки, Поле.Значение).Value = ?(ПометкаУдаления,"Да","Нет");
				
			ИначеЕсли Поле.Представление = "НаименованиеКраткое" Тогда
				
				НаименованиеКраткое = СтрокаТаблицы.НаименованиеКраткое;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда 					
					НаименованиеКраткое = НаименованиеКраткое + " р. " + СтрокаТаблицы.НаименованиеХарактеристики;
				КонецЕсли;
				
				ЛистНоменклатура.Cells(НомерСтроки, Поле.Значение).Value = НаименованиеКраткое;
				
			ИначеЕсли Поле.Представление = "НаименованиеПолное" Тогда
				
				НаименованиеПолное = СтрокаТаблицы.НаименованиеПолное;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда 					
					НаименованиеПолное = НаименованиеПолное + " р. " + СтрокаТаблицы.НаименованиеХарактеристики;
				КонецЕсли;
				
				ЛистНоменклатура.Cells(НомерСтроки, Поле.Значение).Value = НаименованиеПолное;
				
			ИначеЕсли Поле.Представление = "ПризнакСИЗ" Тогда
				
				ЛистНоменклатура.Cells(НомерСтроки, Поле.Значение).Value = ?(СтрокаТаблицы["ПризнакСИЗ"],"Да","Нет");
				
			Иначе
				
				ЛистНоменклатура.Cells(НомерСтроки, Поле.Значение).Value = СтрокаТаблицы[Поле.Представление];
				
			КонецЕсли;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЛистГруппНоменклатуры_Excel(Книга,ТаблицаГруппНоменклатуры)
	
	ЛистГруппыНоменклатуры = Книга.Worksheets(2);		
	ЛистГруппыНоменклатуры.Name = "Группы номенклатуры";		
	
	НумерацияПолей = Новый СписокЗначений;
	НумерацияПолей.Добавить(1,"КодГруппы");
	НумерацияПолей.Добавить(2,"НаименованиеГруппы");
	НумерацияПолей.Добавить(3,"КодРодителя");
	НумерацияПолей.Добавить(4,"Изображение");
	
	НумерацияПолей.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	//Заполняем шапку
	Для Каждого Поле из НумерацияПолей Цикл 		
		ЛистГруппыНоменклатуры.Cells(1, Поле.Значение).Value = Поле.Представление;		
	КонецЦикла;
	
	НомерСтроки = 2;
	
	//заполняем данные
	Для Каждого СтрокаТаблицы из ТаблицаГруппНоменклатуры Цикл
		
		Для Каждого Поле из НумерацияПолей Цикл 
			
			ЛистГруппыНоменклатуры.Cells(НомерСтроки, Поле.Значение).NumberFormat = "@";			
			ЛистГруппыНоменклатуры.Cells(НомерСтроки, Поле.Значение).Value = СтрокаТаблицы[Поле.Представление];
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура СформироватьЛистЕдиницИзмерения_Excel(Книга,ТаблицаЕдиницИзмерения)
	
	ЛистЕдиницыИзмерения = Книга.Worksheets(3);		
	ЛистЕдиницыИзмерения.Name = "ЕИ";		
	
	НумерацияПолей = Новый СписокЗначений;
	НумерацияПолей.Добавить(1,"КодЕИ");
	НумерацияПолей.Добавить(2,"НаименованиеЕИ");
	
	НумерацияПолей.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	//Заполняем шапку
	Для Каждого Поле из НумерацияПолей Цикл 		
		ЛистЕдиницыИзмерения.Cells(1, Поле.Значение).Value = Поле.Представление;		
	КонецЦикла;
	
	НомерСтроки = 2;
	
	//заполняем данные
	Для Каждого СтрокаТаблицы из ТаблицаЕдиницИзмерения Цикл
		
		Для Каждого Поле из НумерацияПолей Цикл 
			
			ЛистЕдиницыИзмерения.Cells(НомерСтроки, Поле.Значение).NumberFormat = "@";	
			ЛистЕдиницыИзмерения.Cells(НомерСтроки, Поле.Значение).Value = СтрокаТаблицы[Поле.Представление];
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЛистНоменклатуры_LibreOffice(Книга,ТаблицаНоменклатуры)
	
	ЛистНоменклатура = Книга.getByIndex(0);		
	ЛистНоменклатура.Name = "Номенклатура";		
	
	НумерацияПолей = Новый СписокЗначений;
	НумерацияПолей.Добавить(1,"Артикул");
	НумерацияПолей.Добавить(2,"КодНоменклатуры");
	НумерацияПолей.Добавить(3,"НаименованиеКраткое");
	НумерацияПолей.Добавить(4,"НаименованиеПолное");
	НумерацияПолей.Добавить(5,"Описание");
	НумерацияПолей.Добавить(6,"КодГруппы");
	НумерацияПолей.Добавить(7,"ИзображениеНоменклатуры");
	НумерацияПолей.Добавить(8,"ПризнакСИЗ");
	НумерацияПолей.Добавить(9,"КодЕИ");
	НумерацияПолей.Добавить(10,"ПометкаУдаления");
	
	НумерацияПолей.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	//Заполняем шапку
	Для Каждого Поле из НумерацияПолей Цикл 				
		ЛистНоменклатура.getCellByPosition(Поле.Значение-1,0).setString(Поле.Представление); 		
	КонецЦикла;
	
	НомерСтроки = 1;
	
	//заполняем данные
	Для Каждого СтрокаТаблицы из ТаблицаНоменклатуры Цикл
		
		Для Каждого Поле из НумерацияПолей Цикл 
			
			Если Поле.Представление = "КодНоменклатуры" Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда 
					Ссылка = СтрокаТаблицы.ХарактеристикаНоменклатуры;
				Иначе
					Ссылка = СтрокаТаблицы.Номенклатура;
				КонецЕсли;
				
				Значение = Строка(Ссылка.УникальныйИдентификатор());
				
			ИначеЕсли Поле.Представление = "ПометкаУдаления" Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда 
					ПометкаУдаления = СтрокаТаблицы.ПометкаУдаленияХарактеристики;
				Иначе
					ПометкаУдаления = СтрокаТаблицы.ПометкаУдаленияНоменклатуры;
				КонецЕсли;
				
				Значение = ?(ПометкаУдаления,"Да","Нет");
				
			ИначеЕсли Поле.Представление = "НаименованиеКраткое" Тогда
				
				НаименованиеКраткое = СтрокаТаблицы.НаименованиеКраткое;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда 					
					НаименованиеКраткое = НаименованиеКраткое + " р. " + СтрокаТаблицы.НаименованиеХарактеристики;
				КонецЕсли;
				
				Значение = НаименованиеКраткое;
				
			ИначеЕсли Поле.Представление = "НаименованиеПолное" Тогда
				
				НаименованиеПолное = СтрокаТаблицы.НаименованиеПолное;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда 					
					НаименованиеПолное = НаименованиеПолное + " р. " + СтрокаТаблицы.НаименованиеХарактеристики;
				КонецЕсли;
				
				Значение = НаименованиеПолное;
				
			ИначеЕсли Поле.Представление = "ПризнакСИЗ" Тогда
				
				Значение = ?(СтрокаТаблицы["ПризнакСИЗ"],"Да","Нет");
				
			Иначе
				
				Значение = СтрокаТаблицы[Поле.Представление];
				
			КонецЕсли;
			
			//заглушка значений, может быть и NULL
			Если НЕ ЗначениеЗаполнено(Значение) Тогда 
				Значение = "";
			КонецЕсли;
			
			ЛистНоменклатура.getCellByPosition(Поле.Значение-1,НомерСтроки).setString(Значение); 			
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЛистГруппНоменклатуры_LibreOffice(Книга,ТаблицаГруппНоменклатуры)
	
	Книга.InsertNewByName("Группы номенклатуры",Книга.getCount());
	ЛистГруппыНоменклатуры = Книга.getByName("Группы номенклатуры"); 
	
	НумерацияПолей = Новый СписокЗначений;
	НумерацияПолей.Добавить(1,"КодГруппы");
	НумерацияПолей.Добавить(2,"НаименованиеГруппы");
	НумерацияПолей.Добавить(3,"КодРодителя");
	НумерацияПолей.Добавить(4,"Изображение");
	
	НумерацияПолей.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	//Заполняем шапку
	Для Каждого Поле из НумерацияПолей Цикл 			
		ЛистГруппыНоменклатуры.getCellByPosition(Поле.Значение-1,0).setString(Поле.Представление); 		
	КонецЦикла;
	
	НомерСтроки = 1;
	
	//заполняем данные
	Для Каждого СтрокаТаблицы из ТаблицаГруппНоменклатуры Цикл
		
		Для Каждого Поле из НумерацияПолей Цикл 
			
			ЛистГруппыНоменклатуры.getCellByPosition(Поле.Значение-1,НомерСтроки).setString(СтрокаТаблицы[Поле.Представление]); 
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура СформироватьЛистЕдиницИзмерения_LibreOffice(Книга,ТаблицаЕдиницИзмерения)
	
	Книга.InsertNewByName("ЕИ",Книга.getCount());
	ЛистЕдиницыИзмерения = Книга.getByName("ЕИ"); 
	
	НумерацияПолей = Новый СписокЗначений;
	НумерацияПолей.Добавить(1,"КодЕИ");
	НумерацияПолей.Добавить(2,"НаименованиеЕИ");
	
	НумерацияПолей.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	//Заполняем шапку
	Для Каждого Поле из НумерацияПолей Цикл 		
		ЛистЕдиницыИзмерения.getCellByPosition(Поле.Значение-1,0).setString(Поле.Представление); 
	КонецЦикла;
	
	НомерСтроки = 1;
	
	//заполняем данные
	Для Каждого СтрокаТаблицы из ТаблицаЕдиницИзмерения Цикл
		
		Для Каждого Поле из НумерацияПолей Цикл 
			
			ЛистЕдиницыИзмерения.getCellByPosition(Поле.Значение-1,НомерСтроки).setString(СтрокаТаблицы[Поле.Представление]); 
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьИзображенияВКаталог(ТаблицаФайлов,КаталогВыгрузкиКартинок) Экспорт 
	
	ПоследнийСимвол = Прав(КаталогВыгрузкиКартинок,1);
	Если ПоследнийСимвол <> "/" или ПоследнийСимвол <> "\" Тогда
		КаталогВыгрузкиКартинок = КаталогВыгрузкиКартинок + "\";
	КонецЕсли;
	
	ЛогОшибокЗаписиФайлов = "";
	
	Для Каждого СтрокаФайла из ТаблицаФайлов Цикл 
		
		ПутьКФайлу = КаталогВыгрузкиКартинок + СтрокаФайла.ИмяФайла;
		
		Попытка
			СтрокаФайла.ДвоичныеДанные.Записать(ПутьКФайлу);
		Исключение
			ЛогОшибокЗаписиФайлов = ЛогОшибокЗаписиФайлов + ОписаниеОшибки() + Символы.ПС;		
		КонецПопытки;
		
	КонецЦикла;
	
	Если ЛогОшибокЗаписиФайлов <> "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при записи в каталог изображений:" + Символы.ПС + ЛогОшибокЗаписиФайлов);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Изображения успешно выгружены!");		
	КонецЕсли;
	
КонецПроцедуры

Функция ПривестиФайлКУРЛ(ПутьКФайлу)
	
	//АсТБ_Alexey_69169_********************************************************************
	//ПутьКФайлу = СтрЗаменить(ПутьКФайлу," ","%20");
	ПутьКФайлу = СтрЗаменить(ПутьКФайлу,"\","/");
	//Возврат "file:/" + "/localhost/" + ПутьКФайлу;
	Возврат "file:" + ПутьКФайлу;
	//АсТБ_Alexey_69169_********************************************************************
	
Конецфункции 
// {ЮМадатов (13.08.21): <#108824>
Функция ТаблицаТоваровССуммами(Сотрудник, ТаблицаДанных)
	
	ТаблицаДанныхССуммами = Новый ТаблицаЗначений;
	
	ЗапросЦеныНоменклатуры = Новый Запрос;
	ЗапросЦеныНоменклатуры.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	ЗапросЦеныНоменклатуры.УстановитьПараметр("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Владелец"));
	ЗапросЦеныНоменклатуры.УстановитьПараметр("Поставщик", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТаблицаДанных[0].Номенклатура, "Поставщик"));  //Поставшик берется из первой номенклатуры?
	ЗапросЦеныНоменклатуры.УстановитьПараметр("Период", ТекущаяДата());
	
	ЗапросЦеныНоменклатуры.Текст = "ВЫБРАТЬ
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ТаблицаДанных.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаДанных.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Поставщик = &Поставщик
	|				И Организация = &Организация) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаДанных.Количество КАК Количество,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Цена, 0) КАК Цена,
	|	ВТ_ТаблицаДанных.Количество * ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Цена, 0) КАК Сумма,
	|	ВТ_ТаблицаДанных.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры
	|		ПО ВТ_ТаблицаДанных.Номенклатура = ВТ_ЦеныНоменклатуры.Номенклатура";
	Попытка
		ТаблицаДанныхССуммами = ЗапросЦеныНоменклатуры.Выполнить().Выгрузить();
		Возврат ТаблицаДанныхССуммами;
	Исключение
		Возврат ТаблицаДанныхССуммами;
	КонецПопытки;				
	
КонецФункции // ТаблицаТоваровССуммами()
 

Функция ПроизвольнаяВыдача(ТаблицаДанных, СтруктураРеквизитов)
	
	ДокументЗаявка = Документы.ЗаявкаНаПроизвольнуюВыдачуСИЗ.СоздатьДокумент();
	ДокументЗаявка.СоздательДокумента 	= СтруктураРеквизитов.Руководитель;
	ДокументЗаявка.Дата 				= ТекущаяДата();
	ДокументЗаявка.Организация 			= СтруктураРеквизитов.Организация;
	ДокументЗаявка.Склад 				= СтруктураРеквизитов.Склад;
	ДокументЗаявка.Сотрудник 			= СтруктураРеквизитов.Сотрудник;
	ДокументЗаявка.Заказчик 			= СтруктураРеквизитов.Руководитель;
	ДокументЗаявка.МОЛ 					= ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(СтруктураРеквизитов.Склад,СтруктураРеквизитов.Организация);
	ДокументЗаявка.МВЗ					= ПроцедурыРаботыСНормамиСервер.ПолучитьМВЗСотрудника(СтруктураРеквизитов.Сотрудник);
	ДокументЗаявка.Ответственный		= ДокументЗаявка.СоздательДокумента;
	
	ТаблицаДанныхССуммами = ТаблицаТоваровССуммами(СтруктураРеквизитов.Сотрудник, ТаблицаДанных);
	
	Для Каждого СтрокаТаблицы из ТаблицаДанныхССуммами Цикл 
		НоваяСтрока = ДокументЗаявка.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
	КонецЦикла;
	
	ДокументЗаявка.СуммаДокумента = ДокументЗаявка.Товары.Итог("Сумма");
	
	Попытка
		ДокументЗаявка.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Инфо = ИнформацияОбОшибке();
		Возврат Новый Структура("Статус, Ошибка", "ERROR", ПодробноеПредставлениеОшибки(Инфо));				
	КонецПопытки;
	
	ДокументВыдачаСредствЗащитыСотруднику	= Документы.ВыдачаСредствЗащитыСотруднику.СоздатьДокумент();
	ДокументВыдачаСредствЗащитыСотруднику.ДокументОснование = ДокументЗаявка.Ссылка;
	ДокументВыдачаСредствЗащитыСотруднику.Заполнить(ДокументЗаявка.Ссылка);
	ДокументВыдачаСредствЗащитыСотруднику.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача;
	ДокументВыдачаСредствЗащитыСотруднику.УстановитьНовыйНомер();
	
	Попытка
		ДокументВыдачаСредствЗащитыСотруднику.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Попытка
			Инфо = ИнформацияОбОшибке();
			ДокументВыдачаСредствЗащитыСотруднику.Комментарий = ПодробноеПредставлениеОшибки(Инфо);
			ДокументВыдачаСредствЗащитыСотруднику.Записать(РежимЗаписиДокумента.Запись);
			Возврат Новый Структура("Статус, Ошибка, ПроизвольнаяВыдача", "ERROR", ПодробноеПредставлениеОшибки(Инфо), ДокументВыдачаСредствЗащитыСотруднику.Ссылка);
		Исключение
			Инфо = ИнформацияОбОшибке();
			Возврат Новый Структура("Статус, Ошибка", "ERROR", ПодробноеПредставлениеОшибки(Инфо));				
		КонецПопытки;
	КонецПопытки;
	
	Возврат Новый Структура("Статус, Ошибка", "OK", "");
	
КонецФункции
// } ЮМадатов (13.08.21): <#108824>
 

#КонецОбласти