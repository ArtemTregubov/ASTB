
#Область ПрограммныйИнтерфейс

Процедура ПередатьДанныеВАдресноеХранение(МассивДанных,СтруктураОбработкиОшибок) экспорт
	
	Попытка  
		
		НачатьТранзакцию();
		
		Прокси = ПолучитьПрокси(СтруктураОбработкиОшибок);
		Если СтруктураОбработкиОшибок.ЕстьОшибки Тогда
			Возврат;
		КонецЕсли;
		
		ПакетОбмена = АХ_ОбменПравилаВыгрузки.СформироватьПакетОбмена(Прокси,МассивДанных,СтруктураОбработкиОшибок);
		
		//отменяем транзакцию, т.к идет запись по регистру ДанныеВАдресномХранении
		Если СтруктураОбработкиОшибок.ЕстьОшибки Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СтруктураОтвета = Прокси.ОтправитьПакетОбмена(ПакетОбмена);
		СтруктураОтвета = СтруктураОтвета.Получить();
		
		АХ_ОбменПравилаЗагрузки.РазобратьПринятыйПакетОбмена(Прокси,СтруктураОтвета,СтруктураОбработкиОшибок);
		
		Если СтруктураОбработкиОшибок.ЕстьОшибки Тогда
			ОтменитьТранзакцию();
		иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Инфо = ИнформацияОбОшибке();
		ПолноеОписание = Инфо.Описание;
		Пока Инфо.Причина <> Неопределено Цикл
			Инфо = Инфо.Причина;
			ПолноеОписание = ПолноеОписание + " - " + Инфо.Описание;
		КонецЦикла;
		
		//регистрируем ошибку в журнале
		ЗаписьЖурналаРегистрации(нСтр("ru='Ошибка отправки пакета обмена по веб сервису адресного хранения Eisf '", "ru"),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ПолноеОписание);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПолноеОписание,,,,СтруктураОбработкиОшибок.ЕстьОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ИнициализироватьСтруктуруОбработкиОшибок() экспорт
	
	СтруктураОбработкиОшибок = Новый Структура;
	СтруктураОбработкиОшибок.Вставить("ЕстьОшибки",Ложь);
	СтруктураОбработкиОшибок.Вставить("МассивТабличныхДокументов",Новый Массив);
	СтруктураОбработкиОшибок.Вставить("ОповеститьСообщением",Ложь);
	СтруктураОбработкиОшибок.Вставить("ОповещатьОбУспешнойОтправке",Истина);
	СтруктураОбработкиОшибок.Вставить("ТекстСообщенияУспешнойОтправки",нСтр("ru='Документ успешно передан в базу адресного хранения'", "ru"));
	
	Возврат СтруктураОбработкиОшибок;
	
КонецФункции // ИнициализироватьСтруктуруОбработкиОшибок()

Функция МожноСформироватьПланСнятия(Объект) экспорт
	
	СтруктураОформления = Новый Структура("Видимость,Доступность");
	
	Если НЕ НужноИспользоватьАдресныеМеханизмыВДокументе(Объект) Тогда 
		
		СтруктураОформления.Видимость   = Ложь;
		СтруктураОформления.Доступность = Ложь;
		
		Возврат СтруктураОформления;
		
	КонецЕсли;
	
	СтруктураОформления.Видимость   = Истина;
	
	СтруктураОбработкиОшибок = ИнициализироватьСтруктуруОбработкиОшибок();
	
	АХ_ОбменПравилаВыгрузки.ПодготовитьДанныеАдресногоПланаСнятия(Объект.Ссылка,Истина,СтруктураОбработкиОшибок);
	
	СтруктураОформления.Доступность = НЕ СтруктураОбработкиОшибок.ЕстьОшибки;
	
	Возврат СтруктураОформления;	
	
КонецФункции // МожноСформироватьПланСнятия()

Функция МожноСформироватьПланСнятияИПоступление(Объект) экспорт
	
	СтруктураОформления = Новый Структура("Видимость,Доступность");
	
	Если НЕ НужноИспользоватьАдресныеМеханизмыВДокументе(Объект) Тогда 
		
		СтруктураОформления.Видимость   = Ложь;
		СтруктураОформления.Доступность = Ложь;
		
		Возврат СтруктураОформления;
		
	КонецЕсли;
	
	СтруктураОформления.Видимость   = Истина;
	
	// проверяем на возможность формирования поступления
	СтруктураОбработкиОшибок_Поступление = ИнициализироватьСтруктуруОбработкиОшибок();	
	АХ_ОбменПравилаВыгрузки.ПодготовитьДанныеАдресногоПоступления(Объект.Ссылка,Истина,СтруктураОбработкиОшибок_Поступление);
	
	//проверяем на возможность формирования плана снятия
	СтруктураОбработкиОшибок_ПланСнятия = ИнициализироватьСтруктуруОбработкиОшибок();	
	АХ_ОбменПравилаВыгрузки.ПодготовитьДанныеАдресногоПланаСнятия(Объект.Ссылка,Истина,СтруктураОбработкиОшибок_ПланСнятия);
	
	Если СтруктураОбработкиОшибок_Поступление.ЕстьОшибки и СтруктураОбработкиОшибок_ПланСнятия.ЕстьОшибки Тогда
		
		СтруктураОформления.Доступность = Ложь;
	Иначе		
		СтруктураОформления.Доступность = Истина;	
		
	КонецЕсли;
	
	Возврат СтруктураОформления;
	
КонецФункции // МожноСформироватьПланСнятияИПоступление()

Функция МожноСформироватьСнятие(Объект) экспорт
	
	СтруктураОформления = Новый Структура("Видимость,Доступность");
	
	Если НЕ НужноИспользоватьАдресныеМеханизмыВДокументе(Объект) Тогда 
		
		СтруктураОформления.Видимость   = Ложь;
		СтруктураОформления.Доступность = Ложь;
		
		Возврат СтруктураОформления;
		
	КонецЕсли;	
	
	СтруктураОформления.Видимость   = Истина;
	
	СтруктураОбработкиОшибок = ИнициализироватьСтруктуруОбработкиОшибок();
	
	АХ_ОбменПравилаВыгрузки.ПодготовитьДанныеАдресногоСнятия(Объект.Ссылка,Истина,СтруктураОбработкиОшибок);
	
	СтруктураОформления.Доступность = НЕ СтруктураОбработкиОшибок.ЕстьОшибки;
	
	Возврат СтруктураОформления;	
	
КонецФункции // МожноСформироватьСнятие()

Функция МожноСформироватьПоступление(Объект) экспорт
	
	СтруктураОформления = Новый Структура("Видимость,Доступность");
	
	Если НЕ НужноИспользоватьАдресныеМеханизмыВДокументе(Объект) Тогда 
		
		СтруктураОформления.Видимость   = Ложь;
		СтруктураОформления.Доступность = Ложь;
		
		Возврат СтруктураОформления;
		
	КонецЕсли;	
	
	СтруктураОформления.Видимость   = Истина;
	
	СтруктураОбработкиОшибок = ИнициализироватьСтруктуруОбработкиОшибок();
	
	АХ_ОбменПравилаВыгрузки.ПодготовитьДанныеАдресногоПоступления(Объект.Ссылка,Истина,СтруктураОбработкиОшибок);
	
	СтруктураОформления.Доступность = НЕ СтруктураОбработкиОшибок.ЕстьОшибки;

	Возврат СтруктураОформления;	
	
КонецФункции // МожноСформироватьПоступление()

функция НужноИспользоватьАдресныеМеханизмыВДокументе(Объект) экспорт
	
	ИспользоватьАдресноеХранение = Константы.АХ_ИспользоватьАдресноеХранениеСкоробами.Получить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		ИЛИ НЕ ИспользоватьАдресноеХранение 
		ИЛИ (ИспользоватьАдресноеХранение И НЕ СкладЯвляетсяАдресным(Объект.Ссылка))
		ИЛИ Объект.Дата < Константы.АХ_ДатаСтартаАдресногоХранения.Получить() Тогда 
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

функция НужноИспользоватьАдресныеМеханизмыВДокументеПередЗаписью(Объект) экспорт
	
	ИспользоватьАдресноеХранение = Константы.АХ_ИспользоватьАдресноеХранениеСкоробами.Получить();
	
	Если НЕ ИспользоватьАдресноеХранение 
		ИЛИ (ИспользоватьАдресноеХранение И НЕ СкладЯвляетсяАдресным(Объект))
		ИЛИ Объект.Дата < Константы.АХ_ДатаСтартаАдресногоХранения.Получить() Тогда 
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//Формирует таблицу расхождений между данными табличной части документа и данными в регистре АХ_ДанныеВАдресномХранении
//это необходимо для доотправки данных в случае изменения ключевых полей табличной части документа
//
// Параметры:
//  Документ  - ДокументСсылка - 
//  ВидАдресногоДокумента - Массив -  ПеречислениеСсылка.АХ_ВидыДокументовАдресногоХранения - дополнительный разрез учета данных в адресном хранении
//  УсловиеЗапроса  - Строка - Дополнительное условие к запросу. Имеет 3 варианта:
// 		1. ""
// 		2. "ТолькоПоложительные" 
// 		3. "ТолькоОтрицательные"
// НужныТоварыКПоступлению - Параметр, только для получения расхождения для документа комплектации
//
// Возвращаемое значение:
// ТаблицаЗначений
Функция ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Документ,МассивВидовАдресногоДокумента,УсловиеЗапроса = "",НужныТоварыКПоступлению = Истина) Экспорт	
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеНоменклатуры") Тогда
		
		ТестЗапросаПоТоварам = "ВЫБРАТЬ
		|	ПоступлениеНоменклатуры.Номенклатура КАК Номенклатура,
		|	ПоступлениеНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ПоступлениеНоменклатуры.Количество) КАК Количество,
		|	НЕОПРЕДЕЛЕНО КАК Заказ
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	Документ.ПоступлениеНоменклатуры.Товары КАК ПоступлениеНоменклатуры
		|ГДЕ
		|	ПоступлениеНоменклатуры.Ссылка = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеНоменклатуры.Номенклатура,
		|	ПоступлениеНоменклатуры.ХарактеристикаНоменклатуры"
		
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику") Тогда
		
		Если Документ.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача Тогда 
			
			ТестЗапросаПоТоварам = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
			|	ОстаткиНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ОстаткиНоменклатуры.Количество КАК Количество,
			|	НЕОПРЕДЕЛЕНО КАК Заказ
			|ПОМЕСТИТЬ ТаблицаДокумента
			|ИЗ
			|	РегистрНакопления.ОстаткиНоменклатуры КАК ОстаткиНоменклатуры
			|ГДЕ
			|	ОстаткиНоменклатуры.Регистратор = &Документ
			|	И ОстаткиНоменклатуры.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)"	
			
			
		Иначе
			
			ТестЗапросаПоТоварам = "ВЫБРАТЬ
			|	ВыдачаСредствЗащитыСотрудникуТовары.Номенклатура КАК Номенклатура,
			|	ВыдачаСредствЗащитыСотрудникуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	СУММА(ВЫБОР
			|			КОГДА ВыдачаСредствЗащитыСотрудникуТовары.Комплект = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|				ТОГДА ВыдачаСредствЗащитыСотрудникуТовары.Количество
			|			ИНАЧЕ ВыдачаСредствЗащитыСотрудникуТовары.Количество * ВыдачаСредствЗащитыСотрудникуТовары.КоличествоВКомплекте
			|		КОНЕЦ) КАК Количество,
			|	НЕОПРЕДЕЛЕНО КАК Заказ
			|ПОМЕСТИТЬ ТаблицаДокумента
			|ИЗ
			|	Документ.ВыдачаСредствЗащитыСотруднику.Товары КАК ВыдачаСредствЗащитыСотрудникуТовары
			|ГДЕ
			|	ВыдачаСредствЗащитыСотрудникуТовары.Ссылка = &Документ
			|	И НЕ ВыдачаСредствЗащитыСотрудникуТовары.НеВыдано
			|
			|СГРУППИРОВАТЬ ПО
			|	ВыдачаСредствЗащитыСотрудникуТовары.Номенклатура,
			|	ВыдачаСредствЗащитыСотрудникуТовары.ХарактеристикаНоменклатуры"	
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеНоменклатуры") Тогда 
		
		ТестЗапросаПоТоварам = 
		"ВЫБРАТЬ
		|	СписаниеНоменклатурыТовары.Номенклатура КАК Номенклатура,
		|	СписаниеНоменклатурыТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(СписаниеНоменклатурыТовары.Количество) КАК Количество,
		|	НЕОПРЕДЕЛЕНО КАК Заказ
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	Документ.СписаниеНоменклатуры.Товары КАК СписаниеНоменклатурыТовары
		|ГДЕ
		|	СписаниеНоменклатурыТовары.Ссылка = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	СписаниеНоменклатурыТовары.Номенклатура,
		|	СписаниеНоменклатурыТовары.ХарактеристикаНоменклатуры";
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВыдачаДежурныхСредствЗащиты") Тогда 
		
		ТестЗапросаПоТоварам = 
		"ВЫБРАТЬ
		|	ВыдачаДежурныхСредствЗащитыТовары.Номенклатура КАК Номенклатура,
		|	ВыдачаДежурныхСредствЗащитыТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ВыдачаДежурныхСредствЗащитыТовары.Количество) КАК Количество,
		|	НЕОПРЕДЕЛЕНО КАК Заказ
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	Документ.ВыдачаДежурныхСредствЗащиты.Товары КАК ВыдачаДежурныхСредствЗащитыТовары
		|ГДЕ
		|	ВыдачаДежурныхСредствЗащитыТовары.Ссылка = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыдачаДежурныхСредствЗащитыТовары.Номенклатура,
		|	ВыдачаДежурныхСредствЗащитыТовары.ХарактеристикаНоменклатуры";		
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратНоменклатурыПоставщику") Тогда 
		
		ТестЗапросаПоТоварам = 
		"ВЫБРАТЬ
		|	ВозвратНоменклатурыПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	ВозвратНоменклатурыПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ВозвратНоменклатурыПоставщикуТовары.Количество) КАК Количество,
		|	НЕОПРЕДЕЛЕНО КАК Заказ
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	Документ.ВозвратНоменклатурыПоставщику.Товары КАК ВозвратНоменклатурыПоставщикуТовары
		|ГДЕ
		|	ВозвратНоменклатурыПоставщикуТовары.Ссылка = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратНоменклатурыПоставщикуТовары.Номенклатура,
		|	ВозвратНоменклатурыПоставщикуТовары.ХарактеристикаНоменклатуры";
		
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОприходованиеНоменклатуры") Тогда 
		
		ТестЗапросаПоТоварам = 
		"ВЫБРАТЬ
		|	ОприходованиеНоменклатурыТовары.Номенклатура КАК Номенклатура,
		|	ОприходованиеНоменклатурыТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ОприходованиеНоменклатурыТовары.Количество) КАК Количество,
		|	НЕОПРЕДЕЛЕНО КАК Заказ
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	Документ.ОприходованиеНоменклатуры.Товары КАК ОприходованиеНоменклатурыТовары
		|ГДЕ
		|	ОприходованиеНоменклатурыТовары.Ссылка = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ОприходованиеНоменклатурыТовары.Номенклатура,
		|	ОприходованиеНоменклатурыТовары.ХарактеристикаНоменклатуры";
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратСредствЗащитыОтСотрудника") Тогда 
		
		ТестЗапросаПоТоварам = 
		"ВЫБРАТЬ
		|	ВозвратСредствЗащитыОтСотрудникаТовары.Номенклатура КАК Номенклатура,
		|	ВозвратСредствЗащитыОтСотрудникаТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ВозвратСредствЗащитыОтСотрудникаТовары.Количество) КАК Количество,
		|	НЕОПРЕДЕЛЕНО КАК Заказ
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	Документ.ВозвратСредствЗащитыОтСотрудника.Товары КАК ВозвратСредствЗащитыОтСотрудникаТовары
		|ГДЕ
		|	ВозвратСредствЗащитыОтСотрудникаТовары.Ссылка = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратСредствЗащитыОтСотрудникаТовары.Номенклатура,
		|	ВозвратСредствЗащитыОтСотрудникаТовары.ХарактеристикаНоменклатуры";		
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеНоменклатуры") Тогда 
		
		ТестЗапросаПоТоварам = 
		"ВЫБРАТЬ
		|	ПеремещениеНоменклатурыТовары.Номенклатура КАК Номенклатура,
		|	ПеремещениеНоменклатурыТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ПеремещениеНоменклатурыТовары.Количество) КАК Количество,
		|	НЕОПРЕДЕЛЕНО КАК Заказ
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	Документ.ПеремещениеНоменклатуры.Товары КАК ПеремещениеНоменклатурыТовары
		|ГДЕ
		|	ПеремещениеНоменклатурыТовары.Ссылка = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеНоменклатурыТовары.Номенклатура,
		|	ПеремещениеНоменклатурыТовары.ХарактеристикаНоменклатуры";
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		
		ТестЗапросаПоТоварам = 
		"ВЫБРАТЬ
		|	Комплекты.Номенклатура КАК Комплект,
		|	Комплекты.ХарактеристикаНоменклатуры.Метрика КАК МетрикаКомплекта,
		|	СУММА(Комплекты.Количество) КАК КоличествоКомплектов,
		|	НоменклатураКомплектующие.Номенклатура КАК Номенклатура,
		|	СУММА(НоменклатураКомплектующие.Количество * Комплекты.Количество) КАК Количество,
		|	Комплекты.Ссылка КАК Ссылка,
		|	Комплекты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ ТаблКомплектующих
		|ИЗ
		|	Справочник.Номенклатура.Комплектующие КАК НоменклатураКомплектующие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомплектацияНоменклатуры.Товары КАК Комплекты
		|		ПО НоменклатураКомплектующие.Ссылка = Комплекты.Номенклатура
		|ГДЕ
		|	Комплекты.Ссылка = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	Комплекты.Номенклатура,
		|	Комплекты.Ссылка,
		|	Комплекты.ХарактеристикаНоменклатуры.Метрика,
		|	НоменклатураКомплектующие.Номенклатура,
		|	Комплекты.ХарактеристикаНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Комплект,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблКомплектующих.Комплект КАК Номенклатура,
		|	ТаблКомплектующих.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТаблКомплектующих.КоличествоКомплектов КАК Количество,
		|	НЕОПРЕДЕЛЕНО КАК Заказ
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	ТаблКомплектующих КАК ТаблКомплектующих
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &НужныТоварыКПоступлению
		|				ТОГДА ВЫБОР
		|						КОГДА ТаблКомплектующих.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектации.Комплектация)
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ТаблКомплектующих.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектации.Комплектация)
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблКомплектующих.ХарактеристикаНоменклатуры,
		|	ТаблКомплектующих.Комплект,
		|	ТаблКомплектующих.КоличествоКомплектов
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблКомплектующих.Номенклатура,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|	СУММА(ТаблКомплектующих.Количество),
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	ТаблКомплектующих КАК ТаблКомплектующих
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ТаблКомплектующих.Номенклатура = ХарактеристикиНоменклатуры.Владелец
		|			И ТаблКомплектующих.МетрикаКомплекта = ХарактеристикиНоменклатуры.Метрика
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &НужныТоварыКПоступлению
		|				ТОГДА ВЫБОР
		|						КОГДА ТаблКомплектующих.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектации.Комплектация)
		|							ТОГДА ЛОЖЬ
		|						ИНАЧЕ ИСТИНА
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ТаблКомплектующих.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКомплектации.Комплектация)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблКомплектующих.Номенклатура,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Условие",УсловиеЗапроса);
	Запрос.УстановитьПараметр("Документ",Документ);
	Запрос.УстановитьПараметр("МассивВидовАдресногоДокумента",МассивВидовАдресногоДокумента);
	Запрос.УстановитьПараметр("НужныТоварыКПоступлению",НужныТоварыКПоступлению);
	
	ТекстЗапросаПоПереданнымДанным = "ВЫБРАТЬ
	|	ИтоговыеДанные.Номенклатура КАК Номенклатура,
	|	ИтоговыеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ИтоговыеДанные.Заказ КАК Заказ,
	|	СУММА(ИтоговыеДанные.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ИтоговыеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Номенклатура КАК Номенклатура,
	|		Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Товары.Заказ КАК Заказ,
	|		Товары.Количество КАК Количество
	|	ИЗ
	|		ТаблицаДокумента КАК Товары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеВАдресномХранении.Номенклатура,
	|		ДанныеВАдресномХранении.ХарактеристикаНоменклатуры,
	|		ДанныеВАдресномХранении.Заказ,
	|		СУММА(-ДанныеВАдресномХранении.Количество)
	|	ИЗ
	|		РегистрСведений.АХ_ДанныеВАдресномХранении КАК ДанныеВАдресномХранении
	|	ГДЕ
	|		ДанныеВАдресномХранении.Документ = &Документ
	|		И ДанныеВАдресномХранении.ВидАдресногоДокумента В (&МассивВидовАдресногоДокумента)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеВАдресномХранении.Номенклатура,
	|		ДанныеВАдресномХранении.ХарактеристикаНоменклатуры,
	|		ДанныеВАдресномХранении.Заказ) КАК ИтоговыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговыеДанные.ХарактеристикаНоменклатуры,
	|	ИтоговыеДанные.Номенклатура,
	|	ИтоговыеДанные.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИтоговыеДанные.Номенклатура КАК Номенклатура,
	|	ВТ_ИтоговыеДанные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ИтоговыеДанные.Заказ КАК Заказ,
	|	ВТ_ИтоговыеДанные.Количество КАК Количество
	|ИЗ
	|	ВТ_ИтоговыеДанные КАК ВТ_ИтоговыеДанные
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Условие = ""ТолькоОтрицательные""
	|				ТОГДА ВТ_ИтоговыеДанные.Количество < 0
	|			КОГДА &Условие = ""ТолькоПоложительные""
	|				ТОГДА ВТ_ИтоговыеДанные.Количество > 0
	|			ИНАЧЕ ВТ_ИтоговыеДанные.Количество <> 0
	|		КОНЕЦ";
	
	Разделитель = ";////////////////////////////////////////////////////////////////////////////////" + Символы.ПС;
	
	Запрос.Текст = ТестЗапросаПоТоварам + Разделитель + ТекстЗапросаПоПереданнымДанным;
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультат = РезультатЗапроса.Выгрузить();	
	
	Возврат ТаблицаРезультат;
	
КонецФункции

//Процедура вычисляет текущую разницу с последующей записью между переданной таблицей и данными в РС - АХ_ДанныеВАдресномХранении
//
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - Данные таблицы товаров
//       * Номенклатура - СправочникСсылка.Номенклатура
//       * ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры.
//       * Заказ - ДокументСсылка.ВнутреннийЗаказ  ДокументСсылка.ЗаказПокупателя
//		 * ВидАдресногоДокумента - ПеречислениеСсылка.АХ_ВидыДокументовАдресногоХранения
//       * Количество - Число(15,3)
//	
//	Документ - Документы.ТипВсеСсылки()
Процедура ЗарегистрироватьДанныеВАдресномХранении(ТаблицаДанных,Документ,Замещать = Ложь) экспорт
	
	Если Замещать тогда
		
		НаборЗаписей = РегистрыСведений.АХ_ДанныеВАдресномХранении.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Документ);
		НаборЗаписей.Загрузить(ТаблицаДанных);
		НаборЗаписей.Записать();
		
	иначе
		
		Запрос = Новый Запрос;               
		
		Запрос.УстановитьПараметр("Документ", Документ);
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТаблицаДанных.Заказ КАК Заказ,
		|	ТаблицаДанных.Количество КАК Количество,
		|	ТаблицаДанных.ВидАдресногоДокумента КАК ВидАдресногоДокумента
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Документ КАК Документ,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.Заказ КАК Заказ,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	ВложенныйЗапрос.ВидАдресногоДокумента КАК ВидАдресногоДокумента
		|ИЗ
		|	(ВЫБРАТЬ
		|		&Документ КАК Документ,
		|		Товары.Номенклатура КАК Номенклатура,
		|		Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		Товары.Заказ КАК Заказ,
		|		Товары.ВидАдресногоДокумента КАК ВидАдресногоДокумента,
		|		Товары.Количество КАК Количество
		|	ИЗ
		|		Товары КАК Товары
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеВАдресномХранении.Документ,
		|		ДанныеВАдресномХранении.Номенклатура,
		|		ДанныеВАдресномХранении.ХарактеристикаНоменклатуры,
		|		ДанныеВАдресномХранении.Заказ,
		|		ДанныеВАдресномХранении.ВидАдресногоДокумента,
		|		ДанныеВАдресномХранении.Количество
		|	ИЗ
		|		РегистрСведений.АХ_ДанныеВАдресномХранении КАК ДанныеВАдресномХранении
		|	ГДЕ
		|		ДанныеВАдресномХранении.Документ = &Документ) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.Документ,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Заказ,
		|	ВложенныйЗапрос.ВидАдресногоДокумента
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Количество) <> 0";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		НаборЗаписей = РегистрыСведений.АХ_ДанныеВАдресномХранении.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Документ);
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры
	
//проверка входящей таблицы на коды оракл
//
// Параметры:
//  Таблица - ТаблицаЗначений - Данные таблицы товаров
//       * Номенклатура - СправочникСсылка.Номенклатура
//       * ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры.
//	
// Возвращаемое значение:
// ТабличныйДокумент,Неопределено
Функция СформироватьТабличныйДокументНезаполненныхКодовОракл(Ссылка = Неопределено,Таблица,ОповеститьСообщением = Ложь) экспорт	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Представление(ВТ.Номенклатура) КАК Номенклатура,
	|	Представление(ВТ.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
	|	ВТ.Номенклатура.КодСинхронизации КАК НоменклатураКодОракл,
	|	ВТ.ХарактеристикаНоменклатуры.Код КАК ХарактеристикаКодОракл
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	(ВТ.Номенклатура.КодСинхронизации = 0
	|			ИЛИ ВТ.ХарактеристикаНоменклатуры.Код = 0)
	|ИТОГИ 
	|	МИНИМУМ(НоменклатураКодОракл)
	|ПО 
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;

	Если НЕ ОповеститьСообщением Тогда
		
		Макет = ПолучитьОбщийМакет("АХ_ПФ_MXL_ТоварыБезКодаОракл");	
			
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка     = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрока    = Макет.ПолучитьОбласть("Строка");
		
		ТекстЗаголовка = ?(Ссылка = Неопределено,"Товары с отсутствующими кодами оракл", "Товары с отсутствующими кодами оракл  по документу : " + Ссылка);

		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
	КонецЕсли;
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() цикл
		
		Если НЕ ОповеститьСообщением Тогда
			
			ОбластьСтрока.Параметры.Заполнить(ВыборкаНоменклатура);
 			ОбластьСтрока.Параметры.КодОракл = ?(ВыборкаНоменклатура.НоменклатураКодОракл = 0, " не заполнено ",ВыборкаНоменклатура.НоменклатураКодОракл);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
		иначе
			
			Шаблонсообщения = нСтр("ru='У номенклатуры : %Номенклатура% %ТекстПроверкиНоменклатуры% . %ТекстПроверкиХарактеристик%'", "ru"); 
			Шаблонсообщения = СтрЗаменить(Шаблонсообщения,"%Номенклатура%",ВыборкаНоменклатура.Номенклатура);
			
			ТекстПроверкиНоменклатуры = "";
			Если ВыборкаНоменклатура.НоменклатураКодОракл = 0 Тогда
				ТекстПроверкиНоменклатуры = "код синхронизации не заполнен";	
			КонецЕсли;
			
			Шаблонсообщения = СтрЗаменить(Шаблонсообщения,"%ТекстПроверкиНоменклатуры%", ТекстПроверкиНоменклатуры);		
			ТекстСпискаХарактеристик = "";
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = ВыборкаНоменклатура.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() цикл
			
			Если ВыборкаДетальныеЗаписи.ХарактеристикаКодОракл = 0 Тогда
				
				Если НЕ ОповеститьСообщением Тогда
					
					ОбластьСтрока.Параметры.Номенклатура = Неопределено;
					ОбластьСтрока.Параметры.ХарактеристикаНоменклатуры = ВыборкаДетальныеЗаписи.ХарактеристикаНоменклатуры;
					ОбластьСтрока.Параметры.КодОракл = " не заполнено ";
					ТабличныйДокумент.Вывести(ОбластьСтрока);
					
				иначе
					
					Если ТекстСпискаХарактеристик <> "" Тогда
						ТекстПроверкиХарактеристик = " , " + ВыборкаДетальныеЗаписи.ХарактеристикаНоменклатуры;
					иначе
						ТекстСпискаХарактеристик = ВыборкаДетальныеЗаписи.ХарактеристикаНоменклатуры;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;		
		
		Если ОповеститьСообщением Тогда
			
			ТекстПроверкиХарактеристик = ?(ТекстСпискаХарактеристик = "",""," В характеристиках : " + ТекстСпискаХарактеристик + " не заполнен код. ");
			Шаблонсообщения = СтрЗаменить(Шаблонсообщения,"%ТекстПроверкиХарактеристик%",ТекстПроверкиХарактеристик);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Шаблонсообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПроверитьКодОраклНоменклатуры()

Процедура ПривязатьТабличныеДокументыКДокументу(Источник,МассивТабличныхДокументов) экспорт
	
	Для Каждого ТабличныйДокумент из МассивТабличныхДокументов Цикл
		
		МенеджерЗаписи = РегистрыСведений.АХ_ПечатныеФормы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 			= ТекущаяДата();
		МенеджерЗаписи.Документ 		= Источник;
		МенеджерЗаписи.ХранилищеДанных  = Новый ХранилищеЗначения(ТабличныйДокумент);
		МенеджерЗаписи.КлючУникальности = Новый УникальныйИдентификатор(); 
	
		//не зацикливаемся на ошибке, записалось или нет, не сильно важно
		Попытка
			МенеджерЗаписи.Записать();
		исключение конецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КонстантыАдресногоХранения() экспорт
	
	СтруктураКонстант = Новый Структура;
	
	СтруктураКонстант.Вставить("АХ_ИспользоватьАдресноеХранениеСкоробами",Константы.АХ_ИспользоватьАдресноеХранениеСкоробами.Получить());
	СтруктураКонстант.Вставить("АХ_ДатаСтартаАдресногоХранения",Константы.АХ_ДатаСтартаАдресногоХранения.Получить());
	
	Возврат СтруктураКонстант;
	
КонецФункции // КонстантыАдресногоХранения()

Функция ПечатныеФормыАдресногоХранения(Документ) Экспорт 
	
	МассивТабличныхДокументов = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АХ_ПечатныеФормы.ХранилищеДанных КАК ХранилищеДанных
		|ИЗ
		|	РегистрСведений.АХ_ПечатныеФормы КАК АХ_ПечатныеФормы
		|ГДЕ
		|	АХ_ПечатныеФормы.Документ = &Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	АХ_ПечатныеФормы.Период";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МассивТабличныхДокументов.Добавить(Выборка.ХранилищеДанных.Получить());
		
	КонецЦикла;
	
	Возврат МассивТабличныхДокументов;

КонецФункции // ПечатныеФормыАдресногоХранения()

Функция НайтиПодчиненныйДокумент(Документ,ВидАдресногоДокумента = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеВАдресномХранении.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.АХ_ДанныеВАдресномХранении КАК ДанныеВАдресномХранении
	|ГДЕ
	|	ДанныеВАдресномХранении.Документ = &Документ
	|	И ВЫБОР
	|			КОГДА &ИспользоватьОтборПоВиду
	|				ТОГДА ДанныеВАдресномХранении.ВидАдресногоДокумента = &ВидАдресногоДокумента
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Документ",Документ);	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоВиду",?(ВидАдресногоДокумента = Неопределено,Ложь,Истина));	
	Запрос.УстановитьПараметр("ВидАдресногоДокумента",ВидАдресногоДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой()
	
КонецФункции

Функция ТоварТолькоВМезонине(ДокументВыдачи) экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АХ_ДанныеВАдресномХранении.ВидАдресногоДокумента КАК ВидАдресногоДокумента
	|ИЗ
	|	РегистрСведений.АХ_ДанныеВАдресномХранении КАК АХ_ДанныеВАдресномХранении
	|ГДЕ
	|	АХ_ДанныеВАдресномХранении.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", ДокументВыдачи);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ТаблицаВыдач = РезультатЗапроса.Выгрузить();	
	
	СтруктураПоиска = Новый Структура("ВидАдресногоДокумента",Перечисления.АХ_ВидыДокументовАдресногоХранения.ПустаяСсылка());
	МассивНайденныхСтрок = ТаблицаВыдач.НайтиСтроки(СтруктураПоиска);
	
	Возврат МассивНайденныхСтрок.Количество() = ТаблицаВыдач.Количество();
	
КонецФункции // ТоварТолькоВМезонине()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПрокси(СтруктураОбработкиОшибок) Экспорт	
	
	Прокси = Неопределено;
	
	Попытка
		Прокси = АХ_ОбменПовтИсп.ПолучитьПрокси(ПараметрыПодключенияWSПроксиАдресногоХранения());		
	Исключение
		
		СообщениеОбОшибке = "";
		
		Инфо = ИнформацияОбОшибке();
		Описание = Инфо.Причина.Описание;
		Если Найти(Описание, "При создании описания сервиса произошла ошибка")
			ИЛИ Найти(Описание, "Ошибка HTTP") Тогда
			СообщениеОбОшибке = НСтр("ru='По указанному адресу сервис недоступен.';en='The service is not available.'");
		Иначе
			СообщениеОбОшибке = Инфо.Причина.Описание;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,,,,СтруктураОбработкиОшибок.ЕстьОшибки);
		
	КонецПопытки;
	
	Возврат Прокси;
	
КонецФункции // ПолучитьПрокси()

Функция ПараметрыПодключенияWSПроксиАдресногоХранения()  Экспорт
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL = СокрЛП(Константы.АХ_СтрокаПодключения.Получить()) + "/ws/EisfExchange?wsdl";
	ПараметрыПодключения.URIПространстваИмен = "EisfExchange";
	ПараметрыПодключения.ИмяСервиса = "EisfExchange";
	ПараметрыПодключения.ИмяТочкиПодключения = "EisfExchangeSoap";
	ПараметрыПодключения.ИмяПользователя = СокрЛП(Константы.АХ_ВнешнийПользователь.Получить());
	ПараметрыПодключения.Пароль = Константы.АХ_ПарольВнешнегоПользователя.Получить();
	ПараметрыПодключения.Таймаут = 0;
	ПараметрыПодключения.Вставить("ПолучитьWSОпределения",Истина);
	
	Возврат ПараметрыПодключения;
	
КонецФункции // ПараметрыПодключенияПараметрыПодключенияWSПрокси()

Функция ЗаполнитьДанныеОтменыОтгрузки(Источник)	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтменаОтгрузкиТовары.Номенклатура КАК Номенклатура,
	|	ОтменаОтгрузкиТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОтменаОтгрузкиТовары.ЗаказПокупателя КАК Заказ,
	|	СУММА(ОтменаОтгрузкиТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ОтменаОтгрузки.Товары КАК ОтменаОтгрузкиТовары
	|ГДЕ
	|	ОтменаОтгрузкиТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтменаОтгрузкиТовары.Номенклатура,
	|	ОтменаОтгрузкиТовары.ХарактеристикаНоменклатуры,
	|	ОтменаОтгрузкиТовары.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДанных = АХ_ОбменПравилаВыгрузки.ИнициализироватьДанныеКОтменеОтгрузки();
	
	СтруктураДанных.Ссылка = Источник;
	СтруктураДанных.Назначение = "ОтменаОтгрузки";
	СтруктураДанных.Дата = Источник.Дата; 
	СтруктураДанных.ДокументОснование = Источник.ДокументОснование;	
	СтруктураДанных.Товары = РезультатЗапроса.Выгрузить();
	
	Качество = "Новый";
	Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Источник.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак тогда
		Качество = "Брак";
	КонецЕсли;
	
	СтруктураДанных.Качество = Качество;
	
	Возврат СтруктураДанных;
	
КонецФункции // ЗаполнитьДанныеОтменыОтгрузки()

Функция ОписаниеТипаСтруктурыДанных(ПредставлениеПоля) Экспорт
	
	ОписаниеТипов = Новый ОписаниеТипов;
	
	Если ПредставлениеПоля = "Номенклатура" Тогда
		
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		
	ИначеЕсли ПредставлениеПоля = "ХарактеристикаНоменклатуры" Тогда
		
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		
	иначеЕсли ПредставлениеПоля = "Количество" Тогда
		
		ОписаниеТипов = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 3));
		
	иначеЕсли ПредставлениеПоля = "Заказ" Тогда
		
		ОписаниеТипов = Новый ОписаниеТипов(Документы.ТипВсеСсылки().Типы());
		
	ИначеЕсли ПредставлениеПоля = "ВидАдресногоДокумента" Тогда
		
		ОписаниеТипов = Новый ОписаниеТипов("ПеречислениеСсылка.АХ_ВидыДокументовАдресногоХранения");
		
	КонецЕсли;
	
	Возврат ОписаниеТипов;
	
КонецФункции // ОписаниеТипаСтруктурыДанных()

Функция МассивВидовАдресногоДокументаПоТипуУправленческого(Документ) Экспорт
	
	МассивВидов = Новый Массив;
	
	Если (ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеНоменклатуры") ИЛИ ТипЗнч(Документ) = Тип("ДокументОбъект.ПоступлениеНоменклатуры")) Тогда
		
		МассивВидов.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара);
		
	иначеЕсли (ТипЗнч(Документ) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику") ИЛИ ТипЗнч(Документ) = Тип("ДокументОбъект.ВыдачаСредствЗащитыСотруднику")) Тогда
		
		МассивВидов.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия);
		МассивВидов.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПустаяСсылка());
		
	иначеЕсли (ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеНоменклатуры") ИЛИ ТипЗнч(Документ) = Тип("ДокументОбъект.СписаниеНоменклатуры")) Тогда
		
		МассивВидов.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия);
		
	иначеЕсли (ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратНоменклатурыПоставщику") ИЛИ ТипЗнч(Документ) = Тип("ДокументОбъект.ВозвратНоменклатурыПоставщику")) Тогда
		
		МассивВидов.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия);		
		
	иначеЕсли (ТипЗнч(Документ) = Тип("ДокументСсылка.ОприходованиеНоменклатуры") ИЛИ ТипЗнч(Документ) = Тип("ДокументОбъект.ОприходованиеНоменклатуры")) Тогда
		
		МассивВидов.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара);
		
	КонецЕсли;
	
	Возврат МассивВидов;
	
КонецФункции // ВидАдресногоДокументаПоТипуУправленческого()

Функция ЕстьТоварыВМезонине(Документ) экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АХ_ДанныеВАдресномХранении.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.АХ_ДанныеВАдресномХранении КАК АХ_ДанныеВАдресномХранении
	|ГДЕ
	|	АХ_ДанныеВАдресномХранении.ВидАдресногоДокумента = ЗНАЧЕНИЕ(Перечисление.АХ_ВидыДокументовАдресногоХранения.ПустаяСсылка)
	|	И АХ_ДанныеВАдресномХранении.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции // ЕстьТоварыВМезонине()

Функция СкладЯвляетсяАдресным(Документ)
	
	//Определяем склад для каждого типа документа.	
	НаименованиеРеквизитаСклад = "Склад";
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Документ));
		
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеНоменклатуры")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументОбъект.ПеремещениеНоменклатуры")Тогда 
		
		Если НЕ ЭтоСсылка Тогда 
			
			СкладОтправитель = Документ["СкладОтправитель"];
			СкладПолучатель  = Документ["СкладПолучатель"];
			
		Иначе
			
			НаименованиеРеквизитаСклад = "СкладОтправитель,СкладПолучатель";			
			СтруктураЗначений = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,НаименованиеРеквизитаСклад);
			
			СкладОтправитель = СтруктураЗначений.СкладОтправитель;
			СкладПолучатель  = СтруктураЗначений.СкладПолучатель;
			
		КонеЦесли;
		
		Возврат СкладОтправитель.АХ_СлотовыйУчетПоСкладу ИЛИ СкладПолучатель.АХ_СлотовыйУчетПоСкладу;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику")
		ИЛИ ТипЗнч(Документ) = Тип("ДокументОбъект.ВыдачаСредствЗащитыСотруднику") Тогда
		
		Если Документ.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача Тогда 
			
			НаименованиеРеквизитаСклад = "СкладОтправитель";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоСсылка Тогда 	
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ,НаименованиеРеквизитаСклад).АХ_СлотовыйУчетПоСкладу;
	Иначе
		Возврат Документ[НаименованиеРеквизитаСклад].АХ_СлотовыйУчетПоСкладу;
		
	КонецЕсли;

КонецФункции // ПолучитьСкладПоДокументу()

#КонецОбласти

#Область ПодпискиНаСобытия

Процедура АХ_КонтрольОтправленныхДанныхПроведениеОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ ИЛИ НЕ НужноИспользоватьАдресныеМеханизмыВДокументе(Источник) тогда
		Возврат;
	КонецЕсли;
	
	//контроль на отказ проведения документа, рабочая схема для определенных документов.
 	
	Ссылка = Источник.Ссылка;
	
	Если НЕ НайтиПодчиненныйДокумент(Ссылка) тогда
		Возврат;
	КонецЕсли;
	
	//если снятие есть, редактировать нельзя документ.
	Если НайтиПодчиненныйДокумент(Ссылка,Перечисления.АХ_ВидыДокументовАдресногоХранения.Снятие) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ ранее был передан в базу адресного хранения, перепроведение невозможно",,,,Отказ);		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику") И (Ссылка.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача ИЛИ Ссылка.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача) Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(Ссылка) =  Тип("ДокументСсылка.ПеремещениеНоменклатуры")
		ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		
		//отдельные проверки, на формирование плана снятия и отдельно на поступление				
		//проверяем на поступление
		
		Если НайтиПодчиненныйДокумент(Ссылка,Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара) Тогда
			
			МассивВидов = Новый Массив;
			МассивВидов.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара);
			
			ТаблицаРасхождений = ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидов,,Истина);
			Отказ = ТаблицаРасхождений.Количество() > 0;
			
			Если Отказ Тогда                    
				
				ТекстСообщения = нСтр("ru='Ошибка. Различаются текущие данные документа и уже переданные в адресное хранение поступление'", "ru");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		//проверяем на план снятия
		Если Не Отказ Тогда 					
			Если НайтиПодчиненныйДокумент(Ссылка,Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия) Тогда						
				
				МассивВидов = Новый Массив;
				МассивВидов.Добавить(Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия);
				
				ТаблицаРасхождений = ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидов,"ТолькоОтрицательные",Ложь);
				Отказ = ТаблицаРасхождений.Количество() > 0 ;
				
				Если Отказ Тогда 
					ТекстСообщения = нСтр("ru='Ошибка. Изменение количества в меньшую сторону невозможно при переданном документе в адресное хранение.'", "ru");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	иначе
		
		//возможно проведение в случае увеличения количества по данным типам документов		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику")
			ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.СписаниеНоменклатуры")
			ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратНоменклатурыПоставщику")
			ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВыдачаДежурныхСредствЗащиты") Тогда
			
			ТаблицаРасхождений = ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокументаПоТипуУправленческого(Ссылка),"ТолькоОтрицательные");
			Отказ = ТаблицаРасхождений.Количество() > 0 ;
			
			Если Отказ Тогда
				ТекстСообщения = нСтр("ru='Ошибка. Изменение количества в меньшую сторону невозможно при переданном документе в адресное хранение.'", "ru");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		Иначе
			
			// если таблица данных не пустая, значит изменили данные табличной части
			//для того чтобы можно было редактировать все кроме номенклатуры и количества
			
			ТаблицаРасхождений = ПолучитьТаблицуРасхожденийОбъектаИПодчиненных(Ссылка,МассивВидовАдресногоДокументаПоТипуУправленческого(Ссылка));
			Отказ = ТаблицаРасхождений.Количество() > 0;
			
			Если Отказ Тогда
				ТекстСообщения = нСтр("ru='Ошибка. Различаются текущие данные документа и уже переданные в адресное хранение поступление'", "ru");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		конецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура АХ_КонтрольОтправленныхДанныхУдалениеПроведенияОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Если Отказ ИЛИ НЕ НужноИспользоватьАдресныеМеханизмыВДокументе(Источник) тогда
		Возврат;
	КонецЕсли;
	
	Отказ = НайтиПодчиненныйДокумент(Источник.Ссылка);
	
	Если Отказ и ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ВыдачаСредствЗащитыСотруднику") Тогда
		
		//если товар только в мезонине, то можно смело отменять проведение документа и очищать данные
		Если ТоварТолькоВМезонине(Источник.Ссылка) Тогда
			
			Отказ = Ложь;
			
			НаборЗаписей = РегистрыСведений.АХ_ДанныеВАдресномХранении.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
			НаборЗаписей.Записать();
			
		КонецЕсли;   
		
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстСообщения = нСтр("ru='Обнаружено различие между текущими данными и в адресном хранении'", "ru");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура АХ_ПроверкаСлужебныхРеквизовПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Заполнение реквизитов перед записью, чтобы не делать отдельную подписку <<<	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВыдачаСредствЗащитыСотруднику") Тогда 
		
		Если АХ_ОбменВызовСервера.НужноИспользоватьАдресныеМеханизмыВДокументеПередЗаписью(Источник) 
			И (Источник.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача ИЛИ Источник.ВидВыдачиСИЗ = Перечисления.ВидыВыдачиСИЗ.ПроизвольнаяВыдача) Тогда 
			
			Если НЕ ЗначениеЗаполнено(Источник.АХ_СтатусСборки) Тогда 			
				Источник.АХ_СтатусСборки = Перечисления.АХ_СтатусыСборкиТоваров.ВСборке;
			КонецЕсли;
			
		Иначе
			Источник.АХ_СтатусСборки = Перечисления.АХ_СтатусыСборкиТоваров.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;	
	//Заполнение реквизитов перед записью, чтобы не делать отдельную подписку >>>
	
	
	//Проверка на изменение вида выдачи с персональной на любую другую, т.к меняется алгоритм передачи данных в адресное хранение	
	Ссылка = Источник.Ссылка;
	
	Если НЕ Источник.ЭтоНовый() И АХ_ОбменВызовСервера.НайтиПодчиненныйДокумент(Ссылка) Тогда
		
		МассивРеквизитов = Новый Массив;
		
		//Изменили дату документа.
		Если Источник.Дата < Константы.АХ_ДатаСтартаАдресногоХранения.Получить() Тогда 
			МассивРеквизитов.Добавить("Дата");
		КонецЕсли;
		
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда 
			
			МассивРеквизитов.Добавить("Операция");
			МассивРеквизитов.Добавить("Склад");
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеНоменклатуры") Тогда 
			
			Если АХ_ОбменВызовСервера.НайтиПодчиненныйДокумент(Ссылка,Перечисления.АХ_ВидыДокументовАдресногоХранения.ПоступлениеТовара) Тогда
				МассивРеквизитов.Добавить("СкладПолучатель");
			КонецЕсли;
			
			Если АХ_ОбменВызовСервера.НайтиПодчиненныйДокумент(Ссылка,Перечисления.АХ_ВидыДокументовАдресногоХранения.ПланСнятия) Тогда
				МассивРеквизитов.Добавить("СкладОтправитель");			
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВыдачаСредствЗащитыСотруднику") Тогда 
			
			МассивРеквизитов.Добавить("ВидВыдачиСИЗ");
			МассивРеквизитов.Добавить("Склад");
			
		Иначе
			
			МассивРеквизитов.Добавить("Склад");
			
		КонецЕсли;
		
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,МассивРеквизитов);
		
		Для Каждого КлючИЗначение из СтруктураРеквизитов цикл
			
			Реквизит = КлючИЗначение.Ключ;
			
			Если Реквизит = "Дата" Тогда
				ИсточникРеквизитов = "СтандартныеРеквизиты";
				Представление = "Имя";
			Иначе
				ИсточникРеквизитов = "Реквизиты";
				Представление = "Синоним";
			КонецЕсли;
			
			Если КлючИЗначение.Значение <> Источник[Реквизит] Тогда
				
				СинонимРеквизита = Источник.Метаданные()[ИсточникРеквизитов][Реквизит][Представление];
				
				ТекстОшибки = (нСтр("ru='Документ уже используется в адресном хранении. Изменение реквизита: " + СинонимРеквизита + " невозможно'", "ru"));								
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,Реквизит,"Объект",Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти




