// в данном модуле находятся процедуры, обеспечивающие взаимодействие с SAP

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//Формирование строки подключения
///////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьНастройкиПодключенияСАП()Экспорт
	
	СтруктураНастроек = Константы.ЛогинПользователяСАП.Получить().Получить();
	
	Если не ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("Client","");
		СтруктураНастроек.Вставить("Hostname","");
		СтруктураНастроек.Вставить("Password","");
		СтруктураНастроек.Вставить("Sysnr","00");
		СтруктураНастроек.Вставить("Timeout",60);
		СтруктураНастроек.Вставить("User","");
		СтруктураНастроек.Вставить("Usesapgui","0");
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция СформироватьСтрокуПодключенияСАП(СтруктураНастроек) экспорт
	
	Client = ЗначениеПоКлючуСтруктуры("Client",СтруктураНастроек);
	Hostname = ЗначениеПоКлючуСтруктуры("Hostname",СтруктураНастроек);
	Sysnr = ЗначениеПоКлючуСтруктуры("Sysnr",СтруктураНастроек);
	Timeout = ЗначениеПоКлючуСтруктуры("Timeout",СтруктураНастроек);
	Usesapgui = ЗначениеПоКлючуСтруктуры("Usesapgui",СтруктураНастроек);
	
	User = ЗначениеПоКлючуСтруктуры("User",СтруктураНастроек);
	Password = ЗначениеПоКлючуСтруктуры("Password",СтруктураНастроек);
	
	СтрокаПодключения = "CLIENT="+Client+" "+"USER="+User+" "+"PASSWORD="+Password+" "+"USESAPGUI="+Usesapgui+" "+"SYSNR="+Sysnr+" "+"TIMEOUT="+Timeout+" "+"HOSTNAME="+Hostname;
	
	Возврат СтрокаПодключения;
	
КонецФункции	

Процедура УстановитьНастройкиПодключенияСАП(СтруктураПараметровПодключения) Экспорт 

	Хранилище = Новый ХранилищеЗначения(СтруктураПараметровПодключения);
	
	Константы.ЛогинПользователяСАП.Установить(Хранилище);
	
КонецПроцедуры

// Возвращает строку значения по свойству структуры.
// 
// Параметры:
//    Ключ - Строка - ключ структуры.
//    Структура - Структура - передаваемая структура.
//
// Возвращаемое значение - ПустаяСтрока или ПроизвольныйТип - значение.
//
Функция ЗначениеПоКлючуСтруктуры(Ключ, Структура)экспорт
	
	Значение = Неопределено;
	
	Если Структура.Свойство(Ключ, Значение) Тогда 
		Возврат СокрЛП(Строка(Значение));
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Процедуры установки соединения с САП
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция УстановитьСоединениеСАП(ПодключениеКСАП,ОписаниеОшибки) Экспорт
	
	Если ПодключениеКСАП = Неопределено Тогда
		 ПодключениеКСАП = Новый COMОбъект("RZN_data_trans.rzn_trans.1");
		 ОписаниеОшибки = "";
		 СтрокаПодключенияСАП = СформироватьСтрокуПодключенияСАП(ПолучитьНастройкиПодключенияСАП());
		 Возврат ПодключениеКСАП.RFC_CONNECT(СтрокаПодключенияСАП,ОписаниеОшибки);
	Иначе 
		Возврат 1; 
	КонецЕсли;	 	 
	
КонецФункции

Процедура РазорватьСоединениеСАП(ПодключениеКСАП) Экспорт
	
	Если ПодключениеКСАП<>Неопределено Тогда
		ПодключениеКСАП.RFC_CloseConnection();
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Служебные процедуры обеспечивающие обмен
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Точка входа регламентного задания
Процедура СинхронизацияДанныхСАП() Экспорт
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.СинхронизацияДанныхСАП,"Регламентный обмен данными с САП отменен, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Интеграция_САП_Сервер.ВыполнитьОбмен(неопределено,ложь);
	
КонецПроцедуры

//+++АСТБ_Горюшин_Алексей_47891
//Точка входа ручного запуска
Процедура СинхронизацияДанныхСАП_Ручная() Экспорт
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.СинхронизацияДанныхСАП,"Регламентный обмен данными с САП отменен, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Интеграция_САП_Сервер.ВыполнитьОбмен(Неопределено, Истина);
	
КонецПроцедуры
//---АСТБ_Горюшин_Алексей_47891

Процедура ЗапуститьФоновоеЗаданиеОбмена(Организация = Неопределено,ЗапущеноПользователем = Ложь,ПараметрыОбмена = неопределено) Экспорт 
	
	МассивФоновыхЗаданий = ПолучитьФоновоеЗаданиеПоОбменуСАП(СостояниеФоновогоЗадания.Активно);
	
	Если МассивФоновыхЗаданий.Количество() = 0 Тогда
		МассивПараметровЗадания = Новый Массив;
		МассивПараметровЗадания.Добавить(Организация);
		МассивПараметровЗадания.Добавить(ЗапущеноПользователем);
		МассивПараметровЗадания.Добавить(ПараметрыОбмена);
		ФоновыеЗадания.Выполнить("Интеграция_САП_Сервер.ВыполнитьОбмен",МассивПараметровЗадания,"ОбменДаннымиSAP","Обмен данными SAP");
	Иначе
		ТекстОшибки = "Обмен уже запущен.
		|Невозможно запустить несколько экземпляров обмена с SAP.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;	
	
КонецПроцедуры	

//функция ищет фоновые задания с ключом "ОбменДаннымиSAP"
//и возвращает массив заданий с заданным Состоянием Фонового Задания
Функция ПолучитьФоновоеЗаданиеПоОбменуСАП(СостояниеЗадания = Неопределено) Экспорт
	
	Отбор = новый Структура;
	Отбор.Вставить("Ключ","ОбменДаннымиSAP");
	Если не СостояниеЗадания = Неопределено Тогда
		Отбор.Вставить("Состояние",СостояниеЗадания);
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Задание;
	
КонецФункции


//процедура запуска обмена
//входящие параметры:
//	организация - передается в случае запуска обмена по конкретной организации.
//	если не задано то обмен будет выполнен по всем организациям,
//	у которых реквизит ВыполнятьОбменПоРасписанию установлен в "истина".
Процедура ВыполнитьОбмен(Организация,ЗапущеноПользователем,ПараметрыОбмена = Неопределено) Экспорт

	Если не ТипЗнч(ПараметрыОбмена) = Тип("Структура") Тогда
		ПараметрыОбмена = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбмена.Вставить("ЗапущеноПользователем",ЗапущеноПользователем);
	
	Если Организация = Неопределено Тогда
		ВыборкаЗаписей = РегистрыСведений.НастройкиПараметровОбменаСАП.Выбрать();
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Организация",Организация);
		ВыборкаЗаписей = РегистрыСведений.НастройкиПараметровОбменаСАП.Выбрать(СтруктураОтбора);
	КонецЕсли;
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		//фильтр по организации
		Если не Организация = Неопределено и 
			не Организация = ВыборкаЗаписей.Организация Тогда 
			Продолжить;
		КонецЕсли;	
		
		//***НСК Трегубов А.А.*** -- переадресация на веб сервис, при нажатии кнопки вызова из формы списка поступлений --  13.09.2021 <<<
		Если ВыборкаЗаписей.ЗагружатьПоступленияИзСАП Тогда 
			ЗагрузитьДокументыПоступленияНоменклатурыССАП(ВыборкаЗаписей.Организация);
			Продолжить;
		КонецЕсли;
		//***НСК Трегубов А.А.*** -- переадресация на веб сервис, при нажатии кнопки вызова из формы списка поступлений  --  13.09.2021 >>>		
		
		////фильтр по регламентному заданию
		//Если ВыборкаЗаписей.ВыполнятьОбменПоРасписанию = Ложь и 
		//	ЗапущеноПользователем = Ложь Тогда
		//	Продолжить;
		//КонецЕсли;	
		
	    //заполняем структуру настроек
		
		ПараметрыОбмена.Вставить("Организация"			,ВыборкаЗаписей.Организация);
		ПараметрыОбмена.Вставить("DSTNM"				,ВыборкаЗаписей.DSTNM_Получателя);
		ПараметрыОбмена.Вставить("ВремяНачалаОбмена"	,ТекущаяДата()); //необходимо для фильтрации записей журнала регистрации
		
		Если не ПараметрыОбмена.Свойство("PSIZE") Тогда
			ПараметрыОбмена.Вставить("PSIZE"			,?(ВыборкаЗаписей.PSIZE=0,"0000000000",Формат(ВыборкаЗаписей.PSIZE,"ЧЦ=10; ЧВН=; ЧГ=")));
		КонецЕсли;	
		
		Если ВыборкаЗаписей.ВыводитьИнтерактивныеСообщенияОбмена Тогда
			ПараметрыОбмена.Вставить("ВыводитьИнтерактивныеСообщенияОбмена"		,Истина );
			//ПараметрыОбмена.Вставить("ВыводитьСообщенияВыбраннымПользователям"	,ВыборкаЗаписей.ВыводитьСообщенияВыбраннымПользователям );
			ПараметрыОбмена.Вставить("ВыводитьСообщенияПоВыбраннымСобытиям"		,ВыборкаЗаписей.ВыводитьСообщенияПоВыбраннымСобытиям );
			
			//вывод сообщения о начале обмена
			СформироватьОповещениеПользователям(ПараметрыОбмена,
											"ОповещатьОНачалеОбмена",
											,
											" Инициирован обмен с SAP "+" по "+ВыборкаЗаписей.Организация.Наименование+".",
											);		
			
		Иначе
			ПараметрыОбмена.Вставить("ВыводитьИнтерактивныеСообщенияОбмена"		,Ложь );
		КонецЕсли;
		
		Если не ПараметрыОбмена.Свойство("STATUS") Тогда
			Если не ВыборкаЗаписей.ЗагужатьТолькоНовыеДокументы Тогда
				//читаем Документы с ошибками
				ПараметрыОбмена.Вставить("STATUS",3);
				ПрочитатьОчередьОбменаОрганизации(ПараметрыОбмена,ВыборкаЗаписей.DSTNM_Получателя);
			КонецЕсли;
			//читаем новые Документы
			ПараметрыОбмена.Вставить("STATUS",1);
			ПрочитатьОчередьОбменаОрганизации(ПараметрыОбмена,ВыборкаЗаписей.DSTNM_Получателя);
		Иначе
			//читаем Документы только с указанным статусом
			//ПараметрыОбмена.Вставить("STATUS",Status);
			ПрочитатьОчередьОбменаОрганизации(ПараметрыОбмена,ВыборкаЗаписей.DSTNM_Получателя);
        КонецЕсли;

		//вывод сообщения об окончании обмена
		СформироватьОповещениеПользователям(ПараметрыОбмена,
										"ОповещатьОбОкончанииЗагрузкиДанных",
										,
										"Завешен обмен с SAP "+" по "+ВыборкаЗаписей.Организация.Наименование+".",
										);		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПрочитатьОчередьОбменаОрганизации(ПараметрыОбмена,ПрефиксПолучателя)

	ИмяТранзакции  = "ZCU_IF_1S_READ_EXCHANGE";
	
	СтруктураТаблиц = ПолучитьОписаниеТаблицФункции(ПараметрыОбмена,ИмяТранзакции);
	
	Если СтруктураТаблиц.Свойство("Error") Тогда
		//обнаружены проблемы подключения
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка чтения очереди обмена",УровеньЖурналаРегистрации.Ошибка,,,"Процедура формирования параметров для чтения очереди обмена САП прервана по ошибке.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		//вывод сообщения об остановке обмена
		ТекстСообщения = "Ошибка чтения очереди обмена SAP.
		|Обмен не выполнен.";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
											"ОповещатьОбОшибках",
											,
											ТекстСообщения,
											"Ошибка32");	
		
		Возврат;
		
	КонецЕсли;	

	ТаблицаИсходящихПараметров 		= "";
	ТаблицаВозвращаемыхПараметров 	= "";
	
	СтруктураТаблиц.Свойство("Out",ТаблицаИсходящихПараметров);
	СтруктураТаблиц.Свойство("In",ТаблицаВозвращаемыхПараметров);
	
	//справка
	
	//параметры ZCU_IF_1S_READ_EXCHANGE
	//входящие:
	//таблица IT_PARAMS
	//	DESTINATION - Получатель документов (префикс)
	//	RELID - идентификатор типа обмена
	//	STATUS 
	//		1- новые документы
	//		2 - успешно переданные
	//		3- документы в которых возникли ошибки при обмене
	//возвращаемые
	//таблица ET_PARAMS
	//	DATA (Пример “0000000030&1”)
	//
	//если в возвращаемых параметрах пусто - документов для обмена нет.
	
	Таблица_IT_PARAMS = ТаблицаИсходящихПараметров[0].ТаблицаПараметров;
	
	НоваяСтрока 			= Таблица_IT_PARAMS.Добавить();
	НоваяСтрока.DESTINATION	= ПрефиксПолучателя;
	ПараметрыОбмена.Свойство("STATUS",НоваяСтрока.STATUS);
	
	Если не ТипЗнч(ПараметрыОбмена) = Тип("Структура") Тогда
		
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка чтения очереди обмена",УровеньЖурналаРегистрации.Ошибка,,,"Заданы некорректные параметры чтения очереди обмена SAP. ",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

		//вывод сообщения о ошибка чтения очереди обмена
		ТекстСообщения = "Заданы некорректные параметры чтения очереди обмена SAP.
			|Обмен не выполнен!";
			
			СформироватьОповещениеПользователям(ПараметрыОбмена,
												"ОповещатьОбОшибках",
												,
												ТекстСообщения,
												"Ошибка32");	
		Возврат;
		
	КонецЕсли;	
	
	ЗапрашиваемыйСтатус = "";
	ПараметрыОбмена.Свойство("STATUS",ЗапрашиваемыйСтатус);
	
	СтатусДляСообщенийПользователю ="STATUS ="+?(ЗначениеЗаполнено(ЗапрашиваемыйСтатус),Строка(ЗапрашиваемыйСтатус),"не установлен");
	
	ПодключениеКСАП = неопределено;
	ОписаниеОшибки  = "";
	
	РезультатПодключения = УстановитьСоединениеСАП(ПодключениеКСАП,ОписаниеОшибки);
	
	ПодключениеКСАП.Call_Trn(ТаблицаИсходящихПараметров,ТаблицаВозвращаемыхПараметров,ИмяТранзакции,ОписаниеОшибки);
	
	РазорватьСоединениеСАП(ПодключениеКСАП);
	
	ПодключениеКСАП = Неопределено;

	
	ОписаниеОшибки = СформироватьТекстОшибкиПодключенияСАП(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) тогда
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка чтения очереди обмена",УровеньЖурналаРегистрации.Ошибка,,,"Чтение очереди обмена САП прервано по ошибке. "+СтатусДляСообщенийПользователю+".
		|"+ОписаниеОшибки,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		ТекстСообщения = "Ошибка чтения очереди обмена SAP.
		|Обмен не выполнен.
		|"+СтатусДляСообщенийПользователю+".";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
											"ОповещатьОбОшибках",
											,
											ТекстСообщения,
											"Ошибка32");	

		Возврат;
	КонецЕсли;
	
	ДанныеОчередиОбмена = ТаблицаВозвращаемыхПараметров[0].ТаблицаПараметров;
		
		//обработка оповещений при обмене
		
	ОбработатьОчередьОбменаСАП(ДанныеОчередиОбмена,ПараметрыОбмена);
	
КонецПроцедуры	

Функция ПолучитьIDПоследнегоЗагруженногоДокумента(DSTNM,RELID,STATUS = 2)
	
	СтрокаИдентификатор = СокрЛП(DSTNM)+"_"+СокрЛП(RELID);
	
	Запрос = Новый Запрос;
	
	Если STATUS = 2 Тогда
			
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(ОбменДаннымиСАП.Reqid) КАК Reqid
			|ИЗ
			|	РегистрСведений.ОбменДаннымиСАП КАК ОбменДаннымиСАП
			|ГДЕ
			|	ОбменДаннымиСАП.СтатусСостоянияДокумента = &СтатусСостоянияДокумента
			|	И ОбменДаннымиСАП.DSTNM_RELID = &DSTNM_RELID
			|	И НЕ ОбменДаннымиСАП.Документ.Ссылка = НЕОПРЕДЕЛЕНО";
			
	ИначеЕсли STATUS = 3 Тогда
					
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МИНИМУМ(ОбменДаннымиСАП.Reqid) КАК Reqid
			|ИЗ
			|	РегистрСведений.ОбменДаннымиСАП КАК ОбменДаннымиСАП
			|ГДЕ
			|	ОбменДаннымиСАП.СтатусСостоянияДокумента = &СтатусСостоянияДокумента
			|	И ОбменДаннымиСАП.DSTNM_RELID = &DSTNM_RELID";
			
	КонецЕсли;	
	               			
	Запрос.УстановитьПараметр("СтатусСостоянияДокумента",STATUS);	
	Запрос.УстановитьПараметр("DSTNM_RELID",СтрокаИдентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
    Выборка.Следующий();
	
	Если не ЗначениеЗаполнено(Выборка.Reqid)  Тогда
		Макс_Reqid = "";
	Иначе
		Если STATUS = 2 Тогда
			Макс_Reqid = Формат(Выборка.Reqid+1,"ЧЦ=20; ЧВН=; ЧГ=");
		Иначе
			Макс_Reqid = Формат(Выборка.Reqid,"ЧЦ=20; ЧВН=; ЧГ=");
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Макс_Reqid;
		
КонецФункции	

//функция производит поиск документов в БД
//по переданным параметрам
//входящие парметры:
//	-ВидДокумента
//	-Request_id
//	-НомерВходящегоДокумента
//	-ДатаВходящегоДокумента
//алгоритм поиска следующий.
//сначала ищем Request_id, если найден проверяем остальные поля.
//если все совпадает - документ найден,
//если нет ищем документ у которого совпадают НомерВходящегоДокумента и ДатаВходящегоДокумента
Функция НайтиДокументВБД(ПараметрыОбмена,ТипДокумента,Request_id,НомерВходящегоДокумента,ДатаВходящегоДокумента = неопределено)
	
	Если ДатаВходящегоДокумента = Неопределено Тогда
		ИскатьПо_ДатеДокумента = Ложь;
	Иначе	
	    ИскатьПо_ДатеДокумента = Истина;
	КонецЕсли;	
		
	НайденныйДокумент = НайтиДокументПоИдентификатору(Request_id);
	//НайденныйДокумент = Неопределено;
	Если ЗначениеЗаполнено(НайденныйДокумент) и
		ТипЗнч(НайденныйДокумент) = ТипДокумента и
		НайденныйДокумент.НомерВходящегоДокумента = НомерВходящегоДокумента Тогда
		
		Возврат НайденныйДокумент;
		
	КонецЕсли;
	
	//что то пошло не так - ищем по виду документа
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерВходящегоДокумента",НомерВходящегоДокумента);
	
	Если не МетаданныеДокумента.Реквизиты.Найти("ДатаВходящегоДокумента") = Неопределено и 
		ИскатьПо_ДатеДокумента Тогда
			
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента",НачалоДня(ДатаВходящегоДокумента));
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ТаблицаДокументов.Ссылка
		               |ИЗ
		               |	Документ."+МетаданныеДокумента.Имя+" КАК ТаблицаДокументов
		               |ГДЕ
		               |	ТаблицаДокументов.НомерВходящегоДокумента = &НомерВходящегоДокумента
		               |	И ТаблицаДокументов.ДатаВходящегоДокумента = &ДатаВходящегоДокумента";
	Иначе
		
		//ищем только по входящиму номеру документа
		ТекстЗапроса = "ВЫБРАТЬ
			|	ТаблицаДокументов.Ссылка
			|ИЗ
			|	Документ."+МетаданныеДокумента.Имя+" КАК ТаблицаДокументов
			|ГДЕ
			|	ТаблицаДокументов.НомерВходящегоДокумента = &НомерВходящегоДокумента";

		
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
		
	Результат = Запрос.Выполнить();
		
	Если не Результат.Пустой() Тогда
			
		Выборка = Результат.Выбрать();
		
		//дополнительный контроль, того что документ уникален
		Если Выборка.Количество()>1 тогда
			//выводим предупреждение пользователю
			ЗаписьЖурналаРегистрации("Обмен САП.Ошибка обработки данных",УровеньЖурналаРегистрации.Ошибка,,,"Найдены несколько документов "+МетаданныеДокумента.Имя+" с ""Номер входящего документа"" "+НомерВходящегоДокумента+";
				|"+?(ИскатьПо_ДатеДокумента," ""Дата входящего документа"" "+Формат(ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy")+"
				|","")+"Необходимо проверить уникальность данных документов!",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
			ТекстСообщения = "Ошибка обработки данных.
			|Найдены несколько документов, возможно неуникальных.
			|Сообщите администратору!";
			СформироватьОповещениеПользователям(ПараметрыОбмена,
												"ОповещатьОбОшибках",
												,
												ТекстСообщения,
												"Ошибка32");	
			
		КонецЕсли;	
		
		Если Выборка.Следующий() Тогда
			 Возврат Выборка.Ссылка;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиДокументПоИдентификатору(Request_id)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Reqid",Число(Request_id));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбменДаннымиСАП.Документ
	               |ИЗ
	               |	РегистрСведений.ОбменДаннымиСАП КАК ОбменДаннымиСАП
	               |ГДЕ
	               |	ОбменДаннымиСАП.Reqid = &Reqid
				   |И НЕ ОбменДаннымиСАП.Документ.Ссылка = НЕОПРЕДЕЛЕНО";
				   
	Результат = Запрос.Выполнить();
	
	Если не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Документ;
		
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции	

//функция определяет дату загружаемого документа
//алгоритм промежуточный и скорее всего будет изменен
Функция ОпределитьДатуДокумента(ДатаЗагружаемогоДокумента)
	
	Возврат ДатаЗагружаемогоДокумента;
	
	//Если НачалоДня(ДатаЗагружаемогоДокумента) = НачалоДня(ТекущаяДата()) Тогда
	//	// в пределах дня воспроизводим позицию документа в очереди
	//	Возврат ТекущаяДата();
	//Иначе
	//	// задним числом обеспечиваем идентичность дат
	//	Возврат ДатаЗагружаемогоДокумента;
	//КонецЕсли;
	
КонецФункции	

//функция выполняет поиск склада по идентификатору
//идентификатором является строка следующего вида: LGNUM_LGTYP 
Функция НайтиСкладПоИдентификатору(LGNUM,LGTYP)
	
	СпрСклады = Справочники.Склады;
	
	Возврат СпрСклады.НайтиПоРеквизиту("LGNUM_LGTYP",LGNUM+"_"+LGTYP);
	
КонецФункции	

//функция ищет товар с указанным кодом синхронизации в справочнике
//и возвращает его если он там найден
//входящие Параметры:
//	КодСинхронизации
//возвращаемое значение:
//	элемент справочника номенклатура
Функция НайтиНоменклатуруПоКоду(MATNR)
	
	СпрНоменклатура = Справочники.Номенклатура;
	Если ТипЗнч(MATNR) = Тип("Строка") Тогда
		Числовой_MATNR = ПреобразоватьСтрокуВЧисло(MATNR);
	Иначе
		Числовой_MATNR = MATNR;
	КонецЕсли;	
	Элемент = СпрНоменклатура.НайтиПоРеквизиту("КодСинхронизации",Числовой_MATNR);
	
	Возврат Элемент;
	
КонецФункции	

//Функция преобразования строки в число
//
Функция ПреобразоватьСтрокуВЧисло(MATNR,РежимКода = Истина);
	
	ЧисловыеСимволы = "0123456789";
	СлужебныеСимволы = ",.";
	
	ЕстьВозможностьПреобразования = Истина;
	
	КоличествоЗапятых = 0;
	
	Для НомерСимвола = 1 по СтрДлина(MATNR) Цикл
		ТекущийСимволСтроки = Сред(MATNR,НомерСимвола,1);
		Если Найти(ЧисловыеСимволы,ТекущийСимволСтроки) = 0 Тогда
			Если РежимКода Тогда
				ЕстьВозможностьПреобразования = Ложь;
				Прервать;	
			Иначе //фактически это режим числа
				Если Найти(СлужебныеСимволы,ТекущийСимволСтроки)=0 или КоличествоЗапятых = 1 Тогда
					ЕстьВозможностьПреобразования = Ложь;
					Прервать;
				Иначе
					КоличествоЗапятых = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВозможностьПреобразования Тогда
		Возврат Число(MATNR);
	Иначе
		Если РежимКода Тогда
			Возврат Неопределено;
		Иначе
			Возврат 0;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции	

//функция определяет ведение учета по характеристикам
//параметры
//входящие
//	товар
//исходящие
//	булево
//		истина - учет по характеристикам ведется
//		ложь - учет по характеристикам не ведется
Функция  ВедетсяУчетПоХарактеристикам(Товар)
	
	СпрХарактеристик = Справочники.ХарактеристикиНоменклатуры;
	Выборка  = СпрХарактеристик.Выбрать(,Товар,,);
	
	//Один из вариантов алгоритма - пока не используем
	
	//Пока Выборка.Следующий() Цикл
	//	Если не Выборка.ПометкаУдаления Тогда
	//		Возврат Истина;
	//	КонецЕсли;	
	//КонецЦикла;
	//
	//Возврат Ложь;
	
	//второй вариант
	
	Возврат Выборка.Следующий();
	
КонецФункции	

//функция возвращает характеристику по коду
//входящие параметры:
//	Товар - ссылка на элемент справочника
//	MSIZE - строка с кодом размера САП
//Возвращаемое значение
//	характеристика номенклатуры.
Функция НайтиХарактеристикуПоКоду(Товар,MSIZE)
	
	СпрХарактеристик = Справочники.ХарактеристикиНоменклатуры;
	Возврат СпрХарактеристик.НайтиПоРеквизиту("КодSAP",MSIZE,,Товар);

КонецФункции	

//функция возвращает массив префиксов получателей, у которых проставлен
//флаг ВыполнятьОбменПоРасписанию
//параметры функции:
//		нет.
//Возвращаемое значение
//	массив. заполненный префиксами получателей или пустой.
Функция СформироватьМассивПолучателей()
	
	МассивПолучателей = Новый Массив;
	
	//определим DESTINATION - Получатель документов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиПараметровОбменаСАП.Организация,
	               |	НастройкиПараметровОбменаСАП.DSTNM_Получателя
	               |ИЗ
	               |	РегистрСведений.НастройкиПараметровОбменаСАП КАК НастройкиПараметровОбменаСАП
	               |ГДЕ
	               |	НастройкиПараметровОбменаСАП.ВыполнятьОбменПоРасписанию = ИСТИНА";
				   
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат МассивПолучателей;
	КонецЕсли;	
	
	ТаблицаПолучателей = Результат.Выгрузить();
	Для каждого СтрокаТаблицы из ТаблицаПолучателей Цикл
		ПрефиксПолучателя = СтрокаТаблицы.DSTNM_Получателя;
		Если ЗначениеЗаполнено(ПрефиксПолучателя) тогда
			МассивПолучателей.Добавить(ПрефиксПолучателя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПолучателей;
	
КонецФункции	

//функция возвращает таблицы, передающиеся в качестве параметров в rzn data trans
//параметры
//	входящие
//		ИмяФункции - строка
//	исходящие
//		Структура- состоит из 3-х элементов
//			"out" - таблица исходящих в сап параметров
//			"in" - таблица возвращаемых в 1с параметров
//			"error" - строка. Возвращается строковое описание возникшей ошибки.
//				если ошибок нет, то в этом случае данного ключа в структуре нет.
Функция ПолучитьОписаниеТаблицФункции(ПараметрыОбмена,ИмяФункции) Экспорт
	
	ОписаниеОшибки= "";
	
	ТаблицаИсходящихПараметров = Новый ТаблицаЗначений;
	ТаблицаИсходящихПараметров.Колонки.Добавить("ИмяТаблицы");
	ТаблицаИсходящихПараметров.Колонки.Добавить("ТаблицаПараметров");
	
	ПустаяТаблица = ТаблицаИсходящихПараметров.Скопировать();
	
	НоваяСтрока = ТаблицаИсходящихПараметров.Добавить();
	НоваяСтрока.ИмяТаблицы = "IT_FUNCTION";
	НоваяСтрока.ТаблицаПараметров = Новый ТаблицаЗначений;
	НоваяСтрока.ТаблицаПараметров.Колонки.Добавить("ИмяТранзакции");
	НоваяСтрокаТаблицыПараметров = НоваяСтрока.ТаблицаПараметров.Добавить();
	НоваяСтрокаТаблицыПараметров.ИмяТранзакции = ИмяФункции;

	ВозвращаемаяТаблица = Новый ТаблицаЗначений;
	ВозвращаемаяТаблица.Колонки.Добавить("ИмяТаблицы");
	ВозвращаемаяТаблица.Колонки.Добавить("ТаблицаПараметров");
	НоваяСтрока = ВозвращаемаяТаблица.Добавить();
	НоваяСтрока.ИмяТаблицы = "ET_PARAMS";
	НоваяСтрока.ТаблицаПараметров = Новый ТаблицаЗначений;

	ПодключениеКСАП = неопределено;
	
	РезультатПодключения = УстановитьСоединениеСАП(ПодключениеКСАП,ОписаниеОшибки);
	
	ИмяТранзакции = "ZCU_RFC_GET_FUNC_PARAMS";
	
	ПодключениеКСАП.Call_Trn(ТаблицаИсходящихПараметров,ВозвращаемаяТаблица,ИмяТранзакции,ОписаниеОшибки);
	
	
	РазорватьСоединениеСАП(ПодключениеКСАП);
	ПодключениеКСАП = Неопределено;
	
	ОписаниеОшибки = СформироватьТекстОшибкиПодключенияСАП(ОписаниеОшибки);
	
	СтруктураВозвращаемыхПараметров = Новый Структура;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) тогда
		
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка установки соединения",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки+".
		|Вызов осуществлялся из функции ""ПолучитьОписаниеТаблицФункции"".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		СтруктураВозвращаемыхПараметров.Вставить("Error",ОписаниеОшибки);
		СтруктураВозвращаемыхПараметров.Вставить("Out"	,ПустаяТаблица);
		СтруктураВозвращаемыхПараметров.Вставить("In"	,ПустаяТаблица);
		
		Возврат СтруктураВозвращаемыхПараметров;
		
	КонецЕсли;	
	
	//ошибок нет - проверяем возвращенное САПом значение
	НайденнаяСтрока =  ВозвращаемаяТаблица.Найти("ET_PARAMS","ИмяТаблицы");
	
	Если НайденнаяСтрока = Неопределено Тогда
		//это странная проблема. такого быть не должно.
		ОписаниеОшибки = "Отсутствует таблица ""ET_PARAMS"". "+ОписаниеОшибки;
	ИначеЕсли НайденнаяСтрока.ТаблицаПараметров.Количество() = 0 Тогда
		// 99% - передано некорректное имя функции САП. Другие причины мне неизвестны
		ОписаниеОшибки = "Запрашиваемой функции: "+ИмяФункции+" не найдено, или она недоступна для вызова из 1с. "+ОписаниеОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) тогда
		
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка обработки данных",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки+".
		|Вызов осуществлялся из функции ""ПолучитьОписаниеТаблицФункции"".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		СтруктураВозвращаемыхПараметров.Вставить("Error",ОписаниеОшибки);
		СтруктураВозвращаемыхПараметров.Вставить("Out"	,ПустаяТаблица);
		СтруктураВозвращаемыхПараметров.Вставить("In"	,ПустаяТаблица);
		
		ТекстСообщения = "Сбой синхронизации данных.
						|Сообщите разработчикам системы!";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
										"ОповещатьОбОшибках",
										"Внимание!",
										ТекстСообщения,
										"Ошибка32");	
		
		Возврат СтруктураВозвращаемыхПараметров;
		
	КонецЕсли;
	
	//начинаем формирование исходящей в САП (out) и входящей в 1с (IN) таблиц
	ТаблицаПараметровФункции = НайденнаяСтрока.ТаблицаПараметров;
	
	ТаблицаИменТаблиц = ТаблицаПараметровФункции.Скопировать(,"_TABNAME");
	ТаблицаИменТаблиц.Свернуть("_TABNAME");
	
	//МассивИменТаблиц = ТаблицаИменТаблиц.ВыгрузитьКолонку("_TABNAME");
	
	МассивИменИсходящихТаблиц = Новый Массив;
	МассивИменВходящихТаблиц = Новый Массив;
	
	Для Каждого СтрокаТаблицы из ТаблицаИменТаблиц Цикл
		Если Найти(СтрокаТаблицы._TABNAME,"IT_") = 1 Тогда
			МассивИменИсходящихТаблиц.Добавить(СтрокаТаблицы._TABNAME);
		ИначеЕсли Найти(СтрокаТаблицы._TABNAME,"ET_") = 1 Тогда
			МассивИменВходящихТаблиц.Добавить(СтрокаТаблицы._TABNAME);
		Иначе
			//возможно это параметр, который не должен передаваться
			//игнорируем
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозвращаемыхПараметров.Вставить("Out"	,СформироватьТаблицуПоПараметрам(МассивИменИсходящихТаблиц,ТаблицаПараметровФункции)); //МассивИменИсходящихТаблиц
	СтруктураВозвращаемыхПараметров.Вставить("In"	,СформироватьТаблицуПоПараметрам(МассивИменВходящихТаблиц,ТаблицаПараметровФункции)); //МассивИменВходящихТаблиц
		
	Возврат СтруктураВозвращаемыхПараметров;

КонецФункции	

//функция заменяет в тексте сообщения недопустимые для XML знаки на [X]
//и интерпритирует некоторые известные ошибки в нормальный вид
Функция СформироватьТекстОшибкиПодключенияСАП(ОписаниеОшибкиПодключения) экспорт
	
	ОписаниеОшибкиПодключения = СокрЛП(ОписаниеОшибкиПодключения);
	
	Пока не НайтиНедопустимыеСимволыXML(ОписаниеОшибкиПодключения) = 0 Цикл
		НедопустимыйСимвол = Сред(ОписаниеОшибкиПодключения,НайтиНедопустимыеСимволыXML(ОписаниеОшибкиПодключения),1);
	   	ОписаниеОшибкиПодключения = СтрЗаменить(ОписаниеОшибкиПодключения,НедопустимыйСимвол,"[Х]");
		//СтрЗаменить(ОписаниеОшибки,Сред(ОписаниеОшибки,НайтиНедопустимыеСимволыXML(ОписаниеОшибки),1),"[Х]");
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеОшибкиПодключения) тогда
		Если не Найти(Строка(ОписаниеОшибкиПодключения),"Message: ############ ### ### ###### (########### ################## ### ###")=0 Тогда
			ОписаниеОшибкиПодключения = "Ошибка подключения: неправильно указаны имя пользователя или пароль. "+ОписаниеОшибкиПодключения;
		ИначеЕсли не Найти(Строка(ОписаниеОшибкиПодключения),"Message: ######")=0 Тогда
			ОписаниеОшибкиПодключения = "Ошибка подключения: неправильно указаны настройки подключения. "+ОписаниеОшибкиПодключения;
		Иначе	
			//оставляем ошибку как есть
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ОписаниеОшибкиПодключения;
	
КонецФункции

//функция формирует макет Входящей или Исходящей таблицы для передачи в Call_Trn
//входящие параметры:
//	- массив имен таблиц, которые входят в требуемый параметр
//	- таблица ET_PARAMS с колонками:
//		TABNAME Имя Таблицы в которой находится поле. (строка 30)
//		FIELDNAME Имя поля. (строка 30)
//		TYPE  Тип поля. (строка 1)
//		LENGTH Длина поля. (Целое число 5 знаков)
//
//возвращаемое значение
//	таблица 
Функция СформироватьТаблицуПоПараметрам(МассивИмен,ТаблицаОписания,ОбъявлятьТип = истина)
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяТаблицы");
	ТаблицаПараметров.Колонки.Добавить("ТаблицаПараметров");
	
	СтруктураПоиска = Новый Структура;
	
	Для Каждого ЭлементМассива из МассивИмен Цикл
		
		СтруктураПоиска.Вставить("_TABNAME",ЭлементМассива);
		
		МассивКолонокТаблицы = ТаблицаОписания.НайтиСтроки(СтруктураПоиска);
		
		НоваяТаблица = Новый ТаблицаЗначений;
		
		Для Каждого СтрокаОписанияКолонки из МассивКолонокТаблицы Цикл
			Если ОбъявлятьТип Тогда
				НоваяТаблица.Колонки.Добавить(СтрокаОписанияКолонки._FIELDNAME,ПолучитьКвалификаторТипаСАП(СтрокаОписанияКолонки._TYPE,СтрокаОписанияКолонки._LENGTH));//
			Иначе
				НоваяТаблица.Колонки.Добавить(СтрокаОписанияКолонки._FIELDNAME,);
			КонецЕсли;	
		КонецЦикла;
		
		Если не НоваяТаблица.Колонки.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаПараметров.Добавить();
			НоваяСтрока.ИмяТаблицы = ЭлементМассива;
			НоваяСтрока.ТаблицаПараметров = НоваяТаблица;
		КонецЕсли;
		
	КонецЦикла;	
			
	Возврат ТаблицаПараметров;
	
КонецФункции

Функция ПолучитьКвалификаторТипаСАП(ИмяТипа,Длина)
	
	Если ИмяТипа = "D" Или ИмяТипа = "T" Тогда
		//описание = новый ОписаниеТипов(,,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя),);
		Возврат Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ИначеЕсли ИмяТипа = "C" Или ИмяТипа = "N" Тогда  //
		Возврат Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная));
	//ИначеЕсли ИмяТипа = "N" Тогда
	//	МассивТипов
	//	Возврат Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(Длина,0));
	ИначеЕсли ИмяТипа = "I" Или ИмяТипа = "P" Тогда	
		Возврат Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(Длина,2));
	Иначе
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка идентификации типа переменной",,,,"Получен неизвестный тип переменной SAP: "+ИмяТипа);
	КонецЕсли;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Процедуры обработки данных полученных из САП
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//процедура читает данные очереди обмена и вызывает процедуры
//загрузки определенных видов документов
Процедура ОбработатьОчередьОбменаСАП(ДанныеОчередиОбмена,ПараметрыОбмена)
	
	ДанныеОчередиОбмена.Сортировать("_Data Возр");
	
	Для каждого СтрокаОчереди из ДанныеОчередиОбмена Цикл
		ПозицияРазделителя = Найти(СтрокаОчереди._Data,"&");
		ИдентификаторТипаОбмена = Лев(СтрокаОчереди._Data,ПозицияРазделителя - 1);
		Статус = Прав(СтрокаОчереди._Data,1);
		
		Если ИдентификаторТипаОбмена = "0000000030" Тогда
			//это старый не используемый обмен "транспорными заказами"
			ПараметрыОбмена.Добавить("RELID",ИдентификаторТипаОбмена);
			Загрузить_RELID_30(ПараметрыОбмена);
			
		ИначеЕсли ИдентификаторТипаОбмена = "0000000018" Тогда
			//обмен документами "поступление материалов"
			Если ПараметрыОбмена.Свойство("REQID") Тогда
				//данные для загрузки документа(ов) уже есть
			Иначе
				//определяем ID последнего загруженного документа
				Если Статус = "3" Тогда
					Макс_REQID = ПолучитьIDПоследнегоЗагруженногоДокумента(ПараметрыОбмена.DSTNM,"0000000018",3);
				Иначе
					Макс_REQID = ПолучитьIDПоследнегоЗагруженногоДокумента(ПараметрыОбмена.DSTNM,"0000000018");
				КонецЕсли;	
				ПараметрыОбмена.Вставить("REQID" ,Макс_REQID);
			КонецЕсли;
			
			ПараметрыОбмена.Вставить("RELID" ,ИдентификаторТипаОбмена);
			
			//переопределяем статус на реальный
			ПараметрыОбмена.Свойство("STATUS",Статус);
			
			Загрузить_RELID_18(ПараметрыОбмена);
			
		Иначе

			//вывод сообщения о некорректный RELID
			ЗаписьЖурналаРегистрации("Обмен САП.Ошибка обработки данных",УровеньЖурналаРегистрации.Предупреждение,,,"Функция ZCU_IF_1S_READ_EXCHANGE возвратила неизвестный параметр DATA (идентификатор типа обмена) """+СтрокаОчереди._Data+""" .",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
			
			ТекстСообщения = "Ошибка чтения очереди обмена.
			|Некорректный RELID.";
			СформироватьОповещениеПользователям(ПараметрыОбмена,
										"Ошибка32",
										,
										ТекстСообщения,);	
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//процедура загружает данные по RELID = 30
//входящие параметры
//
//
Процедура Загрузить_RELID_30(ПараметрыОбмена)
	
	//ПараметрыОбмена = новый Структура;
	
	ИмяТранзакции = "ZLE_WMS_IF_SEND_TO_CONFIRMED2";
	
	СтруктураТаблиц = ПолучитьОписаниеТаблицФункции(ПараметрыОбмена,ИмяТранзакции);
	
	Если СтруктураТаблиц.Свойство("Error") Тогда
		//обнаружены проблемы подключения
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка установки соединения",УровеньЖурналаРегистрации.Ошибка,,,"Процедура формирования параметров функции ZLE_WMS_IF_SEND_TO_CONFIRMED2 прервана по ошибке.
		|Загрузка документов ""Поступление номенклатуры"" не выполнена.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		ТекстСообщения = "Ошибка установки соединения.
		|Загрузка документов (RELID 30) не выполнена!";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"ОповещатьОбОшибках",
								,
								ТекстСообщения,
								"Ошибка32");	
		
		Возврат;
	КонецЕсли;	

	ТаблицаИсходящихПараметров 		= "";
	ТаблицаВозвращаемыхПараметров 	= "";
	
	СтруктураТаблиц.Свойство("Out",ТаблицаИсходящихПараметров);
	СтруктураТаблиц.Свойство("In",ТаблицаВозвращаемыхПараметров);

	//справка
	
	//параметры ZLE_WMS_IF_SEND_TO_CONFIRMED2
	//входящие:
	//таблица IT_PARAMS
	//	DSTNM - Получатель документов (префикс)
	//	PSIZE - макс кол-во документов, которое будет возвращено Внимание 0 это 0000000000
	//	REQID  идентификатор документа, данные которого запрашиваются
	//	STATUS
	//		1- новые документы
	//		2 - успешно переданные
	//		3- документы в которых возникли ошибки при обмене
	//возвращаемые
	//таблица 
	//		ET_HEADERS
	//		ET_ITEMS
	//подробности в док. по САП.
	
	//тонкости установки парметров
	//1. статус 2 не возвращается
	//2. если передается REQUID то этот документ не возвращается
	//3. Если передается STATUS - возвращаются документы только с этим статусом.

	
	Таблица_IT_PARAMS = ТаблицаИсходящихПараметров[0].ТаблицаПараметров;
	
	НоваяСтрока 				= Таблица_IT_PARAMS.Добавить();
	
	ПараметрыОбмена.Свойство("DSTNM",НоваяСтрока.DSTNM);
	ПараметрыОбмена.Свойство("PSIZE",НоваяСтрока.PSIZE);
	ПараметрыОбмена.Свойство("ИдентификаторДокумента",НоваяСтрока.REQID);
	 
	Если ПараметрыОбмена.Свойство("STATUS",НоваяСтрока.STATUS) Тогда
		СтатусЗапроса =ПараметрыОбмена.STATUS;
	Иначе
		СтатусЗапроса = 0;
	КонецЕсли;	
	
	ПодключениеКСАП 			= неопределено;
	ОписаниеОшибкиПодключения 	= "";
	
	РезультатПодключения = УстановитьСоединениеСАП(ПодключениеКСАП,ОписаниеОшибкиПодключения);

	ПодключениеКСАП.Call_Trn(ТаблицаИсходящихПараметров,ТаблицаВозвращаемыхПараметров,ИмяТранзакции,ОписаниеОшибкиПодключения);
	
	РазорватьСоединениеСАП(ПодключениеКСАП);
	ПодключениеКСАП = Неопределено;

	ОписаниеОшибкиПодключения = СформироватьТекстОшибкиПодключенияСАП(ОписаниеОшибкиПодключения);

	Если ЗначениеЗаполнено(ОписаниеОшибкиПодключения) Тогда 
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка установки соединения",УровеньЖурналаРегистрации.Ошибка,,,"ОБМЕН ПРЕРВАН! "+ОписаниеОшибкиПодключения+".
		|Вызов осуществлялся из функции ""ЗагрузитьRELID_30"".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		ТекстСообщения = "Ошибка установки соединения.
		|Загрузка документов (RELID 30) не выполнена!";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"ОповещатьОбОшибках",
								,
								ТекстСообщения,
								"Ошибка32");	

		Возврат;
	КонецЕсли;
	
	
	ТаблицаДанных_Шапка = ТаблицаВозвращаемыхПараметров.Найти("ET_HEADERS","ИмяТаблицы").ТаблицаПараметров;
	ТаблицаДанных_ТЧ	= ТаблицаВозвращаемыхПараметров.Найти("ET_ITEMS","ИмяТаблицы").ТаблицаПараметров;
	
	ТаблицаВидовДокументов = ТаблицаДанных_ТЧ.Скопировать(,"_REQID,_BWART,_LGNUM,_LGTYP");//_SHKZG,
	ТаблицаВидовДокументов.Свернуть("_REQID,_BWART,_LGNUM,_LGTYP",);//_SHKZG,
		
	
	//вывод сообщения о получении новых документов и их количестве
	ТекстСообщения = "Зарегистрировано "+ТаблицаВидовДокументов.Количество()+" "+?(ПараметрыОбмена.Status = 1, "новых ","повторно загружаемых ")+" 
	|документов (RELID 30).";
	
	СформироватьОповещениеПользователям(ПараметрыОбмена,
								"СообщатьКоличествоНовыхПолучаемыхДокументов",
								,
								ТекстСообщения,
								"Информация32");	

	
	Для каждого СтрокаТаблицыВидовДокументов из ТаблицаВидовДокументов Цикл
		
		ЗагрузитьДокумент(ПараметрыОбмена,СтрокаТаблицыВидовДокументов,ТаблицаДанных_Шапка,ТаблицаДанных_ТЧ);
		
	КонецЦикла; 	
				
	
КонецПроцедуры	

Процедура Загрузить_RELID_18(ПараметрыОбмена)
	
	//ПараметрыОбмена = новый Структура;
	
	ИмяТранзакции = "ZMM_IM_IF_SEND_GOODS_MOVEMENT";
	
	СтруктураТаблиц = ПолучитьОписаниеТаблицФункции(ПараметрыОбмена,ИмяТранзакции);
	
	Если СтруктураТаблиц.Свойство("Error") Тогда
		//обнаружены проблемы подключения
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка установки соединения",УровеньЖурналаРегистрации.Ошибка,,,"Процедура формирования параметров функции ZMM_IM_IF_SEND_GOODS_MOVEMENT прервана по ошибке.
		|Процедура ""ЗагрузитьRELID_18"" не выполнена.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		//вывод сообщения о ошибка установки соединения
		ТекстСообщения = "Ошибка установки соединения.
		|Загрузка ""Поступлений (возврата) номенклатуры"" не выполнена!";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"ОповещатьОбОшибках",
								,
								ТекстСообщения,
								"Ошибка32");	
		
		Возврат;
	КонецЕсли;	

	ТаблицаИсходящихПараметров 		= "";
	ТаблицаВозвращаемыхПараметров 	= "";
	
	СтруктураТаблиц.Свойство("Out",ТаблицаИсходящихПараметров);
	СтруктураТаблиц.Свойство("In",ТаблицаВозвращаемыхПараметров);

	//справка
	
	//параметры ZMM_IM_IF_SEND_GOODS_MOVEMENT
	//входящие:
	//таблица IT_PARAMS
	//	DSTNM - Получатель документов (префикс)
	//	PSIZE - макс кол-во документов, которое будет возвращено 
	//			ВНИМАНИЕ тип поля строка 10 СТРОГО!
	//	REQID  идентификатор запроса, данные с которого запрашиваются
	//	STATUS
	//		1- новые документы
	//		2 - успешно переданные
	//		3- документы в которых возникли ошибки при обмене
	//возвращаемые
	//таблица 
	//		ET_HEADERS
	//			поля:
	//				REQID - ID запроса
	//				CPUDT - дата документа
	//				CPUTM - время документа
	//				DOCNR - строка 20 - номер документа
	//				BUDAT - дата - дата проводки в документе, должна быть равна CPUDT
	//				REQID_PREV - строка 20 - если это 102 код операции(сторно), то сюда попадает REQID документа, который стонируется
	//				DOCNR_PREV - строка 20 - если это 102 код операции(сторно), то сюда попадает DOCNR документа, который стонируется
	//		ET_ITEMS
	//				REQID - строка 20 - ID запроса
	//				BWART - строка 3 - вид движения управления запасами  101 приход 102 сторно прихода
	//				SHKZG - строка 1 - индикатор дебета \ кредита S - приход H-расход ИСПОЛЬЗОВАТЬ НЕ ПЛАНИРУЮ
	//				MATNR - строка 18 - номер материала
	//				MSIZE - строка 8 - код размера материала
	//				MENGE - строка 18 - количество
	//				MEINS - строка 3 - единица измерения
	//подробности в док. по САП.
	
	//тонкости установки парметров
	//1. статус 2 не возвращается, если он не задан в параметре
	//2. если передается REQUID то возвращается только этот документ, и все последующие
	//3. Если передается STATUS - возвращаются документы только с этим статусом.

	
	Таблица_IT_PARAMS = ТаблицаИсходящихПараметров[0].ТаблицаПараметров;
	
	НоваяСтрока 				= Таблица_IT_PARAMS.Добавить();
	
	ПараметрыОбмена.Свойство("DSTNM"	,НоваяСтрока.DSTNM);
	ПараметрыОбмена.Свойство("STATUS"	,НоваяСтрока.STATUS);
	ПараметрыОбмена.Свойство("PSIZE"	,НоваяСтрока.PSIZE);
	ПараметрыОбмена.Свойство("REQID"	,НоваяСтрока.REQID);

	ПодключениеКСАП 			= неопределено;
	ОписаниеОшибкиПодключения 	= "";
	
	РезультатПодключения = УстановитьСоединениеСАП(ПодключениеКСАП,ОписаниеОшибкиПодключения);

	ПодключениеКСАП.Call_Trn(ТаблицаИсходящихПараметров,ТаблицаВозвращаемыхПараметров,ИмяТранзакции,ОписаниеОшибкиПодключения);
	
	РазорватьСоединениеСАП(ПодключениеКСАП);
	ПодключениеКСАП = Неопределено;

	ОписаниеОшибкиПодключения = СформироватьТекстОшибкиПодключенияСАП(ОписаниеОшибкиПодключения);

	Если ЗначениеЗаполнено(ОписаниеОшибкиПодключения) Тогда 
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка установки соединения",УровеньЖурналаРегистрации.Ошибка,,,"ОБМЕН ПРЕРВАН! "+ОписаниеОшибкиПодключения+".
		|Вызов осуществлялся из функции ""Загрузить_RELID_18"".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		//вывод сообщения о ошибка установки соединения
		
		ТекстСообщения = "Ошибка установки соединения.
		|Загрузка ""Поступлений (возвратов) номенклатуры"" не выполнена!";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"ОповещатьОбОшибках",
								,
								ТекстСообщения,
								"Ошибка32");	

		Возврат;
	КонецЕсли;
	
	
	ТаблицаДанных_Шапка = ТаблицаВозвращаемыхПараметров.Найти("ET_HEADERS","ИмяТаблицы").ТаблицаПараметров;
	ТаблицаДанных_ТЧ	= ТаблицаВозвращаемыхПараметров.Найти("ET_ITEMS","ИмяТаблицы").ТаблицаПараметров;
	
	//дополним таблицу шапки документов информацией о виде документа
	ТаблицаДанных_Шапка.Колонки.Добавить("_BWART");
	ТаблицаДанных = ТаблицаДанных_ТЧ.Скопировать(,"_REQID,_BWART");
	ТаблицаДанных.Свернуть("_REQID,_BWART",);
	
	СтруктураПоиска = Новый Структура;
    Структура_BWART = Новый Структура;
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для каждого СтрокаДокумента Из ТаблицаДанных_Шапка Цикл
		СтруктураПоиска.Вставить("_REQID",СтрокаДокумента._REQID);
		
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			//тип документа НЕ составной
			Если ЗначениеЗаполнено(НайденныеСтроки[0]._BWART) тогда
				СтрокаДокумента._BWART = НайденныеСтроки[0]._BWART;
			Иначе
				//это например если нет строк в документе
				СтрокаДокумента._BWART = "101";
			КонецЕсли;
		Иначе
			//строк несколько
			ЗаписьЖурналаРегистрации("Обмен САП.Ошибка обработки данных",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка загрузки документа (RELID_18). 
			|Из САП получен документ с REQID "+СтрокаДокумента._REQID+" в котором в ТЧ есть строки с различными кодами операций(BWART).
			|Документ не может быть загружен.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
			
			//вывод сообщения о данные полученные из сап некорректны. документ не загружен
			ТекстСообщения = "Ошибка обработки данных.
			|Загрузка документа с REQID "+СтрокаДокумента._REQID+" невозможна.
			|Сообщите администратору обмена";
			СформироватьОповещениеПользователям(ПараметрыОбмена,
								"ОповещатьОбОшибках",
								,
								ТекстСообщения,
								"Предупреждение32");	

			
			ЗафиксироватьСостояниеЗагруженногоДокумента(ПараметрыОбмена,СтрокаДокумента._REQID,,,,,"E","В ТЧ документа есть строки с различными кодами операций(BWART). Документ не может быть загружен в АСТБ!");
			
			МассивУдаляемыхСтрок.Добавить(СтрокаДокумента);
			
		КонецЕсли;	
				
	КонецЦикла;			
	
	Для каждого СтрокаМассива Из МассивУдаляемыхСтрок Цикл
		ТаблицаДанных_Шапка.Удалить(СтрокаМассива);
	КонецЦикла;	
	
	Если ТаблицаДанных_Шапка.Количество() = 0 Тогда 
		Запрошенный_REQID = Неопределено;
		ПараметрыОбмена.Свойство("REQID",Запрошенный_REQID);
		ТекстСообщения = "Не зарегистрировано "+?(ПараметрыОбмена.Status = 1, "новых ","повторно загружаемых ")+" 
			|документов ""Поступление"" и/или ""Возврат номенклатуры"".";
		Если не Запрошенный_REQID = неопределено Тогда
			Запрошенный_REQID = Число(Запрошенный_REQID)-1;
			Запрошенный_REQID = Формат(Запрошенный_REQID,"ЧЦ=20; ЧВН=; ЧГ=");
			ТекстСообщения = ТекстСообщения +"
			|REQID = "+Запрошенный_REQID+".";
		КонецЕсли;	
	Иначе
		ТекстСообщения = "Зарегистрировано "+ТаблицаДанных_Шапка.Количество()+" "+?(ПараметрыОбмена.Status = 1, "новых ","повторно загружаемых ")+" 
			|документов ""Поступление"" и/или ""Возврат номенклатуры"".";
	КонецЕсли;
		
	СформироватьОповещениеПользователям(ПараметрыОбмена,
						"СообщатьКоличествоНовыхПолучаемыхДокументов",
						,
						ТекстСообщения,
						"Информация32");	

	
		
	//вывод сообщения о получении новых документов
	
	//это документы прихода
	//для корректной работы процедуры ЗагрузитьДокумент_ПоступлениеНоменклатуры 
	//в таблице ET_ITEMS требуются следующие изменения
	//переименовать 
	//		MENGE в	QUANT
	//в таблице ET_HEADERS требуются следующие изменения
	//переименовать колонки
	//		CPUDT 	в	QDATU
	//		CPUTM	в	TIME    ПО ФАКТУ КОЛОНКИ НЕТ!!! при чем при соединении через 1с, с се 37 колонка есть.
    //добавить колонки
	//		LGTYP
	//		LGNUM

    КолонкаТаблицы 		= ТаблицаДанных_Шапка.Колонки.Найти("_CPUDT");
	КолонкаТаблицы.Имя 	= "_QDATU";
	//КолонкаТаблицы		= ТаблицаДанных_Шапка.Колонки.Найти("_CPUTM");
	//КолонкаТаблицы.Имя 	= "_TIME";
	
	КолонкаТаблицы		= ТаблицаДанных_ТЧ.Колонки.Найти("_MENGE");
	КолонкаТаблицы.Имя	= "_QUANT";
	//ТаблицаДанных_Шапка.Колонки.Добавить("_LGTYP",Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(3,ДопустимаяДлина.Фиксированная)));
	//ТаблицаДанных_Шапка.Колонки.Добавить("_LGNUM",Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(3,ДопустимаяДлина.Фиксированная)));
	//
	//ТаблицаДанных_Шапка.ЗаполнитьЗначения("001","_LGTYP");
	//ТаблицаДанных_Шапка.ЗаполнитьЗначения("781","_LGNUM");
	
	Для каждого СтрокаТаблицыДокументов из ТаблицаДанных_Шапка Цикл
		
		ЗагрузитьДокумент(ПараметрыОбмена,СтрокаТаблицыДокументов,ТаблицаДанных_Шапка,ТаблицаДанных_ТЧ);
		
	КонецЦикла; 	
				
	
КонецПроцедуры


//процедура осуществляет выбор процедуры загрузки документа САП
//на основании _BWART - кода операции
//так же здесь ДОЛЖНА осуществляеться процедура контроля
//на предмет повторной загрузки документа - пока ее нет
Процедура ЗагрузитьДокумент(ПараметрыОбмена,СтрокаТаблицыВидовДокументов,ТаблицаДанных_Шапка,ТаблицаДанных_ТЧ)
	
	//выбор в зависимости от кода операции
	Если СтрокаТаблицыВидовДокументов._BWART = "101" тогда
		//это приходная накладная
		ЗагрузитьДокумент_ПоступлениеНоменклатуры(ПараметрыОбмена,СтрокаТаблицыВидовДокументов,ТаблицаДанных_Шапка,ТаблицаДанных_ТЧ);
	ИначеЕсли СтрокаТаблицыВидовДокументов._BWART = "102" 
		И ПараметрыОбмена.RELID = "0000000018" тогда
		//это сторно приходной накладной
		ЗагрузитьДокумент_ВозвратНоменклатуры(ПараметрыОбмена,СтрокаТаблицыВидовДокументов,ТаблицаДанных_Шапка,ТаблицаДанных_ТЧ);
	Иначе
		//это новый код операции - пропускаем с установкой статуса
		
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка обработки данных",УровеньЖурналаРегистрации.Ошибка,,,"Из САП получен документ (RELID: "+ПараметрыОбмена.RELID+") REQID "+СтрокаТаблицыВидовДокументов._REQID+" с неизвестным кодом операции (BWART):"+ СтрокаТаблицыВидовДокументов._BWART+".
		|Документ не может быть загружен!.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

		
		//вывод сообщения о неизвестный код BWART
		
		ТекстСообщения = "Загрузка документа REQID "+СтрокаТаблицыВидовДокументов._REQID+" невозможна.
		|Сообщите администратору обмена."; 

		СформироватьОповещениеПользователям(ПараметрыОбмена,
						"СообщатьОбОшибках",
						,
						ТекстСообщения,
						"Предупреждение32");	
		
		//Зафиксировать статус документа!!!!
		ЗафиксироватьСостояниеЗагруженногоДокумента(ПараметрыОбмена,СтрокаТаблицыВидовДокументов._REQID,,,,,"E","Документ имеет неизвестный 1с код операции BWART:"++СтрокаТаблицыВидовДокументов._BWART)
		
	КонецЕсли;
	
	
КонецПроцедуры	

Процедура ЗафиксироватьСостояниеЗагруженногоДокументаСАП(ПараметрыОбмена,REQID,СтатусСостоянияДокумента,ОписаниеПроблемы="") Экспорт
	
	//отладка
	//Возврат;
	
	ИмяТранзакции = "ZCU_REQUEST_LOG_TAB";
	
	СтруктураТаблиц = ПолучитьОписаниеТаблицФункции(ПараметрыОбмена,ИмяТранзакции);
	
	Если СтруктураТаблиц.Свойство("Error") Тогда
		//обнаружены проблемы подключения
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка установки статуса документа",УровеньЖурналаРегистрации.Ошибка,,,"Процедура формирования параметров функции ZCU_REQUEST_LOG_TAB прервана по ошибке.
		|Процедура ""ЗафиксироватьСостояниеЗагруженногоДокументаСАП"" не выполнена.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		//вывод сообщения о ошибка установки соединения
		ТекстСообщения = "Ошибка установки соединения.
		|Не установлен статус """+СтатусСостоянияДокумента+""" на документ REQID "+REQID+".";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"ОповещатьОбОшибках",
								,
								ТекстСообщения,
								"Предупреждение32");	

		Возврат;
	КонецЕсли;	

	ТаблицаИсходящихПараметров 		= "";
	ТаблицаВозвращаемыхПараметров 	= "";
	
	СтруктураТаблиц.Свойство("Out",ТаблицаИсходящихПараметров);
	СтруктураТаблиц.Свойство("In",ТаблицаВозвращаемыхПараметров);

	//справка
	
	//параметры ZCU_REQUEST_LOG_TAB
	//входящие:
	//таблица IT_PARAMS
	//	REQID  идентификатор запроса
	//	MSGTY тип сообщения:
	//		I	info	Перевод запроса в сатус 2 "Обработанно"
	//		W	warning	Перевод запроса в сатус 2 "Обработанно"
	//		E	error	Перевод запроса в сатус 3 "Ошибка(оставить в очереди)"
	//		"Пусто"	---------	Перевод запроса в сатус 2 "Обработанно"
	//
	//	MESSAGE текстовое сообщение, поясняющее статус
	//		1- новые документы
	//		2 - успешно переданные
	//		3- документы в которых возникли ошибки при обмене

	
	Таблица_IT_PARAMS = ТаблицаИсходящихПараметров[0].ТаблицаПараметров;
	
	НоваяСтрока 				= Таблица_IT_PARAMS.Добавить();
	
	НоваяСтрока.REQID = REQID;
	НоваяСтрока.MSGTY = СтатусСостоянияДокумента;
	НоваяСтрока.MESSAGE = ОписаниеПроблемы;
	
	ПодключениеКСАП 			= неопределено;
	ОписаниеОшибкиПодключения 	= "";
	
	РезультатПодключения = УстановитьСоединениеСАП(ПодключениеКСАП,ОписаниеОшибкиПодключения);

	ПодключениеКСАП.Call_Trn(ТаблицаИсходящихПараметров,ТаблицаВозвращаемыхПараметров,ИмяТранзакции,ОписаниеОшибкиПодключения);
	
	РазорватьСоединениеСАП(ПодключениеКСАП);
	ПодключениеКСАП = Неопределено;

	ОписаниеОшибкиПодключения = СформироватьТекстОшибкиПодключенияСАП(ОписаниеОшибкиПодключения);

	Если ЗначениеЗаполнено(ОписаниеОшибкиПодключения) Тогда 
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка установки статуса документа",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка подключения к САП. "+ОписаниеОшибкиПодключения+".
		|Вызов осуществлялся из функции ""ЗафиксироватьСостояниеЗагруженногоДокументаСАП"".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		//вывод сообщения о ошибка установки статуса документа в САП
		ТекстСообщения = "Ошибка установки соединения.
		|Не установлен статус """+СтатусСостоянияДокумента+""" на документ REQID "+REQID+".";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"ОповещатьОбОшибках",
								,
								ТекстСообщения,
								"Предупреждение32");	

		//возможно следует предусмотреть процедуру, которая будет долбить САП пока не установит статус документа
		
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры	


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Процедуры изменения данных БД
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Процедура ЗагрузитьДокумент_ПоступлениеНоменклатуры(ПараметрыОбмена,СтрокаТаблицыВидовДокументов,ТаблицаДанных_Шапка,ТаблицаДанных_ТЧ,ЗагружаемыйДокумент = Неопределено)
	
	ЕстьОшибкиПриЗагрузке = 0;
	
	ТаблицаДанныхМатериаловСАП = Новый ТаблицаЗначений;
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("MATNR");
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("ПроблемаЗагрузки",Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("ET_NOM");
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("ET_AUM");
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("ET_SIZE");
	
	
	//преобразовываем Код материала MATNR к числу
	Если ТаблицаДанных_ТЧ.Колонки.Найти("MATNR") = неопределено Тогда
		ТаблицаДанных_ТЧ.Колонки.Добавить("MATNR");
		
		Для каждого СтрокаТаблицы из ТаблицаДанных_ТЧ Цикл
			СтрокаТаблицы.MATNR = ПреобразоватьСтрокуВЧисло(СтрокаТаблицы._MATNR);
		КонецЦикла;	
	КонецЕсли;	
		
	ИдентификаторДокумента = СтрокаТаблицыВидовДокументов._REQID;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("_REQID",ИдентификаторДокумента);
	
	//в шапке всегда будет 1 документ
	ДанныеШапки = ТаблицаДанных_Шапка.НайтиСтроки(СтруктураПоиска);
	
	//ищем документ в базе
	
	Если  ЗагружаемыйДокумент = Неопределено Тогда
		ЗагружаемыйДокумент = НайтиДокументВБД(ПараметрыОбмена,Тип("ДокументСсылка.ПоступлениеНоменклатуры"),ИдентификаторДокумента,ДанныеШапки[0]._DOCNR,ДанныеШапки[0]._QDATU);
	КонецЕсли;
	
	Если ЗагружаемыйДокумент = Неопределено Тогда
		ЗагружаемыйДокумент = Документы.ПоступлениеНоменклатуры.СоздатьДокумент();
		СсылкаНаДокумент	= ПользователиСлужебный.СсылкаОбъекта(ЗагружаемыйДокумент,Истина);
		
		ЗагружаемыйДокумент.Комментарий = "Загружено в автоматическом режиме из САП "+ТекущаяДата();
		
		ЗагружаемыйДокумент.Дата 		= ОпределитьДатуДокумента(ДанныеШапки[0]._QDATU);
		ЗагружаемыйДокумент.Поставщик	= Справочники.Контрагенты.ВостокСервис;
		ЗагружаемыйДокумент.Организация = ПараметрыОбмена.Организация;
		
		ЗагружаемыйДокумент.НомерВходящегоДокумента = ДанныеШапки[0]._DOCNR;
		
	Иначе
		СсылкаНаДокумент	= ПользователиСлужебный.СсылкаОбъекта(ЗагружаемыйДокумент,);
		ЗагружаемыйДокумент = ЗагружаемыйДокумент.ПолучитьОбъект();
		ЗагружаемыйДокумент.Товары.Очистить();
		
		ЗагружаемыйДокумент.Комментарий = "Загружено из САП ПОВТОРНО ("+ТекущаяДата()+").";
		
	КонецЕсли;	
	
	//ЗагружаемыйДокумент.Дата 				= ДанныеШапки[0]._QDATU; 
	ЗагружаемыйДокумент.Организация			= ПараметрыОбмена.Организация;
	ЗагружаемыйДокумент.ДатаВходящегоДокумента = ДанныеШапки[0]._QDATU;
	
	
	Если ЗагружаемыйДокумент.ЭтоНовый() Тогда
		ЗагружаемыйДокумент.УстановитьНовыйНомер();
	КонецЕсли;	
	
	ЗагружаемыйДокумент.СоздательДокумента 	= Пользователи.ТекущийПользователь();
	ЗагружаемыйДокумент.Склад				= НайтиСкладПоИдентификатору(СтрокаТаблицыВидовДокументов._LGNUM,СтрокаТаблицыВидовДокументов._LGTYP);
	
	Если не ЗначениеЗаполнено(ЗагружаемыйДокумент.Склад) Тогда
		
		ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка заполнения документа",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ПоступлениеНоменклатуры,СсылкаНаДокумент,"Загрузка документа ""Поступление номенклатуры"".
		|Не найден склад с кодом:"+СтрокаТаблицыВидовДокументов._LGNUM+"_"+СтрокаТаблицыВидовДокументов._LGTYP+".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
	КонецЕсли;	
		
	СтруктураПоиска.Вставить("_REQID",СтрокаТаблицыВидовДокументов._REQID);
	
	Если ПараметрыОбмена.RELID = "0000000030" Тогда
		СтруктураПоиска.Вставить("_BWART",СтрокаТаблицыВидовДокументов._BWART);
		СтруктураПоиска.Вставить("_LGNUM",СтрокаТаблицыВидовДокументов._LGNUM);	
		СтруктураПоиска.Вставить("_LGTYP",СтрокаТаблицыВидовДокументов._LGTYP);
	КонецЕсли;	
	
	МассивСтрокДокумента = ТаблицаДанных_ТЧ.НайтиСтроки(СтруктураПоиска);
	
	ТаблицаОшибокЗагрузкиТЧ = Новый ТаблицаЗначений;
	ТаблицаОшибокЗагрузкиТЧ.Колонки.Добавить("НомерСтрокиДокумента",Новый ОписаниеТипов("Строка"));
	ТаблицаОшибокЗагрузкиТЧ.Колонки.Добавить("_MATNR");
	ТаблицаОшибокЗагрузкиТЧ.Колонки.Добавить("_MSIZE");
	ТаблицаОшибокЗагрузкиТЧ.Колонки.Добавить("КодПроблемы");
	
	//Таблица кодов проблемы
	//1 - не найден товар с кодом ора
	//10- товар добавлен в справочник при загрузке документа
	//2 - не найден товар, владелец размера
	//3 - не найдена характеристика товара
	//30- характеристика загружена из САП
	//4 - у товара ведется учет по характеристикам а код размера не задан
	//5 - у товара НЕ ведется учет по характеристикам а код размера задан
	//50- у товара НЕ велся учет по характеристикам. загружена характеристика
	//6 - товара и накладной не совпадают единицы учета товаров
	
	Для Каждого СтрокаДанныхТЧ Из МассивСтрокДокумента Цикл
			
		СтрокаДокумента = ЗагружаемыйДокумент.Товары.Добавить();
		
		Товар = НайтиНоменклатуруПоКоду(СтрокаДанныхТЧ.MATNR);
		
		Если не ЗначениеЗаполнено(Товар) Тогда
			
			ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
			ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,СтрокаДанныхТЧ._MATNR,,1);
			
			Если не СтрокаДанныхТЧ.MATNR = Неопределено Тогда
				//пытаемся загрузить информацию о новом товаре
				Товар = ИнициироватьДобавлениеНовогоТовара(ПараметрыОбмена,СтрокаДанныхТЧ.MATNR,СтрокаДанныхТЧ._MSIZE,ТаблицаДанныхМатериаловСАП);
				Если ЗначениеЗаполнено(Товар) Тогда
					//товар загружен - ошибки нет
					ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,СтрокаДанныхТЧ._MATNR,,10);
					ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке - 1; 
				КонецЕсли;
			КонецЕсли;	

		КонецЕсли;
		
		СтрокаДокумента.Номенклатура = Товар;
		
		ВедетсяУчетПоХарактеристикам = ВедетсяУчетПоХарактеристикам(Товар);
		Если ВедетсяУчетПоХарактеристикам и 
			ЗначениеЗаполнено(СтрокаДанныхТЧ._MSIZE) Тогда
			
			Характеристика = НайтиХарактеристикуПоКоду(Товар,СтрокаДанныхТЧ._MSIZE);
			
			Если ЗначениеЗаполнено(Характеристика) тогда
				СтрокаДокумента.ХарактеристикаНоменклатуры = Характеристика;
			Иначе
				ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
				ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,СтрокаДанныхТЧ._MSIZE,3);

				//пытаемся получить информацию о новой характеристике
				ДобавитьХарактеристикиТовара(ПараметрыОбмена,Товар,СтрокаДанныхТЧ._MSIZE,ТаблицаДанныхМатериаловСАП);
				Характеристика = НайтиХарактеристикуПоКоду(Товар,СтрокаДанныхТЧ._MSIZE);
				Если ЗначениеЗаполнено(Характеристика) тогда
					ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке - 1;
					СтрокаДокумента.ХарактеристикаНоменклатуры = Характеристика;
					ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,СтрокаДанныхТЧ._MSIZE,30);
				КонецЕсли;
			КонецЕсли;	
				
		ИначеЕсли ВедетсяУчетПоХарактеристикам и 
			не ЗначениеЗаполнено(СтрокаДанныхТЧ._MSIZE) Тогда
			
				ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
				ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,СтрокаДанныхТЧ._MSIZE,4);

		ИначеЕсли не ВедетсяУчетПоХарактеристикам и
			ЗначениеЗаполнено(СтрокаДанныхТЧ._MSIZE) Тогда
			
				ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
				ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,СтрокаДанныхТЧ._MSIZE,5);

				//процедура загрузки размера
				ДобавитьХарактеристикиТовара(ПараметрыОбмена,Товар,СтрокаДанныхТЧ._MSIZE,ТаблицаДанныхМатериаловСАП);
				Характеристика = НайтиХарактеристикуПоКоду(Товар,СтрокаДанныхТЧ._MSIZE);
				
				Если ЗначениеЗаполнено(Характеристика) тогда
					ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке - 1;
					СтрокаДокумента.ХарактеристикаНоменклатуры = Характеристика;
					ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,СтрокаДанныхТЧ._MSIZE,50);
				КонецЕсли;	
				
		КонецЕсли;

		СтрокаДокумента.Количество = ПреобразоватьСтрокуВЧисло(СтрокаДанныхТЧ._QUANT,Ложь);
		//единицы измерения в документе нет, но она есть в товаре.
		//проверяем что загружается в той ед. изм. , которая установлена в качестве базовой.
		Если не Товар.ЕдиницаИзмерения.Код = СтрокаДанныхТЧ._MSEH6 тогда
			СтрокаДокумента.Количество = 0;
			ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
			ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,,6);

			//ЗаписьЖурналаРегистрации("Обмен САП.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ПоступлениеНоменклатуры,СсылкаНаДокумент,"Загрузка документа ""Поступление номенклатуры"".
			//	|В строке №"+СтрокаДокумента.НомерСтроки+" ТЧ ""Товары"" код получаемой Ед. измерения не совпадает с базовой.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецЕсли;
						
	КонецЦикла;	
	
	//Заполняем цену товара и рассчитываем суммы
	ЗаполнитьЦеныВДокументе(ЗагружаемыйДокумент);
	
	ЗагружаемыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	
	//ЗагружаемыйДокумент.ПроверитьЗаполнение()
	СформироватьЗаписиЖурналаРегистрации(СсылкаНаДокумент,ТаблицаОшибокЗагрузкиТЧ);
	
	//в данном случае считаем что в комбинации "_REQID,_BWART,_LGTYP"
	//_REQID всегда уникален.
	//это информация от Котыхова
	
	Если ЕстьОшибкиПриЗагрузке = 0 Тогда
		Попытка
			ЗагружаемыйДокумент.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			ЗафиксироватьСостояниеЗагруженногоДокумента(ПараметрыОбмена,СтрокаТаблицыВидовДокументов._REQID,СтрокаТаблицыВидовДокументов._BWART,СтрокаТаблицыВидовДокументов._LGNUM,СтрокаТаблицыВидовДокументов._LGTYP,ЗагружаемыйДокумент.Ссылка,"I");
		Исключение
			//вывод сообщения о ошибка проведения документа
			ЗафиксироватьСостояниеЗагруженногоДокумента(ПараметрыОбмена,СтрокаТаблицыВидовДокументов._REQID,СтрокаТаблицыВидовДокументов._BWART,СтрокаТаблицыВидовДокументов._LGNUM,СтрокаТаблицыВидовДокументов._LGTYP,ЗагружаемыйДокумент.Ссылка,"W",ОписаниеОшибки());
		КонецПопытки;
		
		//Вывод сообщения для пользователя
		ТекстСообщения ="Документ """+Строка(ЗагружаемыйДокумент.Ссылка)+""" "+?(ЗагружаемыйДокумент.Проведен, "проведен.","записан.");
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"СообщатьОКаждомИзмененномДокументе",
								,
								ТекстСообщения,
								"Информация32",
								ЗагружаемыйДокумент.Ссылка);	
		
	Иначе
		
		//вывод сообщения о документ требует ручной корректировки
		ТекстСообщения ="Документ """+Строка(ЗагружаемыйДокумент.Ссылка)+""" загружен.
		|Требуется ручная корректировка документа.";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"СообщатьОКаждомИзмененномДокументе",
								,
								ТекстСообщения,
								"Предупреждение32",
								ЗагружаемыйДокумент.Ссылка);	
		
		ЗафиксироватьСостояниеЗагруженногоДокумента(ПараметрыОбмена,СтрокаТаблицыВидовДокументов._REQID,СтрокаТаблицыВидовДокументов._BWART,СтрокаТаблицыВидовДокументов._LGNUM,СтрокаТаблицыВидовДокументов._LGTYP,ЗагружаемыйДокумент.Ссылка,"E","Некоторые поля документа не заполнены.");
	КонецЕсли; 	

КонецПроцедуры	

Процедура ЗагрузитьДокумент_ВозвратНоменклатуры(ПараметрыОбмена,СтрокаТаблицыВидовДокументов,ТаблицаДанных_Шапка,ТаблицаДанных_ТЧ,ЗагружаемыйДокумент = Неопределено)
	
	ЕстьОшибкиПриЗагрузке = 0;
	
	ТаблицаДанныхМатериаловСАП = Новый ТаблицаЗначений;
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("MATNR");
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("ПроблемаЗагрузки",Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("ET_NOM");
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("ET_AUM");
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("ET_SIZE");
	
	
	//преобразовываем Код материала MATNR к числу
	Если ТаблицаДанных_ТЧ.Колонки.Найти("MATNR") = неопределено Тогда
		ТаблицаДанных_ТЧ.Колонки.Добавить("MATNR");
		
		Для каждого СтрокаТаблицы из ТаблицаДанных_ТЧ Цикл
			СтрокаТаблицы.MATNR = ПреобразоватьСтрокуВЧисло(СтрокаТаблицы._MATNR);
		КонецЦикла;	
	КонецЕсли;	
		
	ИдентификаторДокумента = СтрокаТаблицыВидовДокументов._REQID;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("_REQID",ИдентификаторДокумента);
	
	//в шапке всегда будет 1 документ
	ДанныеШапки = ТаблицаДанных_Шапка.НайтиСтроки(СтруктураПоиска);
	
	//ищем документ в базе

	Если  ЗагружаемыйДокумент = Неопределено Тогда
		ЗагружаемыйДокумент = НайтиДокументВБД(ПараметрыОбмена,Тип("ДокументСсылка.ВозвратНоменклатурыПоставщику"),ИдентификаторДокумента,ДанныеШапки[0]._DOCNR,ДанныеШапки[0]._QDATU);
	КонецЕсли;
	
	ДокументОснованиеВозврата = НайтиДокументВБД(ПараметрыОбмена,Тип("ДокументСсылка.ПоступлениеНоменклатуры"),ДанныеШапки[0]._REQID_PREV,ДанныеШапки[0]._DOCNR_PREV,ДанныеШапки[0]._QDATU);
	
	Если не ЗначениеЗаполнено(ДокументОснованиеВозврата) Тогда
		//пока не грузим - устанавливаем статус 3
		
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка обработки данных",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ВозвратНоменклатурыПоставщику,,"Загрузка документа ""Возврат номенклатуры поставщику"".
		|Документ не загружен. Не найдено основание (REQID: "+ДанныеШапки[0]._REQID_PREV+"; DOCNR: "+ДанныеШапки[0]._DOCNR_PREV+").",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

		
		ТекстСообщения ="Документ возврата товаров НЕ ЗАГУЖЕН.
		|Не найден документ основания.
		|REQID "+ДанныеШапки[0]._REQID_PREV;
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"ОповещатьОбОшибках",
								,
								ТекстСообщения,
								"Ошибка32",
								);	
		
		ЗафиксироватьСостояниеЗагруженногоДокумента(ПараметрыОбмена,СтрокаТаблицыВидовДокументов._REQID,СтрокаТаблицыВидовДокументов._BWART,,,,"E","Не найден документ основание с номером "+ДанныеШапки[0]._DOCNR_PREV+".");
		
		Возврат;
		
    КонецЕсли;
		
	
	Если ЗагружаемыйДокумент = Неопределено Тогда
		ЗагружаемыйДокумент = Документы.ВозвратНоменклатурыПоставщику.СоздатьДокумент();
		СсылкаНаДокумент	= ПользователиСлужебный.СсылкаОбъекта(ЗагружаемыйДокумент,Истина);
		
		ЗагружаемыйДокумент.Комментарий = "Загружено в автоматическом режиме из САП "+ТекущаяДата();
		
		ЗагружаемыйДокумент.Дата 		= ОпределитьДатуДокумента(ДанныеШапки[0]._QDATU);
		ЗагружаемыйДокумент.Поставщик	= Справочники.Контрагенты.ВостокСервис;
		ЗагружаемыйДокумент.Организация = ПараметрыОбмена.Организация;
		
		ЗагружаемыйДокумент.НомерВходящегоДокумента = ДанныеШапки[0]._DOCNR;
		
	Иначе
		СсылкаНаДокумент	= ПользователиСлужебный.СсылкаОбъекта(ЗагружаемыйДокумент,);
		ЗагружаемыйДокумент = ЗагружаемыйДокумент.ПолучитьОбъект();
		
		ЗагружаемыйДокумент.Товары.Очистить();
		
		ЗагружаемыйДокумент.Комментарий = "Загружено из САП ПОВТОРНО ("+ТекущаяДата()+").";
		
	КонецЕсли;	
	
	//ЗагружаемыйДокумент.Дата 				= ДанныеШапки[0]._QDATU; 
	//ЗагружаемыйДокумент.Организация			= ПараметрыОбмена.Организация;
	//ЗагружаемыйДокумент.ДатаВходящегоДокумента 	= ДанныеШапки[0]._QDATU;
	ЗагружаемыйДокумент.ДокументОснование		= ДокументОснованиеВозврата;
	
	Если ЗагружаемыйДокумент.ЭтоНовый() Тогда
		ЗагружаемыйДокумент.УстановитьНовыйНомер();
	КонецЕсли;	
	
	ЗагружаемыйДокумент.СоздательДокумента 	= Пользователи.ТекущийПользователь();
	//склад берем из документа основания
	ЗагружаемыйДокумент.Склад				= ДокументОснованиеВозврата.Склад;
	
	Если не ЗначениеЗаполнено(ЗагружаемыйДокумент.Склад) Тогда
		
		ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка заполнения документа",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ВозвратНоменклатурыПоставщику,СсылкаНаДокумент,"Загрузка документа ""Возврат номенклатуры поставщику"".
		|Неопределен склад из документа основания: "+СтрокаТаблицыВидовДокументов._LGNUM+"_"+СтрокаТаблицыВидовДокументов._LGTYP+".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
	КонецЕсли;	
		
	СтруктураПоиска.Вставить("_REQID",СтрокаТаблицыВидовДокументов._REQID);
	
	//вход в процедуру через 30 RELID не поддерживается
	//Если ПараметрыОбмена.RELID = "0000000030" Тогда
	//	СтруктураПоиска.Вставить("_BWART",СтрокаТаблицыВидовДокументов._BWART);
	//	СтруктураПоиска.Вставить("_LGNUM",СтрокаТаблицыВидовДокументов._LGNUM);	
	//	СтруктураПоиска.Вставить("_LGTYP",СтрокаТаблицыВидовДокументов._LGTYP);
	//КонецЕсли;	
	
	МассивСтрокДокумента = ТаблицаДанных_ТЧ.НайтиСтроки(СтруктураПоиска);
	
	ТаблицаОшибокЗагрузкиТЧ = Новый ТаблицаЗначений;
	ТаблицаОшибокЗагрузкиТЧ.Колонки.Добавить("НомерСтрокиДокумента",Новый ОписаниеТипов("Строка"));
	ТаблицаОшибокЗагрузкиТЧ.Колонки.Добавить("_MATNR");
	ТаблицаОшибокЗагрузкиТЧ.Колонки.Добавить("_MSIZE");
	ТаблицаОшибокЗагрузкиТЧ.Колонки.Добавить("КодПроблемы");
	
	//Таблица кодов проблемы
	//1 - не найден товар с кодом ора
	//10- товар добавлен в справочник при загрузке документа
	//2 - не найден товар, владелец размера
	//3 - не найдена характеристика товара
	//30- характеристика загружена из САП
	//4 - у товара ведется учет по характеристикам а код размера не задан
	//5 - у товара НЕ ведется учет по характеристикам а код размера задан
	//50- у товара НЕ велся учет по характеристикам. загружена характеристика
	//6 - товара и накладной не совпадают единицы учета товаров
	
	Для Каждого СтрокаДанныхТЧ Из МассивСтрокДокумента Цикл
			
		СтрокаДокумента = ЗагружаемыйДокумент.Товары.Добавить();
		
		Товар = НайтиНоменклатуруПоКоду(СтрокаДанныхТЧ.MATNR);
		
		Если не ЗначениеЗаполнено(Товар) Тогда
			ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
			ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,СтрокаДанныхТЧ._MATNR,,1);
			
			Если не СтрокаДанныхТЧ.MATNR = Неопределено Тогда
				//пытаемся загрузить информацию о новом товаре
				Товар = ИнициироватьДобавлениеНовогоТовара(ПараметрыОбмена,СтрокаДанныхТЧ.MATNR,СтрокаДанныхТЧ._MSIZE,ТаблицаДанныхМатериаловСАП);
				Если ЗначениеЗаполнено(Товар) Тогда
					//товар загружен - ошибки нет
					ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,СтрокаДанныхТЧ._MATNR,,10);
					ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке - 1; 
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДокумента.Номенклатура = Товар;
		
		ВедетсяУчетПоХарактеристикам = ВедетсяУчетПоХарактеристикам(Товар);
		Если ВедетсяУчетПоХарактеристикам и 
			ЗначениеЗаполнено(СтрокаДанныхТЧ._MSIZE) Тогда
			
			Характеристика = НайтиХарактеристикуПоКоду(Товар,СтрокаДанныхТЧ._MSIZE);
			
			Если ЗначениеЗаполнено(Характеристика) тогда
				СтрокаДокумента.ХарактеристикаНоменклатуры = Характеристика;
			Иначе
				ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
				ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,СтрокаДанныхТЧ._MSIZE,3);

				//пытаемся получить информацию о новой характеристике
				ДобавитьХарактеристикиТовара(ПараметрыОбмена,Товар,СтрокаДанныхТЧ._MSIZE,ТаблицаДанныхМатериаловСАП);
				Характеристика = НайтиХарактеристикуПоКоду(Товар,СтрокаДанныхТЧ._MSIZE);
				Если ЗначениеЗаполнено(Характеристика) тогда
					ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке - 1;
					СтрокаДокумента.ХарактеристикаНоменклатуры = Характеристика;
					ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,СтрокаДанныхТЧ._MSIZE,30);
				КонецЕсли;
			КонецЕсли;	
				
		ИначеЕсли ВедетсяУчетПоХарактеристикам и 
			не ЗначениеЗаполнено(СтрокаДанныхТЧ._MSIZE) Тогда
			
				ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
				ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,СтрокаДанныхТЧ._MSIZE,4);

		ИначеЕсли не ВедетсяУчетПоХарактеристикам и
			ЗначениеЗаполнено(СтрокаДанныхТЧ._MSIZE) Тогда
			
				ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
				ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,СтрокаДанныхТЧ._MSIZE,5);

				//процедура загрузки размера
				ДобавитьХарактеристикиТовара(ПараметрыОбмена,Товар,СтрокаДанныхТЧ._MSIZE,ТаблицаДанныхМатериаловСАП);
				Характеристика = НайтиХарактеристикуПоКоду(Товар,СтрокаДанныхТЧ._MSIZE);
				
				Если ЗначениеЗаполнено(Характеристика) тогда
					ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке - 1;
					СтрокаДокумента.ХарактеристикаНоменклатуры = Характеристика;
					ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,СтрокаДанныхТЧ._MSIZE,50);
				КонецЕсли;	
				
		КонецЕсли;

		СтрокаДокумента.Количество = ПреобразоватьСтрокуВЧисло(СтрокаДанныхТЧ._QUANT,Ложь);
		//единицы измерения в документе нет, но она есть в товаре.
		//проверяем что загружается в той ед. изм. , которая установлена в качестве базовой.
		Если не Товар.ЕдиницаИзмерения.Код = СтрокаДанныхТЧ._MSEH6 тогда
			СтрокаДокумента.Количество = 0;
			ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
			ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,,6);

			//ЗаписьЖурналаРегистрации("Обмен САП.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ПоступлениеНоменклатуры,СсылкаНаДокумент,"Загрузка документа ""Поступление номенклатуры"".
			//	|В строке №"+СтрокаДокумента.НомерСтроки+" ТЧ ""Товары"" код получаемой Ед. измерения не совпадает с базовой.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецЕсли;
			
	КонецЦикла;	
	
	//Заполняем цену товара и рассчитываем суммы
	ЗаполнитьЦеныВДокументе(ЗагружаемыйДокумент);
	
	ЗагружаемыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	
	СформироватьЗаписиЖурналаРегистрации(СсылкаНаДокумент,ТаблицаОшибокЗагрузкиТЧ);
	
	//в данном случае считаем что в комбинации "_REQID,_BWART,_LGTYP"
	//_REQID всегда уникален.
	//это информация от Котыхова
	
	Если ЕстьОшибкиПриЗагрузке = 0 Тогда
		Попытка
			ЗагружаемыйДокумент.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			ЗафиксироватьСостояниеЗагруженногоДокумента(ПараметрыОбмена,СтрокаТаблицыВидовДокументов._REQID,СтрокаТаблицыВидовДокументов._BWART,,,ЗагружаемыйДокумент.Ссылка,"I");
		Исключение
			//вывод сообщения о ошибка проведения документа
			ЗафиксироватьСостояниеЗагруженногоДокумента(ПараметрыОбмена,СтрокаТаблицыВидовДокументов._REQID,СтрокаТаблицыВидовДокументов._BWART,,,ЗагружаемыйДокумент.Ссылка,"W",ОписаниеОшибки());
		КонецПопытки;
		
		//Вывод сообщения для пользователя
		ТекстСообщения ="Документ """+Строка(ЗагружаемыйДокумент.Ссылка)+""" "+?(ЗагружаемыйДокумент.Проведен, "проведен.","записан.");
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"СообщатьОКаждомИзмененномДокументе",
								,
								ТекстСообщения,
								"Информация32",
								ЗагружаемыйДокумент.Ссылка);	
		
	Иначе
		
		//вывод сообщения о документ требует ручной корректировки
		ТекстСообщения ="Документ """+Строка(ЗагружаемыйДокумент.Ссылка)+""" загружен.
		|Требуется ручная корректировка документа.";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"СообщатьОКаждомИзмененномДокументе",
								,
								ТекстСообщения,
								"Предупреждение32",
								ЗагружаемыйДокумент.Ссылка);	
		
		ЗафиксироватьСостояниеЗагруженногоДокумента(ПараметрыОбмена,СтрокаТаблицыВидовДокументов._REQID,СтрокаТаблицыВидовДокументов._BWART,СтрокаТаблицыВидовДокументов._LGNUM,СтрокаТаблицыВидовДокументов._LGTYP,ЗагружаемыйДокумент.Ссылка,"E","Некоторые поля документа не заполнены.");
	КонецЕсли; 	

КонецПроцедуры	

//Процедура определяет цену товара на момент загрузки документа
//а также рассчитывает сумму по строке документа и сумму документа
//Требования к документу:
//	-Наличие реквизитов
//		Организация
//		Поставщик
//	-наличие ТЧ Товары и ее реквизитов
//		номенклатура
//		Количество
//		цена
//		сумма
Процедура ЗаполнитьЦеныВДокументе(ДокументОбъект) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") = Неопределено Тогда
		//ТЧ товары нет
		Возврат;
	КонецЕсли;
	
	Отбор = новый Структура;
	Отбор.Вставить("Организация",ДокументОбъект.Организация);
	Отбор.Вставить("Поставщик",ДокументОбъект.Поставщик);
	
	ЦеныТоваров = РегистрыСведений.ЦеныНоменклатуры;
	
	Для каждого СтрокаДокумента из ДокументОбъект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаДокумента.Номенклатура) Тогда
			Отбор.Вставить("Номенклатура",СтрокаДокумента.Номенклатура);
			СтруктураЦен = ЦеныТоваров.ПолучитьПоследнее(ДокументОбъект.Дата,Отбор);
			СтруктураЦен.Свойство("Цена",СтрокаДокумента.Цена);
			СтрокаДокумента.Сумма = СтрокаДокумента.Цена*СтрокаДокумента.Количество;
		КонецЕсли;	
	КонецЦикла;
	
	Если не МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") = Неопределено Тогда
		ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры	

//функция начинает процесс создания нового товара в БД
//входящие параметры 
//	Номер материала САП без лидирующих нулей
//	Таблица данных материалов САП - таблица, в которой хранятся данные уже запрошенные из САП при загрузке текущего документа
//	 колонки:
//		MATNR
//		ПроблемаЗагрузки тип Булево
//		ET_NOM
//		ET_AUM
//		ET_SIZE
Функция ИнициироватьДобавлениеНовогоТовара(ПараметрыОбмена,MATNR,MSIZE = неопределено,ТаблицаДанныхМатериаловСАП);
	
	СтрокаТаблицы = ТаблицаДанныхМатериаловСАП.Найти(MATNR,"MATNR");//ПолучитьСтрокуДанныхПоТовару(MATNR,ТаблицаДанныхМатериаловСАП);
	
	Если СтрокаТаблицы = неопределено Тогда
		//данные по товару еще не запрашивались
	    ЗаполнитьТаблицуДанныхМатериаловСАП(ПараметрыОбмена,MATNR,ТаблицаДанныхМатериаловСАП);
		СтрокаТаблицы = ТаблицаДанныхМатериаловСАП.Найти(MATNR,"MATNR");
	КонецЕсли;
	
	Если СтрокаТаблицы = неопределено или
		СтрокаТаблицы.ПроблемаЗагрузки Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	ET_NOM  = СтрокаТаблицы.ET_NOM;
	ET_AUM  = СтрокаТаблицы.ET_AUM;
	ET_SIZE = СтрокаТаблицы.ET_SIZE;
	
	НовыйТовар 															= Справочники.Номенклатура.СоздатьЭлемент();
	//НовыйТовар.Родитель 												= Справочники.Номенклатура.ПустаяСсылка();
	
	//вопрос - длина поля 1000 символов, выгружается наименование сап 60...
	НовыйТовар.Наименование 			  								= СокрЛП(ET_NOM[0]._MAKTX);
	НовыйТовар.КодСинхронизации		    								= MATNR;
	НовыйТовар.ЕдиницаИзмерения 										= ПолучитьЕдиницуИзмерения(ET_NOM[0]._MEIN_OKEI);
	НовыйТовар.НаименованиеПолное										= СокрЛП(ET_NOM[0]._longtext);
	Если ET_AUM[0]._VOLEH = "L" Тогда 
		//объем получаем в литрах. храним в кубометрах 
		НовыйТовар.Объем												= ET_AUM[0]._VOLUM/1000;
	КонецЕсли;
	Если ET_AUM[0]._GEWEI = "KG" Тогда 
		//вес в килограммах 
		НовыйТовар.Вес													= ET_AUM[0]._BRGEW;
	КонецЕсли;
	НовыйТовар.Описание													= СокрЛП(ET_NOM[0]._MCOMMENT);
	НовыйТовар.Артикул													= СокрЛП(ET_NOM[0]._BISMT);
	НовыйТовар.Поставщик												= Справочники.Контрагенты.ВостокСервис;
	
	НовыйТовар.УстановитьНовыйКод();
	НовыйТовар.Записать();

	//оповещение об обновлении товров
	ТекстСообщения ="Добавлен новый товар: "+НовыйТовар.Наименование+".
	|Требуется ручная корректировка позиции.";
	СформироватьОповещениеПользователям(ПараметрыОбмена,
								"ОповещатьОбОбновленииСправочникаТоваров",
								,
								ТекстСообщения,
								"Информация32",
								НовыйТовар.Ссылка);	
	
	ЗаписьЖурналаРегистрации("Обмен САП.Обновление справочника ""Номенклатура""",УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.Номенклатура,НовыйТовар.Ссылка,
	"Добавлена информация о новом товаре. Код: "+MATNR+", наименование: "+НовыйТовар.Наименование+". Требуется ручная корректировка данных.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

	//вывод сообщения о ??? создании новой номенклатуры
	
	//добавляем характеристики
	Если не ET_SIZE.Количество() = 0 Тогда                             //MSIZE  
		ДобавитьХарактеристикиТовара(ПараметрыОбмена,НовыйТовар.Ссылка,,ТаблицаДанныхМатериаловСАП,СтрокаТаблицы);
	КонецЕсли;	
	
	Возврат НовыйТовар.Ссылка;
	
КонецФункции

Процедура ДобавитьХарактеристикиТовара(ПараметрыОбмена,Товар,MSIZE = неопределено,ТаблицаДанныхМатериаловСАП,СтрокаТаблицыДанных = неопределено)
	
	СпрХарактеристикИзменен = Ложь;
	
	ЗагружатьТолькоСбытовуюМатрицу = Истина;
	
	Если ТаблицаДанныхМатериаловСАП.Количество() = 0 Тогда
		ЗаполнитьТаблицуДанныхМатериаловСАП(ПараметрыОбмена,Товар.КодСинхронизации,ТаблицаДанныхМатериаловСАП);
	КонецЕсли;
	
	Если СтрокаТаблицыДанных = неопределено Тогда	
		СтрокаТаблицыДанных = ТаблицаДанныхМатериаловСАП.Найти(Товар.КодСинхронизации,"MATNR");
	КонецЕсли;	
		
	ET_SIZE = СтрокаТаблицыДанных.ET_SIZE;	
	
	//из САП код размера передается как строка 8
	Если MSIZE = Неопределено Тогда
		//добавляем все размеры
		Для Каждого СтрокаТаблицы Из ET_SIZE Цикл
			//физически невозможно загрузить метрику без кода ОРА
			Если не ЗначениеЗаполнено(СтрокаТаблицы._ORANM) и
				ЗагружатьТолькоСбытовуюМатрицу и
					не СтрокаТаблицы._SALES = "X" Тогда
				//это не сбытовой размер	
				Продолжить;
			КонецЕсли;
			
			Если не MSIZE = Неопределено и
				не СтрокаТаблицы._MSIZE = MSIZE Тогда
				//код не совпадает с кодом характеристики которую мы должны добавить
				Продолжить;
			КонецЕсли;	
			
			Если не ЗначениеЗаполнено(Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(СтрокаТаблицы._MSIZE,,,Товар)) Тогда
				
				МетрикаХарактеристики = Справочники.Метрики.НайтиПоКоду(СтрокаТаблицы._ORANM);
				
				Если ЗначениеЗаполнено(МетрикаХарактеристики) Тогда  
				
					НоваяХарактеристика 			= Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
					НоваяХарактеристика.Владелец 	= Товар;
					НоваяХарактеристика.Код			= СтрокаТаблицы._ORANM;
					НоваяХарактеристика.Метрика		= МетрикаХарактеристики;
					НоваяХарактеристика.КодSAP		= СтрокаТаблицы._MSIZE;
					НоваяХарактеристика.Наименование= СокрЛП(СтрокаТаблицы._SZNAM);
					НоваяХарактеристика.Записать();
					
					СпрХарактеристикИзменен = Истина;
					
					ЗаписьЖурналаРегистрации("Обмен САП.Обновление справочника ""Характеристик""",УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ХарактеристикиНоменклатуры,НоваяХарактеристика.Ссылка,
						"Добавлена новая характеристика товара ("+Товар+", код: "+Товар.КодСинхронизации+".) Код: "+СтрокаТаблицы._MSIZE+", наименование: "+НоваяХарактеристика.Наименование+".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
					
				Иначе
					
					ЗаписьЖурналаРегистрации("Обмен САП.Обновление справочника ""Характеристик""",УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.ХарактеристикиНоменклатуры,Товар,
						"Ошибка добавления нового размера. В справочнике ""Метрики"" не обнаружена метрика с кодом: "+СтрокаТаблицы._ORANM+".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
					
					//+++АСТБ_Горюшин_Алексей_47891
					Если ПараметрыОбмена.ЗапущеноПользователем = Истина Тогда
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Ошибка добавления нового размера. В справочнике ""Метрики"" не обнаружена метрика с кодом: "+СтрокаТаблицы._ORANM+".";
						Сообщение.Сообщить();
					КонецЕсли;	
					//---АСТБ_Горюшин_Алексей_47891
					
				КонецЕсли;
			Иначе
				//такая характеристика уже есть - пропускаем
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		//ищем конкретный
		//MSIZE - это код САП. Нам нужен код востока. поэтому
		
		СтрокаДанныхРазмера = ET_SIZE.Найти(MSIZE,"_MSIZE");
		
		МетрикаХарактеристики = Справочники.Метрики.НайтиПоКоду(СтрокаДанныхРазмера._ORANM);
		
		Если ЗначениеЗаполнено(МетрикаХарактеристики) Тогда  
			НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(СтрокаДанныхРазмера._ORANM,,,Товар);
			
			Если не ЗначениеЗаполнено(НоваяХарактеристика) Тогда
				НоваяХарактеристика 			= Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			Иначе
				НоваяХарактеристика = НоваяХарактеристика.ПолучитьОбъект();
			КонецЕсли;
			
			НоваяХарактеристика.Владелец 	= Товар;
			НоваяХарактеристика.Код			= СтрокаДанныхРазмера._ORANM;
			НоваяХарактеристика.КодSAP		= MSIZE;
			НоваяХарактеристика.Метрика		= МетрикаХарактеристики;
			НоваяХарактеристика.Наименование= СокрЛП(СтрокаДанныхРазмера._SZNAM);
			НоваяХарактеристика.Записать();
			
			СпрХарактеристикИзменен = Истина;
			
			ЗаписьЖурналаРегистрации("Обмен САП.Обновление справочника ""Характеристик""",УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ХарактеристикиНоменклатуры,НоваяХарактеристика.Ссылка,
			"Добавлена новая характеристика (или скорректирована старая) товара ("+Товар+", код: "+Товар.КодСинхронизации+".) Код: "+СтрокаДанныхРазмера._MSIZE+", наименование: "+НоваяХарактеристика.Наименование+".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
			
		Иначе
			
			ЗаписьЖурналаРегистрации("Обмен САП.Обновление справочника ""Характеристик""",УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.ХарактеристикиНоменклатуры,Товар,
			"Ошибка добавления нового размера. В справочнике ""Метрики"" не обнаружена метрика с кодом: "+СтрокаДанныхРазмера._ORANM+".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
			
			//+++АСТБ_Горюшин_Алексей_47891
			Если ПараметрыОбмена.ЗапущеноПользователем = Истина Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ошибка добавления нового размера. В справочнике ""Метрики"" не обнаружена метрика с кодом: "+СтрокаДанныхРазмера._ORANM+".";
				Сообщение.Сообщить();
			КонецЕсли;	
			//---АСТБ_Горюшин_Алексей_47891
			
		КонецЕсли;
		
	КонецЕсли;	
	
	//вывод сообщения о ??? корректировке существующих или создании новых размеров товара
	Если СпрХарактеристикИзменен Тогда
		Если MSIZE = Неопределено Тогда
			ТекстСообщения ="Дополнен размерный ряд товара: "+Товар.Наименование+".
			|Подробности в журнале регистрации."
		Иначе
			ТекстСообщения = "Добавлен размер "+НоваяХарактеристика.Наименование+"
			|у "+Товар.Наименование+".";
			
		КонецЕсли;						
	    СформироватьОповещениеПользователям(ПараметрыОбмена,
								"ОповещатьОбОбновленииРазмерногоРядаТовара",
								,
								ТекстСообщения,
								"Информация32",
								Товар);
	КонецЕсли;							
	
КонецПроцедуры		

//Процедура заполняет данными таблицу вида
//	"MATNR"
//	"ПроблемаЗагрузки",Новый ОписаниеТипов("Булево")
//	"ET_NOM"
//	"ET_AUM"
//	"ET_SIZE"
//если при загрузке данных происходит проблема - проставляется признак ошибки
Процедура ЗаполнитьТаблицуДанныхМатериаловСАП(ПараметрыОбмена,MATNR,ТаблицаДанныхМатериаловСАП)
	
	ИмяТранзакции = "ZMD_MT_IF_SEND_MAT_2_1C_MULTPL";
	
	СтруктураТаблиц = ПолучитьОписаниеТаблицФункции(ПараметрыОбмена,ИмяТранзакции);
	
	Если СтруктураТаблиц.Свойство("Error") Тогда
		//обнаружены проблемы подключения
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка получения данных о ""Номенклатуре""",УровеньЖурналаРегистрации.Ошибка,,,
		"Процедура формирования параметров функции ZMD_MT_IF_SEND_MAT_2_1C_MULTPL прервана по ошибке.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
	    Возврат;
	КонецЕсли;	

	ТаблицаИсходящихПараметров 		= "";
	ТаблицаВозвращаемыхПараметров 	= "";
	
	СтруктураТаблиц.Свойство("Out",ТаблицаИсходящихПараметров);
	СтруктураТаблиц.Свойство("In",ТаблицаВозвращаемыхПараметров);

	Таблица_IT_MATNR = ТаблицаИсходящихПараметров.Найти("IT_MATNR","ИмяТаблицы").ТаблицаПараметров;
	
	НоваяСтрока 		= Таблица_IT_MATNR.Добавить();
	НоваяСтрока.MATNR	= Формат(MATNR,"ЧЦ=18; ЧВН=; ЧГ=0");
	 
	ПодключениеКСАП 			= неопределено;
	ОписаниеОшибкиПодключения 	= "";
	
	РезультатПодключения = УстановитьСоединениеСАП(ПодключениеКСАП,ОписаниеОшибкиПодключения);

	ПодключениеКСАП.Call_Trn(ТаблицаИсходящихПараметров,ТаблицаВозвращаемыхПараметров,ИмяТранзакции,ОписаниеОшибкиПодключения);
	
	РазорватьСоединениеСАП(ПодключениеКСАП);
	ПодключениеКСАП = Неопределено;

	ОписаниеОшибкиПодключения = СформироватьТекстОшибкиПодключенияСАП(ОписаниеОшибкиПодключения);

	Если ЗначениеЗаполнено(ОписаниеОшибкиПодключения) Тогда 
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка получения данных о ""Номенклатуре""",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибкиПодключения+".
		|Вызов осуществлялся из функции ""ЗаполнитьТаблицуДанныхМатериаловСАП"".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		Возврат;
	КонецЕсли;	
	
	ЕстьОшибкиПреобразования = Ложь;
	
	ET_NOM = ТаблицаВозвращаемыхПараметров.Найти("ET_NOM","ИмяТаблицы").ТаблицаПараметров;
	//преобразовываем к числу объем и вес
	ET_AUM = ТаблицаВозвращаемыхПараметров.Найти("ET_AUM","ИмяТаблицы").ТаблицаПараметров;
	//+++АСТБ_Горюшин_Алексей
	Если ET_AUM.Количество() > 0 Тогда
	//---АСТБ_Горюшин_Алексей
	ET_AUM[0]._VOLUM = ПреобразоватьСтрокуВЧисло(ET_AUM[0]._VOLUM,ложь);
	ET_AUM[0]._BRGEW = ПреобразоватьСтрокуВЧисло(ET_AUM[0]._BRGEW,ложь);
	//+++АСТБ_Горюшин_Алексей
	КонецЕсли;
	//---АСТБ_Горюшин_Алексей
	
	//преобразовываем в число код ора метрики
	ET_SIZE 		= ТаблицаВозвращаемыхПараметров.Найти("ET_SIZE","ИмяТаблицы").ТаблицаПараметров;
	Для каждого СтрокаТаблицыРазмеров из ET_SIZE Цикл 
		Если не ЗначениеЗаполнено(СтрокаТаблицыРазмеров._ORANM) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЧисловоеЗначение= ПреобразоватьСтрокуВЧисло(СтрокаТаблицыРазмеров._ORANM);
		
		Если ЧисловоеЗначение = Неопределено или 
			ЧисловоеЗначение = 0 Тогда
			//это ошибка! ставим признак ошибки у товара
			ЕстьОшибкиПреобразования = Истина;
		Иначе
			СтрокаТаблицыРазмеров._ORANM = ЧисловоеЗначение;
		КонецЕсли;	
	КонецЦикла;		
	
	//+++АСТБ_Горюшин_Алексей
	//не загружаем пустые (предположительно, это услуги)
	Если ET_NOM.Количество() > 0 И ET_AUM.Количество() > 0 Тогда
	//---АСТБ_Горюшин_Алексей
	НоваяСтрока = ТаблицаДанныхМатериаловСАП.Добавить();
	НоваяСтрока.MATNR 	= MATNR;
	НоваяСтрока.ПроблемаЗагрузки = ЕстьОшибкиПреобразования;
	НоваяСтрока.ET_NOM 	= ET_NOM;
	НоваяСтрока.ET_AUM 	= ET_AUM;
	НоваяСтрока.ET_SIZE = ET_SIZE;
	//+++АСТБ_Горюшин_Алексей
	КонецЕсли;
	//---АСТБ_Горюшин_Алексей
	
КонецПроцедуры

Функция ПолучитьЕдиницуИзмерения(КодОКЕИ)
	
	Если Не ЗначениеЗаполнено(КодОКЕИ) Тогда 
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
		
	БазоваяЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоКоду(КодОКЕИ);
	
	Если БазоваяЕдиница.Пустая() Тогда
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		Макет = Справочники.ЕдиницыИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
		Макет.Записать(ИмяВременногоФайла);
		Дерево = ЗначениеИзФайла(ИмяВременногоФайла);
		
		СтрокаДерева = Дерево.Строки.Найти(КодОКЕИ,"КодЧисловой",Истина);
		Если НЕ СтрокаДерева = Неопределено Тогда
			БазоваяЕдиница = СтрокаДерева.Строки.Добавить();
		КонецЕсли;
		
		СправочникОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		
		Если ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеНациональное) Тогда
			Наименование = СтрокаДерева.УсловноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеМеждународное) Тогда
			Наименование = СтрокаДерева.УсловноеОбозначениеМеждународное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеНациональное) Тогда
			Наименование = СтрокаДерева.КодовоеБуквенноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное) Тогда
			Наименование = СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное;
		Иначе
			Наименование = СтрокаДерева.Наименование;
		КонецЕсли;
		
		СправочникОбъект.Наименование            = СтрЗаменить(Наименование,Символы.ПС,"/");
		СправочникОбъект.МеждународноеСокращение = СтрЗаменить(СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное,Символы.ПС,"/");
		СправочникОбъект.НаименованиеПолное      = СтрЗаменить(СтрокаДерева.Наименование,Символы.ПС,"/");
		СправочникОбъект.Код                     = СтрокаДерева.КодЧисловой;
		
		СправочникОбъект.Записать();

		//вывод сообщения о ??? добавлена новая базовая единица измерения из классификатора
		
		БазоваяЕдиница = СправочникОбъект.Ссылка;
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	Возврат БазоваяЕдиница;
	
КонецФункции		
		
//процедура выводит в журнал регистрации сообщения об ошибках загрузки ТЧ документа
//
//формат таблицы:
	//Колонка "НомерСтрокиДокумента");
	//Колонка "_MATNR"  - может быть как ссылкой на товар, так и кодом товара в зависимости от кода проблемы
	//Колонка "_MSIZE"
	//Колонка "КодПроблемы"
//
//Таблица кодов проблемы
	//Таблица кодов проблемы
	//1 - не найден товар с кодом ора
	//10- товар добавлен в справочник при загрузке документа
	//2 - не найден товар, владелец размера
	//3 - не найдена характеристика товара
	//30- характеристика загружена из САП
	//4 - у товара ведется учет по характеристикам а код размера не задан
	//5 - у товара НЕ ведется учет по характеристикам а код размера задан
	//50- у товара НЕ велся учет по характеристикам. загружена характеристика
	//6 - товара и накладной не совпадают единицы учета товаров
//
Процедура СформироватьЗаписиЖурналаРегистрации(ЗагружаемыйДокумент,ТаблицаОшибокЗагрузкиТЧ)
	

	Для каждого СтрокаТаблицы из ТаблицаОшибокЗагрузкиТЧ Цикл

		Если Найти(СтрокаТаблицы.НомерСтрокиДокумента,",")=0 Тогда
			ЕдинственнаяСтрока = Истина;
		Иначе
			ЕдинственнаяСтрока = Ложь;
		КонецЕсли;	
		
		Если СтрокаТаблицы.КодПроблемы = 1 Тогда
			СтатусСообщенияЖР = УровеньЖурналаРегистрации.Ошибка;
			ТекстОшибки = "В справочнике ""Номенклатура"" не найден товар с кодом """+СтрокаТаблицы._MATNR+""". 
			|Некорректно "+?(ЕдинственнаяСтрока,"загружена строка №", "загружены строки №")+" "+СтрокаТаблицы.НомерСтрокиДокумента+".";
		ИначеЕсли СтрокаТаблицы.КодПроблемы = 10 Тогда
			СтатусСообщенияЖР = УровеньЖурналаРегистрации.Предупреждение;
			ТекстОшибки = "В справочник ""Номенклатура"" добавлен товар с кодом """+СтрокаТаблицы._MATNR+""". 
			|Он используется в  "+?(ЕдинственнаяСтрока," строке №", " строках №")+" "+СтрокаТаблицы.НомерСтрокиДокумента+".";
		ИначеЕсли СтрокаТаблицы.КодПроблемы = 3 Тогда
			СтатусСообщенияЖР = УровеньЖурналаРегистрации.Ошибка;
			ТекстОшибки = "В "+?(ЕдинственнаяСтрока," строке №", " строках №")+" "+СтрокаТаблицы.НомерСтрокиДокумента+" документа у товара """+СтрокаТаблицы._MATNR.Наименование+"""(код: "+СтрокаТаблицы._MATNR.КодСинхронизации+")
			|не найдена характеристика с кодом """+СтрокаТаблицы._MSIZE+""".";	
		ИначеЕсли СтрокаТаблицы.КодПроблемы = 30 Тогда
			СтатусСообщенияЖР = УровеньЖурналаРегистрации.Предупреждение;
			ТекстОшибки = "В справочник ""Характеристики номенклатуры"" товару """+СтрокаТаблицы._MATNR.Наименование+"""(код: "+СтрокаТаблицы._MATNR.КодСинхронизации+") добавлен размер с кодом SAP """+СтрокаТаблицы._MSIZE+""".
			|Он используется в  "+?(ЕдинственнаяСтрока," строке №", " строках №")+" "+СтрокаТаблицы.НомерСтрокиДокумента+".";
		ИначеЕсли СтрокаТаблицы.КодПроблемы = 4 Тогда
			СтатусСообщенияЖР = УровеньЖурналаРегистрации.Ошибка;
			ТекстОшибки = ?(ЕдинственнаяСтрока,"Строка ", "Строки ")+" документа №"+СтрокаТаблицы.НомерСтрокиДокумента+".
			|Не указан код SAP размера товара, хотя по данным АСТБ у товара """+СтрокаТаблицы._MATNR.Наименование+"""(код: "+СтрокаТаблицы._MATNR.КодСинхронизации+") ведется учет по размерам.";
		ИначеЕсли СтрокаТаблицы.КодПроблемы = 5 Тогда
			СтатусСообщенияЖР = УровеньЖурналаРегистрации.Ошибка;
			ТекстОшибки = ?(ЕдинственнаяСтрока,"Строка ", "Строки ")+" документа №"+СтрокаТаблицы.НомерСтрокиДокумента+".
			|У товара """+СтрокаТаблицы._MATNR.Наименование+"""(код: "+СтрокаТаблицы._MATNR.КодСинхронизации+") НЕ ведется учет по размерам.
			|Из SAP получен код размера """+СтрокаТаблицы._MSIZE+""".";
		ИначеЕсли СтрокаТаблицы.КодПроблемы = 50 Тогда
			СтатусСообщенияЖР = УровеньЖурналаРегистрации.Предупреждение;
			ТекстОшибки ="
			|У товара """+СтрокаТаблицы._MATNR.Наименование+"""(код: "+СтрокаТаблицы._MATNR.КодСинхронизации+") включен режим учета по характеристикам.
			|Загружена характеристика с кодом """+СтрокаТаблицы._MSIZE+""".";
		ИначеЕсли СтрокаТаблицы.КодПроблемы = 6 Тогда
			СтатусСообщенияЖР = УровеньЖурналаРегистрации.Ошибка;
			ТекстОшибки ="
			|У товара """+СтрокаТаблицы._MATNR.Наименование+"""(код: "+СтрокаТаблицы._MATNR.КодСинхронизации+") не совпадают
			|единицы измерения из карточки и единица измерения из документа.
			|"+?(ЕдинственнаяСтрока,"Строка ", "Строки ")+" документа №"+СтрокаТаблицы.НомерСтрокиДокумента+" не может быть загружена!.";
		КонецЕсли;	
		
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка заполнения документа",СтатусСообщенияЖР,Метаданные.Документы.ПоступлениеНоменклатуры,ЗагружаемыйДокумент,ТекстОшибки,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

	КонецЦикла;	
		
КонецПроцедуры	

// статус 	1 - документ еще не обрабатывался
//			2 - документ обработан без ошибок
//			3 - документ обработан с ошибкой
//			4 - документ должен быть обработан вручную
Процедура ЗафиксироватьСостояниеЗагруженногоДокумента(ПарметрыОбмена,REQID,BWART="",LGNUM="",LGTYP="",ЗагружаемыйДокумент = Неопределено,БуквенныйСтатусСостоянияДокумента,ОписаниеОшибкиПроведения="")
	
	СтрокаИдентификатор = СокрЛП(ПарметрыОбмена.DSTNM)+"_"+СокрЛП(ПарметрыОбмена.RELID);
	
	//в некоторых случаях BWART,LGNUM,LGTYP могут быть не заполнены, поэтому сначала ищем набор записей 
	//с заданными REQID и DSTNM_RELID. если он найден - используем его. 
	Отбор = Новый Структура;
	Отбор.Вставить("Reqid", Число(REQID));
	
	ВыборкаЗаписей = РегистрыСведений.ОбменДаннымиСАП.Выбрать(Отбор);
	
	МенеджерЗаписи = Неопределено;
	
	//я не уверен в уникальности Reqid в пределах разных DSTNM_RELID поэтому
	Пока ВыборкаЗаписей.Следующий() Цикл
		Если ВыборкаЗаписей.DSTNM_RELID = СтрокаИдентификатор Тогда
			МенеджерЗаписи = ВыборкаЗаписей.ПолучитьМенеджерЗаписи();
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если не МенеджерЗаписи = Неопределено Тогда
		РежимЗамещения = Истина;
		МенеджерЗаписи.Удалить();
	Иначе
		МенеджерЗаписи = РегистрыСведений.ОбменДаннымиСАП.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Прочитать();
		РежимЗамещения = Ложь;
	КонецЕсли; 	
	
	МенеджерЗаписи.Reqid = Число(REQID);
	МенеджерЗаписи.DSTNM_RELID = СтрокаИдентификатор;
	МенеджерЗаписи.BWART = BWART;
	МенеджерЗаписи.LGNUM = LGNUM;
	МенеджерЗаписи.LGTYP = LGTYP;
	МенеджерЗаписи.Документ 		= ЗагружаемыйДокумент;
	МенеджерЗаписи.ДатаЗагрузки 	= ТекущаяДата();
	МенеджерЗаписи.ДатаНачалаОбмена = ПарметрыОбмена.ВремяНачалаОбмена;

	МенеджерЗаписи.БуквенныйСтатусСостоянияДокумента = БуквенныйСтатусСостоянияДокумента;
	//	MSGTY тип сообщения:
	//		I	info	Перевод запроса в сатус 2 "Обработанно"
	//		W	warning	Перевод запроса в сатус 2 "Обработанно"
	//		E	error	Перевод запроса в сатус 3 "Ошибка(оставить в очереди)"
	//		"Пусто"	---------	Перевод запроса в сатус 2 "Обработанно"

	Если БуквенныйСтатусСостоянияДокумента = "E" Тогда
		МенеджерЗаписи.СтатусСостоянияДокумента = 3;
	Иначе
		МенеджерЗаписи.СтатусСостоянияДокумента = 2;
	КонецЕсли;	
	
	МенеджерЗаписи.Записать(РежимЗамещения);
	
	ЗафиксироватьСостояниеЗагруженногоДокументаСАП(ПарметрыОбмена,REQID,БуквенныйСтатусСостоянияДокумента,ОписаниеОшибкиПроведения);
	
КонецПроцедуры	


//формирует таблицу проблем при загрузке ТЧ документа
//формат таблицы:
	//Колонка "НомерСтрокиДокумента");
	//Колонка "_MATNR"  - может быть как ссылкой на товар, так и кодом товара в зависимости от кода проблемы
	//Колонка "_MSIZE"
	//Колонка "КодПроблемы"
//
//Таблица кодов проблемы
	//Таблица кодов проблемы
	//1 - не найден товар с кодом ора
	//10- товар добавлен в справочник при загрузке документа
	//2 - не найден товар, владелец размера
	//3 - не найдена характеристика товара
	//30- характеристика загружена из САП
	//4 - у товара ведется учет по характеристикам а код размера не задан
	//5 - у товара НЕ ведется учет по характеристикам а код размера задан
	//50- у товара НЕ велся учет по характеристикам. загружена характеристика
	//6 - у товара в БД и товара из накладной не совпадают единицы учета товаров
//
Процедура ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,НомерСтрокиДокумента,MATNR = "",MSIZE="",КодПроблемы);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("_MATNR",MATNR);
	СтруктураПоиска.Вставить("_MSIZE",MSIZE);
	СтруктураПоиска.Вставить("КодПроблемы",КодПроблемы);
	
	МассивСтрок = ТаблицаОшибокЗагрузкиТЧ.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаОшибокЗагрузкиТЧ.Добавить();
		НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
		НоваяСтрока._MATNR = MATNR;
		НоваяСтрока._MSIZE = MSIZE;
		НоваяСтрока.Кодпроблемы = КодПроблемы;
	Иначе
		МассивСтрок[0].НомерСтрокиДокумента = МассивСтрок[0].НомерСтрокиДокумента+", "+НомерСтрокиДокумента;
	КонецЕсли;	
	
КонецПроцедуры	


//Функция СформироватьСтруктуруПараметровОбмена(Организация)
//	
//	СтруктураПараметров = Новый Структура;
//	
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//				   |	НастройкиПараметровОбменаСАП.Организация,
//				   |	НастройкиПараметровОбменаСАП.DSTNM_Получателя,
//				   |	НастройкиПараметровОбменаСАП.PSIZE,
//				   |	НастройкиПараметровОбменаСАП.REQUID,
//				   |	НастройкиПараметровОбменаСАП.ВыводитьИнтерактивныеСообщенияОбмена,
//				   |	НастройкиПараметровОбменаСАП.ВыводитьСообщенияПоВыбраннымСобытиям,
//				   |	НастройкиПараметровОбменаСАП.ВыводитьСообщенияВыбраннымПользователям,
//				   |	НастройкиПараметровОбменаСАП.ВыполнятьОбменПоРасписанию
//				   |ИЗ
//				   |	РегистрСведений.НастройкиПараметровОбменаСАП КАК НастройкиПараметровОбменаСАП
//				   |ГДЕ
//				   |	НастройкиПараметровОбменаСАП.ВыполнятьОбменПоРасписанию = ИСТИНА
//				   |	И НЕ НастройкиПараметровОбменаСАП.DSTNM_Получателя = """"";
//				   
//	Результат = Запрос.Выполнить();
//	Если не Результат.Пустой() Тогда
//		ТаблицаПараметров = Результат.Выгрузить();
//		
//		Для Каждого СтрокаТаблицы Из ТаблицаПараметров Цикл
//			ПрефиксПолучателя = СтрокаТаблицы.DSTNM_Получателя;
//			Если не ЗначениеЗаполнено(ПрефиксПолучателя) Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			//Формируем структуру вида "DSTNM_Получателя_ИмяПараметраНастройки"
//			Для каждого
//			
//КонецФункции			

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Процедуры формирования сообщений пользователям
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

//Процедура формирования оповещения активным пользователям
//Параметры
//	ПараметрыОбмена - структура, в которой находятся служебные данные
//		ПараметрыОбмена.ЗапущеноПользователем - если истина - это интерактивный запуск.
//		В этом случае сообщения выводятся только запустившему обмен пользователю
//	ПараметрыОбмена.ТаблицаАктивныхПользователейИБ - таблица значений.
//		Заполнена пользователями, активными на момент первого сообщения
//	ИдентификаторОповещения - строка.
//      Тип выводимого пользователю сообщения пример - ОповещатьОНачалеОбмена
//	ИдентификаторИконки
//		Идентификатор иконки из БиблиотекаКартинок
Процедура СформироватьОповещениеПользователям(ПараметрыОбмена,ИдентификаторОповещения,ЗаголовокСообщения = неопределено,ТекстСообщения = "",ИдентификаторИконки = "",СсылкаНаОбъект = Неопределено) Экспорт
	
	//общая концепция:
	//	-если обмен запущен пользователем - сообщения выводятся только пользователю запустившему обмен
	//	-если обмен запущен регламентным заданием то оповещения выводятся
	//		определенным пользователям
	//Сообщения формируются тем пользователям, сеансы которых были активны на момент
	//формирования первого сообщения при обмене.
	
	Если ПараметрыОбмена.ЗапущеноПользователем Тогда
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			
			Если ИдентификаторИконки = "Ошибка32" Тогда	
				ТипСообщения = СтатусСообщения.ОченьВажное;
			ИначеЕсли ИдентификаторИконки = "Предупреждение32" Тогда
				ТипСообщения = СтатусСообщения.Внимание; 
			Иначе
				ТипСообщения = СтатусСообщения.Обычное;
			КонецЕсли;	
			
			Если ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы()) Тогда
				Сообщить(ТекстСообщения,ТипСообщения);
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если не ЗначениеЗаполнено(ИдентификаторИконки) Тогда
			ИдентификаторИконки = "Информация32";
		КонецЕсли;		
		
		Если не ПараметрыОбмена.ВыводитьИнтерактивныеСообщенияОбмена Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаАктивныхПользователейИБ = Неопределено;
		
		Если не ПараметрыОбмена.Свойство("ТаблицаАктивныхПользователейИБ",ТаблицаАктивныхПользователейИБ) Тогда
			
			НаборЗаписей = РегистрыСведений.НастройкаТиповОповещенияОбОбмене.СоздатьНаборЗаписей();
			НаборЗаписей.Прочитать();
			
			ТаблицаПолучателей = НаборЗаписей.Выгрузить(,"Пользователь");
			
			//АдминистраторСистемы получит все - карма такая
			АдминистраторСистемы = Справочники.Пользователи.НайтиПоНаименованию("Администратор системы",Истина);
			Если ЗначениеЗаполнено(АдминистраторСистемы) Тогда 
				НоваяСтрока = ТаблицаПолучателей.Добавить();
			    НоваяСтрока.Пользователь = АдминистраторСистемы;
			КонецЕсли;	

			ТаблицаАктивныхПользователейИБ =  ПолучитьТаблицуАктивныхПользователейИБ(ТаблицаПолучателей);
			
			ПараметрыОбмена.Вставить("ТаблицаАктивныхПользователейИБ",ТаблицаАктивныхПользователейИБ);
			
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкаТиповОповещенияОбОбмене.СоздатьНаборЗаписей();
			НаборЗаписей.Прочитать();

		КонецЕсли;	
			
		Если ТаблицаАктивныхПользователейИБ.Количество()=0 Тогда
			Возврат;
		КонецЕсли;	
			
		Если ПараметрыОбмена.ВыводитьСообщенияПоВыбраннымСобытиям Тогда
			//ищем пользователейБД, которым нужно выводить это событие
			
			ТаблицаПолучателей = НаборЗаписей.Выгрузить(,"Пользователь,"+ИдентификаторОповещения); 
			ТаблицаПолучателей.Колонки.Добавить("НомерСоединения");
			
			//АдминистраторСистемы получит все - карма такая
			АдминистраторСистемы = Справочники.Пользователи.НайтиПоНаименованию("Администратор системы",Истина);
			
			Если ЗначениеЗаполнено(АдминистраторСистемы) Тогда 
				НоваяСтрока = ТаблицаПолучателей.Добавить();
			    НоваяСтрока.Пользователь = АдминистраторСистемы;
				НоваяСтрока[ИдентификаторОповещения] = Истина;
			КонецЕсли;	
			
			СтруктураПоиска = Новый Структура;
			
			ИндексСтроки = 0;
			Пока ИндексСтроки < ТаблицаПолучателей.Количество() Цикл
				ТекущаяСтрока = ТаблицаПолучателей[ИндексСтроки];
				//если оповещение не требуется - удаляем строку
				Если не ТекущаяСтрока[ИдентификаторОповещения] Тогда
					ТаблицаПолучателей.Удалить(ТекущаяСтрока);
					Продолжить;
				КонецЕсли;
				
				//если пользователь не подключен в данный момент - удаляем строку
				СтруктураПоиска.Вставить("Пользователь",ТекущаяСтрока.Пользователь);
				НайденныеСеансы = ТаблицаАктивныхПользователейИБ.НайтиСтроки(СтруктураПоиска);
				
				КоличествоСеансовПользователя = НайденныеСеансы.Количество();
				
				Если КоличествоСеансовПользователя = 1 Тогда
					//сеанс пользователя один
					ТекущаяСтрока.НомерСоединения = НайденныеСеансы[0].НомерСоединения;
				ИначеЕсли КоличествоСеансовПользователя>1 Тогда
					//КоличествоДобавляемыхСтрок = КоличествоСеансовПользователя -1;
					ТекущаяСтрока.НомерСоединения = НайденныеСеансы[0].НомерСоединения;
					СчетчикСеансов = 1;
					Пока СчетчикСеансов<КоличествоСеансовПользователя Цикл
						ИндексСтроки = ИндексСтроки+1;
						
						ТекущаяСтрока 					= ТаблицаПолучателей.Вставить(ИндексСтроки);
				        ТекущаяСтрока.Пользователь 		= НайденныеСеансы[СчетчикСеансов].Пользователь;
						ТекущаяСтрока.НомерСоединения 	= НайденныеСеансы[СчетчикСеансов].НомерСоединения;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			ТаблицаПолучателей = ТаблицаАктивныхПользователейИБ.Скопировать();
		КонецЕсли;	
		
		ВремяФормирования = ТекущаяДата();
		
		//формируем набор записей регистра
		НаборЗаписей = РегистрыСведений.СообщенияПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Значение 		= ВремяФормирования;
		НаборЗаписей.Отбор.Период.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Пока не НаборЗаписей.Количество() = 0 Цикл
			ВремяФормирования = ВремяФормирования+1;
			НаборЗаписей.Отбор.Период.Значение = ВремяФормирования;
			НаборЗаписей.Прочитать();
		КонецЦикла;
		
		НаборЗаписей.ВыгрузитьКолонки();
		НаборЗаписей.Загрузить(ТаблицаПолучателей);
		
		Если ЗаголовокСообщения = Неопределено Тогда
			ЗаголовокСообщения = "Обмен с SAP.";
		КонецЕсли;
		
		Для Каждого СтрокаНабора Из НаборЗаписей Цикл;
			
			СтрокаНабора.Период				 = ВремяФормирования;
			СтрокаНабора.ИдентификаторИконки = ИдентификаторИконки;
			СтрокаНабора.ЗаголовокСообщения	 = ЗаголовокСообщения;
			СтрокаНабора.ТекстСообщения		 = ТекстСообщения;
			СтрокаНабора.СсылкаНаОбъект		 = СсылкаНаОбъект;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры	
	
//функция возвращает таблицу активных соединений с БД тех пользователей,
//которые фигурируют в ТаблицеПолучателей
//возвращает таблицу вида:
//	Пользователь (элемент спр пользователи)
//	ПользовательИБ (пользователь информационной базы)
//	НомерСоединения (число)
Функция ПолучитьТаблицуАктивныхПользователейИБ(ТаблицаПолучателей)
	
	//изначально получатель сообщения искался по "ПользовательИнформационнойБазы",
	//однако пользователь метода МассивСоединенийИБ и ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору
	//не равны между собой, хотя это один и тот же пользователь!
	//модуль был переписан на поиск по идентификатору
	
	ТаблицаПолучателейСообщений = ТаблицаПолучателей.СкопироватьКолонки();
	ТаблицаПолучателейСообщений.Колонки.Добавить("ПользовательИБ");
	ТаблицаПолучателейСообщений.Колонки.Добавить("УникальныйИдентификатор");
	
	ТаблицаАктивныхПользователей = ТаблицаПолучателейСообщений.СкопироватьКолонки();
	ТаблицаАктивныхПользователей.Колонки.Добавить("НомерСоединения");
		
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого ПолучательСообщения Из ТаблицаПолучателей Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПолучательСообщения.Пользователь.ИдентификаторПользователяИБ);
		Если ПользовательИБ = неопределено Тогда
			Продолжить;
		КонецЕсли;
		НовыйПолучатель 						= ТаблицаПолучателейСообщений.Добавить();
		НовыйПолучатель.Пользователь 			= ПолучательСообщения.Пользователь;
		НовыйПолучатель.ПользовательИБ 			= ПользовательИБ;
		НовыйПолучатель.УникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор;
	КонецЦикла;
	
	//получаем соединения ИБ
	МассивСоединенийИБ = ПолучитьСоединенияИнформационнойБазы();
	
	Для каждого СоединениеИБ из МассивСоединенийИБ Цикл
		Если СоединениеИБ.ИмяПриложения = "1CV8" или
			СоединениеИБ.ИмяПриложения = "1CV8C" Тогда
			//это клиентское соединение
			НайденнаяСтрока = ТаблицаПолучателейСообщений.Найти(СоединениеИБ.Пользователь.УникальныйИдентификатор,"УникальныйИдентификатор");
			Если не НайденнаяСтрока = Неопределено Тогда
				НовыйПолучатель = ТаблицаАктивныхПользователей.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПолучатель,НайденнаяСтрока);
				НовыйПолучатель.НомерСоединения = СоединениеИБ.НомерСоединения;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат ТаблицаАктивныхПользователей;
	
КонецФункции	

//рабочая
Функция ПолучитьСообщенияНаСервере() Экспорт

	СтруктураОтбора = Интеграция_САП_Сервер.СформироватьСтруктуруОтбораДляЧтенияСообщенийПользователя();
	
	Выборка = РегистрыСведений.СообщенияПользователей.Выбрать(,,СтруктураОтбора);
	
	Если Выборка.Следующий() Тогда
		//формируем структуру для вывода сообщения
		ДанныеОповещения = Новый Структура;
		ДанныеОповещения.Вставить("ИдентификаторИконки",Выборка.ИдентификаторИконки);
		ДанныеОповещения.Вставить("Заголовок",Выборка.ЗаголовокСообщения);
		ДанныеОповещения.Вставить("ТекстСообщения",Выборка.ТекстСообщения);
		Если ЗначениеЗаполнено(Выборка.СсылкаНаОбъект) тогда
			Данныеоповещения.Вставить("НавигационнаяСсылка",ПолучитьНавигационнуюССылку(Выборка.СсылкаНаОбъект));
		Иначе
			Данныеоповещения.Вставить("НавигационнаяСсылка","");
		КонецЕсли;	
		
		//удаляем исходную запись
		Выборка.ПолучитьМенеджерЗаписи().Удалить();
		
		Возврат ДанныеОповещения;
	
	КонецЕсли;
	
	Возврат Неопределено;

	
КонецФункции

Функция ПроверитьНеобходимостьПолученияСообщенийОбОбмене() Экспорт
	
	//Если Интеграция_САП_Сервер.ПолучитьРегламентноеЗаданиеОбменаСАП().Использование Тогда
	Если Константы.ИспользоватьСинхронизациюДанныхСАП.Получить() Тогда	
		Если РольДоступна("АдминистраторСистемы") Тогда
			Возврат Истина;
		Иначе	
		
			Отбор = Новый Структура;
			Отбор.Вставить("Пользователь",ПараметрыСеанса.ТекущийПользователь);
			Выборка = РегистрыСведений.НастройкаТиповОповещенияОбОбмене.Выбрать(Отбор);
			
			Возврат Выборка.Следующий();
			
		КонецЕсли;	
			
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


Функция СформироватьСтруктуруОтбораДляЧтенияСообщенийПользователя() Экспорт
	
	Отбор = Новый Структура;
	//Отбор.Вставить("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	Отбор.Вставить("НомерСоединения",НомерСоединенияИнформационнойБазы());

	Возврат Отбор;
	
КонецФункции 

Функция ПрочитатьСообщенияПользователю() Экспорт
	
	СтруктураОтбора = Интеграция_САП_Сервер.СформироватьСтруктуруОтбораДляЧтенияСообщенийПользователя();
	
	Выборка = РегистрыСведений.СообщенияПользователей.Выбрать(,,СтруктураОтбора);
	
	Возврат Выборка;
	
КонецФункции

Процедура УдалитьНеполученныеПользователемСообщенияПриЗавершенииРаботы() Экспорт
	
	Если Интеграция_САП_Сервер.ПроверитьНеобходимостьПолученияСообщенийОбОбмене() Тогда 
		СтруктураОтбора = Интеграция_САП_Сервер.СформироватьСтруктуруОтбораДляЧтенияСообщенийПользователя();
		ВыборкаСообщений = РегистрыСведений.СообщенияПользователей.Выбрать(,,СтруктураОтбора);
		Пока ВыборкаСообщений.Следующий() Цикл
			ВыборкаСообщений.ПолучитьМенеджерЗаписи().Удалить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//служебные процедуры модуля
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

Функция ПолучитьРегламентноеЗаданиеОбменаСАП() Экспорт
	
	Возврат РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.СинхронизацияДанныхСАП);
	
КонецФункции	

Функция ПроверитьНеобходимостьБлокированияЭлементовФормы(СсылкаНаДокумент) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Документ",СсылкаНаДокумент);
	
	Выборка = РегистрыСведений.ОбменДаннымиСАП.Выбрать(СтруктураОтбора);
	
	Возврат Выборка.Следующий();
	
КонецФункции
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//функции загрузки цен из САП
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//точка входа для ручного запуска
Процедура ПодготовитьДанныеДляЗагрузкиЦен() Экспорт

	ВыборкаЗаписей = РегистрыСведений.НастройкиПараметровОбменаСАП.Выбрать();
	
	
	
	ПараметрыОбмена = Новый Структура; 
	ПараметрыОбмена.Вставить("ЗапущеноПользователем",истина);
	
	СформироватьОповещениеПользователям(ПараметрыОбмена,
											,
											,
											"Инициирован процесс синхронизации цен на товары с SAP.",
											);
								
	//если есть настройка подключения к САП, значит можно загрузить цены
	Пока ВыборкаЗаписей.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаЗаписей.DSTNM_Получателя) Тогда
			 ПараметрыОбмена.Вставить("Организация"			,ВыборкаЗаписей.Организация);
		     ПараметрыОбмена.Вставить("DSTNM"				,ВыборкаЗаписей.DSTNM_Получателя);
			 
			 ИнициироватьЗагрузкуЦен(ПараметрыОбмена);
			 
		КонецЕсли;			 
	КонецЦикла;
	
	Если ПараметрыОбмена.Количество() = 1 Тогда
		//либо в регистре нет записей, либо не указан DSTNM
		СформироватьОповещениеПользователям(ПараметрыОбмена,
											,
											,
											"Перед синхронизацией цен необходимо указать DSTNM организации.
											|Синхронизация не выполнена!",
											"Предупреждение32");
	Иначе	
	
		СформироватьОповещениеПользователям(ПараметрыОбмена,
											,
											,
											"Завершен процесс синхронизации цен на товары с SAP.",
											);
	КонецЕсли;
	
	
КонецПроцедуры

//Процедура выполняет загрузку цен из САП
//параметры:
//Тип - структура 
//	"Организация" - ссылка на организацию, для которой загружаются цены
//	DSTNM или DEPARTMENT - Идентификатор узла получателя (отправителя) документа
//	MATNR - код материала, цену которого требуется получить. не обязательный элемент.
Процедура ИнициироватьЗагрузкуЦен(ПараметрыОбмена)
	
	Если не ТипЗнч(ПараметрыОбмена) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТекущихЦенСАП = ПолучитьЦеныИзСАП(ПараметрыОбмена);
	
	Если ТаблицаТекущихЦенСАП.Количество() = 0 Тогда 
		ЗаписьЖурналаРегистрации("Обмен САП.Ошибка получения цен",УровеньЖурналаРегистрации.Ошибка,,,"Таблица полученных из САП цен пуста.
		|Получение актуальных цен на товары не выполнено.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		СформироватьОповещениеПользователям(ПараметрыОбмена,
											,
											,
											"SAP не возвратил акуальных данных о ценах на товары.
											|Рекомендуется обратиться к администратору системы.",
											"Предупреждение32");
		
		Возврат;
	Иначе
		СформироватьОповещениеПользователям(ПараметрыОбмена,
											,
											,
											"Получены цены на "+ТаблицаТекущихЦенСАП.Количество()+" товаров.
											|Начинается обработка полученных данных.",
											);
		
	КонецЕсли;
	
	ТаблицаЦенТребующихОбновления = СформироватьТаблицуЦенТребующихОбновления(ТаблицаТекущихЦенСАП,ПараметрыОбмена);

	КоличествоОбновляемыхЦен = ТаблицаЦенТребующихОбновления.Количество();
	
	Если КоличествоОбновляемыхЦен = 0 Тогда
		СформироватьОповещениеПользователям(ПараметрыОбмена,
												,
												,
												"Данные обработаны.
												|Текущие цены не требуют обновления.",
												);
	Иначе
		СформироватьОповещениеПользователям(ПараметрыОбмена,
												,
												,
												"Данные обработаны.
												|Необходимо обновить цены у "+КоличествоОбновляемыхЦен+" товаров.",
												);										
												
		ЗагрузитьДокумент_ЦеновоеСоглашение(ПараметрыОбмена,ТаблицаЦенТребующихОбновления);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗагрузитьДокумент_ЦеновоеСоглашение(ПараметрыОбмена,ТаблицаЦен)
	
	ЕстьОшибкиПриЗагрузке = 0;
	
	ТаблицаДанныхМатериаловСАП = Новый ТаблицаЗначений;
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("MATNR");
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("ПроблемаЗагрузки",Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("ET_NOM");
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("ET_AUM");
	ТаблицаДанныхМатериаловСАП.Колонки.Добавить("ET_SIZE");
	
	
	
	ЗагружаемыйДокумент = Документы.ЦеновоеСоглашение.СоздатьДокумент();
	
	СсылкаНаДокумент	= ПользователиСлужебный.СсылкаОбъекта(ЗагружаемыйДокумент,Истина);
		
	ЗагружаемыйДокумент.Комментарий = "Загружено в автоматическом режиме из САП "+ТекущаяДата();
		
	ЗагружаемыйДокумент.Дата 		= ТекущаяДата();
	ЗагружаемыйДокумент.Поставщик	= Справочники.Контрагенты.ВостокСервис;
	ЗагружаемыйДокумент.Организация = ПараметрыОбмена.Организация;
	
	ЗагружаемыйДокумент.УстановитьНовыйНомер();
	
	ЗагружаемыйДокумент.СоздательДокумента 	= Пользователи.ТекущийПользователь();
	
	ТаблицаОшибокЗагрузкиТЧ = Новый ТаблицаЗначений;
	ТаблицаОшибокЗагрузкиТЧ.Колонки.Добавить("НомерСтрокиДокумента",Новый ОписаниеТипов("Строка"));
	ТаблицаОшибокЗагрузкиТЧ.Колонки.Добавить("_MATNR");
	ТаблицаОшибокЗагрузкиТЧ.Колонки.Добавить("_MSIZE");
	ТаблицаОшибокЗагрузкиТЧ.Колонки.Добавить("КодПроблемы");
	
	//Таблица кодов проблемы
	//1 - не найден товар с кодом ора
	//10- товар добавлен в справочник при загрузке документа
	//2 - не найден товар, владелец размера
	//3 - не найдена характеристика товара
	//30- характеристика загружена из САП
	//4 - у товара ведется учет по характеристикам а код размера не задан
	//5 - у товара НЕ ведется учет по характеристикам а код размера задан
	//50- у товара НЕ велся учет по характеристикам. загружена характеристика
	//6 - товара и накладной не совпадают единицы учета товаров
	
	Для Каждого СтрокаДанныхТЧ Из ТаблицаЦен Цикл
			
		СтрокаДокумента = ЗагружаемыйДокумент.Товары.Добавить();
		
		Если ЗначениеЗаполнено(СтрокаДанныхТЧ.Номенклатура) Тогда
			Товар = СтрокаДанныхТЧ.Номенклатура;
		Иначе	
			Товар = НайтиНоменклатуруПоКоду(СтрокаДанныхТЧ.MATNR);
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(Товар) Тогда
			ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке + 1;
			ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,СтрокаДанныхТЧ.MATNR,,1);
			
			Если не СтрокаДанныхТЧ.MATNR = Неопределено Тогда
				//пытаемся загрузить информацию о новом товаре
				Товар = ИнициироватьДобавлениеНовогоТовара(ПараметрыОбмена,СтрокаДанныхТЧ.MATNR,,ТаблицаДанныхМатериаловСАП);
				Если ЗначениеЗаполнено(Товар) Тогда
					//товар загружен - ошибки нет
					ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,СтрокаДанныхТЧ.MATNR,,10);
					ЕстьОшибкиПриЗагрузке = ЕстьОшибкиПриЗагрузке - 1; 
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДокумента.Номенклатура = Товар;
		СтрокаДокумента.Цена		 = СтрокаДанныхТЧ.NETPR;
		
		//единицы измерения в документе нет, но она есть в товаре.
		//проверяем что загружается в той ед. изм. , которая установлена в качестве базовой.
		Если не Товар.ЕдиницаИзмерения.Код = СтрокаДанныхТЧ.MSEH6 тогда
			СтрокаДокумента.Цена	= 0;
			ЕстьОшибкиПриЗагрузке	= ЕстьОшибкиПриЗагрузке + 1;
			
			ЗафиксироватьОшибкуЗагрузкиДанных(ТаблицаОшибокЗагрузкиТЧ,СтрокаДокумента.НомерСтроки,Товар,,6);

			//ЗаписьЖурналаРегистрации("Обмен САП.",УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.ПоступлениеНоменклатуры,СсылкаНаДокумент,"Загрузка документа ""Поступление номенклатуры"".
			//	|В строке №"+СтрокаДокумента.НомерСтроки+" ТЧ ""Товары"" код получаемой Ед. измерения не совпадает с базовой.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецЕсли;
		
		//+++АСТБ_Горюшин_Алексей
		Если НЕ ЗначениеЗаполнено(Товар) Тогда
			 ЗагружаемыйДокумент.Товары.Удалить(СтрокаДокумента);
		КонецЕсли;	
		//---АСТБ_Горюшин_Алексей
		
	КонецЦикла;	
	
	//+++АСТБ_Горюшин_Алексей
	Если ЗагружаемыйДокумент.Товары.Количество() > 0 Тогда
	//---АСТБ_Горюшин_Алексей
	
	ЗагружаемыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	
	СформироватьЗаписиЖурналаРегистрации(СсылкаНаДокумент,ТаблицаОшибокЗагрузкиТЧ);
	
	
	Если ЕстьОшибкиПриЗагрузке = 0 Тогда
		Попытка
			ЗагружаемыйДокумент.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		Исключение
			//вывод сообщения о ошибка проведения документа
		КонецПопытки;
		
		//Вывод сообщения для пользователя
		ТекстСообщения ="Документ """+Строка(ЗагружаемыйДокумент.Ссылка)+""" "+?(ЗагружаемыйДокумент.Проведен, "проведен.","записан.");
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"СообщатьОКаждомИзмененномДокументе",
								,
								ТекстСообщения,
								"Информация32",
								ЗагружаемыйДокумент.Ссылка);	
		
	Иначе
		
		//вывод сообщения о документ требует ручной корректировки
		ТекстСообщения ="Документ """+Строка(ЗагружаемыйДокумент.Ссылка)+""" сформирован.
		|Требуется ручная корректировка документа.";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								"СообщатьОКаждомИзмененномДокументе",
								,
								ТекстСообщения,
								"Предупреждение32",
								ЗагружаемыйДокумент.Ссылка);	
		
	КонецЕсли; 	

	//+++АСТБ_Горюшин_Алексей
	КонецЕсли;
	//---АСТБ_Горюшин_Алексей
	
КонецПроцедуры	

Функция СформироватьТаблицуЦенТребующихОбновления(ТаблицаТекущихЦенСАП,ПараметрыОбмена)
	
	Организация = "";
	ПараметрыОбмена.Свойство("Организация",Организация);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТекущиеЦеныСАП.MATNR,
	               |	ТекущиеЦеныСАП.NETPR,
	               |	ТекущиеЦеныСАП.MSEH6
	               |ПОМЕСТИТЬ ТекущиеЦеныСАП
	               |ИЗ
	               |	&ТекущиеЦеныСАП КАК ТекущиеЦеныСАП
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	               |	ТекущиеЦеныСАП.MATNR,
	               |	ТекущиеЦеныСАП.NETPR,
	               |	ТекущиеЦеныСАП.MSEH6
	               |	 
	               |ИЗ
	               |	ТекущиеЦеныСАП КАК ТекущиеЦеныСАП
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				,
	               |				Организация = &Организация
	               |					И Поставщик = &Поставщик) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ТекущиеЦеныСАП.MATNR = ЦеныНоменклатурыСрезПоследних.Номенклатура.КодСинхронизации
	               |ГДЕ
	               |	НЕ ТекущиеЦеныСАП.NETPR = ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	               |	И НЕ ТекущиеЦеныСАП.NETPR = 0";
		
	Запрос.УстановитьПараметр("ТекущиеЦеныСАП",ТаблицаТекущихЦенСАП);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Поставщик",Справочники.Контрагенты.ВостокСервис);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		//цены актуальны
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;	
	
	Возврат Результат.Выгрузить();

КонецФункции	
	
Функция ПолучитьЦеныИзСАП(ПараметрыОбмена)
	
	ИмяТранзакции = "ZSD_PL_IF_SEND_2_1C";
	
	СтруктураТаблиц = ПолучитьОписаниеТаблицФункции(ПараметрыОбмена,ИмяТранзакции);
	
	Если СтруктураТаблиц.Свойство("Error") Тогда
		//обнаружены проблемы подключения
		//ЗаписьЖурналаРегистрации("Обмен САП.Ошибка установки соединения",УровеньЖурналаРегистрации.Ошибка,,,"Процедура формирования параметров функции "+ИмяТранзакции+" прервана по ошибке.
		//|Получение актуальных цен на товары не выполнено.",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		ТекстСообщения = "Ошибка установки соединения.
		|Загрузка цен не выполнена!";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								,
								,
								ТекстСообщения,
								"Ошибка32");	
		
		Возврат новый ТаблицаЗначений;
	КонецЕсли;	

	ТаблицаИсходящихПараметров 		= "";
	ТаблицаВозвращаемыхПараметров 	= "";
	
	СтруктураТаблиц.Свойство("Out",ТаблицаИсходящихПараметров);
	СтруктураТаблиц.Свойство("In",ТаблицаВозвращаемыхПараметров);

	//справка
	
	//параметры ZLE_WMS_IF_SEND_TO_CONFIRMED2
	//входящие:
	//таблица IT_PARAMS
	//	MATNR	        CHAR	18		Номер материала
	//	DEPARTMENT		CHAR	5		Получатель
	//	PSIZE			NUMC	10      количество возвращаемых записей - возможно поле всегда должно быть заполнено (00000)
	
	//возвращаемые
	//таблица 
	//		ET_PRICES
	
	//подробности в док. по САП.
	
	//тонкости установки парметров

	
	Таблица_IT_PARAMS 	= ТаблицаИсходящихПараметров[0].ТаблицаПараметров;
	
	НоваяСтрока 		= Таблица_IT_PARAMS.Добавить();
	
	Если ПараметрыОбмена.Свойство("DSTNM") Тогда
		ПараметрыОбмена.Свойство("DSTNM",НоваяСтрока.DEPARTMENT);
	Иначе
		ПараметрыОбмена.Свойство("DEPARTMENT",НоваяСтрока.DEPARTMENT);
	КонецЕсли;	
	
	ПараметрыОбмена.Свойство("MATNR",НоваяСтрока.MATNR);	
	Если ПараметрыОбмена.Свойство("PSIZE") Тогда
		ПараметрыОбмена.Свойство("PSIZE",НоваяСтрока.PSIZE);
	    НоваяСтрока.PSIZE = Формат(НоваяСтрока.PSIZE,"ЧЦ=10;ЧВН=; ЧГ=");
	Иначе
		НоваяСтрока.PSIZE = "00000000000";
	КонецЕсли;
	
	ПодключениеКСАП 			= неопределено;
	ОписаниеОшибкиПодключения 	= "";
	
	РезультатПодключения = УстановитьСоединениеСАП(ПодключениеКСАП,ОписаниеОшибкиПодключения);

	ПодключениеКСАП.Call_Trn(ТаблицаИсходящихПараметров,ТаблицаВозвращаемыхПараметров,ИмяТранзакции,ОписаниеОшибкиПодключения);
	
	РазорватьСоединениеСАП(ПодключениеКСАП);
	ПодключениеКСАП = Неопределено;

	ОписаниеОшибкиПодключения = СформироватьТекстОшибкиПодключенияСАП(ОписаниеОшибкиПодключения);

	Если ЗначениеЗаполнено(ОписаниеОшибкиПодключения) Тогда 
		//ЗаписьЖурналаРегистрации("Обмен САП.Ошибка установки соединения",УровеньЖурналаРегистрации.Ошибка,,,"ОБМЕН ПРЕРВАН! "+ОписаниеОшибкиПодключения+".
		//|Вызов осуществлялся из функции ""ПолучитьЦеныИзСАП"".",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		ТекстСообщения = "Ошибка установки соединения.
		|Загрузка цен не выполнена!";
		СформироватьОповещениеПользователям(ПараметрыОбмена,
								,
								,
								ТекстСообщения,
								"Ошибка32");	

		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	
	ТаблицаДанных_Цены = ТаблицаВозвращаемыхПараметров.Найти("ET_PRICES","ИмяТаблицы").ТаблицаПараметров;
	
	ТаблицаДанных_Цены.Колонки.Добавить("MATNR",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(18,0)));
	ТаблицаДанных_Цены.Колонки.Добавить("NETPR",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаДанных_Цены.Колонки.Добавить("TAXKM",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1,0)));
	ТаблицаДанных_Цены.Колонки.Добавить("MSEH6",Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(3,ДопустимаяДлина.Фиксированная)));
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных_Цены Цикл
		//выполняем преобразование "строковых переменных" в "числовые"
		СтрокаТаблицы.MATNR = ПреобразоватьСтрокуВЧисло(СтрокаТаблицы._MATNR);
		СтрокаТаблицы.NETPR = ПреобразоватьСтрокуВЧисло(СтрокаТаблицы._NETPR,ложь);
		СтрокаТаблицы.TAXKM = ПреобразоватьСтрокуВЧисло(СтрокаТаблицы._TAXKM);
		СтрокаТаблицы.MSEH6 = СтрокаТаблицы._MSEH6;
		
		//АсТБ_Alexey_51154_********************************************************************
		//цены, полученные из сап без НДС и НП
		//пересчитываем цену с налогами.
		//Если СтрокаТаблицы.TAXKM = 1 Тогда
		//	//АсТБ_Alexey_********************************************************************
		//	Если Год(ТекущаяДата()) >= 2019 Тогда 
		//		//НДС 20%
		//		СтрокаТаблицы.NETPR = Окр(СтрокаТаблицы.NETPR*1.2,2);
		//	Иначе
		//		//НДС 18%
		//		СтрокаТаблицы.NETPR = Окр(СтрокаТаблицы.NETPR*1.18,2);
		//	КонецЕсли;
		//	//АсТБ_Alexey_********************************************************************
		//ИначеЕсли СтрокаТаблицы._TAXKM = 2 Тогда
		//	//НДС 10%
		//	СтрокаТаблицы.NETPR = Окр(СтрокаТаблицы.NETPR*1.1,2);
		//КонецЕсли;	
		//АсТБ_Alexey_51154_********************************************************************
		
	КонецЦикла; 	

	Возврат ТаблицаДанных_Цены;
	
КонецФункции

// {ЮМадатов (27.07.21): <#102611 >
#Область ЗагрузкаИзСАП

//Опрос очереди САП
//Входящие параметры:
//Организация - СправочникСсылка.Организации - Организация по которой будет осуществляться опрос очереди
//Возвращаемое значение - ТаблицаЗначений - Колонки: Id - номер запроса в очереди, SobjId - Номер документа
Функция ОтветЗапросаОпросОчередиСАП(Организация,НастройкиПараметровОбмена) Экспорт
	
	Соединение = Новый HTTPСоединение(НастройкиПараметровОбмена.Сервер, НастройкиПараметровОбмена.Порт, НастройкиПараметровОбмена.ЛогинСервисаСАП, НастройкиПараметровОбмена.ПарольСервисаСАП);
	Запрос = Новый HTTPЗапрос(НастройкиПараметровОбмена.АдресСервисаОчереди, НастройкиПараметровОбмена.Заголовки);
	
	СтрокаЗапроса = ТелоЗапросаОчереди(Организация, НастройкиПараметровОбмена.ЗагужатьТолькоНовыеДокументы);
	
	Запрос.УстановитьТелоИзСтроки(СтрокаЗапроса);
	HTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос);
	
	Возврат HTTPОтвет;
	
КонецФункции

Функция ПредупреждениеОНезаполненномЗначенииШапки(Поле, СтрокаПоиска = "",НомерСтроки = "") Экспорт
	Если Не ЗначениеЗаполнено(Поле) Тогда
		
		Если ТипЗнч(Поле) = Тип("СправочникСсылка.Склады") Тогда
			Возврат НСтр("ru = 'Не удалось найти склад по LGNUM_LGTYP по значению: '")+СтрокаПоиска+Символы.ПС;
		ИначеЕсли ТипЗнч(Поле) = Тип("СправочникСсылка.Контрагенты") Тогда
			Возврат НСтр("ru = 'Не удалось найти поставщика по ИНН по значению: '")+СтрокаПоиска+Символы.ПС;
		Иначе
			Возврат "";
		КонецЕсли;
		
	Иначе
		Возврат "";
	КонецЕсли;	
	
КонецФункции

Функция ПредупреждениеОНезаполненномЗначенииТоваров(Поле, КодНоменклатуры, КодРазмера = "" ,НомерСтроки) Экспорт
		
		Если ТипЗнч(Поле) = Тип("СправочникСсылка.Номенклатура") Тогда
			Возврат "В строке №" + НомерСтроки + " не удалось найти номенклатуру с кодом синхронизации: " + КодНоменклатуры 
			+ ?(ЗначениеЗаполнено(КодРазмера), " и характеристику по кодуСАП: " + КодРазмера,"") + Символы.ПС;
		ИначеЕсли ТипЗнч(Поле) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
			Возврат "В строке №" + НомерСтроки + " не удалось найти характеристику по кодуСАП: " + КодРазмера + Символы.ПС;
		КонецЕсли;
			
КонецФункции

Функция РезультатЗагрузкиДокументовСтруктурой(РезультатТекстом)
	ДанныеПоступленияНоменклатуры = Новый Структура;
	ТабличнаяЧастьТовары= Новый ТаблицаЗначений;
	
	ДанныеПоступленияНоменклатуры.Вставить("Дата");
	ДанныеПоступленияНоменклатуры.Вставить("НомерВходящегоДокумента");// ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеПоступленияНоменклатуры.Вставить("ДатаВходящегоДокумента");// ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеПоступленияНоменклатуры.Вставить("НомерЗапросаСторно");// ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеПоступленияНоменклатуры.Вставить("НомерСторно");// ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеПоступленияНоменклатуры.Вставить("НомерСкладаСАП");// ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ДанныеПоступленияНоменклатуры.Вставить("Склад");// ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ДанныеПоступленияНоменклатуры.Вставить("ТипСклада");// ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ДанныеПоступленияНоменклатуры.Вставить("ИннПоставщика");// ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ДанныеПоступленияНоменклатуры.Вставить("Поставщик");// ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ДанныеПоступленияНоменклатуры.Вставить("ERROR_TEXT");// ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеПоступленияНоменклатуры.Вставить("Товары");
	
	ТабличнаяЧастьТовары.Колонки.Добавить("ВидДвиженияСАП", ОбщегоНазначения.ОписаниеТипаСтрока(3)); //101 - приход, 102 - сторно
	ТабличнаяЧастьТовары.Колонки.Добавить("ДебетКредит", ОбщегоНазначения.ОписаниеТипаСтрока(1));  //Н - Кредит S - Дебит
	ТабличнаяЧастьТовары.Колонки.Добавить("КодСинхронизации", ОбщегоНазначения.ОписаниеТипаСтрока(18));
	ТабличнаяЧастьТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабличнаяЧастьТовары.Колонки.Добавить("КодРазмера", ОбщегоНазначения.ОписаниеТипаСтрока(8));
	ТабличнаяЧастьТовары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТабличнаяЧастьТовары.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(13,3));
	ТабличнаяЧастьТовары.Колонки.Добавить("КодЕдИзмерения", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ТабличнаяЧастьТовары.Колонки.Добавить("КодЕдИзмеренияОКЕИ", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	
	ПарсерДокументаСАП = Новый ЧтениеXML;
	ПарсерДокументаСАП.УстановитьСтроку(РезультатТекстом);
	
	Пока ПарсерДокументаСАП.Прочитать() Цикл
		
		Если ПарсерДокументаСАП.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ПарсерДокументаСАП.ЛокальноеИмя = "Header" Тогда
				
				Попытка
					
					//должно работать, но на всякий случай в попытку
					ДатаСтрокой	= СтрЗаменить(СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("CPUDT")),"-","");
					ВремяСтрокой = СтрЗаменить(СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("CPUTM")),":","");
					
					ДатаДокумента = Дата(ДатаСтрокой + ВремяСтрокой);
									
				Исключение
					
					ДатаДокумента = Дата(СтрЗаменить(СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("CPUDT")),"-",""));
					
				КонецПопытки;
								
				ДанныеПоступленияНоменклатуры.Дата						 = ДатаДокумента;
				ДанныеПоступленияНоменклатуры.НомерВходящегоДокумента	 = СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("DOCNR"));
				ДанныеПоступленияНоменклатуры.ДатаВходящегоДокумента	 = Дата(СтрЗаменить(СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("BUDAT")),"-",""));
				ДанныеПоступленияНоменклатуры.НомерЗапросаСторно 		 = СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("REQID_PREV"));
				ДанныеПоступленияНоменклатуры.НомерСторно				 = СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("DOCNR_PREV"));
				ДанныеПоступленияНоменклатуры.НомерСкладаСАП		     = СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("LGNUM"));
				ДанныеПоступленияНоменклатуры.ТипСклада					 = СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("LGTYP"));
				ДанныеПоступленияНоменклатуры.ИннПоставщика				 = СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("SUPPLIER_INN"));
				ДанныеПоступленияНоменклатуры.ERROR_TEXT 				 = СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("ERROR_TEXT"));
				ДанныеПоступленияНоменклатуры.Поставщик					 = Справочники.Контрагенты.ПоставщикПоИНН(ДанныеПоступленияНоменклатуры.ИннПоставщика);
				ДанныеПоступленияНоменклатуры.Склад						 = СкладПоКодуСАП(ДанныеПоступленияНоменклатуры.НомерСкладаСАП,ДанныеПоступленияНоменклатуры.ТипСклада);

			ИначеЕсли ПарсерДокументаСАП.ЛокальноеИмя = "Item" Тогда	
				
				НовыйЭлемент = ТабличнаяЧастьТовары.Добавить();
				НовыйЭлемент.ВидДвиженияСАП    				= СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("BWART"));
				НовыйЭлемент.ДебетКредит    				= СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("SHKZG"));
				НовыйЭлемент.КодСинхронизации  				= СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("MATNR"));
				НовыйЭлемент.Номенклатура					= НоменклатураПоКодуСинхронизации(Число(НовыйЭлемент.КодСинхронизации));
				НовыйЭлемент.КодРазмера	    				= СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("MSIZE"));
				НовыйЭлемент.Количество	    				= СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("MENGE"));
				НовыйЭлемент.КодЕдИзмерения    				= СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("MEINS"));
				НовыйЭлемент.КодЕдИзмеренияОКЕИ				= СокрЛП(ПарсерДокументаСАП.ЗначениеАтрибута("MSEH6"));
				
				Если ЗначениеЗаполнено(НовыйЭлемент.Номенклатура) Тогда
					
					Если ЗначениеЗаполнено(НовыйЭлемент.КодРазмера) Тогда 
						///поменять поиск характеристики
						НовыйЭлемент.ХарактеристикаНоменклатуры	= ХарактеристикаНоменклатурыПоВладельцуИКоду(НовыйЭлемент.Номенклатура, НовыйЭлемент.КодРазмера);
					Иначе
						НовыйЭлемент.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	ДанныеПоступленияНоменклатуры.Товары = ТабличнаяЧастьТовары;
	ПарсерДокументаСАП.Закрыть();
	
	Возврат ДанныеПоступленияНоменклатуры;
КонецФункции

Функция ДокументыИзОпрошеннойОчереди(Организация, ТаблицаРезультатОпросаОчереди,НастройкиПараметровОбмена)Экспорт
	
	Соединение = Новый HTTPСоединение(НастройкиПараметровОбмена.Сервер, НастройкиПараметровОбмена.Порт, НастройкиПараметровОбмена.ЛогинСервисаСАП, НастройкиПараметровОбмена.ПарольСервисаСАП);
	Запрос = Новый HTTPЗапрос(НастройкиПараметровОбмена.АдресСервисаДокумента, НастройкиПараметровОбмена.Заголовки);
	
	МассивДокументов = Новый Массив;
	
	Для Каждого СтрокаИдентификатора Из ТаблицаРезультатОпросаОчереди Цикл

		Запрос.УстановитьТелоИзСтроки(ТелоЗапросаЗагрузкиДокумента(СтрокаИдентификатора.SobjId));
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
		
		Если Ответ.КодСостояния = 200 Тогда
			ТекстОтветаПоОчереди = СтрокаОтвета;
		Иначе
			
			МестоКодаОшибки = СтрНайти(СтрокаОтвета, строка(Ответ.КодСостояния));
			КонецОписанияОшибки = СтрНайти(СтрокаОтвета, "</br>",,МестоКодаОшибки);
			ТекстОшибки = Сред(СтрокаОтвета, МестоКодаОшибки, КонецОписанияОшибки - МестоКодаОшибки);
			
			ТекстОшибки = СтрШаблон("Получена ошибка при запросе данных документа
				|Номер документа: %1
				|Код состояния: %2
				|Ошибка: %3",
				СтрокаИдентификатора.SobjId,
				Ответ.КодСостояния,
				ТекстОшибки);
			
			ЗаписьЖурналаРегистрации("Загрузка поступлений SAP. Создание документа", 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
			ОповеститьПользователя(ТекстОшибки,НастройкиПараметровОбмена);
			
			Продолжить;
			
		КонецЕсли;
		
		ДокументСтруктурой = РезультатЗагрузкиДокументовСтруктурой(ТекстОтветаПоОчереди);
		ДокументСтруктурой.Вставить("SobjId", СтрокаИдентификатора.SobjId);
		ДокументСтруктурой.Вставить("Id", СтрокаИдентификатора.Id);
		ДокументСтруктурой.Вставить("Организация", Организация);
		
		МассивДокументов.Добавить(ДокументСтруктурой);
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция ТелоЗапросаЗагрузкиДокумента(ИдОбъекта)
	ТекстЗапроса = "<root>" + Символы.ПС;
	ТекстЗапроса = ТекстЗапроса+"<SobjId>" + ИдОбъекта+"</SobjId>" + Символы.ПС;
	ТекстЗапроса = ТекстЗапроса + "</root>";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТелоЗапросаОчереди(Организация, ЗагружатьТолькоНовые)
	
	СтрокаЗапроса =	"<root>
	|<Destination>"+Организация.ОбозначениеДляОбменаССАП+"</Destination>
	|<RelId>18</RelId>"+?(ЗагружатьТолькоНовые, Символы.ПС+"<Status>1</Status>"+Символы.ПС, Символы.ПС)+
	"</root>";
	Возврат СтрокаЗапроса;
	
КонецФункции

Функция ЕстьПустаяНоменклатураВДокументе(Документ)
	ПустаяНоменклатура = Документ.Товары.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка()));
	Возврат ?(ПустаяНоменклатура.Количество() = 0, Ложь, Истина);
КонецФункции

Функция ТелоЗапросаСменыСтатуса(ИдОбъекта,ЭтоОшибка,ТекстСообщения)
	
	СтрокаЗапроса =	"<root>
	|<Request>
	|<ReqId>"+ИдОбъекта+"</ReqId>
	|<MsgTyp>"+?(ЭтоОшибка, "E", "I")+"</MsgTyp>"+Символы.ПС+
	"<Message>"+?(ЗначениеЗаполнено(ТекстСообщения) и ЭтоОшибка, ЛЕВ(ТекстСообщения, 200), "")+"</Message>"+Символы.ПС+
	"</Request>
	|</root>";
	Возврат СтрокаЗапроса;	
	
КонецФункции

Процедура ПреобразоватьАдресаДляПодключенияИзНастроек(СтруктураНастроек)
	
	АдресОпросаОчередиБезHTTP 	  = СтрЗаменить(СтруктураНастроек.WSАдресОпросОчереди, "http://", "");
	АдресЗагрузкаДокументаБезHTTP = СтрЗаменить(СтруктураНастроек.WSАдресЗагрузкаДокумента, "http://", "");
	АдресУстановкаСтатусаБезHTTP  = СтрЗаменить(СтруктураНастроек.WSАдресУстановкаСтатуса, "http://", "");
	
	МестоПорта 		   = СтрНайти(АдресОпросаОчередиБезHTTP,":")+1;	
	МестоНачалаСервиса = СтрНайти(АдресОпросаОчередиБезHTTP, "/",,МестоПорта,1);
	Порт 			   = Сред(АдресОпросаОчередиБезHTTP, МестоПорта, МестоНачалаСервиса - МестоПорта);
	
	АдресСервисаОчереди   = Прав(АдресОпросаОчередиБезHTTP, СтрДлина(АдресОпросаОчередиБезHTTP) - МестоНачалаСервиса+1);
	АдресСервисаДокумента = Прав(АдресЗагрузкаДокументаБезHTTP, СтрДлина(АдресЗагрузкаДокументаБезHTTP) - МестоНачалаСервиса+1);
	АдресСервисаСтатуса   = Прав(АдресУстановкаСтатусаБезHTTP, СтрДлина(АдресУстановкаСтатусаБезHTTP) - МестоНачалаСервиса+1);
		
	Сервер = Лев(АдресОпросаОчередиБезHTTP, МестоПорта-2);		
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "'application/x-www-form-urlencoded'");
	Заголовки.Вставить("Content-Encoding", "utf-16");
	
	СтруктураНастроек.Вставить("Заголовки", Заголовки);
	СтруктураНастроек.Вставить("Сервер", Сервер);
	СтруктураНастроек.Вставить("Порт", Число(Порт));
	
	СтруктураНастроек.Вставить("АдресСервисаОчереди", АдресСервисаОчереди);
	СтруктураНастроек.Вставить("АдресСервисаДокумента", АдресСервисаДокумента);
	СтруктураНастроек.Вставить("АдресСервисаСтатуса", АдресСервисаСтатуса);
	
КонецПроцедуры


Функция ПроверкаПодключенияКВебСервисуСАП(Организация)Экспорт
	
	НастройкаПараметровОбмена = НастройкиПараметровОбменаСАП(Организация);
	
	Соединение = Новый HTTPСоединение(НастройкаПараметровОбмена.Сервер, НастройкаПараметровОбмена.Порт, НастройкаПараметровОбмена.ЛогинСервисаСАП, НастройкаПараметровОбмена.ПарольСервисаСАП);
	Запрос = Новый HTTPЗапрос(НастройкаПараметровОбмена.АдресСервисаОчереди, НастройкаПараметровОбмена.Заголовки);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния = 200 Тогда
		Возврат "";
	Иначе
		МестоКодаОшибки = СтрНайти(СтрокаОтвета, строка(Ответ.КодСостояния));
		КонецОписанияОшибки = СтрНайти(СтрокаОтвета, "</br>",,МестоКодаОшибки);
		ТекстОшибки = Сред(СтрокаОтвета, МестоКодаОшибки, КонецОписанияОшибки - МестоКодаОшибки);
		Возврат ТекстОшибки;
	КонецЕсли

КонецФункции


Функция НоменклатураПоКодуСинхронизации(Код) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.КодСинхронизации = &КодСинхронизации";
	
	Запрос.УстановитьПараметр("КодСинхронизации", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат  ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция СкладПоКодуСАП(КодСклада, ТипСклада) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.LGNUM_LGTYP = &LGNUM_LGTYP";
	
	Запрос.УстановитьПараметр("LGNUM_LGTYP", КодСклада+"_"+ТипСклада);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Справочники.Склады.ПустаяСсылка();
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат  ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция РанееЗагруженныеДокументыПоступленияИзСап(НомерВходящегоДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеНоменклатуры КАК ПоступлениеНоменклатуры
		|ГДЕ
		|	ПоступлениеНоменклатуры.НомерВходящегоДокумента = &НомерВходящегоДокумента";
	
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", НомерВходящегоДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();	
	МассивДокументов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДокументов;
	
КонецФункции

Функция РанееЗагруженныеДокументыВозвратаПоставщикуИзСап(НомерВходящегоДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратНоменклатурыПоставщику.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВозвратНоменклатурыПоставщику КАК ВозвратНоменклатурыПоставщику
		|ГДЕ
		|	ВозвратНоменклатурыПоставщику.НомерВходящегоДокумента = &НомерВходящегоДокумента";
	
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", НомерВходящегоДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();	
	МассивДокументов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДокументов;
	
КонецФункции

Функция ДокументИзСтруктурыСформирован(ДанныеДокумента)
	
	Предупреждение = "";
	ЭтоНовый = Ложь;
	
	РезультатЗаписиСформированногоДокумента = СтруктураРезультатаЗаписиСформированногоДокумента();
	РезультатЗаписиСформированногоДокумента.SobjId = ДанныеДокумента.SobjId;
	РезультатЗаписиСформированногоДокумента.Id 	   = ДанныеДокумента.Id;
	
	//сторно
	Если ЗначениеЗаполнено(ДанныеДокумента.НомерСторно) Тогда
		
		МассивДокументовПоступлений = РанееЗагруженныеДокументыПоступленияИзСап(ДанныеДокумента.НомерСторно);
		Если МассивДокументовПоступлений.Количество() > 1 Тогда
			
			ТекстСообщения = СтрШаблон("Обнаружены неуникальные документы ""Поступление номенклатуры"" в базе с входящим номером №%1. 
				|Необходима проверка документов!",
				ДанныеДокумента.НомерСторно);
			
			РезультатЗаписиСформированногоДокумента.Документ       = Документы.ПоступлениеНоменклатуры.ПустаяСсылка();
			РезультатЗаписиСформированногоДокумента.ТекстСообщения = ТекстСообщения;
			РезультатЗаписиСформированногоДокумента.ЭтоОшибка      = Истина;
			РезультатЗаписиСформированногоДокумента.УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
			
			Возврат РезультатЗаписиСформированногоДокумента;
			
		Иначе
			
			Если МассивДокументовПоступлений.Количество() = 0 Тогда
				РанееСозданныйДокументПоступления = Документы.ПоступлениеНоменклатуры.ПустаяСсылка();
			Иначе
				РанееСозданныйДокументПоступления = МассивДокументовПоступлений[0];
			КонецЕсли;
			
		КонецЕсли;
		
		МассивДокументовВозвратов = РанееЗагруженныеДокументыВозвратаПоставщикуИзСап(ДанныеДокумента.НомерВходящегоДокумента);
		Если МассивДокументовВозвратов.Количество() > 1 Тогда
			
			ТекстСообщения = СтрШаблон("Обнаружены неуникальные документы ""Возврат поставщику"" в базе с входящим номером №%1. 
				|Необходима проверка документов!",
				ДанныеДокумента.НомерВходящегоДокумента);
			
			РезультатЗаписиСформированногоДокумента.Документ       = Документы.ВозвратНоменклатурыПоставщику.ПустаяСсылка();
			РезультатЗаписиСформированногоДокумента.ТекстСообщения = ТекстСообщения;
			РезультатЗаписиСформированногоДокумента.ЭтоОшибка      = Истина;
			РезультатЗаписиСформированногоДокумента.УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
			
			Возврат РезультатЗаписиСформированногоДокумента;
			
		Иначе
			
			Если МассивДокументовВозвратов.Количество() = 0 Тогда
				РанееСозданныйДокументВозврата = Документы.ВозвратНоменклатурыПоставщику.ПустаяСсылка();
			Иначе
				РанееСозданныйДокументВозврата = МассивДокументовВозвратов[0];
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РанееСозданныйДокументПоступления) Тогда 
			
			ТекстСообщения = СтрШаблон("Не найден загруженный документ поступления для сторнирования
				|Документ: %1",
				ДанныеДокумента.НомерВходящегоДокумента);
				
			РезультатЗаписиСформированногоДокумента.Документ       = Документы.ПоступлениеНоменклатуры.ПустаяСсылка();
			РезультатЗаписиСформированногоДокумента.ТекстСообщения = ТекстСообщения;
			РезультатЗаписиСформированногоДокумента.ЭтоОшибка      = Ложь;
			РезультатЗаписиСформированногоДокумента.УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
			
			Возврат РезультатЗаписиСформированногоДокумента;
						
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РанееСозданныйДокументВозврата) Тогда
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РанееСозданныйДокументВозврата, "Проведен") Тогда
				
				ТекстСообщения = СтрШаблон("Повторная загрузка документа. Документ не изменен, т.к. ранее проведен
					|Документ: %1",
					РанееСозданныйДокументВозврата);
				
				РезультатЗаписиСформированногоДокумента.Документ       = РанееСозданныйДокументВозврата;
				РезультатЗаписиСформированногоДокумента.ТекстСообщения = ТекстСообщения;
				РезультатЗаписиСформированногоДокумента.ЭтоОшибка      = Ложь;
				РезультатЗаписиСформированногоДокумента.УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
				
				Возврат РезультатЗаписиСформированногоДокумента;
				
			КонецЕсли;
			
			ДокументВозврата = РанееСозданныйДокументВозврата.ПолучитьОбъект();
		Иначе
			ДокументВозврата = Документы.ВозвратНоменклатурыПоставщику.СоздатьДокумент();
			ЭтоНовый = Истина;
		КонецЕсли; 
		
		ДокументВозврата.Товары.Очистить();
		
		ДокументВозврата.Заполнить(РанееСозданныйДокументПоступления);
		ДокументВозврата.Дата = ДанныеДокумента.Дата;
		ДокументВозврата.НомерВходящегоДокумента = ДанныеДокумента.НомерВходящегоДокумента;
		
		Если ЗначениеЗаполнено(ДокументВозврата.Ссылка) Тогда 
			ДокументВозврата.Комментарий = "Загружен ПОВТОРНО через WEB сервис САП:" + ТекущаяДата();
		иначе
			ДокументВозврата.Комментарий = "Загружен автоматически через WEB сервис САП:" + ТекущаяДата();
		КонецЕсли;
					
		Попытка
						
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РанееСозданныйДокументПоступления, "Проведен") Тогда 
				
				Попытка
					
					ДокументВозврата.Записать(РежимЗаписиДокумента.Проведение);
					
					ЭтоОшибка      = Ложь;
					УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
					
				Исключение
					
					ДокументВозврата.Записать(РежимЗаписиДокумента.Запись);
					
					Предупреждение = "Не удалось выполнить проведение документа!";
					ЭтоОшибка      = Истина;
					УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
					
				КонецПопытки;
				
			Иначе
				
				ДокументВозврата.Записать(РежимЗаписиДокумента.Запись);
				
				Предупреждение = "Документ основание (поступление) не проведен!";
				ЭтоОшибка      = Истина;
				УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
				
			КонецЕсли;
			
			ТекстПараметра1 = ?(ЭтоНовый,"Первичная загрузка документа.","Повторная загрузка документа.");
			ТекстПараметра3 = ?(ЭтоОшибка,"Документ записан без проведения с предупреждением", "Документ успешно проведен"); 
			
			ТекстСообщения = СтрШаблон("%1
				|Документ: %2
				|Инфо: %3",		
				ТекстПараметра1 + " " + ТекстПараметра3,
				ДокументВозврата.Ссылка,
				Предупреждение);
			
			РезультатЗаписиСформированногоДокумента.Документ 	   = ДокументВозврата.Ссылка;
			РезультатЗаписиСформированногоДокумента.ТекстСообщения = ТекстСообщения;
			РезультатЗаписиСформированногоДокумента.ЭтоОшибка	   = ЭтоОшибка;
			РезультатЗаписиСформированногоДокумента.УровеньЖурнала = УровеньЖурнала;
			
			Возврат РезультатЗаписиСформированногоДокумента;
			
		Исключение
			
			ПодробноеОписаниеОшибки = ОписаниеОшибки();
			
			Если Не ЗначениеЗаполнено(ПодробноеОписаниеОшибки) Тогда
				ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон("Не удалось создать документ 'Возврат номенклатуры поставщику' 
				|Номер документа: %1
				|Ошибка: %2",
				ДанныеДокумента.SobjId,
				ПодробноеОписаниеОшибки);
			
			РезультатЗаписиСформированногоДокумента.Документ 	   = Документы.ВозвратНоменклатурыПоставщику.ПустаяСсылка();
			РезультатЗаписиСформированногоДокумента.ТекстСообщения = ТекстСообщения;
			РезультатЗаписиСформированногоДокумента.ЭтоОшибка	   = Истина;
			РезультатЗаписиСформированногоДокумента.УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
			
			Возврат РезультатЗаписиСформированногоДокумента;
			
		КонецПопытки;
		
	Иначе
		
		//поступление
		
		МассивДокументов = РанееЗагруженныеДокументыПоступленияИзСап(ДанныеДокумента.НомерВходящегоДокумента);
		Если МассивДокументов.Количество() > 1 Тогда
			
			ТекстСообщения = СтрШаблон("Обнаружены неуникальные документы ""Поступление номенклатуры"" в базе с входящим номером №%1. 
				|Необходима проверка документов!",
				ДанныеДокумента.НомерВходящегоДокумента);
			
			РезультатЗаписиСформированногоДокумента.Документ       = Документы.ПоступлениеНоменклатуры.ПустаяСсылка();
			РезультатЗаписиСформированногоДокумента.ТекстСообщения = ТекстСообщения;
			РезультатЗаписиСформированногоДокумента.ЭтоОшибка      = Истина;
			РезультатЗаписиСформированногоДокумента.УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
			
			Возврат РезультатЗаписиСформированногоДокумента;
			
		Иначе
			
			Если МассивДокументов.Количество() = 0 Тогда
				РанееСозданныйДокумент = Документы.ПоступлениеНоменклатуры.ПустаяСсылка();
			Иначе
				РанееСозданныйДокумент = МассивДокументов[0];
			КонецЕсли;
			
		КонецЕсли;
				
		Если ЗначениеЗаполнено(РанееСозданныйДокумент) Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РанееСозданныйДокумент, "Проведен") Тогда
				
				ТекстСообщения = СтрШаблон("Повторная загрузка документа. Документ не изменен, т.к. ранее проведен
					|Документ: %1",
					РанееСозданныйДокумент);
					
				РезультатЗаписиСформированногоДокумента.Документ       = РанееСозданныйДокумент;
				РезультатЗаписиСформированногоДокумента.ТекстСообщения = ТекстСообщения;
				РезультатЗаписиСформированногоДокумента.ЭтоОшибка      = Ложь;
				РезультатЗаписиСформированногоДокумента.УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
				
				Возврат РезультатЗаписиСформированногоДокумента;
				
		КонецЕсли;
		
		ДокументПоступленияНоменклатуры = РанееСозданныйДокумент.ПолучитьОбъект();
	Иначе
		ДокументПоступленияНоменклатуры = Документы.ПоступлениеНоменклатуры.СоздатьДокумент();
		
		ЭтоНовый = Истина;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументПоступленияНоменклатуры, ДанныеДокумента);
	
	Предупреждение = Предупреждение + ПредупреждениеОНезаполненномЗначенииШапки(ДанныеДокумента.Поставщик, ДанныеДокумента.ИннПоставщика);
	Предупреждение = Предупреждение + ПредупреждениеОНезаполненномЗначенииШапки(ДанныеДокумента.Склад, ДанныеДокумента.НомерСкладаСАП+"_"+ДанныеДокумента.ТипСклада);
		
	ДокументПоступленияНоменклатуры.Товары.Очистить();
	
	Для Каждого СтрокаТоваров Из ДанныеДокумента.Товары Цикл
		
		//***Трегубов А.А.*** -- №140849  --  08.11.2021 <<<
		ЕстьПредупреждениеПоСтроке = Ложь;
		//***Трегубов А.А.*** -- №140849  --  08.11.2021 >>>
		
		НоваяСтрокаТоваров = ДокументПоступленияНоменклатуры.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, СтрокаТоваров);
		
		Если Не ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) Тогда
			
			//***Трегубов А.А.*** -- №140849  --  08.11.2021 <<<
			ЕстьПредупреждениеПоСтроке = Истина;
			//***Трегубов А.А.*** -- №140849  --  08.11.2021 >>>
			
			Предупреждение = Предупреждение + ПредупреждениеОНезаполненномЗначенииТоваров(СтрокаТоваров.Номенклатура, СтрокаТоваров.КодСинхронизации,СтрокаТоваров.КодРазмера, НоваяСтрокаТоваров.НомерСтроки);
			
		Иначе
			Если ЗначениеЗаполнено(СтрокаТоваров.КодРазмера) И НЕ ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда 				
				Предупреждение = Предупреждение + ПредупреждениеОНезаполненномЗначенииТоваров(СтрокаТоваров.ХарактеристикаНоменклатуры, СтрокаТоваров.КодСинхронизации, СтрокаТоваров.КодРазмера,НоваяСтрокаТоваров.НомерСтроки);				
			КонецЕсли;
		КонецЕсли;
		
		//***Трегубов А.А.*** --  №140849 --  08.11.2021 <<<		
		Если НЕ ЕстьПредупреждениеПоСтроке 
			И ЗначениеЗаполнено(ДокументПоступленияНоменклатуры.Поставщик)
			И ЗначениеЗаполнено(ДокументПоступленияНоменклатуры.Организация) Тогда
			
			Цена = ЦенообразованиеСерверПереопределяемый.ПолучитьЦену(НоваяСтрокаТоваров.Номенклатура,
					ДокументПоступленияНоменклатуры.Организация,
					?(ЗначениеЗаполнено(ДокументПоступленияНоменклатуры.Дата),ДокументПоступленияНоменклатуры.Дата,ТекущаяДата()),
					ДокументПоступленияНоменклатуры.Поставщик);
				
			НоваяСтрокаТоваров.Цена	 = Цена;
			НоваяСтрокаТоваров.Сумма = НоваяСтрокаТоваров.Цена * НоваяСтрокаТоваров.Количество;
			
		КонецЕсли;		
		//***Трегубов А.А.*** --  №140849 --  08.11.2021 >>>
		
	КонецЦикла;
	
	ДокументПоступленияНоменклатуры.СоздательДокумента = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(ДокументПоступленияНоменклатуры.Ссылка) Тогда 
		ДокументПоступленияНоменклатуры.Комментарий = "Загружен ПОВТОРНО через WEB сервис САП:" + ТекущаяДата() + Символы.ПС +  Предупреждение;
	иначе
		ДокументПоступленияНоменклатуры.Комментарий = "Загружен автоматически через WEB сервис САП:" + ТекущаяДата() + Символы.ПС +  Предупреждение;
	КонецЕсли;
		
	Попытка
		
		Если ЗначениеЗаполнено(Предупреждение) Тогда
			
			ДокументПоступленияНоменклатуры.Записать(РежимЗаписиДокумента.Запись);
			
			ЭтоОшибка 	   = Истина;                                                   
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
			
		Иначе
			
			Попытка
				
				ДокументПоступленияНоменклатуры.Записать(РежимЗаписиДокумента.Проведение);
				
				ЭтоОшибка 	   = Ложь;
				УровеньЖурнала = УровеньЖурналаРегистрации.Информация;

			
			Исключение
				
				ДокументПоступленияНоменклатуры.Записать(РежимЗаписиДокумента.Запись);
				
				ЭтоОшибка      = Истина;
				УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
				Предупреждение = "Не удалось выполнить проведение документа!";
				
			КонецПопытки;
			
					
		КонецЕсли;
		
		ТекстПараметра1 = ?(ЭтоНовый,"Первичная загрузка документа.","Повторная загрузка документа.");
		ТекстПараметра3 = ?(ЭтоОшибка,"Документ записан без проведения с предупреждением", "Документ успешно проведен"); 
		
		ТекстСообщения = СтрШаблон("%1
			|Документ: %2
			|Инфо: %3",		
			ТекстПараметра1 + " " + ТекстПараметра3,
			ДокументПоступленияНоменклатуры.Ссылка,
			Предупреждение);
				
		РезультатЗаписиСформированногоДокумента.Документ 	   = ДокументПоступленияНоменклатуры.Ссылка;
		РезультатЗаписиСформированногоДокумента.ТекстСообщения = ТекстСообщения;
		РезультатЗаписиСформированногоДокумента.ЭтоОшибка	   = ЭтоОшибка;
		РезультатЗаписиСформированногоДокумента.УровеньЖурнала = УровеньЖурнала;
		
		Возврат РезультатЗаписиСформированногоДокумента;
		
	Исключение
		
		ПодробноеОписаниеОшибки = ОписаниеОшибки();
		
		Если Не ЗначениеЗаполнено(ПодробноеОписаниеОшибки) Тогда
			ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецЕсли;
				
		ТекстСообщения = СтрШаблон("Не удалось создать документ 'Поступление номенклатуры' 
			|Номер документа: %1
			|Ошибка: %2",
			ДанныеДокумента.SobjId,
			ПодробноеОписаниеОшибки);
					
		РезультатЗаписиСформированногоДокумента.Документ 	   = Документы.ПоступлениеНоменклатуры.ПустаяСсылка();
		РезультатЗаписиСформированногоДокумента.ТекстСообщения = ТекстСообщения;
		РезультатЗаписиСформированногоДокумента.ЭтоОшибка	   = Истина;
		РезультатЗаписиСформированногоДокумента.УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		
		Возврат РезультатЗаписиСформированногоДокумента;
		
	КонецПопытки;
	
КонецЕсли;
	
КонецФункции

Функция СформироватьДокументыПоступленияНоменклатурыИзДанныхСАП(МассивДанныхДокументовСтруктурой) Экспорт
	
	РезультатФормированияДокументов = Новый Массив;
	РезультатЗаписиСформированногоДокумента = Новый Структура;
	
	Для Каждого ДанныеДокумента Из МассивДанныхДокументовСтруктурой Цикл
		
		Если ЗначениеЗаполнено(ДанныеДокумента.ERROR_TEXT) Тогда 
			
			РезультатЗаписиСформированногоДокумента = СтруктураРезультатаЗаписиСформированногоДокумента();
			
			ТекстСообщения = СтрШаблон("Полученные данные по документу из САП содержат ошибку. Обработка документа невозможна
				|Номер документа САП: %1
				|Ошибка: %2",
				ДанныеДокумента.SobjId,
				ДанныеДокумента.ERROR_TEXT);
			
			РезультатЗаписиСформированногоДокумента.SobjId 		   = ДанныеДокумента.SobjId;	
			РезультатЗаписиСформированногоДокумента.Id			   = ДанныеДокумента.Id;
			РезультатЗаписиСформированногоДокумента.Документ       = Документы.ПоступлениеНоменклатуры.ПустаяСсылка();
			РезультатЗаписиСформированногоДокумента.ТекстСообщения = ТекстСообщения;
			РезультатЗаписиСформированногоДокумента.ЭтоОшибка      = Истина;
			РезультатЗаписиСформированногоДокумента.УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
			
			РезультатФормированияДокументов.Добавить(РезультатЗаписиСформированногоДокумента);
			
			Продолжить;
		КонецЕсли;	
		
		РезультатФормированияДокументов.Добавить(ДокументИзСтруктурыСформирован(ДанныеДокумента));
		
	КонецЦикла;

	Возврат РезультатФормированияДокументов;
	
КонецФункции

////исправить на поиск по коду САП
//
Функция ХарактеристикаНоменклатурыПоВладельцуИКоду(Владелец, MSIZE) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И ХарактеристикиНоменклатуры.КодSAP = &MSIZE";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("MSIZE", MSIZE);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат  ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;

КонецФункции

#Область РегламентнаяЧастьОбмена

Функция МассивОрганизацияДляОбменаСАП()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПараметровОбменаСАП.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.НастройкиПараметровОбменаСАП КАК НастройкиПараметровОбменаСАП
		|ГДЕ
		|	НастройкиПараметровОбменаСАП.ЗагружатьПоступленияИзСАП";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");

КонецФункции

Процедура ЗагрузитьДокументыПоступленияНоменклатурыССАП(Организация = Неопределено)Экспорт
	
	Если Организация = Неопределено Тогда 
		МассивОрганизаций = МассивОрганизацияДляОбменаСАП();
	Иначе		
		МассивОрганизаций = Новый Массив;
		МассивОрганизаций.Добавить(Организация);
	КонецЕсли;	
	
	Для Каждого ЭлементОрганизация Из МассивОрганизаций Цикл
		
		ЗаписьЖурналаРегистрации("Загрузка поступлений SAP. Начало обмена", УровеньЖурналаРегистрации.Примечание,,,"Начало обмена по организации:" + ЭлементОрганизация);
		
		Попытка
						
			НастройкиПараметровОбмена = НастройкиПараметровОбменаСАП(ЭлементОрганизация);
			
			ТаблицаРезультатОпросаОчереди = РезультатОпросаОчередиСАП(ЭлементОрганизация,НастройкиПараметровОбмена);
			
			ТаблицаРезультатСозданияДокументов = РезультатСозданияДокументовПоДаннымОчередиСАП(ЭлементОрганизация,ТаблицаРезультатОпросаОчереди,НастройкиПараметровОбмена);
			
			УстановитьСтатусыДляОбработанныхДокументов(ЭлементОрганизация, ТаблицаРезультатСозданияДокументов,НастройкиПараметровОбмена);	
			
		Исключение
			
			Ошибка = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации("Загрузка поступлений SAP. Ошибка обработки", УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон("Не удалось выполнить регламентную задачу по загрузке данных документов поступления номенклатуры через ВЕБ сервис
			|Ошибка: %1",
			ПодробноеПредставлениеОшибки(Ошибка)));
			
		КонецПопытки;
		
		ЗаписьЖурналаРегистрации("Загрузка поступлений SAP. Конец обмена", УровеньЖурналаРегистрации.Примечание,,,"Конец обмена по организации:" + ЭлементОрганизация);
		
	КонецЦикла;
	
КонецПроцедуры  

Функция НастройкиПараметровОбменаСАП(Организация) Экспорт 
	
	НастройкаПараметровОбмена = РегистрыСведений.НастройкиПараметровОбменаСАП.ПолучитьПараметрыСервисаДляЗагрузкиИзСАП(Организация);
	ПреобразоватьАдресаДляПодключенияИзНастроек(НастройкаПараметровОбмена);
	
	Возврат НастройкаПараметровОбмена

КонецФункции // НастройкиПараметровОбменаСАП()

Функция РезультатОпросаОчередиСАП(Организация,НастройкиПараметровОбмена) Экспорт 
	
	ТаблицаРезультатОпросаОчереди = Новый ТаблицаЗначений;
	ТаблицаРезультатОпросаОчереди.Колонки.Добавить("Id", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаРезультатОпросаОчереди.Колонки.Добавить("SobjId", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаРезультатОпросаОчереди.Колонки.Добавить("Status", ОбщегоНазначения.ОписаниеТипаЧисло(1,0));
	
	HTTPОтвет = ОтветЗапросаОпросОчередиСАП(Организация,НастройкиПараметровОбмена);
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку(); 
		
		МестоКодаОшибки = СтрНайти(СтрокаОтвета, строка(HTTPОтвет.КодСостояния));
		КонецОписанияОшибки = СтрНайти(СтрокаОтвета, "</br>",,МестоКодаОшибки);
		ТекстОшибки = Сред(СтрокаОтвета, МестоКодаОшибки, КонецОписанияОшибки - МестоКодаОшибки);
		
		ТекстОшибки = СтрШаблон("Не удалось получить очередь документов по запросу из САП
			|Ошибка: %1",
			ТекстОшибки); 
		
		ЗаписьЖурналаРегистрации("Загрузка поступлений SAP. Опрос очереди", 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
		ОповеститьПользователя(ТекстОшибки,НастройкиПараметровОбмена);
		
		Возврат ТаблицаРезультатОпросаОчереди;
		
	КонецЕсли;
	
	ПарсерОчередиСАП = Новый ЧтениеXML;
	ПарсерОчередиСАП.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
	
	Пока ПарсерОчередиСАП.Прочитать() Цикл
		
		Если ПарсерОчередиСАП.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ПарсерОчередиСАП.ЛокальноеИмя = "Item" Тогда
				
				НовыйЭлемент = ТаблицаРезультатОпросаОчереди.Добавить();
				НовыйЭлемент.Id    	= СокрЛП(ПарсерОчередиСАП.ЗначениеАтрибута("Id"));
				НовыйЭлемент.SobjId	= СокрЛП(ПарсерОчередиСАП.ЗначениеАтрибута("SobjId"));
				НовыйЭлемент.Status	= СокрЛП(ПарсерОчередиСАП.ЗначениеАтрибута("Status"));
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ТаблицаРезультатОпросаОчереди.Количество() = 0 Тогда
		
		ТекстОшибки = "Нет документов в очереди для загрузки";
		
		ЗаписьЖурналаРегистрации("Загрузка поступлений SAP. Опрос очереди",
			УровеньЖурналаРегистрации.Информация,,
			ТекстОшибки);
			
		ОповеститьПользователя(ТекстОшибки,НастройкиПараметровОбмена);

	КонецЕсли;
	
	Возврат ТаблицаРезультатОпросаОчереди
	
КонецФункции // РезультатОпросаОчередиСАП()

Функция РезультатСозданияДокументовПоДаннымОчередиСАП(Организация,ТаблицаРезультатОпросаОчереди,НастройкиПараметровОбмена) Экспорт 

	ДанныеДокументовСтруктурой  = ДокументыИзОпрошеннойОчереди(Организация, ТаблицаРезультатОпросаОчереди,НастройкиПараметровОбмена);	
	РезультатСозданияДокументов = СформироватьДокументыПоступленияНоменклатурыИзДанныхСАП(ДанныеДокументовСтруктурой);
	
	Для Каждого Результат Из РезультатСозданияДокументов Цикл 
		
		ЗаписьЖурналаРегистрации("Загрузка поступлений SAP. Создание документа", 
			Результат.УровеньЖурнала,,
			Результат.Документ,
			Результат.ТекстСообщения);
			
		ОповеститьПользователя(Результат.ТекстСообщения,НастройкиПараметровОбмена,Результат.Документ);
			
	КонецЦикла;
	
	Возврат РезультатСозданияДокументов; 
	
КонецФункции // РезультатСозданияДокументовПоДаннымОчередиСАП()

Функция УстановитьСтатусыДляОбработанныхДокументов(Организация, ТаблицаРезультатСозданияДокументов,НастройкиПараметровОбмена) Экспорт
	
	МассивОтветов		 = Новый Массив;
		
	Соединение = Новый HTTPСоединение(НастройкиПараметровОбмена.Сервер, НастройкиПараметровОбмена.Порт, НастройкиПараметровОбмена.ЛогинСервисаСАП, НастройкиПараметровОбмена.ПарольСервисаСАП);
	Запрос = Новый HTTPЗапрос(НастройкиПараметровОбмена.АдресСервисаСтатуса, НастройкиПараметровОбмена.Заголовки);
	
	Для Каждого Документ Из ТаблицаРезультатСозданияДокументов Цикл
		
		ТелоЗапроса = ТелоЗапросаСменыСтатуса(Документ.Id, Документ.ЭтоОшибка,Документ.ТекстСообщения);
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
		
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("Документ", Документ.Документ);
		СтруктураОтвета.Вставить("Id", Документ.Id);
		СтруктураОтвета.Вставить("Результат","");
		
		Если Ответ.КодСостояния = 200 Тогда
			Если СтрНайти(СтрокаОтвета,"Not Ok") Тогда
				
				ТекстСообщения = СтрШаблон("Не удалось изменить статус запроса, запрос не найден в САП
					|Номер документа: %2
					|Входящий номер документа: %3",
					СтруктураОтвета.Результат,
					Документ.Документ,
					Документ.SobjId);
				
				ЗаписьЖурналаРегистрации("Загрузка поступлений SAP. Изменение статуса",
					УровеньЖурналаРегистрации.Ошибка,,
					Документ.Документ,
					ТекстСообщения);
					
				//для пользователя не важна.
				//ОповеститьПользователя(ТекстСообщения,НастройкиПараметровОбмена);
				
				СтруктураОтвета.Результат = ТекстСообщения;

			Иначе
				
				Если Документ.ЭтоОшибка Тогда 
					ЗначениеСтатуса = "Запрос отправлен в САП со статусом (3)";
					УровеньЖурналаПоСтатусу = УровеньЖурналаРегистрации.Предупреждение;
				Иначе
					ЗначениеСтатуса = "Запрос отправлен в САП со статусом (2)";
					УровеньЖурналаПоСтатусу = УровеньЖурналаРегистрации.Информация;
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон("Статус запроса изменен: %1 
					|Номер документа: %2
					|Входящий номер документа: %3",
					ЗначениеСтатуса,
					Документ.Документ,
					Документ.SobjId);
								
				ЗаписьЖурналаРегистрации("Загрузка поступлений SAP. Изменение статуса",
					УровеньЖурналаПоСтатусу,,
					Документ.Документ,
					ТекстСообщения);
					
				//для пользователя не важна.
				//ОповеститьПользователя(ТекстСообщения,НастройкиПараметровОбмена);
					
				СтруктураОтвета.Результат = ТекстСообщения;
				
			КонецЕсли;
			
		Иначе
			
			МестоКодаОшибки = СтрНайти(СтрокаОтвета, строка(Ответ.КодСостояния));
			КонецОписанияОшибки = СтрНайти(СтрокаОтвета, "</br>",,МестоКодаОшибки);
			
			ТекстСообщения = Сред(СтрокаОтвета, МестоКодаОшибки, КонецОписанияОшибки - МестоКодаОшибки);
			ТекстСообщения = СтрШаблон("Ошибка запроса
				|Номер документа: %1
				|Код состояния: %2
				|Ошибка: %3",
				Документ.SobjId,
				Ответ.КодСостояния,
				ТекстСообщения);
			
			ЗаписьЖурналаРегистрации("Загрузка поступлений SAP. Изменение статуса", 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
				
			//для пользователя не важна.
			//ОповеститьПользователя(ТекстСообщения,НастройкиПараметровОбмена);
			
			СтруктураОтвета.Результат = ТекстСообщения;
			
		КонецЕсли;
		
		МассивОтветов.Добавить(СтруктураОтвета);
		
	КонецЦикла;
	
	Возврат МассивОтветов;
	
КонецФункции

Процедура ВыполнитьЗаданиеПоЗагрузкеИзСАП()Экспорт
	
	МассивФоновыхЗаданий = АктивныеФоновыеЗаданияПоЗагрузкиСАП(СостояниеФоновогоЗадания.Активно);
	
	Если МассивФоновыхЗаданий.Количество() = 0 Тогда
		ФоновыеЗадания.Выполнить("Интеграция_САП_Сервер.ЗагрузитьДокументыПоступленияНоменклатурыССАП",,"ЗагрузкаИзСАП", "Загрузка из САП");
	Иначе
		ТекстОшибки = "Обмен уже запущен.
		|Невозможно запустить несколько экземпляров загрузки с SAP.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;	
	
КонецПроцедуры

Функция АктивныеФоновыеЗаданияПоЗагрузкиСАП(СостояниеЗадания) Экспорт
	
	Отбор = новый Структура;
	Отбор.Вставить("Ключ","ЗагрузкаИзСАП");
	Если не СостояниеЗадания = Неопределено Тогда
		Отбор.Вставить("Состояние",СостояниеЗадания);
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Задание;
	
КонецФункции

Функция СтруктураРезультатаЗаписиСформированногоДокумента()
	
	Структура = Новый Структура ("SobjId,Id,Документ,ТекстСообщения,ЭтоОшибка,УровеньЖурнала");
	Возврат Структура;
	
КонецФункции // СтруктураРезультатаЗаписиСформированногоДокумента()

Процедура ОповеститьПользователя(ТекстСообщения,НастройкиПараметровОбмена,СсылкаНаДокумент = Неопределено)

	Если НастройкиПараметровОбмена.ВыводитьИнтерактивныеСообщенияОбмена Тогда 		
		Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СсылкаНаДокумент);	
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Конецесли;

КонецПроцедуры

#КонецОбласти

// } ЮМадатов (27.07.21): <#102611 >
#КонецОбласти
/////////////////////////////////////////////////////////////////////////////////////
//Справка

//массив допустимых событий журнала регистрации
	//МассивСобытий.Добавить("Обмен САП.Ошибка чтения очереди обмена");
	//МассивСобытий.Добавить("Обмен САП.Ошибка установки соединения");
	//МассивСобытий.Добавить("Обмен САП.Ошибка обработки данных");
	//МассивСобытий.Добавить("Обмен САП.Ошибка идентификации типа переменной");
	//МассивСобытий.Добавить("Обмен САП.Ошибка установки статуса документа");
	//МассивСобытий.Добавить("Обмен САП.Ошибка заполнения документа");
	//МассивСобытий.Добавить("Обмен САП.Обновление справочника ""Номенклатура""");
	//МассивСобытий.Добавить("Обмен САП.Обновление справочника ""Характеристик""");
	//МассивСобытий.Добавить("Обмен САП.Ошибка получения данных о ""Номенклатуре""");




//ВНИМАНИЕ!!!!!!!!!!!
//RZN DATA... умеет передавать только таблицы параметров. IV и EV Она передавать не умеет.

// СПРАВОЧНИК RELID - идентификатор типа обмена
//		30 - документы "транспортный заказ"
//		18 - документы что то типа Приходная накладная и сторно - бухгалтерские.

//значения BWART
//Вид движения			Краткое наименование				Назначение
//101					ПМ ПоступлМатериала					приход от поставщика
//102					Сторно ПМ к ЗкНаПост				сторно прихода от поставщика
//122					ВМ ВозвратПоставщику				возврат брака поставщику
//123					Ст ВМ ВозвратПоставщ				сторно возврата брака поставщику
//309					ПЗ ПровПер Мтр->Мтр					переименования
//343					ПЗ БлокирЗпс->СвобИ					перевод свободно используемый запас в блокированный запас (ОТК брак)
//344					СПП БлокирЗап->СвобИ				перевод блокированного запаса в свободно используемый запас
//601					ДМ ДоставкаМатериала				отгрузка (продажа)
//602					Сторно ВМ ОМ/Постав					сторно отгрузки (продажи)
//711					ОМ ИнвентРазн/Склад					инвентаризация (расход)
//712					ПМ ИнвентРазн/Склад					инвентаризация (приход)
//999					Администрация склада				перемещение между складами



//наименования таблиц
// исходящих в САП начинаются с "IT_"
// входящих в 1с начинаются с "ET_"

//наименования параметров
// исходящих в САП начинаются с "IV_"
// входящих в 1с начинаются с "EV_"

//параметры функции ZCU_RFC_GET_FUNC_PARAMS

//входящие
//1. IV_FUNCNAME - Параметр.Похоже строка с именем функции параметры которой требуется получить
//
//2. IT_FUNCTION - Таблица с передаваемыми параметрами
//		Function - Колонка. Имя функции, параметры которой требуется получить. (строка 30)

//исходящие 
//1. EV_ERROR - Параметр. Строка. Если функция не найдена сюда возвращается "X"
//
//2. ET_PARAMS - Таблица.
//		_TABNAME - колонка. Имя Таблицы в которой находится поле. (строка 30)
//		_FIELDNAME - колонка. Имя поля. (строка 30)
//		_TYPE - колонка. Тип поля. (строка 1)
//		_LENGTH - колонка. Длина поля. (Целое число 5 знаков)


//*****************************************************************************************************
//сравнение параметров функций 

//		ZMM_IM_IF_SEND_GOODS_MOVEMENT												ZLE_WMS_IF_SEND_TO_CONFIRMED2						
//	IT_PARAMS																	IT_PARAMS						
//DSTNM			CHAR	10	0	Получатель	                            	DSTNM		CHAR	10	0	Получатель	
//PSIZE			NUMC	10	0	Цифровое текстовое поле, длина 10	    	PSIZE		NUMC	10	0	Цифровое текстовое поле, длина 10	
//REQID			CHAR	20	0	ID Запроса	                              	REQID		CHAR	20	0	ID Запроса	
//STATUS		CHAR	1	0	Статус Обработки	                        STATUS		CHAR	1	0	Статус Обработки	
//														
//	ET_HEADERS																ET_HEADERS						
//REQID			CHAR	20	0	ID Запроса	                              	REQID		CHAR	20	0	ID Запроса	
//CPUDT			DATS	8	0	Дата ввода бухгалтерского документа		Х	QDATU		DATS	8	0	Дата создания транспортного заказа	
//CPUTM			TIMS	6	0	Время ввода								Х	TIME		TIMS	6	0	Время создания транспортного заказа	
//DOCNR			CHAR	20	0	ID Источника								DOCNR		CHAR	20	0	ID Источника	
//													  						DESTN		CHAR	10	0	Получатель	
//BUDAT			DATS	8	0	Дата проводки в документе	                              								
//REQID_PREV	CHAR	20	0	ID Запроса	                            Х  								
//DOCNR_PREV	CHAR	20	0	ID Источника							Х		
//																			LIFNR		CHAR	10	0	Номер делового партнера	
//																		   ORGANIZATION	CHAR	10	0	Номер делового партнера	
//														
//	ET_ITEMS																	ET_ITEMS						
//REQID			CHAR	20	0	ID Запроса									REQID	ZCU_REQ_ID	CHAR	20	0	ID Запроса	
//MATNR			CHAR	18	0	Номер материала								MATNR	MATNR	CHAR	18	0	Номер материала	
//MSIZE			CHAR	8	0	Значение матрицы							MSIZE	J_3ASIZE	CHAR	8	0	Значение матрицы	
//MENGE			CHAR	18	0	Поле длины 18							Х	QUANT	CHAR17	CHAR	17	0	Поле длиной 17	
//MSEH6			CHAR	6	0	Внешняя ЕИ - техническое представление		MSEH6	MSEH6	CHAR	6	0	Внешняя ЕИ - техническое представление (6-значная)	
//SHKZG			CHAR	1	0	Индикатор дебета/кредита					SHKZG	CHAR	1	0	Индикатор дебета/кредита	
//BWART			CHAR	3	0	Вид движения (управление запасами)			BWART	BWLVS	NUMC	3	0	Вид движения в системе управления складами	
//																		Х	LGTYP		LGTYP	LGTYP	CHAR	3	0	Тип склада	
//																		Х	LGNUM		LGNUM	LGNUM	CHAR	3	0	Номер склада/комплекс	
//																		Х	VBELN	VBELN	CHAR	10	0	Номер документа сбыта	
//																			ERDAT	ERDAT	DATS	8	0	Дата создания записи	
//MEINS			UNIT	3	0	Базисная единица измерения									
