#Область ПоДаннымВебСервисаАХ_EisfExchange

Процедура РазобратьПринятыйПакетОбмена(Прокси,СтруктураОтвета,СтруктураОбработкиОшибок) Экспорт
	
	СтруктураОбработкиОшибок.ЕстьОшибки = СтруктураОтвета.ЕстьОшибки;
	
	Если ЗначениеЗаполнено(СтруктураОтвета.ОписаниеОшибки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураОтвета.ОписаниеОшибки);
		
		//регистрируем ошибку в журнале
		ЗаписьЖурналаРегистрации(нСтр("ru='Ошибка отправки пакета обмена по веб сервису адресного хранения Eisf '", "ru"),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		СтруктураОтвета.ОписаниеОшибки);
		
	КонецЕсли;
	
	Если СтруктураОтвета.ПакетВозвращаемыхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтруктураОтвета.ПакетВозвращаемыхДанных);
	
	ТипОбъектаXDTO = Прокси.ФабрикаXDTO.Тип("EisfExchange","Объекты");
	
	ТаблицаОбъектов = Прокси.ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);	
	Если ТаблицаОбъектов <> Неопределено Тогда
		Для каждого ОбъектXDTO Из ТаблицаОбъектов.Объекты Цикл
			
			Если ОбъектXDTO.Тип().Имя = "SpreadsheetDocument" Тогда				
				
				ТабличныйДокумент = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
				СтруктураОбработкиОшибок.МассивТабличныхДокументов.Добавить(ТабличныйДокумент);
								
			ИначеЕсли ОбъектXDTO.Тип().Имя = "ДанныеВАдресномХранении" Тогда
				
				EisfExchange_ЗагрузитьДанныеВАдресномХранении(ОбъектXDTO);
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры // РазобратьПринятыйПакетОбмена()

Процедура EisfExchange_ЗагрузитьДанныеВАдресномХранении(ОбъектXDTO)
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура"			    ,АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("ХарактеристикаНоменклатуры" ,АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ХарактеристикаНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("Количество"			        ,АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Количество"));
	ТаблицаТовары.Колонки.Добавить("ВидАдресногоДокумента"      ,АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ВидАдресногоДокумента"));
	ТаблицаТовары.Колонки.Добавить("Заказ"          		    ,АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Заказ"));
	
	// трегубов ВНИМАНИЕ , данные могут быть не найдены в случае если ссылки не будет на документ или на справочники, нужно исправить	
	Документ = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Документ,"ГУИД");
	
	Если ОбъектXDTO.Товары <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Товары.СтрокиТабличнойЧасти Цикл
			
			НоваяСтрока = ТаблицаТовары.Добавить();
			
			НоваяСтрока.Номенклатура = ДесериализоватьСсылкуНаСправочник(ТекСтрока.Номенклатура,"Номенклатура");
			НоваяСтрока.ХарактеристикаНоменклатуры = ДесериализоватьСсылкуНаСправочник(ТекСтрока.ХарактеристикаНоменклатуры,"ХарактеристикиНоменклатуры");
			НоваяСтрока.ВидАдресногоДокумента = ?(ТекСтрока.ВидАдресногоДокумента = "",Перечисления.АХ_ВидыДокументовАдресногоХранения.ПустаяСсылка(),Перечисления.АХ_ВидыДокументовАдресногоХранения[ТекСтрока.ВидАдресногоДокумента]);
			НоваяСтрока.Количество = ТекСтрока.Количество;
			
		КонецЦикла;
	КонецЕсли;	
	
	АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(ТаблицаТовары,Документ);
	
КонецПроцедуры // ЗагрузитьДанныеВАдресномХранении()

#КонецОбласти

#Область ПоДаннымВебСервисаЕИСФ_AdressStorageExchange

#Область ПрограммныйИнтерфейс

Процедура ОбработатьПринятыйПакетОбмена(ПакетОбмена) экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПакетОбмена.Получить());
	
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("AddressStorage","Объекты");
	
	ТаблицаОбъектов = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
	
	НачатьТранзакцию();
	
	Если ТаблицаОбъектов <> Неопределено Тогда
		
		Для каждого ОбъектXDTO Из ТаблицаОбъектов.Объекты Цикл
			Если ОбъектXDTO.Тип().Имя = "РСДанныеВАдресномХранении" Тогда
				
				ЗагрузитьДанныеВАдресномХранении(ОбъектXDTO);
				
			ИначеЕсли ОбъектXDTO.Тип().Имя = "ДокПеремещениеНоменклатуры" Тогда
				
				ЗагрузитьДокументПеремещениеНоменклатуры(ОбъектXDTO);
				
			ИначеЕсли ОбъектXDTO.Тип().Имя = "ДокИнвентаризацияНоменклатуры" Тогда
				
				ЗагрузитьДокументИнвентаризацияНоменклатуры(ОбъектXDTO);
				
			КонецЕсли;			
		КонецЦикла;
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры // ОбработатьПринятыйПакетОбмена()

#КонецОбласти

Процедура ЗагрузитьДанныеВАдресномХранении(ОбъектXDTO)
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура"			    ,АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("ХарактеристикаНоменклатуры" ,АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ХарактеристикаНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("Количество"			        ,АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Количество"));
	ТаблицаТовары.Колонки.Добавить("Заказ"          		    ,АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("Заказ"));
	ТаблицаТовары.Колонки.Добавить("ВидАдресногоДокумента"      ,АХ_ОбменВызовСервера.ОписаниеТипаСтруктурыДанных("ВидАдресногоДокумента"));
	
	// трегубов ВНИМАНИЕ , данные могут быть не найдены в случае если ссылки не будет на документ или на справочники, нужно исправить	
	Документ = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Документ,"ID");
	
	Если ОбъектXDTO.НаборЗаписей <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.НаборЗаписей.СтрокиНабораЗаписей Цикл
			
			НоваяСтрока = ТаблицаТовары.Добавить();
			
			НоваяСтрока.Номенклатура = ДесериализоватьСсылкуНаСправочник(ТекСтрока.Номенклатура,"Номенклатура");
			НоваяСтрока.ХарактеристикаНоменклатуры = ДесериализоватьСсылкуНаСправочник(ТекСтрока.ХарактеристикаНоменклатуры,"ХарактеристикиНоменклатуры");
			НоваяСтрока.Заказ = ДесериализоватьСсылкуНаДокумент(ТекСтрока.Заказ,"ID");
			НоваяСтрока.ВидАдресногоДокумента = Перечисления.АХ_ВидыДокументовАдресногоХранения[ТекСтрока.ВидАдресногоДокумента];
			НоваяСтрока.Количество = ТекСтрока.Количество;
			
		КонецЦикла;
	КонецЕсли;	
	
	АХ_ОбменВызовСервера.ЗарегистрироватьДанныеВАдресномХранении(ТаблицаТовары,Документ);
	
КонецПроцедуры // ЗагрузитьДанныеВАдресномХранении()

Функция ЗагрузитьДокументПеремещениеНоменклатуры(ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ПеремещениеНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	//ищем склад отправитель и склад получатель по коду узла точек хранения		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК СкладОтправитель,
	|	Склады.АХ_СкладДоВыяснения КАК СкладПолучатель
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.АХ_СкладДоВыяснения <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И Склады.АХ_КодУзлаТочкиХранения = &КодУзлаТочкиХранения";
	
	Запрос.УстановитьПараметр("КодУзлаТочкиХранения", ОбъектXDTO.КодУзлаТочкиХранения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Не найден склад по коду узла точек хранения : " + ОбъектXDTO.КодУзлаТочкиХранения + " и с заполненным реквизитом ""Склад до выяснения""" ;
	КонецЕсли;
	
	ВыборкаСклады = РезультатЗапроса.Выбрать();
	Если ВыборкаСклады.Количество() > 1 Тогда
		ВызватьИсключение "Ошибка. Найдены подходящие склады - отправители в количестве " + ВыборкаСклады.Количество();
	КонецЕсли;
	
	ВыборкаСклады.Следующий();
	СкладОтправитель = ВыборкаСклады.СкладОтправитель; 
	
	//выбираем любую организацию,Т.к учет остатков не в разрезе организаций
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОрганизации = РезультатЗапроса.Выбрать();
	ВыборкаОрганизации.Следующий();

	// формируем перемещение		
	ДокументПеремещения = Документы.ПеремещениеНоменклатуры.СоздатьДокумент();
	ДокументПеремещения.Дата = ТекущаяДата();
	ДокументПеремещения.Заполнить(Неопределено);
	ДокументПеремещения.Организация = ВыборкаОрганизации.Ссылка;
	ДокументПеремещения.СкладОтправитель = СкладОтправитель;
	ДокументПеремещения.МОЛСкладаОтправителя = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(ДокументПеремещения.СкладОтправитель,ДокументПеремещения.Организация);
	ДокументПеремещения.СкладПолучатель = ВыборкаСклады.СкладПолучатель;
	ДокументПеремещения.МОЛСкладаПолучателя = ПроцедурыРаботыСНормамиСервер.ПолучитьМОЛСклада(ДокументПеремещения.СкладПолучатель,ДокументПеремещения.Организация);
	ДокументПеремещения.Комментарий = ОбъектXDTO.Комментарий;
	//товары
	Если ОбъектXDTO.Товары <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Товары.СтрокиТабличнойЧасти Цикл
			
			НоваяСтрока = ДокументПеремещения.Товары.Добавить();
			
			НоваяСтрока.Номенклатура = ДесериализоватьСсылкуНаСправочник(ТекСтрока.Номенклатура,"Номенклатура");
			НоваяСтрока.ХарактеристикаНоменклатуры = ДесериализоватьСсылкуНаСправочник(ТекСтрока.ХарактеристикаНоменклатуры,"ХарактеристикиНоменклатуры");
			НоваяСтрока.Количество = ТекСтрока.Количество;
			
		КонецЦикла;
	КонецЕсли;
	
	ПризнакКонтроляОстатковИзменен = Ложь;
	
	Если НЕ СкладОтправитель.РазрешитьОтрицательныеОстатки Тогда
		ОбъектСкладОтправитель = СкладОтправитель.ПолучитьОбъект();
		ОбъектСкладОтправитель.РазрешитьОтрицательныеОстатки = Истина;
		ОбъектСкладОтправитель.Записать();
		
		ПризнакКонтроляОстатковИзменен = Истина;
	КонецЕсли;
	
	Попытка 		
		
		ДокументПеремещения.Записать(РежимЗаписиДокумента.Проведение);	
		
		//возвращаем признак до изменения
		Если ПризнакКонтроляОстатковИзменен Тогда 
			ОбъектСкладОтправитель.РазрешитьОтрицательныеОстатки = НЕ ОбъектСкладОтправитель.РазрешитьОтрицательныеОстатки;
			ОбъектСкладОтправитель.Записать();
		КонецЕсли;
		
	Исключение
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат ДокументПеремещения.Ссылка;
	
КонецФункции

Функция ЗагрузитьДокументИнвентаризацияНоменклатуры(ОбъектXDTO)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Документы.ИнвентаризацияНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	ДокументИнвентаризация = Документы.ИнвентаризацияНоменклатуры.СоздатьДокумент();
	ДокументИнвентаризация.Дата = ТекущаяДата();
	ДокументИнвентаризация.Комментарий = ОбъектXDTO.Комментарий;
	ДокументИнвентаризация.СоздательДокумента = Пользователи.ТекущийПользователь();
	
	//товары
	Если ОбъектXDTO.Товары <> Неопределено Тогда
		Для каждого ТекСтрока Из ОбъектXDTO.Товары.СтрокиТабличнойЧасти Цикл
			
			НоваяСтрока = ДокументИнвентаризация.Товары.Добавить();
			
			НоваяСтрока.Номенклатура = ДесериализоватьСсылкуНаСправочник(ТекСтрока.Номенклатура,"Номенклатура");
			НоваяСтрока.ХарактеристикаНоменклатуры = ДесериализоватьСсылкуНаСправочник(ТекСтрока.ХарактеристикаНоменклатуры,"ХарактеристикиНоменклатуры");
			//НоваяСтрока.Количество = ТекСтрока.Количество;
			
		КонецЦикла;
	КонецЕсли;
	
	Попытка 		
		
		ДокументИнвентаризация.ОбменДанными.Загрузка = Истина;
		ДокументИнвентаризация.Записать();	
		
	Исключение
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат ДокументИнвентаризация.Ссылка;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции

Функция ДесериализоватьСсылкуНаСправочник(СсылкаСериализованная, ИмяОбъекта) Экспорт
	
	Если СсылкаСериализованная = "" ИЛИ СсылкаСериализованная = Неопределено Тогда
		Ссылка = Справочники[ИмяОбъекта].ПустаяСсылка();
	Иначе
		Идентификатор = Новый УникальныйИдентификатор(СсылкаСериализованная);
		Ссылка = Справочники[ИмяОбъекта].ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ДесериализоватьСсылкуНаДокумент(ОбъектXDTO,ПолеИдентификатора) экспорт
	
	Если ОбъектXDTO = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаСериализованная = ОбъектXDTO[ПолеИдентификатора];
	ИмяОбъекта = ОбъектXDTO.ВидДокумента;
	
	Если СсылкаСериализованная = "" ИЛИ СсылкаСериализованная = Неопределено Тогда
		Ссылка = Документы[ИмяОбъекта].ПустаяСсылка();
	Иначе
		Идентификатор = Новый УникальныйИдентификатор(СсылкаСериализованная);
		Ссылка = Документы[ИмяОбъекта].ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти

#КонецОбласти



