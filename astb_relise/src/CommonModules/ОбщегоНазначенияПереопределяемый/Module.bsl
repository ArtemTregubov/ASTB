////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
// Для задания обработчиков параметров сеанса следует использовать шаблон:
// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
//
// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
//             что один обработчик будет вызван для инициализации всех параметров сеанса
//             с именем, начинающимся на слово НачалоИмениПараметраСеанса.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	
	
	
	
КонецПроцедуры

// Объекты метаданных, содержимое которых не должно учитывается в бизнес-логике приложения.
//
// Описание:
//   Для документа "Реализация товаров и услуг" настроены подсистемы "Версионирование объектов" и "Свойства".
//   При этом документ может быть указан в других объектах метаданных - документах или регистрах.
//   Часть ссылок имеют значение для бизнес-логики (например движения по регистрам) и должны выводиться пользователю.
//   Другая часть ссылок - "техногенные" ссылки на документ из данных подсистем "Версионирование объектов" и "Свойства",
//     должны скрываться от пользователя при поиске ссылок на объект. 
//     Например, при анализе мест использования или в подсистеме запрета редактирования ключевых реквизитов.
//   Список таких "техногенных" объектов нужно перечислить в этой процедуре.
//
// Важно:
//   Для избежания появления пустых "битых" ссылок рекомендуется предусмотреть процедуру очистки указанных объектов
//   метаданных.
//   Для измерений регистров сведений - с помощью установки флажка "Ведущее",
//     тогда запись регистра сведений будет удалена вместе с удалением ссылки, указанной в измерении.
//   Для других реквизитов указанных объектов - с помощью подписки на событие ПередУдалением всех типов объектов
//   метаданных, которые могут быть записаны в реквизиты указанных объектов метаданных.
//     В обработчике необходимо найти "техногенные" объекты, в реквизитах которых указана ссылка удаляемого объекта,
//     и выбрать как именно очищать ссылку: очищать значение реквизита, удалять строку таблицы или удалять весь объект.
//
// Параметры:
//  ИсключенияПоискаСсылок - Массив - Объекты метаданных или их реквизиты, содержимое которых не должно учитывается в
//                                    бизнес-логике приложения.
//   * ОбъектМетаданных - Объект метаданных или его реквизит.
//   * Строка - Полное имя объекта метаданных или его реквизита.
//
// Примеры:
//	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов);
//	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.Реквизиты.АвторВерсии);
//	ИсключенияПоискаСсылок.Добавить("РегистрСведений.ВерсииОбъектов");
//
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	
	
КонецПроцедуры

// Доопределяет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Параметры:
//  Итог - ТаблицаЗначений - таблица, которую нужно передавать, как параметр
//         в процедуру ДобавитьПереименование общего модуля ОбщегоНазначения.
//
// Пример:
//	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.2.1.7",
//		"Роль.ИспользованиеЭЦП", "Роль.ИспользованиеЭП", "СтандартныеПодсистемы");
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	
	
	
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий.
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	
	
	
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт
	
	
	
	
	
КонецПроцедуры

// Позволяет настроить общие параметры подсистемы.
//
// Параметры:
//  ОбщиеПараметры - Структура - структура со свойствами:
//      * ИмяФормыПерсональныхНастроек            - Строка - имя формы для редактирования персональных настроек.
//                                                           Ранее определялись в
//                                                           ОбщегоНазначенияПереопределяемый.ИмяФормыПерсональныхНастроек.
//      * МинимальноНеобходимаяВерсияПлатформы    - Строка - полный номер версии платформы для запуска программы.
//                                                           Например, "8.3.4.365".
//                                                           Ранее определялись в
//                                                           ОбщегоНазначенияПереопределяемый.ПолучитьМинимальноНеобходимуюВерсиюПлатформы.
//      * РаботаВПрограммеЗапрещена               - Булево - Начальное значение Ложь.
//      * ЗапрашиватьПодтверждениеПриЗавершенииПрограммы - Булево - по умолчанию Истина. Если установить Ложь, то 
//                                                                  подтверждение при завершении работы программы не
//                                                                  будет запрашиваться,  если явно не разрешить в
//                                                                  персональных настройках программы.
//      * ОтключитьИдентификаторыОбъектовМетаданных - Булево - отключает заполнение справочников ИдентификаторыОбъектовМетаданных
//              и ИдентификаторыОбъектовРасширений, процедуру выгрузки и загрузки в узлах РИБ.
//              Для частичного встраивания отдельных функций библиотеки в конфигурации без постановки на поддержку.
//      * РекомендуемыйОбъемОперативнойПамяти - Число - объем памяти в гигабайтах, рекомендуемый для комфортной работы в программе.
//
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
	
	
	
КонецПроцедуры

// Позволяет виртуально отключать подсистемы для целей тестирования.
// В процедуре нельзя использовать метод ОбщегоНазначения.ПодсистемСуществует т.к. это приводит к рекурсии.
//
// Параметры:
//   ОтключенныеПодсистемы - Соответствие - Если подсистема отключена, то метод ОбщегоНазначения.ПодсистемаСуществует вернет Ложь.
//                                          В соответствии ключ - имя отключенной подсистемы, значение необходимо установить в Истина.
//
Процедура ПриОпределенииОтключенныхПодсистем(ОтключенныеПодсистемы) Экспорт
	
	
	
КонецПроцедуры

// Обработчик события "Перед загрузкой приоритетных данных в подчиненном РИБ узле".
// Выполняет заполнение настроек размещения сообщения обмена данными или
// нестандартную загрузку приоритетных данных из главного узла.
//
// К приоритетным данным относятся предопределенные элементы, а также
// элементы справочника Идентификаторы объектов метаданных.
//
// Параметры:
//  СтандартнаяОбработка - Булево, начальное значение Истина, если установить Ложь, 
//                тогда стандартная загрузка приоритетных данных с помощью подсистемы
//                ОбменДанными будет пропущена (тоже будет и в случае,
//                если подсистемы ОбменДанными нет).
//
Процедура ПередЗагрузкойПриоритетныхДанныхВПодчиненномРИБУзле(СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию программных интерфейсов,
// используя в качестве ключей имена программных интерфейсов.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура:
//  Ключ - Имя программного интерфейса,
//  Значение - Массив(Строка) - поддерживаемые версии программного интерфейса.
//
// Пример реализации:
//
//  // СервисПередачиФайлов
//  МассивВерсий = Новый Массив;
//  МассивВерсий.Добавить("1.0.1.1");
//  МассивВерсий.Добавить("1.0.2.1"); 
//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//  // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт
	
КонецПроцедуры

// Параметры функциональных опций, действие которых распространяется на командный интерфейс и рабочий стол.
//   Например, если значения функциональной опции хранятся в ресурсах регистра сведений,
//   то параметры функциональных опций могут определять условия отборов по измерениям регистра,
//   которые будут применяться при чтении значения этой функциональной опции.
//
// Параметры:
//   ОпцииИнтерфейса - Структура - Значения параметров функциональных опций, установленных для командного интерфейса.
//       Ключ элемента структуры определяет имя параметра, а значение элемента - текущее значение параметра.
//
// См. также:
//   Методы глобального контекста ПолучитьФункциональнуюОпциюИнтерфейса(),
//   УстановитьПараметрыФункциональныхОпцийИнтерфейса() и ПолучитьПараметрыФункциональныхОпцийИнтерфейса().
//
Процедура ПриОпределенииПараметровФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса) Экспорт
	
КонецПроцедуры

#КонецОбласти

//АСТБ_ALEX_**************************************************************

#Область ДобавленоДляАСТБ

//Функция проверяет изменялось ли физическое местонахождение БД.
//Если да, то возвращается ИСТИНА если нет - ЛОЖЬ.
//Фактически это проверка на факт копирования оригинальной БД.
//Параметры:
//	-Метаданные объекта, который запускается. например Метаданные.РегламентныеЗадания.ЗагрузкаКурсовВалют
//	-Текст сообщения пользователю, который будет записан в журнал регистрации если изменен физический путь к БД
Функция ЭтоКопияБД(МетаданныеОбъекта,ТекстСообщенияДляЖурналаРегистрации) Экспорт
	
	СтрокаСоединенияИБ = Константы.СтрокаСоединенияИБ.Получить();
	Если не СтрокаСоединенияИБ = Лев(Нрег(СтрокаСоединенияИнформационнойБазы()),100) Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,МетаданныеОбъекта,,ТекстСообщенияДляЖурналаРегистрации);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьСервернуюСтрокуСоединенияИБ() Экспорт
	
	//Если ОпределитьЭтаИнформационнаяБазаФайловая() Тогда
	//	Константы.СтрокаСоединенияИБ.Установить(НРег(СтрокаСоединенияИнформационнойБазы()));
	//КонецЕсли;
	
	МенеджерЗаданий = ФоновыеЗадания.Выполнить("ОбщегоНазначенияПереопределяемый.УстановитьСтрокуСоединенияИБ");
	
КонецПроцедуры

Процедура УстановитьСтрокуСоединенияИБ() Экспорт
	
	Константы.СтрокаСоединенияИБ.Установить(НРег(СтрокаСоединенияИнформационнойБазы()));
	
КонецПроцедуры	

//АСТБ_ALEXEY_**************************************************************

Процедура ВыполнитьСокращениеЖурналаРегистрации() Экспорт
	
	Если ОбщегоНазначенияПереопределяемый.ЭтоКопияБД(Метаданные.РегламентныеЗадания.БлокировкаВнешнихПользователей,"Регламентное сокращение журнала регистрации не выполнено, т.к. база данных является копией.") = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	Если ПолучитьБлокировкуСеансов().Установлена Тогда
		ЗаписьЖурналаРегистрации("Выполнение отменено",УровеньЖурналаРегистрации.Предупреждение,Метаданные.РегламентныеЗадания.ЗачетУпрощеннойВыдачи,,"Сокращение журнала регистрации.");
		Возврат; 
	КонецЕсли;
	
	КоличествоМесяцев = Константы.КоличествоМесяцевХраненияЖурналаРегистрации.Получить();
	Если КоличествоМесяцев = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, &КоличествоМесяцев) КАК ДатаСокращения";
	Запрос.УстановитьПараметр("ТекущаяДата",		ТекущаяДата());
	Запрос.УстановитьПараметр("КоличествоМесяцев",	-КоличествоМесяцев);
	ДатаСокращения = Запрос.Выполнить().Выгрузить()[0].ДатаСокращения;
	
	Фильтр = Новый Структура("ДатаОкончания");
	Фильтр.ДатаОкончания = ДатаСокращения;
	ОчиститьЖурналРегистрации(Фильтр);
	
	ИмяСобытия = НСтр("ru = 'Сокращение журнала регистрации'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,УровеньЖурналаРегистрации.Информация,Метаданные.РегламентныеЗадания.СокращениеЖурналаРегистрации,,"Журнал регистрации сокращен до " + Формат(ДатаСокращения,"ДЛФ=DD"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//АСТБ_ALEXEY_**************************************************************

#КонецОбласти

//АСТБ_ALEX_**************************************************************