&НаСервере
Функция УстановитьFTPСоединение(ПараметрыЗагрузки) Экспорт
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
	Если НастройкаПроксиСервера <> Неопределено Тогда
		
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		
		Если ИспользоватьПрокси Тогда
			
			Если ИспользоватьСистемныеНастройки Тогда
			// Системные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
			// Ручные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				Прокси.Пользователь 							= НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       							= НастройкаПроксиСервера["Пароль"];
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов 	= НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			КонецЕсли;
			
		Иначе
			
			// Не использовать прокси-сервер	
			Прокси = Новый ИнтернетПрокси(Ложь);
			
		КонецЕсли;
		
	Иначе
		
		Прокси = Неопределено;
		
	КонецЕсли;

	Если ПараметрыЗагрузки.FTPСоединениеЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено);
	Иначе
		ssl = Неопределено;
	КонецЕсли;	
	
	Попытка
		FTPСоединение = Новый FTPСоединение(ПараметрыЗагрузки.FTPСоединениеАдрес,
										ПараметрыЗагрузки.FTPСоединениеПорт,
										ПараметрыЗагрузки.FTPСоединениеПользователь,
										ПараметрыЗагрузки.FTPСоединениеПароль,
										Прокси,
										ПараметрыЗагрузки.FTPСоединениеПассивноеСоединение,
										10,
										ssl,
										?(ПараметрыЗагрузки.FTPСоединениеЗащищенноеСоединение,УровеньИспользованияЗащищенногоСоединенияFTP.ИспользоватьЕслиВозможно,УровеньИспользованияЗащищенногоСоединенияFTP.Авто));
		FTPСоединение.УстановитьТекущийКаталог(СокрЛП(ПараметрыЗагрузки.FTPСоединениеПуть));
	Исключение
		FTPСоединение = Неопределено;
	КонецПопытки;
	
	Возврат FTPСоединение;

КонецФункции

&НаСервере
Функция СформироватьКодКорневойГруппы(ИмяФайла)
	
	КодКорневойГруппы = Неопределено;
	
	Если ИмяФайла = "xtovar.zip" Тогда
		КодКорневойГруппы = "_VS_OSN_";
	ИначеЕсли ИмяФайла = "xtovar_sz.zip" Тогда
		КодКорневойГруппы = "_VS_SZ_";
	ИначеЕсли ИмяФайла = "xtovar_ii.zip" Тогда
		КодКорневойГруппы = "_II_OSN_";
	ИначеЕсли ИмяФайла = "xtovar_ii_sz.zip" Тогда
		КодКорневойГруппы = "_VS_SZ_";
	Конецесли;
	
	Возврат КодКорневойГруппы;
	
КонецФункции

&НаСервере
Функция ПолучитьПрефиксГруппы(ИмяФайла)
	
	ПрефиксГруппы = "";
	
	Если ИмяФайла = "xtovar_sz.zip" ИЛИ ИмяФайла = "xtovar_ii_sz.zip" Тогда
		ПрефиксГруппы = "SZ_";
	Конецесли;
	
	Возврат ПрефиксГруппы;
	
КонецФункции

&НаСервере
Процедура ВыполнитьАнализНоменклатурыНаСервере(ДеревоДляЗагрузки)
	
	ВыполнитьАнализНоменклатурыРекурсивно(ДеревоДляЗагрузки.Строки);	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАнализНоменклатурыРекурсивно(Строки)
	
	Для Каждого СтрокаДерева Из Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.КодГруппы) Тогда //это группа номенклатуры
			
			Если НЕ ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
				СтрокаДерева.Примечание = "Группа отсутствует в справочнике";
			Иначе
				Если НЕ СокрЛП(СтрокаДерева.Наименование) = СокрЛП(СтрокаДерева.Ссылка.Наименование) Тогда
					СтрокаДерева.Примечание = "Наименование группы не совпадает";
				Иначе
					СтрокаДерева.Примечание = "Корректировка не требуется";
				КонецЕсли;
			КонецЕсли;
		
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаДерева.КодОракл) Тогда //это номенклатура
				
				СтрокаДерева.Примечание = "";
				Если НЕ ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
					СтрокаДерева.Примечание = "Номенклатура отсутствует в справочнике";
				Иначе
					Если НЕ СтрокаДерева.Ссылка.Родитель = СтрокаДерева.Родитель.Ссылка Тогда
						СтрокаДерева.Примечание = "Не совпадает иерархия. ";
					КонецЕсли;
					Если НЕ СокрЛП(СтрокаДерева.Наименование) = СокрЛП(СтрокаДерева.Ссылка.Наименование) Тогда
						СтрокаДерева.Примечание = СтрокаДерева.Примечание + "Не совпадает наименование. ";
					КонецЕсли;
					Если НЕ СокрЛП(СтрокаДерева.Артикул) = СокрЛП(СтрокаДерева.Ссылка.Артикул) Тогда
						СтрокаДерева.Примечание = СтрокаДерева.Примечание + "Не совпадает артикул. ";
					КонецЕсли;
					Если НЕ СокрЛП(СтрокаДерева.НаименованиеПолное) = СокрЛП(СтрокаДерева.Ссылка.НаименованиеПолное) Тогда
						СтрокаДерева.Примечание = СтрокаДерева.Примечание + "Не совпадает полное наименование. ";
					КонецЕсли;
					Если НЕ СтрокаДерева.КодОКЕИ = СтрокаДерева.Ссылка.ЕдиницаИзмерения.Код Тогда
						СтрокаДерева.Примечание = СтрокаДерева.Примечание + "Не совпадает код ОКЕИ единицы измерения. ";
					КонецЕсли;
					Если НЕ СтрокаДерева.Масса = СтрокаДерева.Ссылка.Вес Тогда
						СтрокаДерева.Примечание = СтрокаДерева.Примечание + "Не совпадает вес номенклатуры. ";
					КонецЕсли;
					Если НЕ СтрокаДерева.Объем = СтрокаДерева.Ссылка.Объем Тогда
						СтрокаДерева.Примечание = СтрокаДерева.Примечание + "Не совпадает объем номенклатуры. ";
					КонецЕсли;
					Если НЕ СокрЛП(СтрокаДерева.НавигационнаяСсылка) = СокрЛП(СтрокаДерева.Ссылка.НавигационнаяСсылка) Тогда
						СтрокаДерева.Примечание = СтрокаДерева.Примечание + "Не совпадает навигационная ссылка номенклатуры. ";
					КонецЕсли;
					Если НЕ СокрЛП(СтрокаДерева.Описание) = СокрЛП(СтрокаДерева.Ссылка.Описание) Тогда
						СтрокаДерева.Примечание = СтрокаДерева.Примечание + "Не совпадает описание номенклатуры. ";
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаДерева.Примечание) Тогда
					СтрокаДерева.Примечание = "Корректировка не требуется";
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(СтрокаДерева.ИмяСвойства) Тогда //это свойство номенклатуры
					
					//Если СтрокаДерева.ИмяСвойства = "Бренд" Тогда
					//	СвойствоВладелец = СвойстваБренд;
					//Иначе
					//	СвойствоВладелец = СвойстваРаспространенность;
					//КонецЕсли;
					//
					//НайденноеЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(СтрокаДерева.ЗначениеСвойства,истина,,СвойствоВладелец);
					//
					//Если НЕ ЗначениеЗаполнено(НайденноеЗначениеСвойства) Тогда
					//	
					//	НайденноеЗначениеСвойства 				= Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
					//	НайденноеЗначениеСвойства.Владелец 		= СвойствоВладелец;
					//	НайденноеЗначениеСвойства.Наименование 	= СтрокаДерева.ЗначениеСвойства;
					//	НайденноеЗначениеСвойства.Записать();
					//	НайденноеЗначениеСвойства 				= НайденноеЗначениеСвойства.Ссылка;
					//	
					//КонецЕсли;
					//
					//Если ЗначениеЗаполнено(СтрокаДерева.Родитель.Родитель.Ссылка) Тогда
					//	НайденноеЗначениеСвойстваОбъекта = ПолучитьЗначениеСвойстваОбъекта(СвойствоВладелец,СтрокаДерева.Родитель.Родитель.Ссылка);
					//Иначе
					//	НайденноеЗначениеСвойстваОбъекта = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка();
					//КонецЕсли;
					//
					//Если НЕ ЗначениеЗаполнено(НайденноеЗначениеСвойстваОбъекта) Тогда
					//	СтрокаДерева.Примечание = "Свойство не назначено";
					//Иначе
					//	Если НЕ СокрЛП(СтрокаДерева.ЗначениеСвойства) = СокрЛП(НайденноеЗначениеСвойстваОбъекта.Наименование) Тогда
					//		СтрокаДерева.Примечание = "Наименование свойства не совпадает";
					//	Иначе
					//		СтрокаДерева.Примечание = "Корректировка не требуется";
					//	КонецЕсли;
					//КонецЕсли;
					
				Иначе
					
					//Если ЗначениеЗаполнено(СтрокаДерева.КодМетрикиОракл) Тогда //это характеристика номенклатуры
					//	Если НЕ ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
					//		СтрокаДерева.Примечание = "Характеристика отсутствует в справочнике";
					//	Иначе
					//		Если НЕ СокрЛП(СтрокаДерева.Наименование) = СокрЛП(СтрокаДерева.Ссылка.Наименование) Тогда
					//			СтрокаДерева.Примечание = "Наименование характеристики не совпадает";
					//		Иначе
					//			СтрокаДерева.Примечание = "Корректировка не требуется";
					//		КонецЕсли;
					//	КонецЕсли;
					//КонецЕсли;
					
				КонецЕсли;
	    				
	    	КонецЕсли;
			
		КонецЕсли;
		
		ВыполнитьАнализНоменклатурыРекурсивно(СтрокаДерева.Строки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЧтениеФайлаНоменклатуры_(ПараметрыЗагрузки,АдресХранилища) Экспорт
	
	 Если НЕ ЗначениеЗаполнено(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис) Тогда
	
		ПоместитьВоВременноеХранилище("Не выбран файл номенклатуры.",АдресХранилища);
		Возврат;
	
	КонецЕсли;
	
	ДеревоДляЗагрузки = Новый ДеревоЗначений;
	ДеревоДляЗагрузки.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("Представление");
	ДеревоДляЗагрузки.Колонки.Добавить("Примечание");
	ДеревоДляЗагрузки.Колонки.Добавить("КодГруппы");
	ДеревоДляЗагрузки.Колонки.Добавить("Ссылка");
	ДеревоДляЗагрузки.Колонки.Добавить("Наименование");
	ДеревоДляЗагрузки.Колонки.Добавить("НаименованиеПолное");
	ДеревоДляЗагрузки.Колонки.Добавить("КодРодителя");
	ДеревоДляЗагрузки.Колонки.Добавить("Артикул");
	ДеревоДляЗагрузки.Колонки.Добавить("Масса", Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("КодОракл", Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число"));
 	ДеревоДляЗагрузки.Колонки.Добавить("КодОКЕИ");
	ДеревоДляЗагрузки.Колонки.Добавить("СтатусСбытаСАП", Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("Описание");
	ДеревоДляЗагрузки.Колонки.Добавить("КодМетрикиСАП");
	ДеревоДляЗагрузки.Колонки.Добавить("КодМетрикиОракл");
	ДеревоДляЗагрузки.Колонки.Добавить("ИмяСвойства");
	ДеревоДляЗагрузки.Колонки.Добавить("ЗначениеСвойства");
	ДеревоДляЗагрузки.Колонки.Добавить("Существует");
	
	ТаблицаМетрик = Новый ТаблицаЗначений;
	ТаблицаМетрик.Колонки.Добавить("КодОракл", Новый ОписаниеТипов("Число"));
	ТаблицаМетрик.Колонки.Добавить("КодМетрикиСАП");
	ТаблицаМетрик.Колонки.Добавить("КодМетрикиОракл");
	ТаблицаМетрик.Колонки.Добавить("Наименование");
    ТаблицаМетрик.Колонки.Добавить("Ссылка");
	ТаблицаМетрик.Колонки.Добавить("Существует");
	
	Если ПараметрыЗагрузки.ТипИсточника = Перечисления.ТипыИсточниковДляЗагрузки.ЛокальныйРесурс Тогда
		
		ФайлАрхива = ПараметрыЗагрузки.КаталогОбменаИнформацией + "\" + ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис;
		
		Файл = Новый Файл(ФайлАрхива);
		Если НЕ Файл.Существует() Тогда
			ПоместитьВоВременноеХранилище("Не найден файл: " + ФайлАрхива,АдресХранилища);
			Возврат;
		КонецЕсли;
		
		Попытка 
			Архив = Новый ЧтениеZipФайла(ФайлАрхива);
			Для Каждого ВходящийФайл Из Архив.Элементы Цикл
				Архив.Извлечь(ВходящийФайл, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			КонецЦикла;
			Архив.Закрыть();
		Исключение
			ПоместитьВоВременноеХранилище(ОписаниеОшибки(),АдресХранилища);
			Возврат;
		КонецПопытки;
	Иначе
		Соединение = УстановитьFTPСоединение(ПараметрыЗагрузки);
		Если Соединение = Неопределено Тогда
			ПоместитьВоВременноеХранилище("Ошибка подключения к FTP.",АдресХранилища);
			Возврат;
		КонецЕсли;
		
		Найдено = Соединение.НайтиФайлы(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис);
		
		Если Найдено.Количество() = 0 Тогда
			ПоместитьВоВременноеХранилище("Не найден файл: "  + ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис,АдресХранилища);
			Возврат;
		КонецЕсли;
		Попытка
			ФайлАрхива = КаталогВременныхФайлов() + ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис;
			Соединение.Получить(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис,ФайлАрхива);
			Архив = Новый ЧтениеZipФайла(ФайлАрхива);
			Для Каждого ВходящийФайл Из Архив.Элементы Цикл
				Архив.Извлечь(ВходящийФайл, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			КонецЦикла;
			Архив.Закрыть();
			УдалитьФайлы(ФайлАрхива);
		Исключение
			ПоместитьВоВременноеХранилище(ОписаниеОшибки(),АдресХранилища);
			Возврат;
		КонецПопытки;
	КонецЕсли;
		
	ВременныйФайлНоменклатуры = ПолучитьИмяВременногоФайла();
	ПереместитьФайл(КаталогВременныхФайлов() + СтрЗаменить(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис,".zip",".xml"), ВременныйФайлНоменклатуры);
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ВременныйФайлНоменклатуры);
	
	Чтение.Прочитать();
	
	Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Поставщик 			= Чтение.ПолучитьАтрибут("source_org");
		ВидНоменклатуры		= Чтение.ПолучитьАтрибут("tovar_range");
		КодРодителя 		= Чтение.ПолучитьАтрибут("owner_group");
		ИмяКорневойГруппы 	= Поставщик + " (" +ВидНоменклатуры + ")";
		КодКорневойГруппы 	= СформироватьКодКорневойГруппы(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис);
		КодКорневойГруппы 	= ?(ЗначениеЗаполнено(КодКорневойГруппы),КодКорневойГруппы,"_VOSTOK_");
		ПрефиксГруппы		= ПолучитьПрефиксГруппы(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис);
	КонецЕсли;
			
	КореньДерева = ДеревоДляЗагрузки.Строки.Добавить();
	КореньДерева.Использовать 	= 0;
	КореньДерева.Наименование 	= ИмяКорневойГруппы;
	КореньДерева.КодГруппы 		= КодКорневойГруппы;
	КореньДерева.КодРодителя 	= "";
	КореньДерева.Представление 	= "Группа: <<" + ИмяКорневойГруппы + ">>";
	КореньДерева.Ссылка 	  	= Справочники.Номенклатура.НайтиПоКоду(КодКорневойГруппы);
	КореньДерева.Существует 	= НЕ (КореньДерева.Ссылка = Справочники.Номенклатура.ПустаяСсылка());

	СтруктураНоменклатуры = Новый Структура("Артикул, КодРодителя, Масса, КодОракл, НДС, СтатусСбытаСАП, Наименование, НаименованиеПолное, Объем, Описание","","",0,0,0,0,"","",0,"");
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.Имя = "catalog_group_list" Тогда //это список групп номенклатуры
			
		ИначеЕсли Чтение.Имя = "catalog_group" Тогда //это группа	
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ИмяГруппы 	= Чтение.ПолучитьАтрибут("group_name");
				КодГруппы 	= ПрефиксГруппы + Чтение.ПолучитьАтрибут("group_no");
				КодРодителя = ПрефиксГруппы + Чтение.ПолучитьАтрибут("owner_group");
				
				Если КодРодителя = ПрефиксГруппы + "0" 
					ИЛИ КодРодителя = ПрефиксГруппы + "1" //интеринструмент выгружает верхний уровень с кодом родителя "1"
					Тогда //верхний уровень
					НоваяСтрока 				= КореньДерева.Строки.Добавить();
					НоваяСтрока.Использовать 	= 0;
					НоваяСтрока.Наименование 	= ИмяГруппы;
					НоваяСтрока.КодГруппы 		= КодГруппы;
					НоваяСтрока.КодРодителя 	= КодРодителя;
					НоваяСтрока.Представление 	= "Группа: <<" + ИмяГруппы + ">>";
					НоваяСтрока.Ссылка 	  		= Справочники.Номенклатура.НайтиПоКоду(КодГруппы);
					НоваяСтрока.Существует 		= НЕ (НоваяСтрока.Ссылка = Справочники.Номенклатура.ПустаяСсылка());
				Иначе
					СтрокаДерева = ДеревоДляЗагрузки.Строки.Найти(КодРодителя,"КодГруппы",Истина);
					Если СтрокаДерева = Неопределено Тогда
						НоваяСтрока = НоваяСтрока.Строки.Добавить();
					Иначе
						НоваяСтрока = СтрокаДерева.Строки.Добавить();
					КонецЕсли;
					НоваяСтрока.Использовать 	= 0;
					НоваяСтрока.Наименование 	= ИмяГруппы;
					НоваяСтрока.КодГруппы 		= КодГруппы;
					НоваяСтрока.КодРодителя 	= КодРодителя;
					НоваяСтрока.Представление 	= "Группа: <<" + ИмяГруппы + ">>";
					НоваяСтрока.Ссылка 	  		= Справочники.Номенклатура.НайтиПоКоду(КодГруппы);
					НоваяСтрока.Существует 		= НЕ (НоваяСтрока.Ссылка = Справочники.Номенклатура.ПустаяСсылка());
				КонецЕсли;

			КонецЕсли;
		
		ИначеЕсли Чтение.Имя = "catalog_tov_list" Тогда //это список товаров
			
		ИначеЕсли Чтение.Имя = "catalog_tov" Тогда //это товар	
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				КодОКЕИ 	= Чтение.ПолучитьАтрибут("okei_cod");
				Если КодОКЕИ = Неопределено Тогда //может быть такая ситуация. в этом случае пропускаем номенклатуру
					СтруктураНоменклатуры = Новый Структура("Артикул, КодРодителя, Масса, КодОракл, НДС, СтатусСбытаСАП, Наименование, НаименованиеПолное, Объем, Описание","","",0,0,0,0,"","",0,"");
				Иначе
					СтруктураНоменклатуры = Новый Структура("Артикул, КодРодителя, Масса, КодОракл, НДС, СтатусСбытаСАП, Наименование, НаименованиеПолное, Объем, Описание, КодОКЕИ",
					Чтение.ПолучитьАтрибут("catalog_cod"),ПрефиксГруппы + Чтение.ПолучитьАтрибут("group_no"),Чтение.ПолучитьАтрибут("mass"),Число(Чтение.ПолучитьАтрибут("mtnr_id")),Число(Чтение.ПолучитьАтрибут("nds")),Число(Чтение.ПолучитьАтрибут("status_sap")),Чтение.ПолучитьАтрибут("tov_name40"),Чтение.ПолучитьАтрибут("tov_name80"),Чтение.ПолучитьАтрибут("volume"),"",КодОКЕИ);
				КонецЕсли;
				
				Если НЕ СтруктураНоменклатуры.КодОракл = 0 Тогда
					СтрокаДерева = ДеревоДляЗагрузки.Строки.Найти(СтруктураНоменклатуры.КодРодителя,"КодГруппы",Истина);
					Если СтрокаДерева = Неопределено Тогда
						СтрокаНоменклатуры = КореньДерева.Строки.Добавить();
					Иначе
						СтрокаНоменклатуры = СтрокаДерева.Строки.Добавить();
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтруктураНоменклатуры);
					СтрокаНоменклатуры.Использовать 		= 0;
					СтрокаНоменклатуры.Представление 		= "Товар: <<" + СтруктураНоменклатуры.НаименованиеПолное + ">>. Статус сбыта SAP: " + СтруктураНоменклатуры.СтатусСбытаСАП + ". Код Oracle: " + СтруктураНоменклатуры.КодОракл + ". Артикул: " + ?(ЗначениеЗаполнено(СтруктураНоменклатуры.Артикул),СтруктураНоменклатуры.Артикул,"не указан") + ".";
					СтрокаНоменклатуры.Ссылка 	  			= Справочники.Номенклатура.НайтиПоРеквизиту("КодСинхронизации",СтруктураНоменклатуры.КодОракл);
					СтрокаНоменклатуры.Существует 			= НЕ (СтрокаНоменклатуры.Ссылка = Справочники.Номенклатура.ПустаяСсылка());
				КонецЕсли;

			КонецЕсли;
			
		ИначеЕсли Чтение.Имя = "desc_full" Тогда //это описание товара
			
			Если НЕ СтруктураНоменклатуры.КодОракл = 0 Тогда
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если ЗначениеЗаполнено(СтруктураНоменклатуры.Описание) Тогда
						СтруктураНоменклатуры.Описание = СтруктураНоменклатуры.Описание + Символы.ПС + Чтение.ПолучитьАтрибут("desc_line");
					Иначе
						СтруктураНоменклатуры.Описание = Чтение.ПолучитьАтрибут("desc_line");
					КонецЕсли;
				ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					СтрокаНоменклатуры.Описание = СтруктураНоменклатуры.Описание;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Чтение.Имя = "desc_line" Тогда //это описание товара
			
			Сообщить(Чтение.Значение);
			
		ИначеЕсли Чтение.Имя = "char_list" Тогда //это список свойств
			
		ИначеЕсли Чтение.Имя = "char_item" Тогда //это свойство
			
			ИмяСвойства = Чтение.ПолучитьАтрибут("c_name");
			
			Если (ИмяСвойства = "Вид" ИЛИ ИмяСвойства = "ГОСТ" ИЛИ ИмяСвойства = "Пол" ИЛИ ИмяСвойства = "Учет Киз") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
				
				СтрокаСвойства 					= СтрокаНоменклатуры.Строки.Добавить();
				СтрокаСвойства.Использовать 	= 0;
				СтрокаСвойства.Представление 	= "Свойство: <<" + ИмяСвойства + ">>";
				СтрокаСвойства.ИмяСвойства 		= ИмяСвойства;
				
				ЧитатьСвойство = Истина;
				
			Иначе
				
				ЧитатьСвойство = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Чтение.Имя = "c_val_list" Тогда //это значение свойства
			
			Если ЧитатьСвойство И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
				
				ЗначениеСвойства = Чтение.ПолучитьАтрибут("char_val");
				
				СтрокаСвойства.Представление 	= СтрокаСвойства.Представление + " значение: <<" + ЗначениеСвойства + ">>";
				СтрокаСвойства.ЗначениеСвойства = ЗначениеСвойства;
				
			КонецЕсли;
			
		ИначеЕсли Чтение.Имя = "size_list" Тогда //это список размеров
			
		ИначеЕсли Чтение.Имя = "size_item" Тогда //это размер
			
			Если НЕ СтруктураНоменклатуры.КодОракл = 0 Тогда
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					
					НаименованиеМетрики = Чтение.ПолучитьАтрибут("size_name");
					КодМетрикиСАП 		= Чтение.ПолучитьАтрибут("size_code");
					КодМетрикиОракл 	= Чтение.ПолучитьАтрибут("size_ora");
					
					Если ЗначениеЗаполнено(КодМетрикиОракл) Тогда
						СтрокаМетрик 					= ТаблицаМетрик.Добавить();
						СтрокаМетрик.КодОракл 			= СтрокаНоменклатуры.КодОракл;
						СтрокаМетрик.Наименование 		= НаименованиеМетрики;
						СтрокаМетрик.КодМетрикиСАП 		= КодМетрикиСАП;
						СтрокаМетрик.КодМетрикиОракл 	= Число(КодМетрикиОракл);
						
						Если НЕ СтрокаНоменклатуры.Ссылка = Справочники.Номенклатура.ПустаяСсылка() Тогда //ищем характеристики
							
							СтрокаМетрик.Ссылка 	= Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(КодМетрикиОракл,,,СтрокаНоменклатуры.Ссылка);
							СтрокаМетрик.Существует = НЕ (СтрокаМетрик.Ссылка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Чтение.Закрыть();
	
	Результат = Новый Структура("ДеревоДляЗагрузки, ТаблицаМетрик", ДеревоДляЗагрузки, ТаблицаМетрик);
	
	ВыполнитьАнализНоменклатурыНаСервере(ДеревоДляЗагрузки);
	
	ПоместитьВоВременноеХранилище(Результат,АдресХранилища);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеАнтропометрии() Экспорт
	
	//чтение схемы из макета
	ВременныйФайлСхемы = ПолучитьИмяВременногоФайла();
	
	МакетСхемы = Обработки.ЗагрузкаНоменклатурыВостокСервис.ПолучитьМакет("XML_СхемаДляАнтропометрии");
	МакетСхемы.Записать(ВременныйФайлСхемы);
	
	ЧтениеСхемы = Новый ЧтениеXML;
	ЧтениеСхемы.ОткрытьФайл(ВременныйФайлСхемы);

	Построитель_DOM = Новый ПостроительDOM;
	Документ_DOM 	= Построитель_DOM.Прочитать(ЧтениеСхемы);
	
	ПостроительСхем_XML = Новый ПостроительСхемXML;
	Схема_XML 			= ПостроительСхем_XML.СоздатьСхемуXML(Документ_DOM);
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(Схема_XML);
	
	НоваяФабрика = Новый ФабрикаXDTO(НаборСхем);
	
	//чтение данных из макета
	ВременныйФайлДанных	= ПолучитьИмяВременногоФайла();
	МакетДанных 		= Обработки.ЗагрузкаНоменклатурыВостокСервис.ПолучитьМакет("XML_ДанныеДляАнтропометрии");
	МакетДанных.Записать(ВременныйФайлДанных);
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ВременныйФайлДанных);
	
	Попытка
		Данные = НоваяФабрика.ПрочитатьXML(Чтение);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Если Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеАнтропометрии = Новый ТаблицаЗначений;
	ДанныеАнтропометрии.Колонки.Добавить("МатрицаSAP");
	ДанныеАнтропометрии.Колонки.Добавить("ВидСвойства");
	ДанныеАнтропометрии.Колонки.Добавить("ИспользоватьРост");
	ДанныеАнтропометрии.Колонки.Добавить("НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе");
	
	Для Каждого Элемент Из Данные.matrix_item Цикл
		
		НоваяСтрока 														= ДанныеАнтропометрии.Добавить();
		НоваяСтрока.МатрицаSAP 												= Элемент.matrix_number;
		НоваяСтрока.ИспользоватьРост 										= (Элемент.Рост = "1");
		НоваяСтрока.НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе 	= (Элемент.НеИспользоватьАнтропометрию = "1");
		
		Если Элемент.РазмерГоловногоУбора = "1" Тогда
			НоваяСтрока.ВидСвойства 	= Справочники.ВидыАнтропометрическихСвойств.РазмерГоловногоУбора;
		ИначеЕсли Элемент.РазмерОбуви = "1" Тогда
			НоваяСтрока.ВидСвойства 	= Справочники.ВидыАнтропометрическихСвойств.РазмерОбуви;
		ИначеЕсли Элемент.РазмерОдежды = "1" Тогда
			НоваяСтрока.ВидСвойства 	= Справочники.ВидыАнтропометрическихСвойств.РазмерОдежды;
		ИначеЕсли Элемент.РазмерПерчаток = "1" Тогда
			НоваяСтрока.ВидСвойства 	= Справочники.ВидыАнтропометрическихСвойств.РазмерПерчаток;
		ИначеЕсли Элемент.РазмерПротивогаза = "1" Тогда
			НоваяСтрока.ВидСвойства 	= Справочники.ВидыАнтропометрическихСвойств.РазмерПротивогаза;
		ИначеЕсли Элемент.РазмерРубашки = "1" Тогда
			НоваяСтрока.ВидСвойства 	= Справочники.ВидыАнтропометрическихСвойств.РазмерРубашки;
		Иначе
			НоваяСтрока.ВидСвойства 	= Справочники.ВидыАнтропометрическихСвойств.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеАнтропометрии;
	
КонецФункции

&НаСервере
Процедура ВыполнитьЧтениеФайлаНоменклатуры(ПараметрыЗагрузки,АдресХранилища) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис) Тогда
	
		ПоместитьВоВременноеХранилище("Не выбран файл номенклатуры.",АдресХранилища);
		Возврат;
	
	КонецЕсли;
	
	ДеревоДляЗагрузки = Новый ДеревоЗначений;
	ДеревоДляЗагрузки.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("Представление");
	ДеревоДляЗагрузки.Колонки.Добавить("Примечание");
	ДеревоДляЗагрузки.Колонки.Добавить("КодГруппы");
	ДеревоДляЗагрузки.Колонки.Добавить("Ссылка");
	ДеревоДляЗагрузки.Колонки.Добавить("Наименование");
	ДеревоДляЗагрузки.Колонки.Добавить("НаименованиеПолное");
	ДеревоДляЗагрузки.Колонки.Добавить("КодРодителя");
	ДеревоДляЗагрузки.Колонки.Добавить("Артикул");
	ДеревоДляЗагрузки.Колонки.Добавить("Масса", Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("КодОракл", Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число"));
 	ДеревоДляЗагрузки.Колонки.Добавить("КодОКЕИ");
	ДеревоДляЗагрузки.Колонки.Добавить("СтатусСбытаСАП", Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("Описание");
	ДеревоДляЗагрузки.Колонки.Добавить("ИмяСвойства");
	ДеревоДляЗагрузки.Колонки.Добавить("ЗначениеСвойства");
	ДеревоДляЗагрузки.Колонки.Добавить("GTIN");
	ДеревоДляЗагрузки.Колонки.Добавить("Существует");
	ДеревоДляЗагрузки.Колонки.Добавить("ВидАнтропометрии");
	ДеревоДляЗагрузки.Колонки.Добавить("ИспользоватьРост");
	ДеревоДляЗагрузки.Колонки.Добавить("НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе");
	ДеревоДляЗагрузки.Колонки.Добавить("НавигационнаяСсылка");    
		
	ТаблицаМетрик = Новый ТаблицаЗначений;
	ТаблицаМетрик.Колонки.Добавить("КодОракл", Новый ОписаниеТипов("Число"));
	ТаблицаМетрик.Колонки.Добавить("КодМетрикиСАП");
	ТаблицаМетрик.Колонки.Добавить("КодМетрикиОракл");
	ТаблицаМетрик.Колонки.Добавить("Наименование");
	ТаблицаМетрик.Колонки.Добавить("GTIN");
    ТаблицаМетрик.Колонки.Добавить("Ссылка");
	ТаблицаМетрик.Колонки.Добавить("Существует");
	
	ТаблицаКомплектующих = Новый ТаблицаЗначений;
	ТаблицаКомплектующих.Колонки.Добавить("КодОракл", 			Новый ОписаниеТипов("Число"));
	ТаблицаКомплектующих.Колонки.Добавить("КодОраклКомплекта", 	Новый ОписаниеТипов("Число"));
	ТаблицаКомплектующих.Колонки.Добавить("Количество", 		Новый ОписаниеТипов("Число"));
	ТаблицаКомплектующих.Колонки.Добавить("Наименование", 		Новый ОписаниеТипов("Строка"));
    ТаблицаКомплектующих.Колонки.Добавить("Ссылка");
	ТаблицаКомплектующих.Колонки.Добавить("Существует");                     
	
	//Танцюра А.Н. -- №140570 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 1) -- 09.11.2021 <<< 
	ТаблицаНоменклатурныхНомеров = Новый ТаблицаЗначений;  
	ТаблицаНоменклатурныхНомеров.Колонки.Добавить("КодОракл", Новый ОписаниеТипов("Число"));
	ТаблицаНоменклатурныхНомеров.Колонки.Добавить("НоменклатурныйНомер");  
	ТаблицаНоменклатурныхНомеров.Колонки.Добавить("НаименованиеОрганизации");       
	//Танцюра А.Н. -- №140570 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 1) -- 09.11.2021 >>>
	
	Если ПараметрыЗагрузки.ТипИсточника = Перечисления.ТипыИсточниковДляЗагрузки.ЛокальныйРесурс Тогда
		
		//Танцюра А.Н. -- №140568 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 2) -- 08.11.2021 <<<
		
		//было:
		//ФайлАрхива = ПараметрыЗагрузки.КаталогОбменаИнформацией + "\" + ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис;
		//
		//Файл = Новый Файл(ФайлАрхива);
		//Если НЕ Файл.Существует() Тогда
		//	ПоместитьВоВременноеХранилище("Не найден файл: " + ФайлАрхива,АдресХранилища);
		//	Возврат;
		//КонецЕсли;
		//
		//Попытка 
		//	Архив = Новый ЧтениеZipФайла(ФайлАрхива);
		//	Для Каждого ВходящийФайл Из Архив.Элементы Цикл
		//		Архив.Извлечь(ВходящийФайл, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		//	КонецЦикла;
		//	Архив.Закрыть();
		//Исключение
		//	ПоместитьВоВременноеХранилище(ОписаниеОшибки(),АдресХранилища);
		//	Возврат;
		//КонецПопытки;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗагрузки.Организация) Тогда //все работает по-старому
			
			ФайлАрхива = ПараметрыЗагрузки.КаталогОбменаИнформацией + "\" + ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис;
			
			Файл = Новый Файл(ФайлАрхива);
			Если НЕ Файл.Существует() Тогда
				ПоместитьВоВременноеХранилище("Не найден файл: " + ФайлАрхива,АдресХранилища);
				Возврат;
			КонецЕсли;
			
			Попытка 
				Архив = Новый ЧтениеZipФайла(ФайлАрхива);
				Для Каждого ВходящийФайл Из Архив.Элементы Цикл
					Архив.Извлечь(ВходящийФайл, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
				КонецЦикла;
				Архив.Закрыть();
			Исключение
				ПоместитьВоВременноеХранилище(ОписаниеОшибки(),АдресХранилища);
				Возврат;
			КонецПопытки;  
			
		Иначе
			
			//поиск файла по ИНН+КПП+DSTNM
			ПозицияРасширения 	= СтрНайти(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис,".zip");
			Маска 				= Лев(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис,ПозицияРасширения - 1);
			МассивФайлов 		= НайтиФайлы(ПараметрыЗагрузки.КаталогОбменаИнформацией,Маска + "*.zip");
			
			//если не нашли, ищем старый файл
			Если МассивФайлов.Количество() = 0 Тогда
				МассивФайлов = НайтиФайлы(ПараметрыЗагрузки.КаталогОбменаИнформацией,"xtovar.zip");	
			КонецЕсли;
			
			Если МассивФайлов.Количество() = 0 Тогда
				ПоместитьВоВременноеХранилище("Файл не найден!");
				Возврат;	
			КонецЕсли;	
			
			Попытка 
				Архив = Новый ЧтениеZipФайла(МассивФайлов[0].ПолноеИмя);
				Для Каждого ВходящийФайл Из Архив.Элементы Цикл
					Архив.Извлечь(ВходящийФайл, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
				КонецЦикла;
				Архив.Закрыть();
			Исключение
				ПоместитьВоВременноеХранилище(ОписаниеОшибки(),АдресХранилища);
				Возврат;
			КонецПопытки;
			
		КонецЕсли;   
		
		//Танцюра А.Н. -- №140568 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 2) -- 08.11.2021 >>>
	
	Иначе      
		
		Соединение = УстановитьFTPСоединение(ПараметрыЗагрузки);
		Если Соединение = Неопределено Тогда
			ПоместитьВоВременноеХранилище("Ошибка подключения к FTP.",АдресХранилища);
			Возврат;
		КонецЕсли;
		
		//Танцюра А.Н. -- №140568 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 2) -- 08.11.2021 <<<
		
		//было:
		//Найдено = Соединение.НайтиФайлы(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис);
		//
		//Если Найдено.Количество() = 0 Тогда
		//	ПоместитьВоВременноеХранилище("Не найден файл: "  + ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис,АдресХранилища);
		//	Возврат;
		//КонецЕсли;
		//Попытка
		//	ФайлАрхива = КаталогВременныхФайлов() + ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис;
		//	Соединение.Получить(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис,ФайлАрхива);
		//	Архив = Новый ЧтениеZipФайла(ФайлАрхива);
		//	Для Каждого ВходящийФайл Из Архив.Элементы Цикл
		//		Архив.Извлечь(ВходящийФайл, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		//	КонецЦикла;
		//	Архив.Закрыть();
		//	УдалитьФайлы(ФайлАрхива);
		//Исключение
		//	ПоместитьВоВременноеХранилище(ОписаниеОшибки(),АдресХранилища);
		//	Возврат;
		//КонецПопытки; 
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗагрузки.Организация) Тогда //все работает по-старому    
			
			Найдено = Соединение.НайтиФайлы(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис);
			
			Если Найдено.Количество() = 0 Тогда
				ПоместитьВоВременноеХранилище("Не найден файл: "  + ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис,АдресХранилища);
				Возврат;
			КонецЕсли;    
			
			Попытка
				ФайлАрхива = КаталогВременныхФайлов() + ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис;
				Соединение.Получить(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис,ФайлАрхива);
				Архив = Новый ЧтениеZipФайла(ФайлАрхива);
				Для Каждого ВходящийФайл Из Архив.Элементы Цикл
					Архив.Извлечь(ВходящийФайл, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
				КонецЦикла;
				Архив.Закрыть();
				УдалитьФайлы(ФайлАрхива);
			Исключение
				ПоместитьВоВременноеХранилище(ОписаниеОшибки(),АдресХранилища);
				Возврат;
			КонецПопытки;	
		
        Иначе
			
			//поиск файла по ИНН+КПП+DSTNM
			ПозицияРасширения 	= СтрНайти(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис,".zip");
			Маска 				= Лев(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис,ПозицияРасширения - 1);
			МассивФайлов 		= Соединение.НайтиФайлы(ПараметрыЗагрузки.FTPСоединениеПуть,Маска + "*.zip"); 
			
			//если не нашли, ищем старый файл
			Если МассивФайлов.Количество() = 0 Тогда    
				Маска 			= "xtovar.zip";
				МассивФайлов 	= НайтиФайлы(ПараметрыЗагрузки.FTPСоединениеПуть,Маска);	
			КонецЕсли;
			
			Если МассивФайлов.Количество() = 0 Тогда
				ПоместитьВоВременноеХранилище("Файл не найден!");
				Возврат;	
			КонецЕсли;
			
			Попытка
				ФайлАрхива = КаталогВременныхФайлов() + МассивФайлов[0].Имя;
				Соединение.Получить(МассивФайлов[0].Имя,ФайлАрхива);
				Архив = Новый ЧтениеZipФайла(ФайлАрхива);
				Для Каждого ВходящийФайл Из Архив.Элементы Цикл
					Архив.Извлечь(ВходящийФайл, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
				КонецЦикла;
				Архив.Закрыть();
				УдалитьФайлы(ФайлАрхива);
			Исключение
				ПоместитьВоВременноеХранилище(ОписаниеОшибки(),АдресХранилища);
				Возврат;
			КонецПопытки;
			
		КонецЕсли;	
			
		//Танцюра А.Н. -- №140568 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 2) -- 08.11.2021 >>>
		
	КонецЕсли;
		
	ВременныйФайлСхемы = ПолучитьИмяВременногоФайла();
	
	Макет = Справочники.Номенклатура.ПолучитьМакет("XMLСхемаЗагрузки");
	Макет.Записать(ВременныйФайлСхемы);
	
	ЧтениеСхемы = Новый ЧтениеXML;
	ЧтениеСхемы.ОткрытьФайл(ВременныйФайлСхемы);

	Построитель_DOM = Новый ПостроительDOM;
	Документ_DOM 	= Построитель_DOM.Прочитать(ЧтениеСхемы);
	
	ПостроительСхем_XML = Новый ПостроительСхемXML;
	Схема_XML 			= ПостроительСхем_XML.СоздатьСхемуXML(Документ_DOM);
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(Схема_XML);
	
	НоваяФабрика = Новый ФабрикаXDTO(НаборСхем);
	
	ЧтениеСхемы.Закрыть();
	
	ВременныйФайлНоменклатуры = ПолучитьИмяВременногоФайла();

	//Танцюра А.Н. -- №140568 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 2) -- 08.11.2021 <<<
	//ПереместитьФайл(КаталогВременныхФайлов() + СтрЗаменить(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис,".zip",".xml"), ВременныйФайлНоменклатуры);
	ПереместитьФайл(КаталогВременныхФайлов() + ВходящийФайл.ПолноеИмя, ВременныйФайлНоменклатуры);
	//Танцюра А.Н. -- №140568 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 2) -- 08.11.2021 >>>
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ВременныйФайлНоменклатуры);
	
	Попытка
		Данные = НоваяФабрика.ПрочитатьXML(Чтение);
	Исключение
		ПоместитьВоВременноеХранилище(ОписаниеОшибки(),АдресХранилища);
		Возврат;
	КонецПопытки;
	
	Если Данные = Неопределено Тогда
		ПоместитьВоВременноеХранилище("Ошибка чтения данных файла номенклатуры.",АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Если Данные.Свойства().Получить("source_org") = Неопределено ИЛИ Данные.Свойства().Получить("tovar_range") = Неопределено Тогда //проверка файла
		ПоместитьВоВременноеХранилище("Неверный формат файла! Загрузка данных невозможна!",АдресХранилища);
		Возврат;
	Иначе
		//исходная информация
		Поставщик 		= Данные.source_org;
		ВидНоменклатуры = Данные.tovar_range;
		ИмяКорневойГруппы = Поставщик + " (" +ВидНоменклатуры + ")";
		КодКорневойГруппы = СформироватьКодКорневойГруппы(ПараметрыЗагрузки.ФайлНоменклатурыВостокСервис);
		КодКорневойГруппы = ?(ЗначениеЗаполнено(КодКорневойГруппы),КодКорневойГруппы,"_VOSTOK_");
	КонецЕсли;
			
	КореньДерева = ДеревоДляЗагрузки.Строки.Добавить();
	КореньДерева.Использовать 	= 0;
	КореньДерева.Наименование 	= ИмяКорневойГруппы;
	КореньДерева.КодГруппы 		= КодКорневойГруппы;
	КореньДерева.КодРодителя 	= "";
	КореньДерева.Представление 	= "Группа: <<" + ИмяКорневойГруппы + ">>";
	КореньДерева.Ссылка 	  	= Справочники.Номенклатура.НайтиПоКоду(КодКорневойГруппы);
	КореньДерева.Существует 	= НЕ (КореньДерева.Ссылка = Справочники.Номенклатура.ПустаяСсылка());
	
	Если Данные.Свойства().Получить("catalog_group_list") = Неопределено Тогда
		ПоместитьВоВременноеХранилище("Неверный формат файла! Загрузка данных невозможна!",АдресХранилища);
		Возврат;
	Иначе
		Если Данные.catalog_group_list.Свойства().Получить("catalog_group") = Неопределено Тогда
			ПоместитьВоВременноеХранилище("Неверный формат файла! Загрузка данных невозможна!",АдресХранилища);
			Возврат;
		Иначе
			РазмерСпискаXDTO = Данные.catalog_group_list.catalog_group.Количество();
		КонецЕсли;
	КонецЕсли;
	
	//цикл по группам номенклатуры
	Для Каждого Элемент Из Данные.catalog_group_list.catalog_group Цикл
		
		Если Элемент.Свойства().Получить("group_name") = Неопределено Тогда
			Продолжить;
		Иначе
			ИмяГруппы = Элемент.group_name;
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("group_no") = Неопределено Тогда
			Продолжить;
		Иначе
			КодГруппы = ?(ЗначениеЗаполнено(Элемент.group_no),Элемент.group_no,"0");
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("owner_group") = Неопределено Тогда
			Продолжить;
		Иначе
			КодРодителя = ?(ЗначениеЗаполнено(Элемент.owner_group),Элемент.owner_group,"0");
		КонецЕсли;
		
		Если КодРодителя = "0" 
			ИЛИ КодРодителя = "1" //интеринструмент выгружает верхний уровень с кодом родителя "1"
			Тогда //верхний уровень
			НоваяСтрока 				= КореньДерева.Строки.Добавить();
			НоваяСтрока.Использовать 	= 0;
			НоваяСтрока.Наименование 	= ИмяГруппы;
			НоваяСтрока.КодГруппы 		= КодГруппы;
			НоваяСтрока.КодРодителя 	= КодРодителя;
			НоваяСтрока.Представление 	= "Группа: <<" + ИмяГруппы + ">>";
			НоваяСтрока.Ссылка 	  		= Справочники.Номенклатура.НайтиПоКоду(КодГруппы);
			НоваяСтрока.Существует 		= НЕ (НоваяСтрока.Ссылка = Справочники.Номенклатура.ПустаяСсылка());
		Иначе
			СтрокаДерева = ДеревоДляЗагрузки.Строки.Найти(КодРодителя,"КодГруппы",Истина);
			Если СтрокаДерева = Неопределено Тогда
				НоваяСтрока = НоваяСтрока.Строки.Добавить();
			Иначе
				НоваяСтрока = СтрокаДерева.Строки.Добавить();
			КонецЕсли;
			НоваяСтрока.Использовать 	= 0;
			НоваяСтрока.Наименование 	= ИмяГруппы;
			НоваяСтрока.КодГруппы 		= КодГруппы;
			НоваяСтрока.КодРодителя 	= КодРодителя;
			НоваяСтрока.Представление 	= "Группа: <<" + ИмяГруппы + ">>";
			НоваяСтрока.Ссылка 	  		= Справочники.Номенклатура.НайтиПоКоду(КодГруппы);
			НоваяСтрока.Существует 		= НЕ (НоваяСтрока.Ссылка = Справочники.Номенклатура.ПустаяСсылка());
		КонецЕсли;
		
	КонецЦикла;
	
	Если Данные.Свойства().Получить("catalog_tov_list") = Неопределено Тогда
		ПоместитьВоВременноеХранилище("Неверный формат файла! Загрузка данных невозможна!",АдресХранилища);
		Возврат;
	Иначе
		Если Данные.catalog_tov_list.Свойства().Получить("catalog_tov") = Неопределено Тогда
			ПоместитьВоВременноеХранилище("Неверный формат файла! Загрузка данных невозможна!",АдресХранилища);
			Возврат;
		Иначе
			РазмерСпискаXDTO = Данные.catalog_tov_list.catalog_tov.Количество();
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаАнтропометрии = ПолучитьДанныеАнтропометрии();
	
	//цикл по номенклатуре
	Для Каждого Элемент Из Данные.catalog_tov_list.catalog_tov Цикл
		
		Если Элемент.Свойства().Получить("okei_cod") = Неопределено Тогда
			Продолжить;
		Иначе
			Если НЕ ЗначениеЗаполнено(Элемент.okei_cod) Тогда //может быть такая ситуация. в этом случае пропускаем номенклатуру.
				Продолжить;
			КонецЕсли;
			КодОКЕИ = Элемент.okei_cod;
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("catalog_cod") = Неопределено Тогда
			Продолжить;
		Иначе
			Артикул = Элемент.catalog_cod;
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("group_no") = Неопределено Тогда
			Продолжить;
		Иначе
			КодРодителя	= ?(ЗначениеЗаполнено(Элемент.group_no),Элемент.group_no,"0");
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("mass") = Неопределено Тогда
			Продолжить;
		Иначе
			Масса = Число(Элемент.mass);
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("mtnr_id") = Неопределено Тогда
			Продолжить;
		Иначе
			Если НЕ ЗначениеЗаполнено(Элемент.mtnr_id) Тогда 
				Продолжить;
			КонецЕсли;
			КодОракл = Число(Элемент.mtnr_id);
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("nds") = Неопределено Тогда
			Продолжить;
		Иначе
			НДС = Число(Элемент.nds);
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("status_sap") = Неопределено Тогда
			Продолжить;
		Иначе
			СтатусСбытаСАП = Число(Элемент.status_sap);
		КонецЕсли;

		//Если НЕ (СтатусСбытаСАП = 22 ИЛИ СтатусСбытаСАП = 23 ИЛИ СтатусСбытаСАП = 26) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если Элемент.Свойства().Получить("tov_name40") = Неопределено Тогда
			Продолжить;
		Иначе
			Если НЕ ЗначениеЗаполнено(Элемент.tov_name40) Тогда 
				Продолжить;
			КонецЕсли; 
			//присваиваем наименованию при загрузке tov_name80
			//Наименование = Элемент.tov_name40; 
			Наименование = Элемент.tov_name80;
		КонецЕсли;

		Если Элемент.Свойства().Получить("tov_name80") = Неопределено Тогда
			Продолжить;
		Иначе
			Если НЕ ЗначениеЗаполнено(Элемент.tov_name80) Тогда 
				Продолжить;
			КонецЕсли;
			НаименованиеПолное = Элемент.tov_name80;
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("volume") = Неопределено Тогда
			Продолжить;
		Иначе
			Объем = Число(Элемент.volume);
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("url") = Неопределено Тогда
			Продолжить;
		Иначе
			НавигационнаяСсылка = Элемент.url;
		КонецЕсли;
		
		Описание = "";
		
		Если НЕ Элемент.Свойства().Получить("desc_full") = Неопределено Тогда 
			Если ТипЗнч(Элемент.desc_full) = Тип("ОбъектXDTO") Тогда
				Если ТипЗнч(Элемент.desc_full.desc_line) = Тип("СписокXDTO") Тогда
					Для Сч = 0 По Элемент.desc_full.desc_line.Количество() - 1 Цикл
						Если ЗначениеЗаполнено(Описание) Тогда
							Описание = Описание + Символы.ПС + Элемент.desc_full.desc_line[Сч];			
						Иначе
							Описание = Элемент.desc_full.desc_line[Сч];
						КонецЕсли;
					КонецЦикла;
				Иначе
					Описание = Элемент.desc_full.desc_line;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//Танцюра А.Н. -- №140570 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 1) -- 09.11.2021 <<<  
		Если ЗначениеЗаполнено(ПараметрыЗагрузки.Организация) Тогда
			Если НЕ Элемент.Свойства().Получить("buyer_tov_list") = Неопределено Тогда 
				Если ТипЗнч(Элемент.buyer_tov_list) = Тип("ОбъектXDTO") Тогда
					Если ТипЗнч(Элемент.buyer_tov_list.buyer_tov) = Тип("ОбъектXDTO") Тогда   
						НоваяСтрока = ТаблицаНоменклатурныхНомеров.Добавить();
						НоваяСтрока.КодОракл 				= КодОракл;  
						НоваяСтрока.НоменклатурныйНомер 	= Элемент.buyer_tov_list.buyer_tov.code;
						НоваяСтрока.НаименованиеОрганизации = Элемент.buyer_tov_list.buyer_tov.name;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;    
		КонецЕсли;  
		//Танцюра А.Н. -- №140570 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 1) -- 09.11.2021 >>>
		
		СтрокаДерева = ДеревоДляЗагрузки.Строки.Найти(КодРодителя,"КодГруппы",Истина);
		Если СтрокаДерева = Неопределено Тогда
			НоваяСтрока = КореньДерева.Строки.Добавить();
		Иначе
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Использовать 		= 0;
		НоваяСтрока.Наименование 		= Наименование;
		НоваяСтрока.Артикул 			= Артикул;
		НоваяСтрока.КодРодителя 		= КодРодителя;
		НоваяСтрока.Масса 				= Масса;
		НоваяСтрока.КодОракл 			= КодОракл;
		НоваяСтрока.НДС 				= НДС;
		НоваяСтрока.КодОКЕИ 			= КодОКЕИ;
		НоваяСтрока.СтатусСбытаСАП 		= СтатусСбытаСАП;
		НоваяСтрока.НаименованиеПолное 	= НаименованиеПолное;
		НоваяСтрока.Объем 				= Объем;
		НоваяСтрока.Описание 			= Описание;
		НоваяСтрока.НавигационнаяСсылка = НавигационнаяСсылка;    
		НоваяСтрока.Представление 		= "Товар: <<" + НаименованиеПолное + ">>. Статус сбыта SAP: " + СтатусСбытаСАП + ". Код Oracle: " + КодОракл + ". Артикул: " + ?(ЗначениеЗаполнено(Артикул),Артикул,"не указан") + ".";
		НоваяСтрока.Ссылка 	  			= Справочники.Номенклатура.НайтиПоРеквизиту("КодСинхронизации",КодОракл);
		НоваяСтрока.Существует 			= НЕ (НоваяСтрока.Ссылка = Справочники.Номенклатура.ПустаяСсылка());
		
		Если НЕ Элемент.Свойства().Получить("char_list") = Неопределено Тогда 
			Если ТипЗнч(Элемент.char_list) = Тип("ОбъектXDTO") Тогда
				Если ТипЗнч(Элемент.char_list.char_item) = Тип("СписокXDTO") Тогда
					
					Для Сч = 0 По Элемент.char_list.char_item.Количество() - 1 Цикл
						
						Если Элемент.char_list.char_item[Сч].c_name = "Вид" ИЛИ Элемент.char_list.char_item[Сч].c_name = "ГОСТ" ИЛИ Элемент.char_list.char_item[Сч].c_name = "Пол" ИЛИ Элемент.char_list.char_item[Сч].c_name = "Учет Киз" Тогда
							
							СтрокаСвойства 					= НоваяСтрока.Строки.Добавить();
							СтрокаСвойства.Использовать 	= 0;
							СтрокаСвойства.ИмяСвойства 		= Элемент.char_list.char_item[Сч].c_name;
							Если ТипЗнч(Элемент.char_list.char_item[Сч].c_val_list) = Тип("СписокXDTO") Тогда
								Для Сч_ = 0 По Элемент.char_list.char_item[Сч].c_val_list.Количество() - 1 Цикл
									ТекущееЗначениеСвойства = Элемент.char_list.char_item[Сч].c_val_list[Сч_].char_val;
									Если ЗначениеЗаполнено(СтрокаСвойства.ЗначениеСвойства) Тогда
										СтрокаСвойства.ЗначениеСвойства = СтрокаСвойства.ЗначениеСвойства + ";" + ТекущееЗначениеСвойства;
									Иначе
										СтрокаСвойства.ЗначениеСвойства = ТекущееЗначениеСвойства;
									КонецЕсли;
								КонецЦикла;
							Иначе
								СтрокаСвойства.ЗначениеСвойства = Элемент.char_list.char_item[Сч].c_val_list.char_val;
							КонецЕсли;
							
							СтрокаСвойства.Представление 	= "Свойство: <<" + СтрокаСвойства.ИмяСвойства + ">>, значение: <<" + СтрокаСвойства.ЗначениеСвойства + ">>";
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					Если Элемент.char_list.char_item.c_name = "Вид" ИЛИ Элемент.char_list.char_item.c_name = "ГОСТ" ИЛИ Элемент.char_list.char_item.c_name = "Пол" ИЛИ Элемент.char_list.char_item.c_name = "Учет Киз" Тогда
						
						СтрокаСвойства 					= НоваяСтрока.Строки.Добавить();
						СтрокаСвойства.Использовать 	= 0;
						СтрокаСвойства.ИмяСвойства 		= Элемент.char_list.char_item.c_name;
						
						Если ТипЗнч(Элемент.char_list.char_item.c_val_list) = Тип("СписокXDTO") Тогда
							Для Сч_ = 0 По Элемент.char_list.char_item.c_val_list.Количество() - 1 Цикл
								ТекущееЗначениеСвойства = Элемент.char_list.char_item.c_val_list[Сч_].char_val;
								Если ЗначениеЗаполнено(СтрокаСвойства.ЗначениеСвойства) Тогда
									СтрокаСвойства.ЗначениеСвойства = СтрокаСвойства.ЗначениеСвойства + ";" + ТекущееЗначениеСвойства;
								Иначе
									СтрокаСвойства.ЗначениеСвойства = ТекущееЗначениеСвойства;
								КонецЕсли;
							КонецЦикла;
						Иначе
							СтрокаСвойства.ЗначениеСвойства = Элемент.char_list.char_item.c_val_list.char_val;
						КонецЕсли;
						
						СтрокаСвойства.Представление 	= "Свойство: <<" + СтрокаСвойства.ИмяСвойства + ">>, значение: <<" + СтрокаСвойства.ЗначениеСвойства + ">>";
						
					КонецЕсли;
				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если (НЕ Элемент.Свойства().Получить("size_list") = Неопределено) Тогда
			
			Если НЕ Элемент.size_list.matrix_name = "NO GRID" Тогда
				
				СтруктураАнтропометрии = ОпрелелитьСтруктуруАнтропометрииНоменклатуры(ТаблицаАнтропометрии,СокрЛП(Элемент.size_list.matrix_name));
				
				НоваяСтрока.ВидАнтропометрии 										= СтруктураАнтропометрии.ВидАнтропометрии;
				НоваяСтрока.ИспользоватьРост 										= СтруктураАнтропометрии.ИспользоватьРост;
				НоваяСтрока.НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе 	= СтруктураАнтропометрии.НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе;
				
				Если ТипЗнч(Элемент.size_list.size_item) = Тип("ОбъектXDTO") Тогда 
					
					НаименованиеМетрики = Элемент.size_list.size_item.size_name;
					КодМетрикиСАП 		= Элемент.size_list.size_item.size_code;
					
					Если НЕ ЗначениеЗаполнено(Элемент.size_list.size_item.size_ora) Тогда
						Продолжить;
					КонецЕсли;
					
					КодМетрикиОракл = Число(Элемент.size_list.size_item.size_ora);
					
					СтрокаМетрик 					= ТаблицаМетрик.Добавить();
					СтрокаМетрик.КодОракл 			= НоваяСтрока.КодОракл;
					СтрокаМетрик.Наименование 		= НаименованиеМетрики;
					СтрокаМетрик.КодМетрикиСАП 		= КодМетрикиСАП;
					СтрокаМетрик.КодМетрикиОракл 	= КодМетрикиОракл;
						
					Если НЕ НоваяСтрока.Ссылка = Справочники.Номенклатура.ПустаяСсылка() Тогда //ищем характеристики
						
						СтрокаМетрик.Ссылка = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(КодМетрикиОракл,,,НоваяСтрока.Ссылка);
						СтрокаМетрик.Существует = НЕ (СтрокаМетрик.Ссылка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
						
					КонецЕсли;
					
					МассивGTIN = Новый Массив;
					
					Если (НЕ Элемент.size_list.size_item.Свойства().Получить("ean_list") = Неопределено) Тогда
						
						Если ТипЗнч(Элемент.size_list.size_item.ean_list.ean_item) = Тип("ОбъектXDTO") Тогда
							
							ТипШтрихкода = Элемент.size_list.size_item.ean_list.ean_item.ean_type;
							Если ТипШтрихкода = "ZG" Тогда
								МассивGTIN.Добавить(Элемент.size_list.size_item.ean_list.ean_item.ean_code);
							КонецЕсли;
						
						Иначе
							
							//цикл по характеристикам номенклатуры
							Для Каждого ЭлементШтрихКод Из Элемент.size_list.size_item.ean_list.ean_item Цикл
								
								ТипШтрихкода = ЭлементШтрихКод.ean_type;
								Если ТипШтрихкода = "ZG" Тогда
									МассивGTIN.Добавить(ЭлементШтрихКод.ean_code);
								Конецесли;
							
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
				
					Если НЕ МассивGTIN.Количество() = 0 Тогда
						СтрокаМетрик.GTIN = СтрСоединить(МассивGTIN,"#");						
					КонецЕсли;
						
				Иначе
					
					//цикл по характеристикам номенклатуры
					Для Каждого ЭлементХарактеристика Из Элемент.size_list.size_item Цикл
						
						НаименованиеМетрики = ЭлементХарактеристика.size_name;
						КодМетрикиСАП 		= ЭлементХарактеристика.size_code;
						
						Если НЕ ЗначениеЗаполнено(ЭлементХарактеристика.size_ora) Тогда
							Продолжить;
						КонецЕсли;
						
						КодМетрикиОракл 	= Число(ЭлементХарактеристика.size_ora);
						
						СтрокаМетрик 					= ТаблицаМетрик.Добавить();
						СтрокаМетрик.КодОракл 			= НоваяСтрока.КодОракл;
						СтрокаМетрик.Наименование 		= НаименованиеМетрики;
						СтрокаМетрик.КодМетрикиСАП 		= КодМетрикиСАП;
						СтрокаМетрик.КодМетрикиОракл 	= КодМетрикиОракл;
						
						Если НЕ НоваяСтрока.Ссылка = Справочники.Номенклатура.ПустаяСсылка() Тогда //ищем характеристики
							
							СтрокаМетрик.Ссылка 	= Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(КодМетрикиОракл,,,НоваяСтрока.Ссылка);
							СтрокаМетрик.Существует = НЕ (СтрокаМетрик.Ссылка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
							
						КонецЕсли;
						
						МассивGTIN = Новый Массив;
						
						Если (НЕ ЭлементХарактеристика.Свойства().Получить("ean_list") = Неопределено) Тогда
							
							Если ТипЗнч(ЭлементХарактеристика.ean_list.ean_item) = Тип("ОбъектXDTO") Тогда
								
								ТипШтрихкода = ЭлементХарактеристика.ean_list.ean_item.ean_type;
								
								Если ТипШтрихкода = "ZG" Тогда
									МассивGTIN.Добавить(ЭлементХарактеристика.ean_list.ean_item.ean_code);
								КонецЕсли;	
								
							Иначе
								
								//цикл по характеристикам номенклатуры
								Для Каждого ЭлементШтрихКод Из ЭлементХарактеристика.ean_list.ean_item Цикл
									
									ТипШтрихкода = ЭлементШтрихКод.ean_type;
									
									Если ТипШтрихкода = "ZG" Тогда
										МассивGTIN.Добавить(ЭлементШтрихКод.ean_code);
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЕсли;
					
						Если НЕ МассивGTIN.Количество() = 0 Тогда
							СтрокаМетрик.GTIN = СтрСоединить(МассивGTIN,"#");						
						КонецЕсли;
					
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				МассивGTIN = Новый Массив;
				
				Если (НЕ Элемент.Свойства().Получить("ean_list") = Неопределено) Тогда
					
					Если ТипЗнч(Элемент.ean_list.ean_item) = Тип("ОбъектXDTO") Тогда
						
						ТипШтрихкода = Элемент.ean_list.ean_item.ean_type;
						
						Если ТипШтрихкода = "ZG" Тогда
							МассивGTIN.Добавить(Элемент.ean_list.ean_item.ean_type);
						КонецЕсли;	
						
					Иначе
						
						//цикл по GTIN номенклатуры
						Для Каждого ЭлементШтрихКод Из Элемент.ean_list.ean_item Цикл
							
							ТипШтрихкода = ЭлементШтрихКод.ean_type;
							
							Если ТипШтрихкода = "ZG" Тогда
								МассивGTIN.Добавить(ЭлементШтрихКод.ean_code);
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ МассивGTIN.Количество() = 0 Тогда
					НоваяСтрока.GTIN = СтрСоединить(МассивGTIN,"#");
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Элемент.Свойства().Получить("complect_component_list") = Неопределено Тогда
			
			Если ТипЗнч(Элемент.complect_component_list.complect_component_item) = Тип("ОбъектXDTO") Тогда
				
				СтрокаКомплектующего					= ТаблицаКомплектующих.Добавить();
				СтрокаКомплектующего.КодОракл 			= Число(Элемент.complect_component_list.complect_component_item.comp_mtnr_id);
				СтрокаКомплектующего.Количество 		= Число(Элемент.complect_component_list.complect_component_item.comp_count);
				СтрокаКомплектующего.КодОраклКомплекта 	= НоваяСтрока.КодОракл;
				СтрокаКомплектующего.Ссылка 			= Справочники.Номенклатура.НайтиПоРеквизиту("КодСинхронизации",СтрокаКомплектующего.КодОракл);
				СтрокаКомплектующего.Существует 		= НЕ (СтрокаКомплектующего.Ссылка = Справочники.Номенклатура.ПустаяСсылка());
				СтрокаКомплектующего.Наименование 		= ?(СтрокаКомплектующего.Существует,СокрЛП(СтрокаКомплектующего.Ссылка.Наименование),"<Не загружен>");
				
			Иначе
				
				//цикл по комплектующим номенклатуры
				Для Каждого ЭлементКомплекта Из Элемент.complect_component_list.complect_component_item Цикл
					
					СтрокаКомплектующего					= ТаблицаКомплектующих.Добавить();
					СтрокаКомплектующего.КодОракл 			= Число(ЭлементКомплекта.comp_mtnr_id);
					СтрокаКомплектующего.Количество 		= Число(ЭлементКомплекта.comp_count);
					СтрокаКомплектующего.КодОраклКомплекта 	= НоваяСтрока.КодОракл;
					СтрокаКомплектующего.Ссылка 			= Справочники.Номенклатура.НайтиПоРеквизиту("КодСинхронизации",СтрокаКомплектующего.КодОракл);
					СтрокаКомплектующего.Существует 		= НЕ (СтрокаКомплектующего.Ссылка = Справочники.Номенклатура.ПустаяСсылка());
					СтрокаКомплектующего.Наименование 		= ?(СтрокаКомплектующего.Существует,СокрЛП(СтрокаКомплектующего.Ссылка.Наименование),"<Не загружен>");
					
				КонецЦикла;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	//Танцюра А.Н. -- №140570 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 1) -- 09.11.2021 <<<
	//Результат = Новый Структура("ДеревоДляЗагрузки, ТаблицаМетрик, ТаблицаКомплектующих", ДеревоДляЗагрузки, ТаблицаМетрик, ТаблицаКомплектующих);
	Результат = Новый Структура("ДеревоДляЗагрузки, ТаблицаМетрик, ТаблицаКомплектующих, ТаблицаНоменклатурныхНомеров", ДеревоДляЗагрузки, ТаблицаМетрик, ТаблицаКомплектующих, ТаблицаНоменклатурныхНомеров);
	//Танцюра А.Н. -- №140570 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 1) -- 09.11.2021 >>>
	
	ВыполнитьАнализНоменклатурыНаСервере(ДеревоДляЗагрузки);
	
	ПоместитьВоВременноеХранилище(Результат,АдресХранилища);
	
КонецПроцедуры

&НаСервере
Функция ОпрелелитьСтруктуруАнтропометрииНоменклатуры(ТаблицаАнтропометрии,ИмяМатрицы)
	
	Если ТаблицаАнтропометрии = Неопределено Тогда
 	    Возврат Новый Структура("ВидАнтропометрии, ИспользоватьРост, НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе", Справочники.ВидыАнтропометрическихСвойств.НеОпределен,Ложь,ЛОЖЬ); 
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаАнтропометрии Цикл
		Если НЕ Найти(ИмяМатрицы,СтрокаТаблицы.МатрицаSAP) = 0 Тогда
			Возврат Новый Структура("ВидАнтропометрии, ИспользоватьРост, НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе", СтрокаТаблицы.ВидСвойства,СтрокаТаблицы.ИспользоватьРост,СтрокаТаблицы.НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("ВидАнтропометрии, ИспользоватьРост, НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе", Справочники.ВидыАнтропометрическихСвойств.НеОпределен,Ложь,ЛОЖЬ);
	
КонецФункции

&НаСервере
Функция СоздатьГруппуНоменклатуры(СтрокаДерева)
	
	ГруппаНоменклатуры 				= Справочники.Номенклатура.СоздатьГруппу();
	ГруппаНоменклатуры.Наименование = СтрокаДерева.Наименование;
	ГруппаНоменклатуры.Код			= СтрокаДерева.КодГруппы;
	Если ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
		ГруппаНоменклатуры.Родитель = СтрокаДерева.Родитель.Ссылка;
	КонецЕсли;
	
	Попытка
		ГруппаНоменклатуры.Записать();
		СтрокаДерева.Примечание = "Корректировка выполнена";
		Возврат ГруппаНоменклатуры.Ссылка;
	Исключение
		СтрокаДерева.Примечание = "ВНИМАНИЕ!!! Ошибка корректировки: " + ОписаниеОшибки();
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьЕдиницуИзмерения(КодОКЕИ)
	
	Если Не ЗначениеЗаполнено(КодОКЕИ) Тогда 
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
		
	БазоваяЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоКоду(КодОКЕИ);
	
	Если БазоваяЕдиница.Пустая() Тогда
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		Макет = Справочники.ЕдиницыИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
		Макет.Записать(ИмяВременногоФайла);
		Дерево = ЗначениеИзФайла(ИмяВременногоФайла);
		
		СтрокаДерева = Дерево.Строки.Найти(КодОКЕИ,"КодЧисловой",Истина);
		Если НЕ СтрокаДерева = Неопределено Тогда
			БазоваяЕдиница = СтрокаДерева.Строки.Добавить();
		КонецЕсли;
		
		СправочникОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		
		Если ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеНациональное) Тогда
			Наименование = СтрокаДерева.УсловноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.УсловноеОбозначениеМеждународное) Тогда
			Наименование = СтрокаДерева.УсловноеОбозначениеМеждународное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеНациональное) Тогда
			Наименование = СтрокаДерева.КодовоеБуквенноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное) Тогда
			Наименование = СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное;
		Иначе
			Наименование = СтрокаДерева.Наименование;
		КонецЕсли;
		
		СправочникОбъект.Наименование            = СтрЗаменить(Наименование,Символы.ПС,"/");
		СправочникОбъект.МеждународноеСокращение = СтрЗаменить(СтрокаДерева.КодовоеБуквенноеОбозначениеМеждународное,Символы.ПС,"/");
		СправочникОбъект.НаименованиеПолное      = СтрЗаменить(СтрокаДерева.Наименование,Символы.ПС,"/");
		СправочникОбъект.Код                     = СтрокаДерева.КодЧисловой;
		
		СправочникОбъект.Записать();

		БазоваяЕдиница = СправочникОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат БазоваяЕдиница;
	
КонецФункции

&НаСервере
Функция СоздатьНоменклатуру(СтрокаДерева)
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить(21,Перечисления.СтатусыСбыта.Разработка);
	СоответствиеСтатусов.Вставить(22,Перечисления.СтатусыСбыта.ОсновнаяПродукция);
	СоответствиеСтатусов.Вставить(23,Перечисления.СтатусыСбыта.ОсновнаяПродукцияПодЗаказ);
	СоответствиеСтатусов.Вставить(24,Перечисления.СтатусыСбыта.ОсновнаяПродукцияОстатки);
	СоответствиеСтатусов.Вставить(25,Перечисления.СтатусыСбыта.ГотоваяПродукцияСнято);
	СоответствиеСтатусов.Вставить(26,Перечисления.СтатусыСбыта.Спецзаказы);
	СоответствиеСтатусов.Вставить(27,Перечисления.СтатусыСбыта.СтраховыеЗапасы);
	СоответствиеСтатусов.Вставить(28,Перечисления.СтатусыСбыта.ДисконтРаспродажаОстаков);
	СоответствиеСтатусов.Вставить(29,Перечисления.СтатусыСбыта.Транзит);
	СоответствиеСтатусов.Вставить(30,Перечисления.СтатусыСбыта.РекламнаяПродукция);
	СоответствиеСтатусов.Вставить(31,Перечисления.СтатусыСбыта.Образцы);
	СоответствиеСтатусов.Вставить(32,Перечисления.СтатусыСбыта.Место);
	СоответствиеСтатусов.Вставить(33,Перечисления.СтатусыСбыта.РаспродажаMSA);
	СоответствиеСтатусов.Вставить(34,Перечисления.СтатусыСбыта.ТоварыПартнеров);
	СоответствиеСтатусов.Вставить(35,Перечисления.СтатусыСбыта.Услуга);
	СоответствиеСтатусов.Вставить(40,Перечисления.СтатусыСбыта.Комплекты);
	СоответствиеСтатусов.Вставить(98,Перечисления.СтатусыСбыта.РасходныеМатериалы);
	СоответствиеСтатусов.Вставить(99,Перечисления.СтатусыСбыта.УдаленТехнически);
	
	НовыйТовар 															= Справочники.Номенклатура.СоздатьЭлемент();
	НовыйТовар.Наименование 			  								= СтрокаДерева.НаименованиеПолное;
	НовыйТовар.УстановитьНовыйКод("00");
	НовыйТовар.КодСинхронизации		    								= СтрокаДерева.КодОракл;
	НовыйТовар.ЕдиницаИзмерения 										= ПолучитьЕдиницуИзмерения(СтрокаДерева.КодОКЕИ);
	НовыйТовар.Родитель 												= СтрокаДерева.Родитель.Ссылка;
	НовыйТовар.НаименованиеПолное										= СтрокаДерева.НаименованиеПолное;
	НовыйТовар.Вес 														= СтрокаДерева.Масса;
	НовыйТовар.Объем													= СтрокаДерева.Объем;
	НовыйТовар.Описание													= СтрокаДерева.Описание;
	НовыйТовар.Артикул													= СтрокаДерева.Артикул;
	НовыйТовар.ВидАнтропометрическогоСвойства							= СтрокаДерева.ВидАнтропометрии;
	НовыйТовар.ИспользоватьРост											= СтрокаДерева.ИспользоватьРост;
	НовыйТовар.НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе 	= СтрокаДерева.НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе;
	НовыйТовар.Поставщик												= Справочники.Контрагенты.ВостокСервис;
	НовыйТовар.СтатусСбыта												= СоответствиеСтатусов.Получить(СтрокаДерева.СтатусСбытаСАП);
	
	Для Каждого СтрокаСвойств Из СтрокаДерева.Строки Цикл
		Если СтрокаСвойств.Использовать = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаСвойств.ИмяСвойства = "Вид" Тогда
			НовыйТовар.ВидСИЗ 	= ПроцедурыРаботыСНормамиСервер.СоздатьВидСИЗ(СтрокаСвойств.ЗначениеСвойства);
		ИначеЕсли СтрокаСвойств.ИмяСвойства = "ГОСТ" Тогда
			МассивГОСТ = ИзСтрокиСРазделителями(СтрокаСвойств.ЗначениеСвойства);
			Для Каждого ЭлементМассива Из МассивГОСТ Цикл
				НоваяСтрока 		= НовыйТовар.ГОСТы.Добавить();
				НоваяСтрока.ГОСТ 	= ПроцедурыРаботыСНормамиСервер.ПолучитьГОСТ(ЭлементМассива);
			КонецЦикла;
		ИначеЕсли СтрокаСвойств.ИмяСвойства = "Пол" Тогда
			НовыйТовар.Пол 		= ПроцедурыРаботыСНормамиСервер.ПолучитьПол(СтрокаСвойств.ЗначениеСвойства);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НовыйТовар.Записать();
		СтрокаДерева.Примечание = "Корректировка выполнена";
		Возврат НовыйТовар.Ссылка;
	Исключение
		СтрокаДерева.Примечание = "ВНИМАНИЕ!!! Ошибка корректировки: " + ОписаниеОшибки();
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ВыполнитьЗагрузкуНоменклатурыРекурсивно(Строки,УспешнаяЗагрузка,МассивНоменклатуры)
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить(21,Перечисления.СтатусыСбыта.Разработка);
	СоответствиеСтатусов.Вставить(22,Перечисления.СтатусыСбыта.ОсновнаяПродукция);
	СоответствиеСтатусов.Вставить(23,Перечисления.СтатусыСбыта.ОсновнаяПродукцияПодЗаказ);
	СоответствиеСтатусов.Вставить(24,Перечисления.СтатусыСбыта.ОсновнаяПродукцияОстатки);
	СоответствиеСтатусов.Вставить(25,Перечисления.СтатусыСбыта.ГотоваяПродукцияСнято);
	СоответствиеСтатусов.Вставить(26,Перечисления.СтатусыСбыта.Спецзаказы);
	СоответствиеСтатусов.Вставить(27,Перечисления.СтатусыСбыта.СтраховыеЗапасы);
	СоответствиеСтатусов.Вставить(28,Перечисления.СтатусыСбыта.ДисконтРаспродажаОстаков);
	СоответствиеСтатусов.Вставить(29,Перечисления.СтатусыСбыта.Транзит);
	СоответствиеСтатусов.Вставить(30,Перечисления.СтатусыСбыта.РекламнаяПродукция);
	СоответствиеСтатусов.Вставить(31,Перечисления.СтатусыСбыта.Образцы);
	СоответствиеСтатусов.Вставить(32,Перечисления.СтатусыСбыта.Место);
	СоответствиеСтатусов.Вставить(33,Перечисления.СтатусыСбыта.РаспродажаMSA);
	СоответствиеСтатусов.Вставить(34,Перечисления.СтатусыСбыта.ТоварыПартнеров);
	СоответствиеСтатусов.Вставить(35,Перечисления.СтатусыСбыта.Услуга);
	СоответствиеСтатусов.Вставить(40,Перечисления.СтатусыСбыта.Комплекты);
	СоответствиеСтатусов.Вставить(98,Перечисления.СтатусыСбыта.РасходныеМатериалы);
	СоответствиеСтатусов.Вставить(99,Перечисления.СтатусыСбыта.УдаленТехнически);
	
	Для Каждого СтрокаДерева Из Строки Цикл
		
		Если СтрокаДерева.Использовать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(СтрокаДерева.Примечание) Тогда //не проанализированные строки пропускаем
		//	Продолжить;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.КодГруппы) Тогда //это группа номенклатуры
			
			Если Найти(ВРег(СтрокаДерева.Примечание),"КОРРЕКТИРОВКА") = 0 Тогда 
				// Найти(ВРег(СтрокаДерева.Примечание),"КОРРЕКТИРОВКА") = 0 - это отсечка на возможные примечания:
				// "Корректировка выполнена", "Корректировка не требуется", "Анализ и корректировка отключены"
				Если НЕ ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
					СтрокаДерева.Ссылка = СоздатьГруппуНоменклатуры(СтрокаДерева);
					Если НЕ ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
						УспешнаяЗагрузка = Ложь;
					КонецЕсли;
				Иначе
					Если НЕ СокрЛП(СтрокаДерева.Наименование) = СокрЛП(СтрокаДерева.Ссылка.Наименование) Тогда
						ОбъектГруппа 				= СтрокаДерева.Ссылка.ПолучитьОбъект();
						ОбъектГруппа.Наименование 	= СтрокаДерева.Наименование;
						Попытка
							ОбъектГруппа.Записать();
							СтрокаДерева.Примечание = "Корректировка выполнена";
							СтрокаДерева.Существует = Истина;
						Исключение
							СтрокаДерева.Примечание = "ВНИМАНИЕ!!! Ошибка корректировки: " + ОписаниеОшибки();
							УспешнаяЗагрузка = Ложь;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаДерева.КодОракл) Тогда //это номенклатура
				
				//Если Найти(ВРег(СтрокаДерева.Примечание),"КОРРЕКТИРОВКА") = 0 Тогда
					// Найти(ВРег(СтрокаДерева.Примечание),"КОРРЕКТИРОВКА") = 0 - это отсечка на возможные примечания:
					// "Корректировка выполнена", "Корректировка не требуется", "Анализ и корректировка отключены"
 					Если НЕ ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
						СтрокаДерева.Ссылка = СоздатьНоменклатуру(СтрокаДерева);
						Если НЕ ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
							УспешнаяЗагрузка = Ложь;
						Иначе
							МассивНоменклатуры.Добавить(СтрокаДерева.КодОракл);
							СтрокаДерева.Существует = Истина;
						КонецЕсли;
					КонецЕсли;	
						
					//Иначе
						//Если НЕ СтрокаДерева.Примечание = "Корректировка не требуется" Тогда
							ОбъектНоменклатура 															= СтрокаДерева.Ссылка.ПолучитьОбъект();
							ОбъектНоменклатура.Наименование 											= СокрЛП(СтрокаДерева.НаименованиеПолное);
							ОбъектНоменклатура.Артикул 													= СокрЛП(СтрокаДерева.Артикул);
							ОбъектНоменклатура.НаименованиеПолное 										= СокрЛП(СтрокаДерева.НаименованиеПолное);
							ОбъектНоменклатура.Родитель 												= СтрокаДерева.Родитель.Ссылка;
							ОбъектНоменклатура.Описание 												= СокрЛП(СтрокаДерева.Описание);
							ОбъектНоменклатура.ЕдиницаИзмерения											= ПолучитьЕдиницуИзмерения(СтрокаДерева.КодОКЕИ);
							//ОбъектНоменклатура.ВидАнтропометрическогоСвойства							= СтрокаДерева.ВидАнтропометрии;
							//ОбъектНоменклатура.ИспользоватьРост										= СтрокаДерева.ИспользоватьРост;
							ОбъектНоменклатура.НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе	= СтрокаДерева.НеИспользоватьВидАнтропометрическогоСвойстваПриАнализе;
							ОбъектНоменклатура.Поставщик												= Справочники.Контрагенты.ВостокСервис;
							ОбъектНоменклатура.СтатусСбыта												= СоответствиеСтатусов.Получить(СтрокаДерева.СтатусСбытаСАП);
							ОбъектНоменклатура.НавигационнаяСсылка										= СокрЛП(СтрокаДерева.НавигационнаяСсылка); 
							ОбъектНоменклатура.Вес														= СтрокаДерева.Масса;
							ОбъектНоменклатура.Объем													= СтрокаДерева.Объем;
							
							Для Каждого СтрокаСвойств Из СтрокаДерева.Строки Цикл
								Если СтрокаСвойств.Использовать = 0 Тогда
									Продолжить;
								КонецЕсли;
								Если СтрокаСвойств.ИмяСвойства = "Вид" Тогда
									ОбъектНоменклатура.ВидСИЗ 	= ПроцедурыРаботыСНормамиСервер.СоздатьВидСИЗ(СтрокаСвойств.ЗначениеСвойства);
								ИначеЕсли СтрокаСвойств.ИмяСвойства = "ГОСТ" Тогда
									ОбъектНоменклатура.ГОСТы.Очистить();
									МассивГОСТ = ИзСтрокиСРазделителями(СтрокаСвойств.ЗначениеСвойства);
									Для Каждого ЭлементМассива Из МассивГОСТ Цикл
										НоваяСтрока 		= ОбъектНоменклатура.ГОСТы.Добавить();
										НоваяСтрока.ГОСТ 	= ПроцедурыРаботыСНормамиСервер.ПолучитьГОСТ(ЭлементМассива);
									КонецЦикла;
								ИначеЕсли СтрокаСвойств.ИмяСвойства = "Пол" Тогда
									ОбъектНоменклатура.Пол 	= ПроцедурыРаботыСНормамиСервер.ПолучитьПол(СтрокаСвойств.ЗначениеСвойства);
								ИначеЕсли СтрокаСвойств.ИмяСвойства = "Учет Киз" Тогда
									Если СтрокаСвойств.ЗначениеСвойства = "Ид. Знак" Тогда //обязательная маркировка
										Если НЕ СтрНайти(ОбъектНоменклатура.Родитель.Код,"01_01") = 0 Тогда //это одежда
											ОбъектНоменклатура.ВидМаркированнойНоменклатуры = ПолучитьВидМаркированнойНоменклатуры("Одежда");
										ИначеЕсли НЕ СтрНайти(ОбъектНоменклатура.Родитель.Код,"01_02") = 0 Тогда //это обувь
											ОбъектНоменклатура.ВидМаркированнойНоменклатуры = ПолучитьВидМаркированнойНоменклатуры("Обувь");
										КонецЕсли;
									КонецЕсли;	
								КонецЕсли;
							КонецЦикла;
							
							Если НЕ ЗначениеЗаполнено(ОбъектНоменклатура.ВидСИЗ) Тогда
								ОбъектНоменклатура.ВидСИЗ = ПроцедурыРаботыСНормамиСервер.СоздатьВидСИЗ(ОбъектНоменклатура.Наименование);
							КонецЕсли;
							
							Попытка
								ОбъектНоменклатура.Записать();
								СтрокаДерева.Примечание = "Корректировка выполнена";
								МассивНоменклатуры.Добавить(СтрокаДерева.КодОракл);
								Если ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
									УстановитьGTIN(ОбъектНоменклатура.Ссылка,Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),СтрокаДерева.GTIN);
								КонецЕсли;
							Исключение
								СтрокаДерева.Примечание = "ВНИМАНИЕ!!! Ошибка корректировки: " + ОписаниеОшибки();
								УспешнаяЗагрузка = Ложь;
							КонецПопытки;
						//Иначе
						//	МассивНоменклатуры.Добавить(СтрокаДерева.КодОракл);
						//КонецЕсли;
					//КонецЕсли;
					
				//КонецЕсли;
				
			Иначе
				
				//Если НЕ Найти(СтрокаДерева.Представление,"Свойства номенклатуры") = 0 Тогда //ветка свойств номенклатуры
				//Иначе
				//	
				//	Если НЕ Найти(СтрокаДерева.Представление,"Характеристики номенклатуры") = 0 Тогда
				//	Иначе
				//		
				//		Если ЗначениеЗаполнено(СтрокаДерева.ИмяСвойства) Тогда //это свойство номенклатуры
				//			Если Найти(ВРег(СтрокаДерева.Примечание),"КОРРЕКТИРОВКА") = 0 Тогда
				//				// Найти(ВРег(СтрокаДерева.Примечание),"КОРРЕКТИРОВКА") = 0 - это отсечка на возможные примечания:
				//				// "Корректировка выполнена", "Корректировка не требуется", "Анализ и корректировка отключены"
				//				//УстановитьЗначениеСвойстваОбъекта(СтрокаДерева);
				//			КонецЕсли;
				//		Иначе
				//			Если ЗначениеЗаполнено(СтрокаДерева.КодМетрикиОракл) Тогда //это характеристика номенклатуры
				//				Если Найти(ВРег(СтрокаДерева.Примечание),"КОРРЕКТИРОВКА") = 0 Тогда
				//					// Найти(ВРег(СтрокаДерева.Примечание),"КОРРЕКТИРОВКА") = 0 - это отсечка на возможные примечания:
				//					// "Корректировка выполнена", "Корректировка не требуется", "Анализ и корректировка отключены"
				//					Если НЕ ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
				//						СтрокаДерева.Ссылка = СоздатьХарактеристикуНоменклатуры(СтрокаДерева);
				//						Если НЕ ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
				//							УспешнаяЗагрузка = Ложь;
				//						КонецЕсли;
				//					Иначе
				//						Объект 						= СтрокаДерева.Ссылка.ПолучитьОбъект();
				//						Объект.Наименование 		= СокрЛП(СтрокаДерева.Наименование);
				//						Попытка
				//							Объект.Записать();
				//							СтрокаДерева.Примечание = "Корректировка выполнена";
				//						Исключение
				//							СтрокаДерева.Примечание = "ВНИМАНИЕ!!! Ошибка корректировки: " + ОписаниеОшибки();
				//							УспешнаяЗагрузка = Ложь;
				//						КонецПопытки;
				//					КонецЕсли;
				//				КонецЕсли;
				//			КонецЕсли;
				//		КонецЕсли;
				//		
				//	КонецЕсли;
				//	
				//КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВыполнитьЗагрузкуНоменклатурыРекурсивно(СтрокаДерева.Строки,УспешнаяЗагрузка,МассивНоменклатуры);
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьВидМаркированнойНоменклатуры(ИмяВида)
	
	ВидМаркированнойНоменклатуры = Справочники.ВидыМаркированнойНоменклатуры.НайтиПоНаименованию(ИмяВида);
	
	Если ВидМаркированнойНоменклатуры.Пустая() Тогда
		
		ВидМаркированнойНоменклатуры = Справочники.ВидыМаркированнойНоменклатуры.СоздатьЭлемент();
		ВидМаркированнойНоменклатуры.Наименование = ИмяВида;
		Если ИмяВида = "Одежда" Тогда
			ВидМаркированнойНоменклатуры.ДатаНачалаОбязательнойМаркировки = Дата('20500101');
		ИначеЕсли ИмяВида = "Обувь" Тогда
			ВидМаркированнойНоменклатуры.ДатаНачалаОбязательнойМаркировки = ТекущаяДата();
		КонецЕсли;
		ВидМаркированнойНоменклатуры.УстановитьНовыйКод();
		ВидМаркированнойНоменклатуры.Записать();
		
		ВидМаркированнойНоменклатуры = ВидМаркированнойНоменклатуры.Ссылка;
		
	КонецЕсли;
	
	Возврат ВидМаркированнойНоменклатуры;
	
КонецФункции	

&НаСервере
Процедура ВыполнитьЗагрузкуНоменклатуры(ПараметрыЗагрузки,АдресХранилища) Экспорт
 
	УспешнаяЗагрузка = Истина;
	
	МассивНоменклатуры = Новый Массив;
	
	ВыполнитьЗагрузкуНоменклатурыРекурсивно(ПараметрыЗагрузки.ДеревоДляЗагрузки.Строки,УспешнаяЗагрузка,МассивНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаХарактеристик.КодОракл,
	|	ТаблицаХарактеристик.КодМетрикиСАП,
	|	ТаблицаХарактеристик.КодМетрикиОракл,
	|	ТаблицаХарактеристик.Существует,
	|	ТаблицаХарактеристик.Наименование,
	|	ТаблицаХарактеристик.GTIN,
	|	ТаблицаХарактеристик.Ссылка
	|ПОМЕСТИТЬ ТаблицаХарактеристик
	|ИЗ
	|	&ТаблицаХарактеристик КАК ТаблицаХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаХарактеристик.КодОракл КАК КодОракл,
	|	ТаблицаХарактеристик.КодМетрикиСАП,
	|	ТаблицаХарактеристик.КодМетрикиОракл КАК КодМетрикиОракл,
	|	ТаблицаХарактеристик.Существует,
	|	ТаблицаХарактеристик.Наименование КАК Наименование,
	|	ТаблицаХарактеристик.GTIN КАК GTIN,
	|	ТаблицаХарактеристик.Ссылка,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	ТаблицаХарактеристик КАК ТаблицаХарактеристик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ТаблицаХарактеристик.КодОракл = Номенклатура.КодСинхронизации
	|ГДЕ
	|	ТаблицаХарактеристик.КодОракл В(&МассивНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодОракл";
	
	Запрос.УстановитьПараметр("ТаблицаХарактеристик",	ПараметрыЗагрузки.ТаблицаХарактеристик_);
	Запрос.УстановитьПараметр("МассивНоменклатуры",		МассивНоменклатуры);
	
	ТаблицаДляЗагрузкиМетрик = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыДляЗагрузкиМетрик Из ТаблицаДляЗагрузкиМетрик Цикл
		
		СоздатьХарактеристикуНоменклатуры(СтрокаТаблицыДляЗагрузкиМетрик);
		МассивСтрок = ПараметрыЗагрузки.ТаблицаХарактеристик_.НайтиСтроки(Новый Структура("КодОракл, КодМетрикиОракл",СтрокаТаблицыДляЗагрузкиМетрик.КодОракл,СтрокаТаблицыДляЗагрузкиМетрик.КодМетрикиОракл));
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(МассивСтрок[0],СтрокаТаблицыДляЗагрузкиМетрик);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыДляЗагрузкиМетрик.GTIN) Тогда
			
			УстановитьGTIN(СтрокаТаблицыДляЗагрузкиМетрик.Ссылка.Владелец,СтрокаТаблицыДляЗагрузкиМетрик.Ссылка,СтрокаТаблицыДляЗагрузкиМетрик.GTIN);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//загрузка комплектующих
	ТаблицаКомплектующих = ПараметрыЗагрузки.ТаблицаКомплектующих.Скопировать();
	ТаблицаКомплектующих.Свернуть("КодОраклКомплекта");
	
	Для Каждого СтрокаТаблицыКомплектующих Из ТаблицаКомплектующих Цикл
		
		ТекущийКомплект = Справочники.Номенклатура.НайтиПоРеквизиту("КодСинхронизации",СтрокаТаблицыКомплектующих.КодОраклКомплекта);
		
		Если ТекущийКомплект.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		//проверка необходимости обработки номенклатуры
		Если МассивНоменклатуры.Найти(ТекущийКомплект.КодСинхронизации) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КомплектОбъект = ТекущийКомплект.ПолучитьОбъект();
		КомплектОбъект.Комплектующие.Очистить();
		
		//ищем комплектующие
		СтруктураПоиска = Новый Структура("КодОраклКомплекта",СтрокаТаблицыКомплектующих.КодОраклКомплекта);
		
		НайденныеСтроки = ПараметрыЗагрузки.ТаблицаКомплектующих.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Ссылка) Тогда
				СтрокаДерева = ПараметрыЗагрузки.ДеревоДляЗагрузки.Строки.Найти(НайденнаяСтрока.КодОракл,"КодОракл",Истина);
				Если СтрокаДерева = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДерева.Использовать = 1;
				УстановитьИспользованиеПодчиненных(СтрокаДерева);
				ВыполнитьЗагрузкуНоменклатурыРекурсивно(СтрокаДерева.Родитель.Строки,УспешнаяЗагрузка,МассивНоменклатуры);
				НайденнаяСтрока.Ссылка 			= Справочники.Номенклатура.НайтиПоРеквизиту("КодСинхронизации", НайденнаяСтрока.КодОракл);
				НайденнаяСтрока.Наименование 	= СокрЛП(НайденнаяСтрока.Ссылка.Наименование);
				НайденнаяСтрока.Существует 		= Истина;
			КонецЕсли;
			
			НоваяСтрока 				= КомплектОбъект.Комплектующие.Добавить();
			НоваяСтрока.Номенклатура 	= НайденнаяСтрока.Ссылка;
			НоваяСтрока.Количество 		= НайденнаяСтрока.Количество;
			
		КонецЦикла;
		
		КомплектОбъект.Комплект = Истина;
		КомплектОбъект.Записать();
		
	КонецЦикла;

	//Танцюра А.Н. -- №140570 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 1) -- 09.11.2021 <<<
	Если ЗначениеЗаполнено(ПараметрыЗагрузки.Организация) Тогда
		ЗагрузитьНоменклатурныеНомера(МассивНоменклатуры,ПараметрыЗагрузки.Организация,ПараметрыЗагрузки.ТаблицаНоменклатурныхНомеров);
	КонецЕсли;
	//Танцюра А.Н. -- №140570 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 1) -- 09.11.2021 >>>
	
	РезультатЗагрузки = Новый Структура("ДеревоДляЗагрузки, УспешнаяЗагрузка, ТаблицаХарактеристик, ТаблицаКомплектующих", ПараметрыЗагрузки.ДеревоДляЗагрузки, УспешнаяЗагрузка, ПараметрыЗагрузки.ТаблицаХарактеристик_, ПараметрыЗагрузки.ТаблицаКомплектующих);
	
	ПоместитьВоВременноеХранилище(РезультатЗагрузки,АдресХранилища);	
	
КонецПроцедуры

//Танцюра А.Н. -- №140570 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 1) -- 09.11.2021 <<<

Процедура ЗагрузитьНоменклатурныеНомера(МассивНоменклатуры,Организация,ТаблицаНоменклатурныхНомеров)  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.КодСинхронизации В(&МассивНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
	|	ХарактеристикиНоменклатуры.Владелец КАК Владелец
	|ПОМЕСТИТЬ ВТ_Размеры
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец.КодСинхронизации В(&МассивНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурныхНомеров.КодОракл КАК КодОракл,
	|	ТаблицаНоменклатурныхНомеров.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ТаблицаНоменклатурныхНомеров.НаименованиеОрганизации КАК НаименованиеОрганизации
	|ПОМЕСТИТЬ ВТ_НоменклатурныеНомера
	|ИЗ
	|	&ТаблицаНоменклатурныхНомеров КАК ТаблицаНоменклатурныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатурныеНомераОрганизаций.Организация КАК Организация,
	|	НоменклатурныеНомераОрганизаций.Номенклатура КАК Номенклатура,
	|	НоменклатурныеНомераОрганизаций.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	НоменклатурныеНомераОрганизаций.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	НоменклатурныеНомераОрганизаций.НаименованиеОрганизации КАК НаименованиеОрганизации
	|ПОМЕСТИТЬ ВТ_ЗагруженныеНоменклатурныеНомера
	|ИЗ
	|	РегистрСведений.НоменклатурныеНомераОрганизаций КАК НоменклатурныеНомераОрганизаций
	|ГДЕ
	|	НоменклатурныеНомераОрганизаций.Организация = &Организация
	|	И НоменклатурныеНомераОрганизаций.Номенклатура.КодСинхронизации В(&МассивНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ВТ_Номенклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_Размеры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатуры,
	|	ВТ_НоменклатурныеНомера.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_НоменклатурныеНомера.НаименованиеОрганизации КАК НаименованиеОрганизации
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Размеры КАК ВТ_Размеры
	|		ПО ВТ_Номенклатура.Ссылка = ВТ_Размеры.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатурныеНомера КАК ВТ_НоменклатурныеНомера
	|		ПО ВТ_Номенклатура.Ссылка.КодСинхронизации = ВТ_НоменклатурныеНомера.КодОракл
	|ГДЕ
	|	НЕ ВТ_НоменклатурныеНомера.КодОракл ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Организация КАК Организация,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Результат.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_Результат.НаименованиеОрганизации КАК НаименованиеОрганизации
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗагруженныеНоменклатурныеНомера КАК ВТ_ЗагруженныеНоменклатурныеНомера
	|		ПО ВТ_Результат.Организация = ВТ_ЗагруженныеНоменклатурныеНомера.Организация
	|			И ВТ_Результат.Номенклатура = ВТ_ЗагруженныеНоменклатурныеНомера.Номенклатура
	|			И ВТ_Результат.ХарактеристикаНоменклатуры = ВТ_ЗагруженныеНоменклатурныеНомера.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ЗагруженныеНоменклатурныеНомера.НоменклатурныйНомер ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ВТ_Результат.НоменклатурныйНомер = ВТ_ЗагруженныеНоменклатурныеНомера.НоменклатурныйНомер
	|					И НЕ ВТ_Результат.НаименованиеОрганизации = ВТ_ЗагруженныеНоменклатурныеНомера.НаименованиеОрганизации
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", 			МассивНоменклатуры);
	Запрос.УстановитьПараметр("Организация", 					Организация);
	Запрос.УстановитьПараметр("ТаблицаНоменклатурныхНомеров", 	ТаблицаНоменклатурныхНомеров);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		НаборЗаписей = РегистрыСведений.НоменклатурныеНомераОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицыЗапроса.Номенклатура);
		НаборЗаписей.Отбор.ХарактеристикаНоменклатуры.Установить(СтрокаТаблицыЗапроса.ХарактеристикаНоменклатуры);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись 			 				= НаборЗаписей.Добавить();
			НоваяЗапись.Организация 				= Организация;
			НоваяЗапись.Номенклатура				= СтрокаТаблицыЗапроса.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры	= СтрокаТаблицыЗапроса.ХарактеристикаНоменклатуры;
			НоваяЗапись.НоменклатурныйНомер			= СтрокаТаблицыЗапроса.НоменклатурныйНомер;
			НоваяЗапись.НаименованиеОрганизации		= СтрокаТаблицыЗапроса.НаименованиеОрганизации;
			
		Иначе
			
			НоваяЗапись 			 				= НаборЗаписей[0];
			НоваяЗапись.Организация 				= Организация;
			НоваяЗапись.Номенклатура				= СтрокаТаблицыЗапроса.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры	= СтрокаТаблицыЗапроса.ХарактеристикаНоменклатуры;
			НоваяЗапись.НоменклатурныйНомер			= СтрокаТаблицыЗапроса.НоменклатурныйНомер;
			НоваяЗапись.НаименованиеОрганизации		= СтрокаТаблицыЗапроса.НаименованиеОрганизации;
			
		КонецЕсли;
	
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;	
	
КонецПроцедуры    

//Танцюра А.Н. -- №140570 Доработка в обработке "Загрузка номенклатуры "Восток-Сервис" (часть 1) -- 09.11.2021 >>>

&НаСервере
Процедура УстановитьGTIN(Номенклатура,ХарактеристикаНоменклатуры,GTIN)
	
	МассивGTIN = СтрРазделить(GTIN,"#",Ложь);
	
	Если МассивGTIN.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ЭлементМассива Из МассивGTIN Цикл
		
		НаборЗаписей = РегистрыСведений.GTINНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.GTIN.Установить(ЭлементМассива);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись 							= НаборЗаписей.Добавить();
			НоваяЗапись.GTIN 						= ЭлементМассива;
			НоваяЗапись.Номенклатура 				= Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;
			
		Иначе
			
			НаборЗаписей[0].Номенклатура 				= Номенклатура;
			НаборЗаписей[0].ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьИспользованиеПодчиненных(СтрокаДерева) 
	
	ДочерниеСтроки = СтрокаДерева.Строки;
	Для каждого Элемент Из ДочерниеСтроки Цикл
		Элемент.Использовать = СтрокаДерева.Использовать;
		УстановитьИспользованиеПодчиненных(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМетрику(КодМетрики,НаименованиеМетрики)
	
	ТекущаяМетрика = Справочники.Метрики.НайтиПоКоду(КодМетрики);
	
	Если ТекущаяМетрика.Пустая() Тогда
		
		НоваяМетрика 				= Справочники.Метрики.СоздатьЭлемент();
		НоваяМетрика.Наименование 	= НаименованиеМетрики;
		НоваяМетрика.Код 			= КодМетрики;
		НоваяМетрика.Записать();
		
		ТекущаяМетрика = НоваяМетрика.Ссылка;
		
		Сообщить("Создана метрика: " + ТекущаяМетрика.Наименование + " с кодом: " + ТекущаяМетрика.Код);
		
	КонецЕсли;
	
	Возврат ТекущаяМетрика;
	
КонецФункции

&НаСервере
Процедура СоздатьХарактеристикуНоменклатуры(СтрокаТаблицы)
	
	Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(СтрокаТаблицы.КодМетрикиОракл,,,СтрокаТаблицы.Номенклатура);
	
	Метрика = ПолучитьМетрику(СтрокаТаблицы.КодМетрикиОракл,СтрокаТаблицы.Наименование);
	
	Если Характеристика.Пустая() Тогда
		НоваяХарактеристика 			= Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		НоваяХарактеристика.Владелец 	= СтрокаТаблицы.Номенклатура;
		НоваяХарактеристика.Код 		= СтрокаТаблицы.КодМетрикиОракл;
	Иначе
		НоваяХарактеристика = Характеристика.ПолучитьОбъект();
	КонецЕсли;
	
	НоваяХарактеристика.КодSAP 			= СтрокаТаблицы.КодМетрикиСАП;
	НоваяХарактеристика.Наименование 	= СтрокаТаблицы.Наименование;
	НоваяХарактеристика.Метрика 		= Метрика;
	
	Попытка
		НоваяХарактеристика.Записать();
		СтрокаТаблицы.Ссылка 		= НоваяХарактеристика.Ссылка;
		СтрокаТаблицы.Существует 	= Истина;
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ИзСтрокиСРазделителями(Значение,Разделитель = ";")
	
	ДлинаРазделителя = СтрДлина(Разделитель);
	
	Рез = Новый Массив();
	Стр = СокрЛП(Значение);
	
	Если Стр = "" Тогда
		Возврат Рез; 
	КонецЕсли; 
	
	Поз = Найти(Стр,Разделитель);
	Пока Поз > 0 Цикл
		Рез.Добавить(СокрЛП(Лев(Стр,Поз-1)));
		Стр = Прав(Стр,СтрДлина(Стр) - Поз - ДлинаРазделителя + 1);
		Поз = Найти(Стр,Разделитель);
	КонецЦикла;
	
	Рез.Добавить(СокрЛП(Стр));
	
	Возврат Рез;
	
КонецФункции
