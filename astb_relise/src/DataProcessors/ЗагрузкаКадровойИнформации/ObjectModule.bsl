#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Функция ПолучитьДатуИзСтроки(СтрДата) Экспорт
	
	Попытка 
		Рез = Дата(Прав(СтрДата,4) + Сред(СтрДата,4,2) + Лев(СтрДата,2));
	Исключение
		Рез = Дата('00010101');
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции // ПолучитьДатуИзПоля()

Функция ПолучитьОрганизацию(ИНН, КПП) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И Организации.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("КПП",КПП);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить()[0].Организация;
	КонецЕсли;
	
КонецФункции	

Процедура ПрочитатьДанныеВБазе() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПодразделений.division_name КАК division_name,
	|	ТаблицаПодразделений.division_code КАК division_code,
	|	ТаблицаПодразделений.owner_division КАК owner_division,
	|	ТаблицаПодразделений.division_actual КАК division_actual,
	|	ТаблицаПодразделений.division_mvz_name КАК division_mvz_name,
	|	ТаблицаПодразделений.division_mvz_code КАК division_mvz_code,
	|	ТаблицаПодразделений.Ошибка КАК Ошибка
	|ПОМЕСТИТЬ ВТ_ТаблицаПодразделений
	|ИЗ
	|	&ТаблицаПодразделений КАК ТаблицаПодразделений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДолжностей.job_name КАК job_name,
	|	ТаблицаДолжностей.job_code КАК job_code,
	|	ТаблицаДолжностей.job_okpdtr КАК job_okpdtr,
	|	ТаблицаДолжностей.Ошибка КАК Ошибка
	|ПОМЕСТИТЬ ВТ_ТаблицаДолжностей
	|ИЗ
	|	&ТаблицаДолжностей КАК ТаблицаДолжностей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРабочихМест.workplace_name КАК workplace_name,
	|	ТаблицаРабочихМест.workplace_code КАК workplace_code,
	|	ТаблицаРабочихМест.Ошибка КАК Ошибка
	|ПОМЕСТИТЬ ВТ_ТаблицаРабочихМест
	|ИЗ
	|	&ТаблицаРабочихМест КАК ТаблицаРабочихМест
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСотрудников.worker_name КАК worker_name,
	|	ТаблицаСотрудников.worker_surname КАК worker_surname,
	|	ТаблицаСотрудников.worker_family КАК worker_family,
	|	ТаблицаСотрудников.worker_code КАК worker_code,
	|	ТаблицаСотрудников.worker_snils КАК worker_snils,
	|	ТаблицаСотрудников.worker_sex КАК worker_sex,
	|	ТаблицаСотрудников.worker_bday КАК worker_bday,
	|	ТаблицаСотрудников.worker_mvz_name КАК worker_mvz_name,
	|	ТаблицаСотрудников.worker_mvz_code КАК worker_mvz_code,
	|	ТаблицаСотрудников.Ошибка КАК Ошибка
	|ПОМЕСТИТЬ ВТ_ТаблицаСотрудников
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШтатногоРасписания.division_code КАК division_code,
	|	ТаблицаШтатногоРасписания.job_code КАК job_code,
	|	ТаблицаШтатногоРасписания.vacancy КАК vacancy,
	|	ТаблицаШтатногоРасписания.date КАК date,
	|	ТаблицаШтатногоРасписания.Ошибка КАК Ошибка
	|ПОМЕСТИТЬ ВТ_ТаблицаШтатногоРасписания
	|ИЗ
	|	&ТаблицаШтатногоРасписания КАК ТаблицаШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.document_type КАК document_type,
	|	ТаблицаДокументов.document_date КАК document_date,
	|	ТаблицаДокументов.document_number КАК document_number,
	|	ТаблицаДокументов.document_note КАК document_note,
	|	ТаблицаДокументов.document_date_begin КАК document_date_begin,
	|	ТаблицаДокументов.document_date_end КАК document_date_end,
	|	ТаблицаДокументов.Ошибка КАК Ошибка
	|ПОМЕСТИТЬ ВТ_ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоставаДокументов.document_type КАК document_type,
	|	ТаблицаСоставаДокументов.document_date КАК document_date,
	|	ТаблицаСоставаДокументов.document_number КАК document_number,
	|	ТаблицаСоставаДокументов.document_worker_snils КАК document_worker_snils,
	|	ТаблицаСоставаДокументов.document_division_code КАК document_division_code,
	|	ТаблицаСоставаДокументов.document_job_code КАК document_job_code,
	|	ТаблицаСоставаДокументов.document_vacancy КАК document_vacancy,
	|	ТаблицаСоставаДокументов.document_old_division_code КАК document_old_division_code,
	|	ТаблицаСоставаДокументов.document_old_job_code КАК document_old_job_code,
	|	ТаблицаСоставаДокументов.document_old_workplace_code КАК document_old_workplace_code,
	|	ТаблицаСоставаДокументов.document_workplace_code КАК document_workplace_code,
	|	ТаблицаСоставаДокументов.document_old_vacancy КАК document_old_vacancy,
	|	ТаблицаСоставаДокументов.date_end КАК date_end,
	|	ТаблицаСоставаДокументов.Ошибка КАК Ошибка
	|ПОМЕСТИТЬ ВТ_ТаблицаСоставаДокументов
	|ИЗ
	|	&ТаблицаСоставаДокументов КАК ТаблицаСоставаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_Подразделения
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МВЗ.Ссылка КАК МВЗ,
	|	МВЗ.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_МВЗ
	|ИЗ
	|	Справочник.МВЗ КАК МВЗ
	|ГДЕ
	|	МВЗ.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМестаАСТБ.Ссылка КАК РабочееМесто,
	|	РабочиеМестаАСТБ.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_РабочиеМеста
	|ИЗ
	|	Справочник.РабочиеМестаАСТБ КАК РабочиеМестаАСТБ
	|ГДЕ
	|	РабочиеМестаАСТБ.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровоеПеремещение.Ссылка КАК Документ,
	|	КадровоеПеремещение.ВходящийНомер КАК ВходящийНомер,
	|	КадровоеПеремещение.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ПОМЕСТИТЬ ВТ_Перемещения
	|ИЗ
	|	Документ.КадровоеПеремещение КАК КадровоеПеремещение
	|ГДЕ
	|	КадровоеПеремещение.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтсутствиеНаРабочемМесте.Ссылка КАК Документ,
	|	ОтсутствиеНаРабочемМесте.ВходящийНомер КАК ВходящийНомер,
	|	ОтсутствиеНаРабочемМесте.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ПОМЕСТИТЬ ВТ_Отсутствия
	|ИЗ
	|	Документ.ОтсутствиеНаРабочемМесте КАК ОтсутствиеНаРабочемМесте
	|ГДЕ
	|	ОтсутствиеНаРабочемМесте.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботу.Ссылка КАК Документ,
	|	ПриемНаРаботу.ВходящийНомер КАК ВходящийНомер,
	|	ПриемНаРаботу.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ПОМЕСТИТЬ ВТ_Приемы
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Увольнение.Ссылка КАК Документ,
	|	Увольнение.ВходящийНомер КАК ВходящийНомер,
	|	Увольнение.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ПОМЕСТИТЬ ВТ_Увольнения
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПодразделений.division_name КАК division_name,
	|	ВТ_ТаблицаПодразделений.division_code КАК division_code,
	|	ВТ_ТаблицаПодразделений.owner_division КАК owner_division,
	|	ВТ_ТаблицаПодразделений.division_actual КАК division_actual,
	|	ВТ_ТаблицаПодразделений.division_mvz_name КАК division_mvz_name,
	|	ВТ_ТаблицаПодразделений.division_mvz_code КАК division_mvz_code,
	|	ВТ_ТаблицаПодразделений.Ошибка КАК Ошибка,
	|	ЕСТЬNULL(ВТ_Подразделения.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(ВТ_Подразделения1.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК ГоловноеПодразделение,
	|	ЕСТЬNULL(ВТ_МВЗ.МВЗ, ЗНАЧЕНИЕ(Справочник.МВЗ.ПустаяСсылка)) КАК МВЗ
	|ИЗ
	|	ВТ_ТаблицаПодразделений КАК ВТ_ТаблицаПодразделений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МВЗ КАК ВТ_МВЗ
	|		ПО ВТ_ТаблицаПодразделений.division_mvz_code = ВТ_МВЗ.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения
	|		ПО ВТ_ТаблицаПодразделений.division_code = ВТ_Подразделения.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения1
	|		ПО ВТ_ТаблицаПодразделений.owner_division = ВТ_Подразделения1.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Подразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаПодразделений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДолжностей.job_name КАК job_name,
	|	ВТ_ТаблицаДолжностей.job_code КАК job_code,
	|	ВТ_ТаблицаДолжностей.job_okpdtr КАК job_okpdtr,
	|	ВТ_ТаблицаДолжностей.Ошибка КАК Ошибка,
	|	ЕСТЬNULL(ДолжностиИПрофессии.Ссылка, ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)) КАК Должность
	|ИЗ
	|	ВТ_ТаблицаДолжностей КАК ВТ_ТаблицаДолжностей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиИПрофессии КАК ДолжностиИПрофессии
	|		ПО ВТ_ТаблицаДолжностей.job_code = ДолжностиИПрофессии.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаДолжностей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРабочихМест.workplace_name КАК workplace_name,
	|	ВТ_ТаблицаРабочихМест.workplace_code КАК workplace_code,
	|	ЕСТЬNULL(ВТ_РабочиеМеста.РабочееМесто, ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка)) КАК РабочееМесто,
	|	ВТ_ТаблицаРабочихМест.Ошибка КАК Ошибка
	|ИЗ
	|	ВТ_ТаблицаРабочихМест КАК ВТ_ТаблицаРабочихМест
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РабочиеМеста КАК ВТ_РабочиеМеста
	|		ПО ВТ_ТаблицаРабочихМест.workplace_code = ВТ_РабочиеМеста.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РабочиеМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаРабочихМест
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСотрудников.worker_name КАК worker_name,
	|	ВТ_ТаблицаСотрудников.worker_surname КАК worker_surname,
	|	ВТ_ТаблицаСотрудников.worker_family КАК worker_family,
	|	ВТ_ТаблицаСотрудников.worker_code КАК worker_code,
	|	ВТ_ТаблицаСотрудников.worker_snils КАК worker_snils,
	|	ВТ_ТаблицаСотрудников.worker_sex КАК worker_sex,
	|	ВТ_ТаблицаСотрудников.worker_bday КАК worker_bday,
	|	ВТ_ТаблицаСотрудников.worker_mvz_name КАК worker_mvz_name,
	|	ВТ_ТаблицаСотрудников.worker_mvz_code КАК worker_mvz_code,
	|	ЕСТЬNULL(ВТ_Сотрудники.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	ЕСТЬNULL(ВТ_МВЗ.МВЗ, ЗНАЧЕНИЕ(Справочник.МВЗ.ПустаяСсылка)) КАК МВЗ,
	|	ВТ_ТаблицаСотрудников.Ошибка КАК Ошибка
	|ИЗ
	|	ВТ_ТаблицаСотрудников КАК ВТ_ТаблицаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ПО ВТ_ТаблицаСотрудников.worker_snils = ВТ_Сотрудники.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МВЗ КАК ВТ_МВЗ
	|		ПО ВТ_ТаблицаСотрудников.worker_mvz_code = ВТ_МВЗ.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_МВЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаШтатногоРасписания.division_code КАК division_code,
	|	ВТ_ТаблицаШтатногоРасписания.job_code КАК job_code,
	|	ВТ_ТаблицаШтатногоРасписания.vacancy КАК vacancy,
	|	ВТ_ТаблицаШтатногоРасписания.date КАК date,
	|	ВТ_ТаблицаШтатногоРасписания.Ошибка КАК Ошибка,
	|	НЕ ВложенныйЗапрос.Подразделение ЕСТЬ NULL КАК ЕстьВБазе
	|ИЗ
	|	ВТ_ТаблицаШтатногоРасписания КАК ВТ_ТаблицаШтатногоРасписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ШтатноеРасписаниеСрезПоследних.Подразделение КАК Подразделение,
	|			ШтатноеРасписаниеСрезПоследних.Должность КАК Должность,
	|			ШтатноеРасписаниеСрезПоследних.КоличествоСтавок КАК КоличествоСтавок
	|		ИЗ
	|			РегистрСведений.ШтатноеРасписание.СрезПоследних(, Организация = &Организация) КАК ШтатноеРасписаниеСрезПоследних) КАК ВложенныйЗапрос
	|		ПО ВТ_ТаблицаШтатногоРасписания.division_code = ВложенныйЗапрос.Подразделение.КодСинхронизации
	|			И ВТ_ТаблицаШтатногоРасписания.job_code = ВложенныйЗапрос.Должность.КодСинхронизации
	|			И ВТ_ТаблицаШтатногоРасписания.vacancy = ВложенныйЗапрос.КоличествоСтавок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаДокументов.document_type КАК document_type,
	|	ВТ_ТаблицаДокументов.document_date КАК document_date,
	|	ВТ_ТаблицаДокументов.document_number КАК document_number,
	|	ВТ_ТаблицаДокументов.document_note КАК document_note,
	|	ВТ_ТаблицаДокументов.document_date_begin КАК document_date_begin,
	|	ВТ_ТаблицаДокументов.document_date_end КАК document_date_end,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДокументов.document_type = ""Перемещение""
	|			ТОГДА ЕСТЬNULL(ВТ_Перемещения.Документ, ЗНАЧЕНИЕ(Документ.КадровоеПеремещение.ПустаяСсылка))
	|		КОГДА ВТ_ТаблицаДокументов.document_type = ""Прием""
	|				ИЛИ ВТ_ТаблицаДокументов.document_type = ""Приём""
	|			ТОГДА ЕСТЬNULL(ВТ_Приемы.Документ, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка))
	|		КОГДА ВТ_ТаблицаДокументов.document_type = ""Отсутствие""
	|			ТОГДА ЕСТЬNULL(ВТ_Отсутствия.Документ, ЗНАЧЕНИЕ(Документ.ОтсутствиеНаРабочемМесте.ПустаяСсылка))
	|		КОГДА ВТ_ТаблицаДокументов.document_type = ""Увольнение""
	|			ТОГДА ЕСТЬNULL(ВТ_Увольнения.Документ, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка))
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВТ_ТаблицаДокументов.Ошибка КАК Ошибка
	|ИЗ
	|	ВТ_ТаблицаДокументов КАК ВТ_ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Перемещения КАК ВТ_Перемещения
	|		ПО ВТ_ТаблицаДокументов.document_date = ВТ_Перемещения.ДатаВходящегоДокумента
	|			И ВТ_ТаблицаДокументов.document_number = ВТ_Перемещения.ВходящийНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приемы КАК ВТ_Приемы
	|		ПО ВТ_ТаблицаДокументов.document_date = ВТ_Приемы.ДатаВходящегоДокумента
	|			И ВТ_ТаблицаДокументов.document_number = ВТ_Приемы.ВходящийНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отсутствия КАК ВТ_Отсутствия
	|		ПО ВТ_ТаблицаДокументов.document_date = ВТ_Отсутствия.ДатаВходящегоДокумента
	|			И ВТ_ТаблицаДокументов.document_number = ВТ_Отсутствия.ВходящийНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Увольнения КАК ВТ_Увольнения
	|		ПО ВТ_ТаблицаДокументов.document_date = ВТ_Увольнения.ДатаВходящегоДокумента
	|			И ВТ_ТаблицаДокументов.document_number = ВТ_Увольнения.ВходящийНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоставаДокументов.document_type КАК document_type,
	|	ВТ_ТаблицаСоставаДокументов.document_date КАК document_date,
	|	ВТ_ТаблицаСоставаДокументов.document_number КАК document_number,
	|	ВТ_ТаблицаСоставаДокументов.document_worker_snils КАК document_worker_snils,
	|	ВТ_ТаблицаСоставаДокументов.document_division_code КАК document_division_code,
	|	ВТ_ТаблицаСоставаДокументов.document_job_code КАК document_job_code,
	|	ВТ_ТаблицаСоставаДокументов.document_vacancy КАК document_vacancy,
	|	ВТ_ТаблицаСоставаДокументов.document_old_division_code КАК document_old_division_code,
	|	ВТ_ТаблицаСоставаДокументов.document_old_job_code КАК document_old_job_code,
	|	ВТ_ТаблицаСоставаДокументов.document_old_workplace_code КАК document_old_workplace_code,
	|	ВТ_ТаблицаСоставаДокументов.document_workplace_code КАК document_workplace_code,
	|	ВТ_ТаблицаСоставаДокументов.document_old_vacancy КАК document_old_vacancy,
	|	ВТ_ТаблицаСоставаДокументов.date_end КАК date_end,
	|	ВТ_ТаблицаСоставаДокументов.Ошибка КАК Ошибка,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСоставаДокументов.document_type = ""Перемещение""
	|			ТОГДА НЕ КадровоеПеремещениеРаботники.Сотрудник ЕСТЬ NULL
	|		КОГДА ВТ_ТаблицаСоставаДокументов.document_type = ""Прием""
	|				ИЛИ ВТ_ТаблицаСоставаДокументов.document_type = ""Приём""
	|			ТОГДА НЕ ПриемНаРаботуРаботники.Сотрудник ЕСТЬ NULL
	|		КОГДА ВТ_ТаблицаСоставаДокументов.document_type = ""Отсутствие""
	|			ТОГДА НЕ ВТ_Отсутствия.Документ.Сотрудник ЕСТЬ NULL
	|		КОГДА ВТ_ТаблицаСоставаДокументов.document_type = ""Увольнение""
	|			ТОГДА НЕ УвольнениеРаботники.Сотрудник ЕСТЬ NULL
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьВБазе
	|ИЗ
	|	ВТ_ТаблицаСоставаДокументов КАК ВТ_ТаблицаСоставаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
	|		ПО ВТ_ТаблицаСоставаДокументов.document_date = КадровоеПеремещениеРаботники.Ссылка.ДатаВходящегоДокумента
	|			И ВТ_ТаблицаСоставаДокументов.document_number = КадровоеПеремещениеРаботники.Ссылка.ВходящийНомер
	|			И ВТ_ТаблицаСоставаДокументов.document_worker_snils = КадровоеПеремещениеРаботники.Сотрудник.ФизическоеЛицо.КодСинхронизации
	|			И ВТ_ТаблицаСоставаДокументов.document_division_code = КадровоеПеремещениеРаботники.ПодразделениеНовое.КодСинхронизации
	|			И ВТ_ТаблицаСоставаДокументов.document_job_code = КадровоеПеремещениеРаботники.ДолжностьНовая.КодСинхронизации
	|			И ВТ_ТаблицаСоставаДокументов.document_vacancy = КадровоеПеремещениеРаботники.ЗанимаемыхСтавокНовое
	|			И ВТ_ТаблицаСоставаДокументов.document_old_division_code = КадровоеПеремещениеРаботники.ПодразделениеСтарое.КодСинхронизации
	|			И ВТ_ТаблицаСоставаДокументов.document_old_job_code = КадровоеПеремещениеРаботники.ДолжностьСтарая.КодСинхронизации
	|			И (ВТ_ТаблицаСоставаДокументов.document_old_workplace_code = """"
	|				ИЛИ ВТ_ТаблицаСоставаДокументов.document_old_workplace_code = КадровоеПеремещениеРаботники.РабочееМестоСтарое.КодСинхронизации)
	|			И (ВТ_ТаблицаСоставаДокументов.document_workplace_code = """"
	|				ИЛИ ВТ_ТаблицаСоставаДокументов.document_workplace_code = КадровоеПеремещениеРаботники.РабочееМестоНовое.КодСинхронизации)
	|			И ВТ_ТаблицаСоставаДокументов.document_old_vacancy = КадровоеПеремещениеРаботники.ЗанимаемыхСтавокСтарое
	|			И ВТ_ТаблицаСоставаДокументов.date_end = КадровоеПеремещениеРаботники.ДатаОкончания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отсутствия КАК ВТ_Отсутствия
	|		ПО ВТ_ТаблицаСоставаДокументов.document_date = ВТ_Отсутствия.ДатаВходящегоДокумента
	|			И ВТ_ТаблицаСоставаДокументов.document_number = ВТ_Отсутствия.ВходящийНомер
	|			И ВТ_ТаблицаСоставаДокументов.document_worker_snils = ВТ_Отсутствия.Документ.Сотрудник.ФизическоеЛицо.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
	|		ПО ВТ_ТаблицаСоставаДокументов.document_date = ПриемНаРаботуРаботники.Ссылка.ДатаВходящегоДокумента
	|			И ВТ_ТаблицаСоставаДокументов.document_number = ПриемНаРаботуРаботники.Ссылка.ВходящийНомер
	|			И ВТ_ТаблицаСоставаДокументов.document_worker_snils = ПриемНаРаботуРаботники.Сотрудник.ФизическоеЛицо.КодСинхронизации
	|			И ВТ_ТаблицаСоставаДокументов.document_division_code = ПриемНаРаботуРаботники.Подразделение.КодСинхронизации
	|			И ВТ_ТаблицаСоставаДокументов.document_job_code = ПриемНаРаботуРаботники.Должность.КодСинхронизации
	|			И ВТ_ТаблицаСоставаДокументов.document_vacancy = ПриемНаРаботуРаботники.ЗанимаемыхСтавок
	|			И (ВТ_ТаблицаСоставаДокументов.document_workplace_code = """"
	|				ИЛИ ВТ_ТаблицаСоставаДокументов.document_workplace_code = ПриемНаРаботуРаботники.РабочееМесто.КодСинхронизации)
	|			И ВТ_ТаблицаСоставаДокументов.date_end = ПриемНаРаботуРаботники.ДатаОкончания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение.Работники КАК УвольнениеРаботники
	|		ПО ВТ_ТаблицаСоставаДокументов.document_date = УвольнениеРаботники.Ссылка.ДатаВходящегоДокумента
	|			И ВТ_ТаблицаСоставаДокументов.document_number = УвольнениеРаботники.Ссылка.ВходящийНомер
	|			И ВТ_ТаблицаСоставаДокументов.document_worker_snils = УвольнениеРаботники.Сотрудник.ФизическоеЛицо.КодСинхронизации
	|			И ВТ_ТаблицаСоставаДокументов.document_division_code = УвольнениеРаботники.Подразделение.КодСинхронизации
	|			И ВТ_ТаблицаСоставаДокументов.document_job_code = УвольнениеРаботники.Должность.КодСинхронизации
	|			И ВТ_ТаблицаСоставаДокументов.document_vacancy = УвольнениеРаботники.ЗанимаемыхСтавок
	|			И (ВТ_ТаблицаСоставаДокументов.document_workplace_code = """"
	|				ИЛИ ВТ_ТаблицаСоставаДокументов.document_workplace_code = УвольнениеРаботники.РабочееМесто.КодСинхронизации)";
	
	Запрос.УстановитьПараметр("Организация", 				Организация);
	Запрос.УстановитьПараметр("ТаблицаПодразделений", 		ТаблицаПодразделений.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаРабочихМест", 		ТаблицаРабочихМест.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаДолжностей", 			ТаблицаДолжностей.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаСотрудников", 		ТаблицаСотрудников.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаШтатногоРасписания", 	ТаблицаШтатногоРасписания.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаДокументов", 			ТаблицаДокументов.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаСоставаДокументов", 	ТаблицаСоставаДокументов.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаПодразделений.Загрузить(Результат[15].Выгрузить());
	ТаблицаДолжностей.Загрузить(Результат[18].Выгрузить());
	ТаблицаРабочихМест.Загрузить(Результат[20].Выгрузить());
	ТаблицаСотрудников.Загрузить(Результат[23].Выгрузить());
	ТаблицаШтатногоРасписания.Загрузить(Результат[27].Выгрузить());
	ТаблицаДокументов.Загрузить(Результат[29].Выгрузить());
	ТаблицаСоставаДокументов.Загрузить(Результат[31].Выгрузить());
	
КонецПроцедуры

Процедура ОчиститьТаблицы() Экспорт
	
	ТаблицаДокументов.Очистить();
	ТаблицаДолжностей.Очистить();
	ТаблицаПодразделений.Очистить();
	ТаблицаРабочихМест.Очистить();
	ТаблицаСоставаДокументов.Очистить();
	ТаблицаСотрудников.Очистить();
	ТаблицаШтатногоРасписания.Очистить();
	
КонецПроцедуры	

Процедура ПрочитатьФайлНаСервере(АдресВременногоХранилища)  Экспорт	
	
	ПротоколОшибок = "";
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	
	ДвоичныеДанныеФайла.Записать(ВременныйФайл);
	
	//чтение данных из макета
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			//основной тэг
			Если Чтение.ЛокальноеИмя = "kadr_export" Тогда
				
				ФорматЗагрузки          = СокрЛП(Чтение.ЗначениеАтрибута("format_version"));
				НаименованиеОрганизации = СокрЛП(Чтение.ЗначениеАтрибута("org_name"));
				ИНН 					= СокрЛП(Чтение.ЗначениеАтрибута("org_inn"));
				КПП 					= СокрЛП(Чтение.ЗначениеАтрибута("org_kpp"));
				ДатаВыгрузки 			= ПолучитьДатуИзСтроки(СокрЛП(Чтение.ЗначениеАтрибута("org_date")));
				
				Организация = ПолучитьОрганизацию(ИНН, КПП);
				
				Если НЕ (ФорматЗагрузки = "4.0" ИЛИ ФорматЗагрузки = "3.0" ИЛИ ФорматЗагрузки = "2.0") Тогда
					ПротоколОшибок = "Неверный формат файла: " + ФорматЗагрузки + Символы.ПС;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(Организация) Тогда
					ПротоколОшибок = ПротоколОшибок + "Не найдена организация: " + НаименованиеОрганизации + " по ИНН: " + ИНН + " и КПП: " + КПП;
				КонецЕсли;	
				
				Если СтрДлина(ПротоколОшибок) > 0 Тогда //дальше бежать смысла нет!
					Возврат;
				КонецЕсли;	
					
			КонецЕсли;
			
			//подраздедение
			Если Чтение.ЛокальноеИмя = "division_item" Тогда
				
				Ошибка = Ложь;
				
				Если Чтение.ЗначениеАтрибута("division_name") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<division_name>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<division_name>>" + Символы.ПС;
					КонецЕсли;	
					НаименованиеПодразделения = "";
					Ошибка = Истина;
				Иначе
					НаименованиеПодразделения = СокрЛП(Чтение.ЗначениеАтрибута("division_name"));
					Если НЕ ЗначениеЗаполнено(НаименованиеПодразделения) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<division_name>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<division_name>>" + Символы.ПС;
						КонецЕсли;
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("division_code") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<division_code>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<division_code>>" + Символы.ПС;
					КонецЕсли;
					ИдентификаторПодразделения 	= "";
					Ошибка = Истина;
				Иначе
					ИдентификаторПодразделения 	= СокрЛП(Чтение.ЗначениеАтрибута("division_code"));
					Если Не ЗначениеЗаполнено(ИдентификаторПодразделения) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<division_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<division_code>>" + Символы.ПС;
						КонецЕсли;
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("owner_division") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<owner_division>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<owner_division>>" + Символы.ПС;
					КонецЕсли;
					ИдентификаторГоловногоПодразделения	= "";
					Ошибка = Истина;
				Иначе
					ИдентификаторГоловногоПодразделения	= СокрЛП(Чтение.ЗначениеАтрибута("owner_division"));
					Если НЕ ЗначениеЗаполнено(ИдентификаторГоловногоПодразделения) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<owner_division>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<owner_division>>" + Символы.ПС;
						КонецЕсли;
						Ошибка = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("division_actual") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<division_actual>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<division_actual>>" + Символы.ПС;
					КонецЕсли;
					Актуальность = "";
					Ошибка = Истина;
				Иначе
					Актуальность = СокрЛП(Чтение.ЗначениеАтрибута("division_actual"));
					Если НЕ ЗначениеЗаполнено(Актуальность) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<division_actual>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<division_actual>>" + Символы.ПС;
						КонецЕсли;
						Ошибка = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("division_mvz_name") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<division_mvz_name>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<division_mvz_name>>" + Символы.ПС;
					КонецЕсли;	
					Ошибка = Истина;
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("division_mvz_code") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<division_mvz_code>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<division_mvz_code>>" + Символы.ПС;
					КонецЕсли;
					Ошибка = Истина;
				КонецЕсли;
				
				НаименованиеМВЗ 	= СокрЛП(Чтение.ЗначениеАтрибута("division_mvz_name"));
				ИдентификаторМВЗ    = СокрЛП(Чтение.ЗначениеАтрибута("division_mvz_code"));
				
				//заполнение таблицы подразделений
				НоваяСтрока 					= ТаблицаПодразделений.Добавить();
				НоваяСтрока.division_actual 	= Актуальность;
				НоваяСтрока.division_code 		= ИдентификаторПодразделения;
				НоваяСтрока.division_mvz_code 	= ИдентификаторМВЗ;
				НоваяСтрока.division_mvz_name 	= НаименованиеМВЗ;
				НоваяСтрока.division_name 		= НаименованиеПодразделения;
				НоваяСтрока.owner_division 		= ИдентификаторГоловногоПодразделения;
				НоваяСтрока.Ошибка				= Ошибка;
				
			КонецЕсли;
			
			//должность
			Если Чтение.ЛокальноеИмя = "job_item" Тогда
				
				Ошибка = Ложь;
				
				Если Чтение.ЗначениеАтрибута("job_name") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<job_name>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<job_name>>" + Символы.ПС;
					КонецЕсли;	
					НаименованиеДолжности = "";
					Ошибка = Истина;
				Иначе
					НаименованиеДолжности = СокрЛП(Чтение.ЗначениеАтрибута("job_name"));
					Если НЕ ЗначениеЗаполнено(НаименованиеДолжности) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<job_name>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<job_name>>" + Символы.ПС;
						КонецЕсли;
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("job_code") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<job_code>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<job_code>>" + Символы.ПС;
					КонецЕсли;	
					ИдентификаторДолжности = "";
					Ошибка = Истина;
				Иначе
					ИдентификаторДолжности = СокрЛП(Чтение.ЗначениеАтрибута("job_code"));
					Если НЕ ЗначениеЗаполнено(ИдентификаторДолжности) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<job_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<job_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("job_okpdtr") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<job_okpdtr>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<job_okpdtr>>" + Символы.ПС;
					КонецЕсли;	
					ОКПДТРДолжности = "";
					Ошибка = Истина;
				Иначе
					ОКПДТРДолжности = СокрЛП(Чтение.ЗначениеАтрибута("job_okpdtr"));
					Если НЕ ЗначениеЗаполнено(ОКПДТРДолжности) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<job_okpdtr>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<job_okpdtr>>" + Символы.ПС;
						КонецЕсли;	
						//Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				//заполнение таблицы должностей
				НоваяСтрока 			= ТаблицаДолжностей.Добавить();
				НоваяСтрока.job_code 	= ИдентификаторДолжности;
				НоваяСтрока.job_name 	= НаименованиеДолжности;
				НоваяСтрока.job_okpdtr 	= ОКПДТРДолжности;
				НоваяСтрока.Ошибка 		= Ошибка;
				
			КонецЕсли;	
			
			//рабочее место
			Если Чтение.ЛокальноеИмя = "workplace_item" Тогда
				
				Ошибка = Ложь;
				
				Если Чтение.ЗначениеАтрибута("workplace_name") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<workplace_name>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<workplace_name>>" + Символы.ПС;
					КонецЕсли;	
					НаименованиеРабочегоМеста = "";
					Ошибка = Истина;
				Иначе
					НаименованиеРабочегоМеста = СокрЛП(Чтение.ЗначениеАтрибута("workplace_name"));
					Если НЕ ЗначениеЗаполнено(НаименованиеРабочегоМеста) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<workplace_name>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<workplace_name>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("workplace_code") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<workplace_code>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<workplace_code>>" + Символы.ПС;
					КонецЕсли;
					ИдентификаторРабочегоМеста = "";
					Ошибка = Истина;
				Иначе
					ИдентификаторРабочегоМеста = СокрЛП(Чтение.ЗначениеАтрибута("workplace_code"));
					Если НЕ ЗначениеЗаполнено(ИдентификаторРабочегоМеста) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<workplace_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<workplace_code>>" + Символы.ПС;
						КонецЕсли;
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				//заполнение таблицы рабочих мест
				НоваяСтрока 				= ТаблицаРабочихМест.Добавить();
				НоваяСтрока.workplace_code 	= ИдентификаторРабочегоМеста;
				НоваяСтрока.workplace_name 	= НаименованиеРабочегоМеста;
				НоваяСтрока.Ошибка 			= Ошибка;
				
			КонецЕсли;
			
			//сотрудник
			Если Чтение.ЛокальноеИмя = "worker_item" Тогда
				
				Ошибка = Ложь;
				
				Если Чтение.ЗначениеАтрибута("worker_name") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<worker_name>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<worker_name>>" + Символы.ПС;
					КонецЕсли;
					ИмяСотрудника = "";
					Ошибка = Истина;
				Иначе
					ИмяСотрудника = СокрЛП(Чтение.ЗначениеАтрибута("worker_name"));
					Если НЕ ЗначениеЗаполнено(ИмяСотрудника) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<worker_name>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<worker_name>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("worker_surname") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<worker_surname>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<worker_surname>>" + Символы.ПС;
					КонецЕсли;	
					ОтчествоСотрудника 	= "";
					Ошибка = Истина;
				Иначе
					ОтчествоСотрудника 	= СокрЛП(Чтение.ЗначениеАтрибута("worker_surname"));
					Если Не ЗначениеЗаполнено(ОтчествоСотрудника) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<worker_surname>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<worker_surname>>" + Символы.ПС;
						КонецЕсли;	
						//Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("worker_family") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<worker_family>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<worker_family>>" + Символы.ПС;
					КонецЕсли;	
					ФамилияСотрудника	= "";
					Ошибка = Истина;
				Иначе
					ФамилияСотрудника	= СокрЛП(Чтение.ЗначениеАтрибута("worker_family"));
					Если НЕ ЗначениеЗаполнено(ФамилияСотрудника) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<worker_family>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<worker_family>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("worker_code") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<worker_code>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<worker_code>>" + Символы.ПС;
					КонецЕсли;	
					ТабельныйНомер = "";
					Ошибка = Истина;
				Иначе
					ТабельныйНомер = СокрЛП(Чтение.ЗначениеАтрибута("worker_code"));
					Если НЕ ЗначениеЗаполнено(ТабельныйНомер) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<worker_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<worker_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("worker_bday") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<worker_bday>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<worker_bday>>" + Символы.ПС;
					КонецЕсли;	
					Ошибка = Истина;
					ДеньРождения = Дата('00010101');
				Иначе
					ДеньРождения = ПолучитьДатуИзСтроки(СокрЛП(Чтение.ЗначениеАтрибута("worker_bday")));
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("worker_snils") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<worker_snils>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<worker_snils>>" + Символы.ПС;
					КонецЕсли;	
					Ошибка = Истина;
					КодСотрудника = "";
				Иначе
					КодСотрудника = СокрЛП(Чтение.ЗначениеАтрибута("worker_snils"));
					Если НЕ ЗначениеЗаполнено(КодСотрудника) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<worker_snils>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<worker_snils>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;						
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("worker_sex") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<worker_sex>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<worker_sex>>" + Символы.ПС;
					КонецЕсли;	
					Ошибка = Истина;
					ПолСотрудника = "";
				Иначе
					ПолСотрудника = СокрЛП(Чтение.ЗначениеАтрибута("worker_sex"));
					Если НЕ ЗначениеЗаполнено(ПолСотрудника) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<worker_sex>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<worker_sex>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;						
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("worker_mvz_name") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<worker_mvz_name>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<worker_mvz_name>>" + Символы.ПС;
					КонецЕсли;	
					НаименованиеМВЗ = "";
				Иначе
					НаименованиеМВЗ = СокрЛП(Чтение.ЗначениеАтрибута("worker_mvz_name"));
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("worker_mvz_code") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<worker_mvz_code>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<worker_mvz_code>>" + Символы.ПС;
					КонецЕсли;
					ИдентификаторМВЗ = "";
				Иначе
					ИдентификаторМВЗ = СокрЛП(Чтение.ЗначениеАтрибута("worker_mvz_code"));
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("worker_id") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<worker_id>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<worker_id>>" + Символы.ПС;
					КонецЕсли;
					ИдентификаторСотрудника = "";
				Иначе
					ИдентификаторСотрудника = СокрЛП(Чтение.ЗначениеАтрибута("worker_id"));
				КонецЕсли;
				
				//заполнение таблицы сотрудников
				НоваяСтрока 					= ТаблицаСотрудников.Добавить();
				НоваяСтрока.worker_bday 		= ДеньРождения;
				НоваяСтрока.worker_code 		= ТабельныйНомер;
				НоваяСтрока.worker_family 		= ФамилияСотрудника;
				НоваяСтрока.worker_name 		= ИмяСотрудника;
				НоваяСтрока.worker_sex 			= ПолСотрудника;
				НоваяСтрока.worker_snils 		= КодСотрудника;
				НоваяСтрока.worker_surname      = ОтчествоСотрудника;
				НоваяСтрока.worker_mvz_code 	= ИдентификаторМВЗ;
				НоваяСтрока.worker_mvz_name 	= НаименованиеМВЗ;
				НоваяСтрока.worker_id 			= ИдентификаторСотрудника;
				НоваяСтрока.Ошибка				= Ошибка;
				
			КонецЕсли;
			
			//штатное расписание
			Если Чтение.ЛокальноеИмя = "staff_item" Тогда
				
				Ошибка = Ложь;
				
				Если Чтение.ЗначениеАтрибута("division_code") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"В штатном расписании отсутствует атрибут <<division_code>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "В штатном расписании отсутствует атрибут <<division_code>>" + Символы.ПС;
					КонецЕсли;	
					ИдентификаторПодразделения = "";
					Ошибка = Истина;
				Иначе
					ИдентификаторПодразделения = СокрЛП(Чтение.ЗначениеАтрибута("division_code"));
					Если НЕ ЗначениеЗаполнено(ИдентификаторПодразделения) Тогда
						Если СтрНайти(ПротоколОшибок,"В штатном расписании не заполнен атрибут <<division_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В штатном расписании не заполнен атрибут <<division_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("job_code") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"В штатном расписании отсутствует атрибут <<job_code>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "В штатном расписании отсутствует атрибут <<job_code>>" + Символы.ПС;
					КонецЕсли;	
					ИдентификаторДолжности = "";
					Ошибка = Истина;
				Иначе
					ИдентификаторДолжности = СокрЛП(Чтение.ЗначениеАтрибута("job_code"));
					Если НЕ ЗначениеЗаполнено(ИдентификаторДолжности) Тогда
						Если СтрНайти(ПротоколОшибок,"В штатном расписании не заполнен атрибут <<job_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В штатном расписании не заполнен атрибут <<job_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("vacancy") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"В штатном расписании отсутствует атрибут <<vacancy>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "В штатном расписании отсутствует атрибут <<vacancy>>" + Символы.ПС;
					КонецЕсли;	
					КоличествоСтавок = 0;
					Ошибка = Истина;
				Иначе
					КоличествоСтавок = СокрЛП(Чтение.ЗначениеАтрибута("vacancy"));
					Если НЕ ЗначениеЗаполнено(КоличествоСтавок) Тогда
						КоличествоСтавок = 0;
					Иначе
						КоличествоСтавок = Число(КоличествоСтавок);
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("date") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"В штатном расписании отсутствует атрибут <<date>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "В штатном расписании отсутствует атрибут <<date>>" + Символы.ПС;
					КонецЕсли;	
					ДатаШтатногоРасписания = "";
					Ошибка = Истина;
				Иначе
					ДатаШтатногоРасписания = ПолучитьДатуИзСтроки(СокрЛП(Чтение.ЗначениеАтрибута("date")));
					Если НЕ ЗначениеЗаполнено(ДатаШтатногоРасписания) Тогда
						Если СтрНайти(ПротоколОшибок,"В штатном расписании не заполнен атрибут <<date>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В штатном расписании не заполнен атрибут <<date>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				//заполнение таблицы штатного расписания
				НоваяСтрока 				= ТаблицаШтатногоРасписания.Добавить();
				НоваяСтрока.division_code 	= ИдентификаторПодразделения;
				НоваяСтрока.job_code 		= ИдентификаторДолжности;
				НоваяСтрока.vacancy 		= КоличествоСтавок;
				НоваяСтрока.date 			= ДатаШтатногоРасписания;
				НоваяСтрока.Ошибка 			= Ошибка;
				
			КонецЕсли;
			
			//документ
			Если Чтение.ЛокальноеИмя = "document_item" Тогда
				
				Ошибка = Ложь;
				
				Если Чтение.ЗначениеАтрибута("document_type") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<document_type>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<document_type>>" + Символы.ПС;
					КонецЕсли;	
					ТипДокумента = "";
					Ошибка = Истина;
				Иначе
					ТипДокумента = ПроцедурыРаботыСНормамиСервер.НормализоватьНаименование(СокрЛП(Чтение.ЗначениеАтрибута("document_type")));
					Если НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<document_type>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<document_type>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("document_number") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<document_number>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<document_number>>" + Символы.ПС;
					КонецЕсли;	
					НомерВходящегоДокумента 	= "";
					Ошибка = Истина;
				Иначе
					НомерВходящегоДокумента 	= СокрЛП(Чтение.ЗначениеАтрибута("document_number"));
					Если Не ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<document_number>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<document_number>>" + Символы.ПС;
						КонецЕсли;
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("document_date") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<document_date>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<document_date>>" + Символы.ПС;
					КонецЕсли;	
					ДатаВходящегоДокумента	= Дата('00010101');
					Ошибка = Истина;
				Иначе
					ДатаВходящегоДокумента	= ПолучитьДатуИзСтроки(СокрЛП(Чтение.ЗначениеАтрибута("document_date")));
					Если НЕ ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<document_date>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<document_date>>" + Символы.ПС;
						КонецЕсли;
						Ошибка = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("document_note") = Неопределено Тогда
					Если ТипДокумента = "Отсутствие" Тогда
						Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<document_note>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<document_note>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
					Комментарий = "";
				Иначе
					Комментарий = СокрЛП(Чтение.ЗначениеАтрибута("document_note"));
					Если ТипДокумента = "Отсутствие" И НЕ ЗначениеЗаполнено(Комментарий) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<document_note>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<document_note>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("date_begin") = Неопределено Тогда
					Если ТипДокумента = "Отсутствие" Тогда
						Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<date_begin>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<date_begin>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
					ДатаНачалаОтсутствия = Дата('00010101');
				Иначе
					ДатаНачалаОтсутствия = ПолучитьДатуИзСтроки(СокрЛП(Чтение.ЗначениеАтрибута("date_begin")));
					Если ТипДокумента = "Отсутствие" И НЕ ЗначениеЗаполнено(ДатаНачалаОтсутствия) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<date_begin>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<date_begin>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("date_end") = Неопределено Тогда
					Если ТипДокумента = "Отсутствие" ИЛИ ФорматЗагрузки = "2.0" Тогда
						Если СтрНайти(ПротоколОшибок,"Отсутствует атрибут <<date_end>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Отсутствует атрибут <<date_end>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
					ДатаОкончанияОтсутствия = Дата('00010101');
				Иначе
					ДатаОкончанияОтсутствия = ПолучитьДатуИзСтроки(СокрЛП(Чтение.ЗначениеАтрибута("date_end")));
					Если ТипДокумента = "Отсутствие" И НЕ ЗначениеЗаполнено(ДатаОкончанияОтсутствия) Тогда
						Если СтрНайти(ПротоколОшибок,"Не заполнен атрибут <<date_end>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "Не заполнен атрибут <<date_end>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Комментарий = СокрЛП(Чтение.ЗначениеАтрибута("document_note"));
				
				//заполнение таблицы документов
				НоваяСтрока 					= ТаблицаДокументов.Добавить();
			    НоваяСтрока.document_date		= ДатаВходящегоДокумента;
				НоваяСтрока.document_date_begin = ДатаНачалаОтсутствия;
				НоваяСтрока.document_date_end	= ДатаОкончанияОтсутствия;
				НоваяСтрока.document_note		= Комментарий;
				НоваяСтрока.document_number		= НомерВходящегоДокумента;
				НоваяСтрока.document_type		= ТипДокумента;
				НоваяСтрока.Ошибка				= Ошибка;
				
			КонецЕсли;
			
			//состав документа
			Если Чтение.ЛокальноеИмя = "document_table_item" Тогда
				
				Ошибка = Ложь;
				
				Если Чтение.ЗначениеАтрибута("worker_snils") = Неопределено Тогда
					Если СтрНайти(ПротоколОшибок,"В документе отсутствует атрибут <<worker_snils>>") = 0 Тогда
				    	ПротоколОшибок = ПротоколОшибок + "В документе отсутствует атрибут <<worker_snils>>" + Символы.ПС;
					КонецЕсли;	
					ИдентификаторСотрудника = "";
					Ошибка = Истина;
				Иначе
					ИдентификаторСотрудника = СокрЛП(Чтение.ЗначениеАтрибута("worker_snils"));
					Если НЕ ЗначениеЗаполнено(ИдентификаторСотрудника) Тогда
						Если СтрНайти(ПротоколОшибок,"В документе не заполнен атрибут <<worker_snils>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе не заполнен атрибут <<worker_snils>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("division_code") = Неопределено Тогда
					Если НЕ ТипДокумента = "Отсутствие" Тогда
						Если СтрНайти(ПротоколОшибок,"В документе отсутствует атрибут <<division_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе отсутствует атрибут <<division_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
					ИдентификаторПодразделения = "";
				Иначе
					ИдентификаторПодразделения = СокрЛП(Чтение.ЗначениеАтрибута("division_code"));
					Если НЕ ТипДокумента = "Отсутствие" И Не ЗначениеЗаполнено(ИдентификаторПодразделения) Тогда
						Если СтрНайти(ПротоколОшибок,"В документе не заполнен атрибут <<division_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе не заполнен атрибут <<division_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("job_code") = Неопределено Тогда
					Если НЕ ТипДокумента = "Отсутствие" Тогда
						Если СтрНайти(ПротоколОшибок,"В документе отсутствует атрибут <<job_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе отсутствует атрибут <<job_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
					ИдентификаторДолжности = "";
				Иначе
					ИдентификаторДолжности = СокрЛП(Чтение.ЗначениеАтрибута("job_code"));
					Если НЕ ТипДокумента = "Отсутствие" И Не ЗначениеЗаполнено(ИдентификаторДолжности) Тогда
						Если СтрНайти(ПротоколОшибок,"В документе не заполнен атрибут <<job_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе не заполнен атрибут <<job_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("workplace_code") = Неопределено Тогда
					Если НЕ ТипДокумента = "Отсутствие" Тогда
						Если СтрНайти(ПротоколОшибок,"В документе отсутствует атрибут <<workplace_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе отсутствует атрибут <<workplace_code>>" + Символы.ПС;
						КонецЕсли;
						Ошибка = Истина;
					КонецЕсли;
					ИдентификаторРабочегоМеста = "";
				Иначе
					ИдентификаторРабочегоМеста = СокрЛП(Чтение.ЗначениеАтрибута("workplace_code"));
					Если Организация.ИспользоватьРабочиеМеста И НЕ ТипДокумента = "Отсутствие" И Не ЗначениеЗаполнено(ИдентификаторРабочегоМеста) Тогда
						Если СтрНайти(ПротоколОшибок,"В документе не заполнен атрибут <<workplace_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе не заполнен атрибут <<workplace_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("vacancy") = Неопределено Тогда
					Если НЕ ТипДокумента = "Отсутствие" Тогда
						Если СтрНайти(ПротоколОшибок,"В документе отсутствует атрибут <<vacancy>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе отсутствует атрибут <<vacancy>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
					КоличествоСтавок = 0;
				Иначе
					КоличествоСтавок = СокрЛП(Чтение.ЗначениеАтрибута("vacancy"));
					Если Не ЗначениеЗаполнено(КоличествоСтавок) Тогда
						Если НЕ ТипДокумента = "Отсутствие" Тогда
							Если СтрНайти(ПротоколОшибок,"В документе не заполнен атрибут <<vacancy>>") = 0 Тогда
								ПротоколОшибок = ПротоколОшибок + "В документе не заполнен атрибут <<vacancy>>" + Символы.ПС;
							КонецЕсли;	
							Ошибка = Истина;
							КоличествоСтавок = 0;
						Иначе
							КоличествоСтавок = 0;
						Конецесли;
					Иначе
						КоличествоСтавок = Число(КоличествоСтавок);
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("old_division_code") = Неопределено Тогда
					Если ТипДокумента = "Перемещение" Тогда
						Если СтрНайти(ПротоколОшибок,"В документе отсутствует атрибут <<old_division_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе отсутствует атрибут <<old_division_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
					ИдентификаторСтарогоПодразделения = "";
				Иначе
					ИдентификаторСтарогоПодразделения 	= СокрЛП(Чтение.ЗначениеАтрибута("old_division_code"));
					Если ТипДокумента = "Перемещение" И Не ЗначениеЗаполнено(ИдентификаторСтарогоПодразделения) Тогда
						Если СтрНайти(ПротоколОшибок,"В документе не заполнен атрибут <<old_division_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе не заполнен атрибут <<old_division_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("old_job_code") = Неопределено Тогда
					Если ТипДокумента = "Перемещение" Тогда
						Если СтрНайти(ПротоколОшибок,"В документе отсутствует атрибут <<old_job_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе отсутствует атрибут <<old_job_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
					ИдентификаторСтаройДолжности = "";
				Иначе
					ИдентификаторСтаройДолжности 	= СокрЛП(Чтение.ЗначениеАтрибута("old_job_code"));
					Если ТипДокумента = "Перемещение" И Не ЗначениеЗаполнено(ИдентификаторСтаройДолжности) Тогда
						Если СтрНайти(ПротоколОшибок,"В документе не заполнен атрибут <<old_job_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе не заполнен атрибут <<old_job_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("old_workplace_code") = Неопределено Тогда
					Если ТипДокумента = "Перемещение" Тогда
						Если СтрНайти(ПротоколОшибок,"В документе отсутствует атрибут <<old_workplace_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе отсутствует атрибут <<old_workplace_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
					ИдентификаторСтарогоРабочегоМеста = "";
				Иначе
					ИдентификаторСтарогоРабочегоМеста 	= СокрЛП(Чтение.ЗначениеАтрибута("old_workplace_code"));
					Если Организация.ИспользоватьРабочиеМеста И ТипДокумента = "Перемещение" И Не ЗначениеЗаполнено(ИдентификаторСтарогоРабочегоМеста) Тогда
						Если СтрНайти(ПротоколОшибок,"В документе не заполнен атрибут <<old_workplace_code>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе не заполнен атрибут <<old_workplace_code>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;	
				КонецЕсли;
				
				Если Чтение.ЗначениеАтрибута("old_vacancy") = Неопределено Тогда
					Если ТипДокумента = "Перемещение" Тогда
						Если СтрНайти(ПротоколОшибок,"В документе отсутствует атрибут <<old_vacancy>>") = 0 Тогда
							ПротоколОшибок = ПротоколОшибок + "В документе отсутствует атрибут <<old_vacancy>>" + Символы.ПС;
						КонецЕсли;	
						Ошибка = Истина;
					КонецЕсли;
					КоличествоСтавокСтарое = 0;
				Иначе
					КоличествоСтавокСтарое = СокрЛП(Чтение.ЗначениеАтрибута("old_vacancy"));
					Если Не ЗначениеЗаполнено(КоличествоСтавокСтарое) Тогда
						Если ТипДокумента = "Перемещение" Тогда
							Если СтрНайти(ПротоколОшибок,"В документе не заполнен атрибут <<old_vacancy>>") = 0 Тогда
								ПротоколОшибок = ПротоколОшибок + "В документе не заполнен атрибут <<old_vacancy>>" + Символы.ПС;
							КонецЕсли;	
							Ошибка = Истина;
							КоличествоСтавокСтарое = 0;
						Иначе
							КоличествоСтавокСтарое = 0;
						Конецесли;
					Иначе
						КоличествоСтавокСтарое = Число(КоличествоСтавокСтарое);
					КонецЕсли;	
				КонецЕсли;

				Если ФорматЗагрузки = "3.0" Тогда
					Если Чтение.ЗначениеАтрибута("date_end") = Неопределено Тогда
						ДатаОкончания = Дата('00010101');
					Иначе
						ДатаОкончания = ПолучитьДатуИзСтроки(СокрЛП(Чтение.ЗначениеАтрибута("date_end")));
					КонецЕсли;
				Иначе
					ДатаОкончания = ДатаОкончанияОтсутствия;
				КонецЕсли;
			
				//заполнение таблицы документов
				НоваяСтрока 							= ТаблицаСоставаДокументов.Добавить();
			    НоваяСтрока.document_date				= ДатаВходящегоДокумента;
				НоваяСтрока.document_division_code 		= ИдентификаторПодразделения;
				НоваяСтрока.document_job_code 			= ИдентификаторДолжности;
				НоваяСтрока.document_number 			= НомерВходящегоДокумента;
				НоваяСтрока.document_old_division_code 	= ИдентификаторСтарогоПодразделения;
				НоваяСтрока.document_old_job_code 		= ИдентификаторСтаройДолжности;
				НоваяСтрока.document_old_workplace_code = ИдентификаторСтарогоРабочегоМеста;
				НоваяСтрока.document_old_vacancy 		= КоличествоСтавокСтарое;
				НоваяСтрока.document_type 				= ТипДокумента;
				НоваяСтрока.document_vacancy 			= КоличествоСтавок;
				НоваяСтрока.document_worker_snils 		= ИдентификаторСотрудника;
				НоваяСтрока.document_workplace_code 	= ИдентификаторРабочегоМеста;
				НоваяСтрока.date_end					= ДатаОкончания;
				НоваяСтрока.Ошибка						= Ошибка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	ПрочитатьДанныеВБазе();
	
КонецПроцедуры	

Процедура ЗагрузитьДанные() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗагрузитьПодразделения();
	ЗагрузитьДолжности();
	ЗагрузитьРабочиеМеста();
	ЗагрузитьСотрудников();
	ЗагрузитьШтатноеРасписание();
	ЗагрузитьДокументы();
	
	ПрочитатьДанныеВБазе();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

Процедура ЗагрузитьПодразделения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПодразделений.division_name КАК division_name,
	|	ТаблицаПодразделений.division_code КАК division_code,
	|	ТаблицаПодразделений.owner_division КАК owner_division,
	|	ТаблицаПодразделений.division_actual КАК division_actual,
	|	ТаблицаПодразделений.division_mvz_name КАК division_mvz_name,
	|	ТаблицаПодразделений.division_mvz_code КАК division_mvz_code,
	|	ТаблицаПодразделений.Ошибка КАК Ошибка,
	|	ТаблицаПодразделений.Подразделение КАК Подразделение,
	|	ТаблицаПодразделений.МВЗ КАК МВЗ,
	|	ТаблицаПодразделений.ГоловноеПодразделение КАК ГоловноеПодразделение
	|ПОМЕСТИТЬ ВТ_ТаблицаПодразделений
	|ИЗ
	|	&ТаблицаПодразделений КАК ТаблицаПодразделений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МВЗПодразделенийСрезПоследних.Подразделение КАК Подразделение,
	|	МВЗПодразделенийСрезПоследних.МВЗ КАК МВЗ
	|ПОМЕСТИТЬ ВТ_МВЗПодразделений
	|ИЗ
	|	РегистрСведений.МВЗПодразделений.СрезПоследних(, ) КАК МВЗПодразделенийСрезПоследних
	|ГДЕ
	|	МВЗПодразделенийСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПодразделений.division_name КАК division_name,
	|	ВТ_ТаблицаПодразделений.division_code КАК division_code,
	|	ВТ_ТаблицаПодразделений.owner_division КАК owner_division,
	|	ВТ_ТаблицаПодразделений.division_actual КАК division_actual,
	|	ВТ_ТаблицаПодразделений.division_mvz_name КАК division_mvz_name,
	|	ВТ_ТаблицаПодразделений.division_mvz_code КАК division_mvz_code,
	|	ВТ_ТаблицаПодразделений.Ошибка КАК Ошибка,
	|	ВТ_ТаблицаПодразделений.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаПодразделений.МВЗ КАК МВЗ,
	|	НЕ ВТ_МВЗПодразделений.МВЗ ЕСТЬ NULL КАК ЕстьМВЗПодразделения,
	|	ВТ_ТаблицаПодразделений.ГоловноеПодразделение КАК ГоловноеПодразделение
	|ИЗ
	|	ВТ_ТаблицаПодразделений КАК ВТ_ТаблицаПодразделений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МВЗПодразделений КАК ВТ_МВЗПодразделений
	|		ПО ВТ_ТаблицаПодразделений.Подразделение = ВТ_МВЗПодразделений.Подразделение
	|			И ВТ_ТаблицаПодразделений.МВЗ = ВТ_МВЗПодразделений.МВЗ
	|ГДЕ
	|	НЕ ВТ_ТаблицаПодразделений.Ошибка";
	
	Запрос.УстановитьПараметр("ТаблицаПодразделений",ТаблицаПодразделений.Выгрузить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	НовыйДокумент 						= Документы.УстановкаМВЗПодразделений.СоздатьДокумент();
	НовыйДокумент.Дата 					= ТекущаяДата();
	НовыйДокумент.Комментарий 			= "Сформирован автоматически загрузчиком кадровых данных.";
	НовыйДокумент.Организация 			= Организация;
	НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Подразделение) Тогда
			ТекущееПодразделение = ПолучитьПодразделение(СтрокаТаблицыЗапроса.division_name,СтрокаТаблицыЗапроса.division_code,СтрокаТаблицыЗапроса.owner_division);
		Иначе
			ТекущееПодразделение = СтрокаТаблицыЗапроса.Подразделение;
			Если ИсправлятьНаименованияСуществующихПодразделений И НЕ СокрЛП(ТекущееПодразделение.Наименование) = СокрЛП(СтрокаТаблицыЗапроса.division_name) Тогда
				ТекущееПодразделениеОбъект 						= ТекущееПодразделение.ПолучитьОбъект();
				ТекущееПодразделениеОбъект.Наименование 		= СокрЛП(СтрокаТаблицыЗапроса.division_name);
				ТекущееПодразделениеОбъект.НаименованиеПолное 	= СокрЛП(СтрокаТаблицыЗапроса.division_name);
				ТекущееПодразделениеОбъект.Записать();
			КонецЕсли;	
		КонецЕсли;	
		
		СоздаватьМВЗПодразделений = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.division_mvz_name) Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.МВЗ) Тогда
				ТекущееМВЗ = ПолучитьМВЗ(СтрокаТаблицыЗапроса.division_mvz_name,СтрокаТаблицыЗапроса.division_mvz_code);
			Иначе
				ТекущееМВЗ = СтрокаТаблицыЗапроса.МВЗ;
			КонецЕсли;
			
			СоздаватьМВЗПодразделений = Истина;
			
		КонецЕсли;
		
		Если СоздаватьМВЗПодразделений И НЕ СтрокаТаблицыЗапроса.ЕстьМВЗПодразделения Тогда
			НоваяСтрока 				= НовыйДокумент.МВЗПодразделений.Добавить();
			НоваяСтрока.Подразделение 	= ТекущееПодразделение;
			НоваяСтрока.МВЗ 			= ТекущееМВЗ;
			НоваяСтрока.Использовать 	= Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если НЕ НовыйДокумент.МВЗПодразделений.Количество() = 0 Тогда
		
		НовыйДокумент.УстановитьНовыйНомер();
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПодразделение(НаименованиеПодразделения, ИдентификаторПодразделения, ИдентификаторГоловногоПодразделения)
	
	Если ИдентификаторГоловногоПодразделения = "0" Тогда
	    ГоловноеПодразделение = Справочники.Подразделения.ПустаяСсылка();
	Иначе
		ГоловноеПодразделение = Справочники.Подразделения.НайтиПоРеквизиту("КодСинхронизации",ИдентификаторГоловногоПодразделения,,Организация);
	КонецЕсли;	
	
	ТекущееПодразделение = Справочники.Подразделения.НайтиПоРеквизиту("КодСинхронизации",ИдентификаторПодразделения,,Организация);
	
	Если ТекущееПодразделение.Пустая() Тогда
		
		Если НаименованиеПодразделения = "" Тогда //загружается документ
			
			ТекущееПодразделение = Справочники.Подразделения.ПустаяСсылка();
			
		Иначе	
			
			НовоеПодразделение 						= Справочники.Подразделения.СоздатьЭлемент();
			НовоеПодразделение.Владелец 			= Организация;
			НовоеПодразделение.КодСинхронизации 	= ИдентификаторПодразделения;
			НовоеПодразделение.Наименование 		= НаименованиеПодразделения;
			НовоеПодразделение.НаименованиеПолное 	= НаименованиеПодразделения;
			НовоеПодразделение.Родитель 			= ГоловноеПодразделение;
			НовоеПодразделение.УстановитьНовыйКод();
			НовоеПодразделение.Записать();
			
			ТекущееПодразделение = НовоеПодразделение.Ссылка;
			
		КонецЕсли;
	
	КонецЕсли;	
	
	Возврат ТекущееПодразделение;
	
КонецФункции	

Функция ПолучитьМВЗ(НаименованиеМВЗ,ИдентификаторМВЗ)
	
	Если Не ЗначениеЗаполнено(ИдентификаторМВЗ) Тогда
		Возврат Справочники.МВЗ.ПустаяСсылка();
	КонецЕсли;	
	
	ТекущееМВЗ = Справочники.МВЗ.НайтиПоРеквизиту("КодСинхронизации",ИдентификаторМВЗ);
	
	Если ТекущееМВЗ.Пустая() Тогда
		
		НовоеМВЗ = Справочники.МВЗ.СоздатьЭлемент();
		НовоеМВЗ.Владелец = Организация;
		НовоеМВЗ.КодСинхронизации = ИдентификаторМВЗ;
		НовоеМВЗ.Наименование = НаименованиеМВЗ;
		НовоеМВЗ.УстановитьНовыйКод();
		НовоеМВЗ.Записать();
		
		ТекущееМВЗ = НовоеМВЗ.Ссылка;
		
	КонецЕсли;
	
	Возврат ТекущееМВЗ;
	
КонецФункции	

Процедура ЗагрузитьДолжности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДолжностей.job_name КАК job_name,
	|	ТаблицаДолжностей.job_code КАК job_code,
	|	ТаблицаДолжностей.job_okpdtr КАК job_okpdtr,
	|	ТаблицаДолжностей.Ошибка КАК Ошибка,
	|	ТаблицаДолжностей.Должность КАК Должность
	|ПОМЕСТИТЬ ВТ_ТаблицаДолжностей
	|ИЗ
	|	&ТаблицаДолжностей КАК ТаблицаДолжностей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДолжностей.job_name КАК job_name,
	|	ВТ_ТаблицаДолжностей.job_code КАК job_code,
	|	ВТ_ТаблицаДолжностей.job_okpdtr КАК job_okpdtr,
	|	ВТ_ТаблицаДолжностей.Ошибка КАК Ошибка,
	|	ВТ_ТаблицаДолжностей.Должность КАК Должность
	|ИЗ
	|	ВТ_ТаблицаДолжностей КАК ВТ_ТаблицаДолжностей
	|ГДЕ
	|	НЕ ВТ_ТаблицаДолжностей.Ошибка";
	
	Запрос.УстановитьПараметр("ТаблицаДолжностей",ТаблицаДолжностей.Выгрузить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		ПолучитьДолжность(СтрокаТаблицыЗапроса.job_name,СтрокаТаблицыЗапроса.job_code,СтрокаТаблицыЗапроса.job_okpdtr);
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьДолжность(НаименованиеДолжности, ИдентификаторДолжности, ОКПДТРДолжности)
	
	ТекущаяДолжность = Справочники.ДолжностиИПрофессии.НайтиПоРеквизиту("КодСинхронизации",ИдентификаторДолжности);
	
	Если ТекущаяДолжность.Пустая() Тогда
		
		Если НаименованиеДолжности = "" Тогда //загружается документ
			
			ТекущаяДолжность = Справочники.ДолжностиИПрофессии.ПустаяСсылка();
			
		Иначе
			
			НоваяДолжность 						= Справочники.ДолжностиИПрофессии.СоздатьЭлемент();
			НоваяДолжность.Источник				= Перечисления.ИсточникиДолжностей.ВведеныВручную;
			НоваяДолжность.КодПоОКПДТР 			= ОКПДТРДолжности;
			НоваяДолжность.КодСинхронизации 	= ИдентификаторДолжности;
			НоваяДолжность.Наименование 		= НаименованиеДолжности;
			НоваяДолжность.НаименованиеПолное 	= НаименованиеДолжности;
			НоваяДолжность.УстановитьНовыйКод();
			НоваяДолжность.Записать();
			
			ТекущаяДолжность = НоваяДолжность.Ссылка;
			
		КонецЕсли;
		
	Иначе
		
		Если ИсправлятьНаименованияСуществующихДолжностей И НЕ НаименованиеДолжности = "" И НЕ СокрЛП(ТекущаяДолжность.Наименование) = СокрЛП(НаименованиеДолжности) Тогда
			
			ТекущаяДолжностьОбъект 						= ТекущаяДолжность.ПолучитьОбъект();
			ТекущаяДолжностьОбъект.Наименование 		= СокрЛП(НаименованиеДолжности);
			ТекущаяДолжностьОбъект.НаименованиеПолное 	= СокрЛП(НаименованиеДолжности);
			ТекущаяДолжностьОбъект.Записать();
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ТекущаяДолжность;
	
КонецФункции	

Процедура ЗагрузитьРабочиеМеста() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРабочихМест.workplace_name КАК workplace_name,
	|	ТаблицаРабочихМест.workplace_code КАК workplace_code,
	|	ТаблицаРабочихМест.Ошибка КАК Ошибка,
	|	ТаблицаРабочихМест.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ ВТ_ТаблицаРабочихМест
	|ИЗ
	|	&ТаблицаРабочихМест КАК ТаблицаРабочихМест
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРабочихМест.workplace_name КАК workplace_name,
	|	ВТ_ТаблицаРабочихМест.workplace_code КАК workplace_code,
	|	ВТ_ТаблицаРабочихМест.Ошибка КАК Ошибка,
	|	ВТ_ТаблицаРабочихМест.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	ВТ_ТаблицаРабочихМест КАК ВТ_ТаблицаРабочихМест
	|ГДЕ
	|	НЕ ВТ_ТаблицаРабочихМест.Ошибка";
	
	Запрос.УстановитьПараметр("ТаблицаРабочихМест",ТаблицаРабочихМест.Выгрузить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		ПолучитьРабочееМесто(СтрокаТаблицыЗапроса.workplace_name,СтрокаТаблицыЗапроса.workplace_code);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРабочееМесто(НаименованиеРабочегоМеста,ИдентификаторРабочегоМеста)
	
	ТекущееРабочееМесто = Справочники.РабочиеМестаАСТБ.НайтиПоРеквизиту("КодСинхронизации",ИдентификаторРабочегоМеста,,Организация);
	
	Если ТекущееРабочееМесто.Пустая() Тогда
		
		Если НаименованиеРабочегоМеста = "" Тогда //загружается документ
			
			ТекущееРабочееМесто = Справочники.РабочиеМестаАСТБ.ПустаяСсылка();
			
		Иначе
			
			НовоеРабочееМесто 					= Справочники.РабочиеМестаАСТБ.СоздатьЭлемент();
			НовоеРабочееМесто.Владелец 			= Организация;
			НовоеРабочееМесто.КодСинхронизации 	= ИдентификаторРабочегоМеста;
			НовоеРабочееМесто.Наименование 		= НаименованиеРабочегоМеста;
			НовоеРабочееМесто.УстановитьНовыйКод();
			НовоеРабочееМесто.Записать();
			
			ТекущееРабочееМесто = НовоеРабочееМесто.Ссылка;
			
		КонецЕсли;
		
	Иначе
		
		Если ИсправлятьНаименованияСуществующихРабочихМест И НЕ НаименованиеРабочегоМеста = "" И НЕ СокрЛП(ТекущееРабочееМесто.Наименование) = СокрЛП(НаименованиеРабочегоМеста) Тогда
			
			ТекущееРабочееМестоОбъект 				= ТекущееРабочееМесто.ПолучитьОбъект();
			ТекущееРабочееМестоОбъект.Наименование 	= СокрЛП(НаименованиеРабочегоМеста);
			ТекущееРабочееМестоОбъект.Записать();
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ТекущееРабочееМесто;
	
КонецФункции	

Процедура ЗагрузитьСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.worker_name КАК worker_name,
	|	ТаблицаСотрудников.worker_surname КАК worker_surname,
	|	ТаблицаСотрудников.worker_family КАК worker_family,
	|	ТаблицаСотрудников.worker_code КАК worker_code,
	|	ТаблицаСотрудников.worker_snils КАК worker_snils,
	|	ТаблицаСотрудников.worker_sex КАК worker_sex,
	|	ТаблицаСотрудников.worker_bday КАК worker_bday,
	|	ТаблицаСотрудников.worker_mvz_name КАК worker_mvz_name,
	|	ТаблицаСотрудников.worker_mvz_code КАК worker_mvz_code,
	|	ТаблицаСотрудников.worker_id КАК worker_id,
	|	ТаблицаСотрудников.Ошибка КАК Ошибка,
	|	ТаблицаСотрудников.МВЗ КАК МВЗ,
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ТаблицаСотрудников
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МВЗСотрудников.Сотрудник КАК Сотрудник,
	|	МВЗСотрудников.МВЗ КАК МВЗ
	|ПОМЕСТИТЬ ВТ_МВЗСотрудников
	|ИЗ
	|	РегистрСведений.МВЗСотрудников КАК МВЗСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСотрудников.worker_name КАК worker_name,
	|	ВТ_ТаблицаСотрудников.worker_surname КАК worker_surname,
	|	ВТ_ТаблицаСотрудников.worker_family КАК worker_family,
	|	ВТ_ТаблицаСотрудников.worker_code КАК worker_code,
	|	ВТ_ТаблицаСотрудников.worker_snils КАК worker_snils,
	|	ВТ_ТаблицаСотрудников.worker_sex КАК worker_sex,
	|	ВТ_ТаблицаСотрудников.worker_bday КАК worker_bday,
	|	ВТ_ТаблицаСотрудников.Ошибка КАК Ошибка,
	|	ВТ_ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаСотрудников.worker_mvz_name КАК worker_mvz_name,
	|	ВТ_ТаблицаСотрудников.worker_mvz_code КАК worker_mvz_code,
	|	ВТ_ТаблицаСотрудников.worker_id КАК worker_id,
	|	ВТ_ТаблицаСотрудников.МВЗ КАК МВЗ,
	|	НЕ ВТ_МВЗСотрудников.МВЗ ЕСТЬ NULL КАК ЕстьМВЗСотрудника
	|ИЗ
	|	ВТ_ТаблицаСотрудников КАК ВТ_ТаблицаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МВЗСотрудников КАК ВТ_МВЗСотрудников
	|		ПО ВТ_ТаблицаСотрудников.Сотрудник = ВТ_МВЗСотрудников.Сотрудник
	|			И ВТ_ТаблицаСотрудников.МВЗ = ВТ_МВЗСотрудников.МВЗ
	|ГДЕ
	|	НЕ ВТ_ТаблицаСотрудников.Ошибка";
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников",ТаблицаСотрудников.Выгрузить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Сотрудник) Тогда
			
			СтруктураДанныхПоСотруднику = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗапроса);
			
			ТекущийСторудник = ПолучитьСотрудника(СтруктураДанныхПоСотруднику);
			
		Иначе
			
			ТекущийСторудник = СтрокаТаблицыЗапроса.Сотрудник;
			
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.МВЗ) Тогда
			ТекущееМВЗ = ПолучитьМВЗ(СтрокаТаблицыЗапроса.worker_mvz_name,СтрокаТаблицыЗапроса.worker_mvz_code);
		Иначе
			ТекущееМВЗ = СтрокаТаблицыЗапроса.МВЗ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущееМВЗ) И НЕ СтрокаТаблицыЗапроса.ЕстьМВЗСотрудника Тогда
			НоваяЗапись 			= РегистрыСведений.МВЗСотрудников.СоздатьМенеджерЗаписи();
			НоваяЗапись.Организация	= Организация;
			НоваяЗапись.МВЗ			= ТекущееМВЗ;
			НоваяЗапись.Сотрудник	= ТекущийСторудник;
			НоваяЗапись.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСотрудника(СтруктураДанныхПоСотруднику)
	
	ФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("КодСинхронизации",СтруктураДанныхПоСотруднику.worker_snils);
	
	Если ФизическоеЛицо.Пустая() Тогда
		
		Если СтруктураДанныхПоСотруднику.Свойство("worker_family") Тогда
			
			НовоеФизическоеЛицо 					= Справочники.ФизическиеЛица.СоздатьЭлемент();
			НовоеФизическоеЛицо.ДатаРождения 		= СтруктураДанныхПоСотруднику.worker_bday;
			НовоеФизическоеЛицо.КодСинхронизации 	= СтруктураДанныхПоСотруднику.worker_snils;
			НовоеФизическоеЛицо.Наименование 		= СтруктураДанныхПоСотруднику.worker_family + " " + СтруктураДанныхПоСотруднику.worker_name + " " + СтруктураДанныхПоСотруднику.worker_surname;
			Если НРег(СтруктураДанныхПоСотруднику.worker_sex) = "м" Тогда
				НовоеФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской;
			ИначеЕсли НРег(СтруктураДанныхПоСотруднику.worker_sex) = "ж" Тогда
				НовоеФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский;
			КонецЕсли;	
			НовоеФизическоеЛицо.УстановитьНовыйКод();
			НовоеФизическоеЛицо.Записать();
			
			ФизическоеЛицо 	= НовоеФизическоеЛицо.Ссылка;
			МассивФИО 		= ФизическиеЛицаПереопределяемый.ПолучитьМассивФИО(НовоеФизическоеЛицо.Наименование);
			ФизическиеЛицаПереопределяемый.ЗаписатьФИОФизЛиц(МассивФИО,ФизическоеЛицо);
			
			НовыйСотрудник 					= Справочники.Сотрудники.СоздатьЭлемент();
			НовыйСотрудник.Владелец 		= Организация;
			НовыйСотрудник.Наименование		= ФизическоеЛицо.Наименование;
			НовыйСотрудник.ТабельныйНомер 	= СтруктураДанныхПоСотруднику.worker_code;
			НовыйСотрудник.Идентификатор 	= СтруктураДанныхПоСотруднику.worker_id;
			НовыйСотрудник.ФизическоеЛицо 	= ФизическоеЛицо;
			НовыйСотрудник.УстановитьНовыйКод();
			НовыйСотрудник.Записать();
			
			ТекущийСотрудник = НовыйСотрудник.Ссылка;
			
		Иначе
			
			ТекущийСотрудник = Справочники.Сотрудники.ПустаяСсылка();
			
		КонецЕсли;
	
	Иначе
		
		ТекущийСотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",ФизическоеЛицо,,Организация);
		
		Если ТекущийСотрудник.Пустая() Тогда
			
			НовыйСотрудник 					= Справочники.Сотрудники.СоздатьЭлемент();
			НовыйСотрудник.Владелец 		= Организация;
			НовыйСотрудник.Наименование		= ФизическоеЛицо.Наименование;
			НовыйСотрудник.ТабельныйНомер 	= СтруктураДанныхПоСотруднику.worker_code;
			НовыйСотрудник.Идентификатор 	= СтруктураДанныхПоСотруднику.worker_id;
			НовыйСотрудник.ФизическоеЛицо 	= ФизическоеЛицо;
			НовыйСотрудник.УстановитьНовыйКод();
			НовыйСотрудник.Записать();
			
			ТекущийСотрудник = НовыйСотрудник.Ссылка;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ТекущийСотрудник;
	
КонецФункции	

Процедура ЗагрузитьШтатноеРасписание() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаШтатногоРасписания.division_code КАК division_code,
	|	ТаблицаШтатногоРасписания.job_code КАК job_code,
	|	ТаблицаШтатногоРасписания.vacancy КАК vacancy,
	|	ТаблицаШтатногоРасписания.date КАК date,
	|	ТаблицаШтатногоРасписания.Ошибка КАК Ошибка,
	|	ТаблицаШтатногоРасписания.ЕстьВБазе КАК ЕстьВБазе
	|ПОМЕСТИТЬ ВТ_ТаблицаШтатногоРасписания
	|ИЗ
	|	&ТаблицаШтатногоРасписания КАК ТаблицаШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаШтатногоРасписания.division_code КАК division_code,
	|	ВТ_ТаблицаШтатногоРасписания.job_code КАК job_code,
	|	ВТ_ТаблицаШтатногоРасписания.vacancy КАК vacancy,
	|	ВТ_ТаблицаШтатногоРасписания.date КАК date,
	|	ВТ_ТаблицаШтатногоРасписания.Ошибка КАК Ошибка,
	|	ВТ_ТаблицаШтатногоРасписания.ЕстьВБазе КАК ЕстьВБазе
	|ИЗ
	|	ВТ_ТаблицаШтатногоРасписания КАК ВТ_ТаблицаШтатногоРасписания
	|ГДЕ
	|	НЕ ВТ_ТаблицаШтатногоРасписания.Ошибка
	|	И НЕ ВТ_ТаблицаШтатногоРасписания.ЕстьВБазе";
	
	Запрос.УстановитьПараметр("ТаблицаШтатногоРасписания",ТаблицаШтатногоРасписания.Выгрузить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		ЕстьОшибка = Ложь;
		
		ТекущееПодразделение = Справочники.Подразделения.НайтиПоРеквизиту("КодСинхронизации",СтрокаТаблицыЗапроса.division_code,,Организация);
		Если ТекущееПодразделение.Пустая() Тогда
			Если СтрНайти(ПротоколОшибок,"Не найдено подразделение по коду: " + СтрокаТаблицыЗапроса.division_code) = 0 Тогда
				ПротоколОшибок = ПротоколОшибок + "Не найдено подразделение по коду: " + СтрокаТаблицыЗапроса.division_code + Символы.ПС;
			КонецЕсли;	
			ЕстьОшибка = Истина;
		КонецЕсли;	
		
		ТекущаяДолжность = Справочники.ДолжностиИПрофессии.НайтиПоРеквизиту("КодСинхронизации",СтрокаТаблицыЗапроса.job_code);
		Если ТекущаяДолжность.Пустая() Тогда
			Если СтрНайти(ПротоколОшибок,"Не найдена должность по коду: " + СтрокаТаблицыЗапроса.job_code) = 0 Тогда
				ПротоколОшибок = ПротоколОшибок + "Не найдена должность по коду: " + СтрокаТаблицыЗапроса.job_code + Символы.ПС;
			КонецЕсли;	
			ЕстьОшибка = Истина;
		КонецЕсли;
		
		Если ЕстьОшибка Тогда
			Продолжить;
		КонецЕсли;	
		
		РегистрШтатноеРасписание = РегистрыСведений.ШтатноеРасписание.СоздатьМенеджерЗаписи();
		РегистрШтатноеРасписание.Период    			= СтрокаТаблицыЗапроса.date;
		РегистрШтатноеРасписание.Организация    	= Организация;
		РегистрШтатноеРасписание.Подразделение      = ТекущееПодразделение;
		РегистрШтатноеРасписание.Должность 			= ТекущаяДолжность;
		РегистрШтатноеРасписание.КоличествоСтавок 	= СтрокаТаблицыЗапроса.vacancy;
		РегистрШтатноеРасписание.Записать();
		
	КонецЦикла;		
	
КонецПроцедуры

Процедура ЗагрузитьДокументы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.document_type КАК document_type,
	|	ТаблицаДокументов.document_date КАК document_date,
	|	ТаблицаДокументов.document_number КАК document_number,
	|	ТаблицаДокументов.document_note КАК document_note,
	|	ТаблицаДокументов.document_date_begin КАК document_date_begin,
	|	ТаблицаДокументов.document_date_end КАК document_date_end,
	|	ТаблицаДокументов.Документ КАК Документ,
	|	ТаблицаДокументов.Ошибка КАК Ошибка
	|ПОМЕСТИТЬ ВТ_ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоставаДокументов.document_type КАК document_type,
	|	ТаблицаСоставаДокументов.document_date КАК document_date,
	|	ТаблицаСоставаДокументов.document_number КАК document_number,
	|	ТаблицаСоставаДокументов.document_worker_snils КАК document_worker_snils,
	|	ТаблицаСоставаДокументов.document_division_code КАК document_division_code,
	|	ТаблицаСоставаДокументов.document_job_code КАК document_job_code,
	|	ТаблицаСоставаДокументов.document_vacancy КАК document_vacancy,
	|	ТаблицаСоставаДокументов.document_old_division_code КАК document_old_division_code,
	|	ТаблицаСоставаДокументов.document_old_job_code КАК document_old_job_code,
	|	ТаблицаСоставаДокументов.document_old_workplace_code КАК document_old_workplace_code,
	|	ТаблицаСоставаДокументов.document_workplace_code КАК document_workplace_code,
	|	ТаблицаСоставаДокументов.document_old_vacancy КАК document_old_vacancy,
	|	ТаблицаСоставаДокументов.date_end КАК date_end,
	|	ТаблицаСоставаДокументов.ЕстьВБазе КАК ЕстьВБазе,
	|	ТаблицаСоставаДокументов.Ошибка КАК Ошибка
	|ПОМЕСТИТЬ ВТ_ТаблицаСоставаДокументов
	|ИЗ
	|	&ТаблицаСоставаДокументов КАК ТаблицаСоставаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДокументов.document_type КАК document_type,
	|	ВТ_ТаблицаДокументов.document_date КАК document_date,
	|	ВТ_ТаблицаДокументов.document_number КАК document_number,
	|	ВТ_ТаблицаДокументов.document_note КАК document_note,
	|	ВТ_ТаблицаДокументов.document_date_begin КАК document_date_begin,
	|	ВТ_ТаблицаДокументов.document_date_end КАК document_date_end,
	|	ВТ_ТаблицаДокументов.Документ КАК Документ,
	|	ВТ_ТаблицаДокументов.Ошибка КАК Ошибка
	|ИЗ
	|	ВТ_ТаблицаДокументов КАК ВТ_ТаблицаДокументов
	|ГДЕ
	|	НЕ ВТ_ТаблицаДокументов.Ошибка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоставаДокументов.document_type КАК document_type,
	|	ВТ_ТаблицаСоставаДокументов.document_date КАК document_date,
	|	ВТ_ТаблицаСоставаДокументов.document_number КАК document_number,
	|	ВТ_ТаблицаСоставаДокументов.document_worker_snils КАК document_worker_snils,
	|	ВТ_ТаблицаСоставаДокументов.document_division_code КАК document_division_code,
	|	ВТ_ТаблицаСоставаДокументов.document_job_code КАК document_job_code,
	|	ВТ_ТаблицаСоставаДокументов.document_vacancy КАК document_vacancy,
	|	ВТ_ТаблицаСоставаДокументов.document_old_division_code КАК document_old_division_code,
	|	ВТ_ТаблицаСоставаДокументов.document_old_job_code КАК document_old_job_code,
	|	ВТ_ТаблицаСоставаДокументов.document_old_workplace_code КАК document_old_workplace_code,
	|	ВТ_ТаблицаСоставаДокументов.document_workplace_code КАК document_workplace_code,
	|	ВТ_ТаблицаСоставаДокументов.document_old_vacancy КАК document_old_vacancy,
	|	ВТ_ТаблицаСоставаДокументов.date_end КАК date_end,
	|	ВТ_ТаблицаСоставаДокументов.ЕстьВБазе КАК ЕстьВБазе,
	|	ВТ_ТаблицаСоставаДокументов.Ошибка КАК Ошибка
	|ИЗ
	|	ВТ_ТаблицаСоставаДокументов КАК ВТ_ТаблицаСоставаДокументов
	|ГДЕ
	|	НЕ ВТ_ТаблицаСоставаДокументов.Ошибка";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов",			ТаблицаДокументов.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаСоставаДокументов",	ТаблицаСоставаДокументов.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДляЗагрузкиДокументов 		= Результат[2].Выгрузить();
	ТаблицаДляЗагрузкиСоставаДокументов = Результат[3].Выгрузить();
	
	Для Каждого СтрокаТаблицыДляЗагрузкиДокументов Из ТаблицаДляЗагрузкиДокументов Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицыДляЗагрузкиДокументов.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыДляЗагрузкиДокументов.Документ) Тогда
			ДокументОбъект = СтрокаТаблицыДляЗагрузкиДокументов.Документ.ПолучитьОбъект();
		Иначе
			Если НРег(СтрокаТаблицыДляЗагрузкиДокументов.document_type) = "прием" ИЛИ НРег(СтрокаТаблицыДляЗагрузкиДокументов.document_type) = "приём" Тогда
				ДокументОбъект = Документы.ПриемНаРаботу.СоздатьДокумент();
			ИначеЕсли НРег(СтрокаТаблицыДляЗагрузкиДокументов.document_type) = "перемещение" Тогда
				ДокументОбъект = Документы.КадровоеПеремещение.СоздатьДокумент();	
			ИначеЕсли НРег(СтрокаТаблицыДляЗагрузкиДокументов.document_type) = "отсутствие" Тогда
				ДокументОбъект = Документы.ОтсутствиеНаРабочемМесте.СоздатьДокумент();
			ИначеЕсли НРег(СтрокаТаблицыДляЗагрузкиДокументов.document_type) = "увольнение" Тогда
				ДокументОбъект = Документы.Увольнение.СоздатьДокумент();		
			Иначе
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		СтруктураПоиска = НОВЫЙ Структура("document_type, document_date, document_number",
											СтрокаТаблицыДляЗагрузкиДокументов.document_type,
											СтрокаТаблицыДляЗагрузкиДокументов.document_date,
											СтрокаТаблицыДляЗагрузкиДокументов.document_number);
											
		НайденныеСтроки = ТаблицаДляЗагрузкиСоставаДокументов.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		//отсутствие на рабочем месте
		Если НРег(СтрокаТаблицыДляЗагрузкиДокументов.document_type) = "отсутствие" Тогда
			
			ДокументОбъект.ВходящийНомер 			= СтрокаТаблицыДляЗагрузкиДокументов.document_number;
			ДокументОбъект.ДатаВходящегоДокумента 	= СтрокаТаблицыДляЗагрузкиДокументов.document_date;
			ДокументОбъект.Дата 					= ТекущаяДата();
			ДокументОбъект.Комментарий 				= СтрокаТаблицыДляЗагрузкиДокументов.document_note;
			ДокументОбъект.Организация 				= Организация;
			
			ТекущийСотрудник = ПолучитьСотрудника(НОВЫЙ Структура("worker_snils",НайденныеСтроки[0].document_worker_snils));
			Если ЗначениеЗаполнено(ТекущийСотрудник) Тогда
				ДокументОбъект.Сотрудник 				= ТекущийСотрудник;
				ДокументОбъект.ДатаНачала 				= СтрокаТаблицыДляЗагрузкиДокументов.document_date_begin;
				ДокументОбъект.ДатаОкончания 			= СтрокаТаблицыДляЗагрузкиДокументов.document_date_end;
				ДокументОбъект.ПричинаОтсутствия 		= ПолучитьПричинуОтсутствия(СокрЛП(Лев(СтрокаТаблицыДляЗагрузкиДокументов.document_note,150)));
				Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
					ДокументОбъект.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
					ДокументОбъект.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
					ДокументОбъект.УстановитьНовыйНомер();
				КонецЕсли;
				Попытка ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение); Исключение КонецПопытки;
			Иначе
				Если СтрНайти(ПротоколОшибок,"В документе отсутствия на рабочем месте не найден сотрудник по коду: " + НайденныеСтроки[0].document_worker_snils) = 0 Тогда
					ПротоколОшибок = ПротоколОшибок + "В документе отсутствия на рабочем месте не найден сотрудник по коду: " + НайденныеСтроки[0].document_worker_snils + Символы.ПС;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;	
		
		//прием на работу
		Если НРег(СтрокаТаблицыДляЗагрузкиДокументов.document_type) = "прием" ИЛИ НРег(СтрокаТаблицыДляЗагрузкиДокументов.document_type) = "приём" Тогда
			
			ДокументОбъект.Работники.Очистить();
			ДокументОбъект.ВходящийНомер 			= СтрокаТаблицыДляЗагрузкиДокументов.document_number;
			ДокументОбъект.ДатаВходящегоДокумента 	= СтрокаТаблицыДляЗагрузкиДокументов.document_date;
			ДокументОбъект.Дата 					= ТекущаяДата();
			ДокументОбъект.Комментарий 				= СтрокаТаблицыДляЗагрузкиДокументов.document_note;
			ДокументОбъект.Организация 				= Организация;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ЕстьОшибка = Ложь;
				
				ТекущийСотрудник = ПолучитьСотрудника(НОВЫЙ Структура("worker_snils",НайденнаяСтрока.document_worker_snils));
				Если НЕ ЗначениеЗаполнено(ТекущийСотрудник) Тогда
					Если СтрНайти(ПротоколОшибок,"В документе приема на работу №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найден сотрудник по коду: " + НайденнаяСтрока.document_worker_snils) = 0 Тогда
						ПротоколОшибок 	= ПротоколОшибок + "В документе приема на работу №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найден сотрудник по коду: " + НайденнаяСтрока.document_worker_snils + Символы.ПС;
					КонецЕсли;	
					ЕстьОшибка 		= Истина;
				КонецЕсли;	
				
				ТекущееПодразделение = ПолучитьПодразделение("",НайденнаяСтрока.document_division_code,"0");
				Если НЕ ЗначениеЗаполнено(ТекущееПодразделение) Тогда
					Если СтрНайти(ПротоколОшибок,"В документе приема на работу №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдено подразделение по коду: " + НайденнаяСтрока.document_division_code) = 0 Тогда
						ПротоколОшибок 	= ПротоколОшибок + "В документе приема на работу №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдено подразделение по коду: " + НайденнаяСтрока.document_division_code + Символы.ПС;
					КонецЕсли;	
					ЕстьОшибка 		= Истина;
				КонецЕсли;
				
				ТекущаяДолжность = ПолучитьДолжность("",НайденнаяСтрока.document_job_code,"");
				Если НЕ ЗначениеЗаполнено(ТекущийСотрудник) Тогда
					Если СтрНайти(ПротоколОшибок,"В документе приема на работу №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена должность по коду: " + НайденнаяСтрока.document_job_code) = 0 Тогда
						ПротоколОшибок 	= ПротоколОшибок + "В документе приема на работу №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена должность по коду: " + НайденнаяСтрока.document_job_code + Символы.ПС;
					КонецЕсли;	
					ЕстьОшибка 		= Истина;
				КонецЕсли;
				
				Если Организация.ИспользоватьРабочиеМеста ТОгда
					
					ТекущееРабочееМесто = ПолучитьРабочееМесто("",НайденнаяСтрока.document_workplace_code);
					Если НЕ ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
						Если СтрНайти(ПротоколОшибок,"В документе приема на работу №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена рабочее место по коду: " + НайденнаяСтрока.document_workplace_code) = 0 Тогда
					    	ПротоколОшибок 	= ПротоколОшибок + "В документе приема на работу №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена рабочее место по коду: " + НайденнаяСтрока.document_workplace_code + Символы.ПС;
						КонецЕсли;	
						ЕстьОшибка 		= Истина;
					КонецЕсли;
					
				Иначе
					
					ТекущееРабочееМесто = Справочники.РабочиеМестаАСТБ.ПустаяСсылка();
					
				КонецЕсли;	
				
				Если ЕстьОшибка Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока 					= ДокументОбъект.Работники.Добавить();
				НоваяСтрока.Сотрудник 			= ТекущийСотрудник;
				НоваяСтрока.Подразделение 		= ТекущееПодразделение;
				НоваяСтрока.Должность 			= ТекущаяДолжность;
				НоваяСтрока.РабочееМесто 		= ТекущееРабочееМесто;
				НоваяСтрока.ЗанимаемыхСтавок 	= НайденнаяСтрока.document_vacancy;
				НоваяСтрока.ДатаОкончания 		= НайденнаяСтрока.date_end;
				
			КонецЦикла;
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
				ДокументОбъект.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
				ДокументОбъект.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
				ДокументОбъект.УстановитьНовыйНомер();
				Если НЕ ДокументОбъект.Работники.Количество() = 0 Тогда
					Попытка ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);  Исключение КонецПопытки;
				КонецЕсли;
			Иначе
				Попытка ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);  Исключение КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
		//увольнение
		Если НРег(СтрокаТаблицыДляЗагрузкиДокументов.document_type) = "увольнение" Тогда
			
			ДокументОбъект.Работники.Очистить();
			ДокументОбъект.ВходящийНомер 			= СтрокаТаблицыДляЗагрузкиДокументов.document_number;
			ДокументОбъект.ДатаВходящегоДокумента 	= СтрокаТаблицыДляЗагрузкиДокументов.document_date;
			ДокументОбъект.Дата 					= ТекущаяДата();
			ДокументОбъект.Комментарий 				= СтрокаТаблицыДляЗагрузкиДокументов.document_note;
			ДокументОбъект.Организация 				= Организация;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ЕстьОшибка = Ложь;
				
				ТекущийСотрудник = ПолучитьСотрудника(НОВЫЙ Структура("worker_snils",НайденнаяСтрока.document_worker_snils));
				Если НЕ ЗначениеЗаполнено(ТекущийСотрудник) Тогда
					Если СтрНайти(ПротоколОшибок,"В документе увольнения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найден сотрудник по коду: " + НайденнаяСтрока.document_worker_snils) = 0 Тогда
						ПротоколОшибок 	= ПротоколОшибок + "В документе увольнения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найден сотрудник по коду: " + НайденнаяСтрока.document_worker_snils + Символы.ПС;
					КонецЕсли;	
					ЕстьОшибка 		= Истина;
				КонецЕсли;	
				
				ТекущееПодразделение = ПолучитьПодразделение("",НайденнаяСтрока.document_division_code,"0");
				Если НЕ ЗначениеЗаполнено(ТекущееПодразделение) Тогда
					Если СтрНайти(ПротоколОшибок,"В документе увольнения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдено подразделение по коду: " + НайденнаяСтрока.document_division_code) = 0 Тогда
						ПротоколОшибок 	= ПротоколОшибок + "В документе увольнения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдено подразделение по коду: " + НайденнаяСтрока.document_division_code + Символы.ПС;
					КонецЕсли;	
					ЕстьОшибка 		= Истина;
				КонецЕсли;
				
				ТекущаяДолжность = ПолучитьДолжность("",НайденнаяСтрока.document_job_code,"");
				Если НЕ ЗначениеЗаполнено(ТекущаяДолжность) Тогда
					Если СтрНайти(ПротоколОшибок,"В документе увольнения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена должность по коду: " + НайденнаяСтрока.document_job_code) = 0 Тогда
						ПротоколОшибок 	= ПротоколОшибок + "В документе увольнения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена должность по коду: " + НайденнаяСтрока.document_job_code + Символы.ПС;
					КонецЕсли;	
					ЕстьОшибка 		= Истина;
				КонецЕсли;
				
				Если Организация.ИспользоватьРабочиеМеста ТОгда
					
					ТекущееРабочееМесто = ПолучитьРабочееМесто("",НайденнаяСтрока.document_workplace_code);
					Если НЕ ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
						Если СтрНайти(ПротоколОшибок,"В документе увольнения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена рабочее место по коду: " + НайденнаяСтрока.document_workplace_code) = 0 Тогда						
					    	ПротоколОшибок 	= ПротоколОшибок + "В документе увольнения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена рабочее место по коду: " + НайденнаяСтрока.document_workplace_code + Символы.ПС;
						КонецЕсли;	
						ЕстьОшибка 		= Истина;
					КонецЕсли;
					
				Иначе
					
					ТекущееРабочееМесто = Справочники.РабочиеМестаАСТБ.ПустаяСсылка();
					
				КонецЕсли;	
				
				Если ЕстьОшибка Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока 					= ДокументОбъект.Работники.Добавить();
				НоваяСтрока.Сотрудник 			= ТекущийСотрудник;
				НоваяСтрока.Подразделение 		= ТекущееПодразделение;
				НоваяСтрока.Должность 			= ТекущаяДолжность;
				НоваяСтрока.РабочееМесто 		= ТекущееРабочееМесто;
				НоваяСтрока.ЗанимаемыхСтавок 	= НайденнаяСтрока.document_vacancy;
				
			КонецЦикла;
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
				ДокументОбъект.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
				ДокументОбъект.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
				ДокументОбъект.УстановитьНовыйНомер();
				Если НЕ ДокументОбъект.Работники.Количество() = 0 Тогда
					Попытка ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);  Исключение КонецПопытки;
				КонецЕсли;
			Иначе
				Попытка ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);  Исключение КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
		//кадровое перемещение
		Если НРег(СтрокаТаблицыДляЗагрузкиДокументов.document_type) = "перемещение" Тогда
			
			ДокументОбъект.Работники.Очистить();
			ДокументОбъект.ВходящийНомер 			= СтрокаТаблицыДляЗагрузкиДокументов.document_number;
			ДокументОбъект.ДатаВходящегоДокумента 	= СтрокаТаблицыДляЗагрузкиДокументов.document_date;
			ДокументОбъект.Дата 					= ТекущаяДата();
			ДокументОбъект.Комментарий 				= СтрокаТаблицыДляЗагрузкиДокументов.document_note;
			ДокументОбъект.Организация 				= Организация;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ЕстьОшибка = Ложь;
				
				ТекущийСотрудник = ПолучитьСотрудника(НОВЫЙ Структура("worker_snils",НайденнаяСтрока.document_worker_snils));
				Если НЕ ЗначениеЗаполнено(ТекущийСотрудник) Тогда
					Если СтрНайти(ПротоколОшибок,"В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найден сотрудник по коду: " + НайденнаяСтрока.document_worker_snils) = 0 Тогда						
						ПротоколОшибок 	= ПротоколОшибок + "В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найден сотрудник по коду: " + НайденнаяСтрока.document_worker_snils + Символы.ПС;
					КонецЕсли;	
					ЕстьОшибка 		= Истина;
				КонецЕсли;	
				
				ТекущееПодразделениеНовое = ПолучитьПодразделение("",НайденнаяСтрока.document_division_code,"0");
				Если НЕ ЗначениеЗаполнено(ТекущееПодразделениеНовое) Тогда
					Если СтрНайти(ПротоколОшибок,"В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдено подразделение по коду: " + НайденнаяСтрока.document_division_code) = 0 Тогда
						ПротоколОшибок 	= ПротоколОшибок + "В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдено подразделение по коду: " + НайденнаяСтрока.document_division_code + Символы.ПС;
					КонецЕсли;	
					ЕстьОшибка 		= Истина;
				КонецЕсли;
				
				ТекущееПодразделениеСтарое = ПолучитьПодразделение("",НайденнаяСтрока.document_old_division_code,"0");
				Если НЕ ЗначениеЗаполнено(ТекущееПодразделениеСтарое) Тогда
					Если СтрНайти(ПротоколОшибок,"В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдено подразделение по коду: " + НайденнаяСтрока.document_old_division_code) = 0 Тогда
						ПротоколОшибок 	= ПротоколОшибок + "В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдено подразделение по коду: " + НайденнаяСтрока.document_old_division_code + Символы.ПС;
					КонецЕсли;	
					ЕстьОшибка 		= Истина;
				КонецЕсли;
				
				ТекущаяДолжностьНовая = ПолучитьДолжность("",НайденнаяСтрока.document_job_code,"");
				Если НЕ ЗначениеЗаполнено(ТекущаяДолжностьНовая) Тогда
					Если СтрНайти(ПротоколОшибок,"В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена должность по коду: " + НайденнаяСтрока.document_job_code) = 0 Тогда
						ПротоколОшибок 	= ПротоколОшибок + "В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена должность по коду: " + НайденнаяСтрока.document_job_code + Символы.ПС;
					КонецЕсли;	
					ЕстьОшибка 		= Истина;
				КонецЕсли;
				
				ТекущаяДолжностьСтарая = ПолучитьДолжность("",НайденнаяСтрока.document_old_job_code,"");
				Если НЕ ЗначениеЗаполнено(ТекущаяДолжностьСтарая) Тогда
					Если СтрНайти(ПротоколОшибок,"В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена должность по коду: " + НайденнаяСтрока.document_old_job_code) = 0 Тогда
						ПротоколОшибок 	= ПротоколОшибок + "В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена должность по коду: " + НайденнаяСтрока.document_old_job_code + Символы.ПС;
					КонецЕсли;	
					ЕстьОшибка 		= Истина;
				КонецЕсли;
				
				Если Организация.ИспользоватьРабочиеМеста ТОгда
					
					ТекущееРабочееМестоНовое = ПолучитьРабочееМесто("",НайденнаяСтрока.document_workplace_code);
					Если НЕ ЗначениеЗаполнено(ТекущееРабочееМестоНовое) Тогда
						Если СтрНайти(ПротоколОшибок,"В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена рабочее место по коду: " + НайденнаяСтрока.document_workplace_code) = 0 Тогда
					    	ПротоколОшибок 	= ПротоколОшибок + "В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена рабочее место по коду: " + НайденнаяСтрока.document_workplace_code + Символы.ПС;
						КонецЕсли;	
						ЕстьОшибка 		= Истина;
					КонецЕсли;
					
					ТекущееРабочееМестоСтарое = ПолучитьРабочееМесто("",НайденнаяСтрока.document_old_workplace_code);
					Если НЕ ЗначениеЗаполнено(ТекущееРабочееМестоСтарое) Тогда
						Если СтрНайти(ПротоколОшибок,"В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена рабочее место по коду: " + НайденнаяСтрока.document_old_workplace_code) = 0 Тогда
					    	ПротоколОшибок 	= ПротоколОшибок + "В документе кадрового перемещения №" + СтрокаТаблицыДляЗагрузкиДокументов.document_number + " не найдена рабочее место по коду: " + НайденнаяСтрока.document_old_workplace_code + Символы.ПС;
						КонецЕсли;	
						ЕстьОшибка 		= Истина;
					КонецЕсли;
					
				Иначе
					
					ТекущееРабочееМестоНовое 	= Справочники.РабочиеМестаАСТБ.ПустаяСсылка();
					ТекущееРабочееМестоСтарое 	= Справочники.РабочиеМестаАСТБ.ПустаяСсылка();
					
				КонецЕсли;	
				
				Если ЕстьОшибка Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока 						= ДокументОбъект.Работники.Добавить();
				НоваяСтрока.Сотрудник 				= ТекущийСотрудник;
				НоваяСтрока.ПодразделениеНовое		= ТекущееПодразделениеНовое;
				НоваяСтрока.ПодразделениеСтарое		= ТекущееПодразделениеСтарое;
				НоваяСтрока.ДолжностьНовая			= ТекущаяДолжностьНовая;
				НоваяСтрока.ДолжностьСтарая			= ТекущаяДолжностьСтарая;
				НоваяСтрока.РабочееМестоНовое		= ТекущееРабочееМестоНовое;
				НоваяСтрока.РабочееМестоСтарое		= ТекущееРабочееМестоСтарое;
				НоваяСтрока.ЗанимаемыхСтавокНовое	= НайденнаяСтрока.document_vacancy;
				НоваяСтрока.ЗанимаемыхСтавокСтарое	= НайденнаяСтрока.document_old_vacancy;
				НоваяСтрока.ДатаОкончания 			= НайденнаяСтрока.date_end;
				
			КонецЦикла;
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
				ДокументОбъект.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
				ДокументОбъект.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
				ДокументОбъект.УстановитьНовыйНомер();
				Если НЕ ДокументОбъект.Работники.Количество() = 0 Тогда
					Попытка ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);  Исключение КонецПопытки;
				КонецЕсли;
			Иначе
				Попытка ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);  Исключение КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьПричинуОтсутствия(ПричинаОтсутствия) Экспорт
	
	Причина = Справочники.ПричиныОтсутствияНаРаботе.НайтиПоНаименованию(ПричинаОтсутствия);
	
	Если Причина.Пустая() Тогда
		
		НовыйЭлемент 				= Справочники.ПричиныОтсутствияНаРаботе.СоздатьЭлемент();
		НовыйЭлемент.Наименование 	= ПричинаОтсутствия;
		НовыйЭлемент.УстановитьНовыйКод();
		НовыйЭлемент.Записать();
		
		Причина = НовыйЭлемент.Ссылка;
		
	КонецЕсли;
	
	Возврат Причина;
	
КонецФункции

#КонецЕсли	