
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытьФормуБезусловно, ПропускатьКонтрольОтказаТекущейСтраницы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
	
	ЗаполнитьТаблицуПереходов("Инициализация");
	ИницициализироватьСлужебныеПеременныеОтборов();
	
	ОтмеченныеДолжности = Новый Структура;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ЗакрытьФормуБезусловно = Ложь;
	ПользовательОтветилДаНаВопросОСопоставлении = Ложь;
		
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	//Если ЗакрытьФормуБезусловно = Истина Тогда
	//	Возврат;
	//КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ЗакрытаФормаМастераНорм");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы

&НаКлиенте
Процедура НормаВыдачиПриИзменении(Элемент)
	
	СтруктураНормаВыдачи 		= ПолучитьРеквизитыНормыВыдачи(НормаВыдачи);
	НоменклатураНормОрганизации = СтруктураНормаВыдачи.НоменклатураНормы;
	Периодичность 				= СтруктураНормаВыдачи.ПериодичностьВыдачи;
	ВидВыдачи 					= СтруктураНормаВыдачи.ВидВыдачи;
	ВидРасчета 					= СтруктураНормаВыдачи.ВидРасчета;
	ЕдиницаИзмерения 			= СтруктураНормаВыдачи.ЕдиницаИзмерения;
	ГОСТ 						= СтруктураНормаВыдачи.ГОСТ;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНормОрганизацииПриИзменении(Элемент)
	// Подбирать норму выдачи будем при смене страницы
	НормаВыдачи = ПредопределенноеЗначение("Справочник.НормыВыдачиСИЗ.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	// Подбирать норму выдачи будем при смене страницы
	НормаВыдачи = ПредопределенноеЗначение("Справочник.НормыВыдачиСИЗ.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура ВидВыдачиПриИзменении(Элемент)
	// Подбирать норму выдачи будем при смене страницы
	НормаВыдачи = ПредопределенноеЗначение("Справочник.НормыВыдачиСИЗ.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаПриИзменении(Элемент)
	// Подбирать норму выдачи будем при смене страницы
	НормаВыдачи = ПредопределенноеЗначение("Справочник.НормыВыдачиСИЗ.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	// Подбирать норму выдачи будем при смене страницы
	НормаВыдачи = ПредопределенноеЗначение("Справочник.НормыВыдачиСИЗ.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура ГОСТПриИзменении(Элемент)
	// Подбирать норму выдачи будем при смене страницы
	НормаВыдачи = ПредопределенноеЗначение("Справочник.НормыВыдачиСИЗ.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура Декорация7Нажатие(Элемент)
	ТекстОписания = " - Коллективная выдача – выдача СИЗ группе сотрудников или ее представителю (МОЛ) по ранее сформированной потребности (по установленным нормам выдачи СИЗ). Коллективной выдачей чаще всего пользуются при распределении СИЗ с маленькой периодичностью выдачи, например, 1 шт. на 1 месяц. Результат выдачи заносится в электронную личную карточку сотрудника;
					| - Персональная выдача – выдача СИЗ конкретному сотруднику по ранее сформированной потребности (по установленным нормам выдачи СИЗ). Результат выдачи заносится в электронную личную карточку сотрудника.";
	ПоказатьЗначение(,ТекстОписания);
КонецПроцедуры

&НаКлиенте
Процедура Декорация4Нажатие(Элемент)
	ТекстОписания = "Наименование нормы выдачи, например: ""Белье нательное""";
	ПоказатьЗначение(,ТекстОписания);
КонецПроцедуры

&НаКлиенте
Процедура Декорация5Нажатие(Элемент)
	ТекстОписания = "Сколько единиц номенклатуры, на какой период выдавать сотруднику, например ""2 в 1 год""";
	ПоказатьЗначение(,ТекстОписания);
КонецПроцедуры

&НаКлиенте
Процедура Декорация8Нажатие(Элемент)
	ТекстОписания = " - До износа – использование какого-либо СИЗ до потери его защитных свойств. Возможно, проставление приблизительной периодичности выдачи вместе с данным сроком носки. В таком случае появится возможность списания СИЗ ранее заданного периода. Таким образом, если одна номенклатура была выдана на год, но износилась раньше, ее можно будет списать и выдать сотруднику новую номенклатуру по данной норме;
					| - Период – выдача определенного количества СИЗ на заданный период времени; - Дежурный – выдача одного или нескольких СИЗ на группу сотрудников или подразделение. Выданные по данному виду расчета средства защиты будут находиться на предприятии в качестве резерва для групп посетителей (практиканты, студенты, делегации и т.п.) или храниться для отдельных видов работ и использоваться сотрудниками, когда это необходимо.";
	ПоказатьЗначение(,ТекстОписания);
КонецПроцедуры

&НаКлиенте
Процедура Декорация9Нажатие(Элемент)
	ТекстОписания = "Единица измерения для исчисления Номенклатуры";
	ПоказатьЗначение(,ТекстОписания);
КонецПроцедуры

&НаКлиенте
Процедура Декорация10Нажатие(Элемент)
	ТекстОписания = "Наименования ГОСТа, Например ""ГОСТ 1135-88""";
	ПоказатьЗначение(,ТекстОписания);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераНазначитьНормыВыдачиВыборПодразделений

&НаСервере
Процедура ОрганизацияДляПодразделенийПриИзмененииНаСервере()
	
	//ОтмеченныеДолжности = Новый Соответствие;
		
	ЗаполнитьТаблицыОтборов();
	УстановитьВидимостьЭлементовСтраницаМастераНазначитьНормыВыдачиВыборПодразделений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияДляПодразделенийПриИзменении(Элемент)
	ОрганизацияДляПодразделенийПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборовДолжностейПометкаПриИзменении(Элемент)
	Если НЕ ИмяПоследнегоОтбора = "ТаблицаОтборовДолжностей" Тогда
		ОбновитьОтборы("ТаблицаОтборовДолжностей");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборовПодразделенийПометкаПриИзменении(Элемент)
	Если НЕ ИмяПоследнегоОтбора = "ТаблицаОтборовПодразделений" Тогда
		ОбновитьОтборы("ТаблицаОтборовПодразделений");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборовРабочиеМестаПометкаПриИзменении(Элемент)
	Если НЕ ИмяПоследнегоОтбора = "ТаблицаОтборовРабочиеМеста" Тогда
		ОбновитьОтборы("ТаблицаОтборовРабочиеМеста");
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераНазначитьНормыВыдачиВыборСотрудников

&НаСервере
Процедура ОрганизацияДляСотрудниковПриИзмененииНаСервере()
	
	ЗаполнитьТаблицуСотрудников();
	УстановитьВидимостьЭлементовСтраницаМастераНазначитьНормыВыдачиВыборСотрудников();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияДляСотрудниковПриИзменении(Элемент)
	ОрганизацияДляСотрудниковПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСотрудникиПометкаПриИзменении(Элемент)
	
	//ТекущиеДанные = Элементы.ТаблицаСотрудники.ТекущиеДанные;
	//
	//Если ОтмеченныеСотрудники[ТекущиеДанные.Сотрудник] = Неопределено Тогда
	//	ОтмеченныеСотрудники[ТекущиеДанные.Сотрудник] = Истина;
	//Иначе
	//      ОтмеченныеСотрудники.Удалить(ТекущиеДанные.Сотрудник);
	//КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор

&НаСервере
Процедура ОрганизацияПроизвольныйОтборПриИзмененииНаСервере()
	
	УстановитьВидимостьЭлементовСтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПроизвольныйОтборПриИзменении(Элемент)
	ОрганизацияПроизвольныйОтборПриИзмененииНаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераНазначитьНормыВыдачиСводная

&НаКлиенте
Процедура ОбщееОснованиеНазначенияПриИзменении(Элемент)
	Если УстановитьОбщееОснование И ЗначениеЗаполнено(ОбщееОснование) Тогда
		ЗаполнитьОснованиеВСтрокахСводнойТаблицыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбщееОснованиеПриИзменении(Элемент)
	Элементы.ОбщееОснованиеНазначения.ТолькоПросмотр = НЕ УстановитьОбщееОснование;
	Элементы.ОбщееОснованиеНазначения.Доступность = ?(ЗначениеЗаполнено(ОбщееОснование), Истина, УстановитьОбщееОснование);
		
	Если УстановитьОбщееОснование И ЗначениеЗаполнено(ОбщееОснование) Тогда
		ЗаполнитьОснованиеВСтрокахСводнойТаблицыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОснованиеВСтрокахСводнойТаблицыНаСервере()
	
	тзНазначенияНорм = РеквизитФормыВЗначение("СводнаяТаблицаНазначенияНорм");
	ЗаполнитьПолеВСтрокахТаблицыЗначений(ОбщееОснование, "Основание", тзНазначенияНорм);
	ЗначениеВРеквизитФормы(тзНазначенияНорм, "СводнаяТаблицаНазначенияНорм")
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбщееУсловиеПриИзменении(Элемент)
	Элементы.ОбщееУсловиеНазначения.ТолькоПросмотр = НЕ УстановитьОбщееУсловие;
	Элементы.ОбщееУсловиеНазначения.Доступность = ?(ЗначениеЗаполнено(ОбщееУсловие), Истина, УстановитьОбщееУсловие);
	
	Если УстановитьОбщееУсловие И ЗначениеЗаполнено(ОбщееУсловие) Тогда
		ЗаполнитьУсловиеВСтрокахСводнойТаблицыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбщееУсловиеНазначенияПриИзменении(Элемент)
	Если УстановитьОбщееУсловие И ЗначениеЗаполнено(ОбщееУсловие) Тогда
		ЗаполнитьУсловиеВСтрокахСводнойТаблицыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловиеВСтрокахСводнойТаблицыНаСервере()
	
	тзНазначенияНорм = РеквизитФормыВЗначение("СводнаяТаблицаНазначенияНорм");
	ЗаполнитьПолеВСтрокахТаблицыЗначений(ОбщееУсловие, "УсловиеНормы", тзНазначенияНорм);  
	ЗначениеВРеквизитФормы(тзНазначенияНорм, "СводнаяТаблицаНазначенияНорм")
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераОтменаНормыНастройки

&НаСервере
Процедура ОрганизацияОтменыПриИзмененииНаСервере()
		
	ЗаполнитьТаблицуНормВыдачи();
	УстановитьВидимостьЭлементовСтраницаМастераОтменаНормыНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтменыПриИзменении(Элемент)
	ОрганизацияОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДолжностиОтменыПриИзмененииНаСервере()
	ЗаполнитьТаблицуНормВыдачи();
КонецПроцедуры

&НаКлиенте
Процедура ДолжностиОтменыПриИзменении(Элемент)
	ДолжностиОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодразделенияОтменыПриИзмененииНаСервере()
	ЗаполнитьТаблицуНормВыдачи();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияОтменыПриИзменении(Элемент)
	ПодразделенияОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РабочиеМестаОтменыПриИзмененииНаСервере()
	ЗаполнитьТаблицуНормВыдачи();
КонецПроцедуры

&НаКлиенте
Процедура РабочиеМестаОтменыПриИзменении(Элемент)
	РабочиеМестаОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НормыВыдачиОтменыПриИзмененииНаСервере()
	ЗаполнитьТаблицуНормВыдачи();
КонецПроцедуры

&НаКлиенте
Процедура НормыВыдачиОтменыПриИзменении(Элемент)
	НормыВыдачиОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СотрудникиОтменыПриИзмененииНаСервере()
	ЗаполнитьТаблицуНормВыдачи();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОтменыПриИзменении(Элемент)
	СотрудникиОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НоменклатураНормОтменыПриИзмененииНаСервере()
	ЗаполнитьТаблицуНормВыдачи();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНормОтменыПриИзменении(Элемент)
	НоменклатураНормОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокДолжностиОтменыПриИзмененииНаСервере()
	ЗаполнитьТаблицуНормВыдачи();
КонецПроцедуры

&НаКлиенте
Процедура СписокДолжностиОтменыПриИзменении(Элемент)
	СписокДолжностиОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокПодразделенияОтменыПриИзмененииНаСервере()
	ЗаполнитьТаблицуНормВыдачи();
КонецПроцедуры

&НаКлиенте
Процедура СписокПодразделенияОтменыПриИзменении(Элемент)
	СписокПодразделенияОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокРабочиеМестаОтменыПриИзмененииНаСервере()
	ЗаполнитьТаблицуНормВыдачи();
КонецПроцедуры

&НаКлиенте
Процедура СписокРабочиеМестаОтменыПриИзменении(Элемент)
	СписокРабочиеМестаОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокСотрудникиОтменыПриИзмененииНаСервере()
	ЗаполнитьТаблицуНормВыдачи();
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудникиОтменыПриИзменении(Элемент)
	СписокСотрудникиОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокНоменклатураНормОтменыПриИзмененииНаСервере()
	ЗаполнитьТаблицуНормВыдачи();
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураНормОтменыПриИзменении(Элемент)
	СписокНоменклатураНормОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокНормыВыдачиОтменыПриИзмененииНаСервере()
	ЗаполнитьТаблицуНормВыдачи();
КонецПроцедуры

&НаКлиенте
Процедура СписокНормыВыдачиОтменыПриИзменении(Элемент)
	СписокНормыВыдачиОтменыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокПодразделенияОтменыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Список = ПолучитьСписокПодразделений(Объект.Организация);
	
	//Установки галочек ранее выбранных элементов пользователем.
    Для Каждого ЭлементСписка Из СписокПодразделенияОтмены Цикл
	    НайденныйЭлемент = Список.НайтиПоЗначению(ЭлементСписка.Значение);
		Если НайденныйЭлемент <> Неопределено Тогда
	    	НайденныйЭлемент.Пометка = Истина;
		КонецЕсли;
    КонецЦикла;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ПодразделенияНачалоВыбораЗавершение", ЭтаФорма);
	Список.ПоказатьОтметкуЭлементов(ОповещениеВыбора, "Выбор подразделений");
	
КонецПроцедуры

&НаКлиенте 
Процедура ПодразделенияНачалоВыбораЗавершение(Результат, ПараметрыОповещения = Неопределено) Экспорт
    
    Если Результат = Неопределено Тогда 
        Возврат;
	КонецЕсли;
	
	СписокПодразделенияОтмены.Очистить(); //очищаем список значений
	
	Для Каждого ЭлементСписка Из Результат Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокПодразделенияОтмены.Добавить(ЭлементСписка.Значение); //добавляем выбранные элементы в список значений.
		КонецЕсли;
	КонецЦикла;
	
	СписокПодразделенияОтменыПриИзмененииНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура СписокРабочиеМестаОтменыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Список = ПолучитьСписокРабочихМест(Объект.Организация);
	
	//Установки галочек ранее выбранных элементов пользователем.
    Для Каждого ЭлементСписка Из СписокРабочиеМестаОтмены Цикл
	    НайденныйЭлемент = Список.НайтиПоЗначению(ЭлементСписка.Значение);
		Если НайденныйЭлемент <> Неопределено Тогда
	    	НайденныйЭлемент.Пометка = Истина;
		КонецЕсли;
    КонецЦикла;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("РабочиеМестаНачалоВыбораЗавершение", ЭтаФорма);
	Список.ПоказатьОтметкуЭлементов(ОповещениеВыбора, "Выбор рабочих мест");
	
КонецПроцедуры

&НаКлиенте 
Процедура РабочиеМестаНачалоВыбораЗавершение(Результат, ПараметрыОповещения = Неопределено) Экспорт
    
    Если Результат = Неопределено Тогда 
        Возврат;
	КонецЕсли;
	
	СписокРабочиеМестаОтмены.Очистить(); //очищаем список значений
	
	Для Каждого ЭлементСписка Из Результат Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокРабочиеМестаОтмены.Добавить(ЭлементСписка.Значение); //добавляем выбранные элементы в список значений.
		КонецЕсли;
	КонецЦикла;
	
	СписокРабочиеМестаОтменыПриИзмененииНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудникиОтменыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Список = ПолучитьСписокСотрудников(Объект.Организация);
	
	//Установки галочек ранее выбранных элементов пользователем.
    Для Каждого ЭлементСписка Из СписокСотрудникиОтмены Цикл
	    НайденныйЭлемент = Список.НайтиПоЗначению(ЭлементСписка.Значение);
		Если НайденныйЭлемент <> Неопределено Тогда
	    	НайденныйЭлемент.Пометка = Истина;
		КонецЕсли;
    КонецЦикла;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("СотрудникиНачалоВыбораЗавершение", ЭтаФорма);
	Список.ПоказатьОтметкуЭлементов(ОповещениеВыбора, "Выбор сотрудников");
	
КонецПроцедуры

&НаКлиенте 
Процедура СотрудникиНачалоВыбораЗавершение(Результат, ПараметрыОповещения = Неопределено) Экспорт
    
    Если Результат = Неопределено Тогда 
        Возврат;
	КонецЕсли;
	
	СписокСотрудникиОтмены.Очистить(); //очищаем список значений
	
	Для Каждого ЭлементСписка Из Результат Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокСотрудникиОтмены.Добавить(ЭлементСписка.Значение); //добавляем выбранные элементы в список значений.
		КонецЕсли;
	КонецЦикла;
	
	СписокСотрудникиОтменыПриИзмененииНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураНормОтменыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Список = ПолучитьСписокНоменклатурыНорм(Объект.Организация);
	
	//Установки галочек ранее выбранных элементов пользователем.
    Для Каждого ЭлементСписка Из СписокНоменклатураНормОтмены Цикл
	    НайденныйЭлемент = Список.НайтиПоЗначению(ЭлементСписка.Значение);
		Если НайденныйЭлемент <> Неопределено Тогда
	    	НайденныйЭлемент.Пометка = Истина;
		КонецЕсли;
    КонецЦикла;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("НоменклатураНормНачалоВыбораЗавершение", ЭтаФорма);
	Список.ПоказатьОтметкуЭлементов(ОповещениеВыбора, "Выбор номенклатура норм");
	
КонецПроцедуры

&НаКлиенте 
Процедура НоменклатураНормНачалоВыбораЗавершение(Результат, ПараметрыОповещения = Неопределено) Экспорт
    
    Если Результат = Неопределено Тогда 
        Возврат;
	КонецЕсли;
	
	СписокНоменклатураНормОтмены.Очистить(); //очищаем список значений
	
	Для Каждого ЭлементСписка Из Результат Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокНоменклатураНормОтмены.Добавить(ЭлементСписка.Значение); //добавляем выбранные элементы в список значений.
		КонецЕсли;
	КонецЦикла;
	
	СписокНоменклатураНормОтменыПриИзмененииНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура СписокНормыВыдачиОтменыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Список = ПолучитьСписокНормВыдачи(Объект.Организация);
	
	//Установки галочек ранее выбранных элементов пользователем.
    Для Каждого ЭлементСписка Из СписокНормыВыдачиОтмены Цикл
	    НайденныйЭлемент = Список.НайтиПоЗначению(ЭлементСписка.Значение);
		Если НайденныйЭлемент <> Неопределено Тогда
	    	НайденныйЭлемент.Пометка = Истина;
		КонецЕсли;
    КонецЦикла;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("НормыВыдачиНачалоВыбораЗавершение", ЭтаФорма);
	Список.ПоказатьОтметкуЭлементов(ОповещениеВыбора, "Выбор норм выдачи");
	
КонецПроцедуры

&НаКлиенте 
Процедура НормыВыдачиНачалоВыбораЗавершение(Результат, ПараметрыОповещения = Неопределено) Экспорт
    
    Если Результат = Неопределено Тогда 
        Возврат;
	КонецЕсли;
	
	СписокНормыВыдачиОтмены.Очистить(); //очищаем список значений
	
	Для Каждого ЭлементСписка Из Результат Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокНормыВыдачиОтмены.Добавить(ЭлементСписка.Значение); //добавляем выбранные элементы в список значений.
		КонецЕсли;
	КонецЦикла;
	
	СписокНормыВыдачиОтменыПриИзмененииНаСервере();
    
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераКопированиеНормыНастройки

&НаКлиенте
Процедура ЦелевыеНормыПриАктивизацииСтроки(Элемент)
	
	//Если ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные = Неопределено Тогда
	//	ТекущееПодразделение 	= ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
	//	ТекущаяДолжность 		= ПредопределенноеЗначение("Справочник.ДолжностиИПрофессии.ПустаяСсылка");
	//	ТекущееРабочееМесто 	= ПредопределенноеЗначение("Справочник.РабочиеМестаАСТБ.ПустаяСсылка");
	//Иначе
	//	ТекущееПодразделение 	= ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные.Подразделение;
	//	ТекущаяДолжность 		= ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные.Должность;
	//	ТекущееРабочееМесто 	= ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные.РабочееМесто;
	//	
	//	Элементы.ЦелевыеНормыТаблица.ТолькоПросмотр = Ложь;
	//	Элементы.ЦелевыеНормыПодробно.ТолькоПросмотр = Ложь;		
	//КонецЕсли;
	//
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормыПодробно.Отбор, "Организация", 	Объект.Организация,		ВидСравненияКомпоновкиДанных.Равно, 	"Организация", 	Истина);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормыПодробно.Отбор, "Подразделение", 	ТекущееПодразделение,	ВидСравненияКомпоновкиДанных.Равно,		"Подразделение",Истина);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормыПодробно.Отбор, "Должность", 		ТекущаяДолжность,		ВидСравненияКомпоновкиДанных.Равно, 	"Должность", 	Истина);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормыПодробно.Отбор, "РабочееМесто", 	ТекущееРабочееМесто,	ВидСравненияКомпоновкиДанных.Равно, 	"РабочееМесто", Истина);
	//
	////ПоместитьНормыКопированияВПараметрДинамическогоСписка();
	//
	//СтруктураОтбора = Новый Структура;
	//СтруктураОтбора.Вставить("Организация", 	Объект.Организация);
	//СтруктураОтбора.Вставить("Подразделение", 	ТекущееПодразделение);
	//СтруктураОтбора.Вставить("Должность", 		ТекущаяДолжность);
	//СтруктураОтбора.Вставить("РабочееМесто", 	ТекущееРабочееМесто);
	//	
	//ЗаполнитьТаблицуЦелевыхНорм(СтруктураОтбора);
	
	
	// Учтем выбор нескольких строк
	МассивВыбранныхПодразделений = Новый Массив;
	МассивВыбранныхДолжностей = Новый Массив;
	МассивВыбранныхРабочихМест = Новый Массив;
	
	Если ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные = Неопределено Тогда
		ТекущееПодразделение 	= ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
		ТекущаяДолжность 		= ПредопределенноеЗначение("Справочник.ДолжностиИПрофессии.ПустаяСсылка");
		ТекущееРабочееМесто 	= ПредопределенноеЗначение("Справочник.РабочиеМестаАСТБ.ПустаяСсылка");
		
		МассивВыбранныхПодразделений.Добавить(ТекущееПодразделение);
		МассивВыбранныхДолжностей.Добавить(ТекущаяДолжность);
		МассивВыбранныхРабочихМест.Добавить(ТекущееРабочееМесто);		
	Иначе

		Элементы.ЦелевыеНормыТаблица.ТолькоПросмотр = Ложь;
		Элементы.ЦелевыеНормыТаблица.Доступность = Истина;
		
		Элементы.ЦелевыеНормыПодробно.ТолькоПросмотр = Ложь;
		Элементы.ЦелевыеНормыПодробно.Доступность = Истина;
		
		ВыделенныеСтроки = Элементы.ЦелевыеНормы.ВыделенныеСтроки;
        Для Каждого СтрокаСписка Из ВыделенныеСтроки Цикл
            ДанныеСтрокиСписка = Элементы.ЦелевыеНормы.ДанныеСтроки(СтрокаСписка);
            МассивВыбранныхПодразделений.Добавить(ДанныеСтрокиСписка.Подразделение);
			МассивВыбранныхДолжностей.Добавить(ДанныеСтрокиСписка.Должность);
			МассивВыбранныхРабочихМест.Добавить(ДанныеСтрокиСписка.РабочееМесто);
        КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормыПодробно.Отбор, "Организация", 	Объект.Организация,				ВидСравненияКомпоновкиДанных.Равно, 	"Организация", 	Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормыПодробно.Отбор, "Подразделение", 	МассивВыбранныхПодразделений,	ВидСравненияКомпоновкиДанных.ВСписке,	"Подразделение",Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормыПодробно.Отбор, "Должность", 		МассивВыбранныхДолжностей,		ВидСравненияКомпоновкиДанных.ВСписке, 	"Должность", 	Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормыПодробно.Отбор, "РабочееМесто", 	МассивВыбранныхРабочихМест,		ВидСравненияКомпоновкиДанных.ВСписке, 	"РабочееМесто", Истина);
	
	ПоместитьНормыКопированияВПараметрДинамическогоСписка();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", 	Объект.Организация);
	СтруктураОтбора.Вставить("Подразделения", 	МассивВыбранныхПодразделений);
	СтруктураОтбора.Вставить("Должности", 		МассивВыбранныхДолжностей);
	СтруктураОтбора.Вставить("РабочиеМеста", 	МассивВыбранныхРабочихМест);
	
	ЗаполнитьТаблицуЦелевыхНорм(СтруктураОтбора);
		
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеНормыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанныеТаблицы = ЭтаФорма.Элементы.ИсходныеНормы.ТекущиеДанные;
	
	Если ТекущиеДанныеТаблицы = Неопределено Тогда
		ТекущееПодразделение 	= ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
		ТекущаяДолжность 		= ПредопределенноеЗначение("Справочник.ДолжностиИПрофессии.ПустаяСсылка");
		ТекущееРабочееМесто 	= ПредопределенноеЗначение("Справочник.РабочиеМестаАСТБ.ПустаяСсылка");
	Иначе
		ТекущееПодразделение 	= ТекущиеДанныеТаблицы.Подразделение;
		ТекущаяДолжность 		= ТекущиеДанныеТаблицы.Должность;
		ТекущееРабочееМесто 	= ТекущиеДанныеТаблицы.РабочееМесто;
		
		Элементы.ИсходныеНормыТаблица.ТолькоПросмотр = Ложь;
		Элементы.ИсходныеНормыТаблица.Доступность = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ИсходныеНормыПодробно.Отбор, "Организация", 	Объект.Организация,		ВидСравненияКомпоновкиДанных.Равно, 	"Организация", 	Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ИсходныеНормыПодробно.Отбор, "Подразделение", ТекущееПодразделение,	ВидСравненияКомпоновкиДанных.Равно,		"Подразделение",Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ИсходныеНормыПодробно.Отбор, "Должность", 	ТекущаяДолжность,		ВидСравненияКомпоновкиДанных.Равно, 	"Должность", 	Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ИсходныеНормыПодробно.Отбор, "РабочееМесто", 	ТекущееРабочееМесто,	ВидСравненияКомпоновкиДанных.Равно, 	"РабочееМесто", Истина);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("Подразделение", ТекущееПодразделение);
	СтруктураОтбора.Вставить("Должность", ТекущаяДолжность);
	СтруктураОтбора.Вставить("РабочееМесто", ТекущееРабочееМесто);
	
	Если ТекущаяСтрокаИсходныеНормыИзменена(СтруктураОтбора) Тогда
		ЗаполнитьТаблицуИсходныхНорм(СтруктураОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияКопированияНормПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ИсходныеНормы.Отбор
														,"Организация"
														,Объект.Организация
														,ВидСравненияКомпоновкиДанных.Равно
														,"Организация"
														,Истина);
														
	// Для данной таблицы отбор установим после шага 2
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормы.Отбор
	//													,"Организация"
	//													,Объект.Организация
	//													,ВидСравненияКомпоновкиДанных.Равно
	//													,"Организация"
	//													,Истина);
	
	//СтруктураОтбора = Новый Структура("Организация", Объект.Организация);
	//ЗаполнитьТаблицуЦелевыеНормыТЗ(СтруктураОтбора);
	
	УстановитьВидимостьЭлементовСтраницаМастераКопированиеНормыНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеНормыТаблицаПереноситьПриИзменении(Элемент)
	
	//// Устанавливаем отбор для таблицы следующего шага настроек
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормы.Отбор
	//													,"Организация"
	//													,Объект.Организация
	//													,ВидСравненияКомпоновкиДанных.Равно
	//													,"Организация"
	//													,Истина);
	
	Если НЕ ТаблицыЦелевыхНормАктивированы Тогда
		СтруктураОтбора = Новый Структура("Организация", Объект.Организация);
		ЗаполнитьТаблицуЦелевыеНормыТЗ(СтруктураОтбора);
		
		Элементы.ЦелевыеНормы.ТолькоПросмотр = Ложь;
		Элементы.ЦелевыеНормы.Доступность = Истина;
		
		Элементы.ЦелевыеНормыТЗ.ТолькоПросмотр = Ложь;
		Элементы.ЦелевыеНормыТЗ.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЦелевыеНормыПодробноПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	АдресНормыКопирования = Неопределено;
    
    Настройки.ДополнительныеСвойства.Свойство("АдресНормыКопирования", АдресНормыКопирования);
	
	Если ЗначениеЗаполнено(АдресНормыКопирования) Тогда
		
		// Соспоставим строки двух таблиц, чтобы одну из них подкрасить
		тзНормыКопирования = ПолучитьИзВременногоХранилища(АдресНормыКопирования);
		
		Для каждого ЭлементКоллекции Из Строки Цикл
			СтрокаДСписка = ЭлементКоллекции.Значение;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВидВыдачиСИЗ", СтрокаДСписка.Данные["ВидВыдачиСИЗ"]);
			СтруктураПоиска.Вставить("ГОСТ", СтрокаДСписка.Данные["ГОСТ"]);
			СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтрокаДСписка.Данные["ЕдиницаИзмерения"]);
			СтруктураПоиска.Вставить("НоменклатураНормы", СтрокаДСписка.Данные["НоменклатураНормы"]);
			СтруктураПоиска.Вставить("НормаВыдачи", СтрокаДСписка.Данные["НормаВыдачи"]);
			СтруктураПоиска.Вставить("ОснованиеНормы", СтрокаДСписка.Данные["ОснованиеНормы"]);
			СтруктураПоиска.Вставить("ПериодичностьВыдачи", СтрокаДСписка.Данные["ПериодичностьВыдачи"]);
			СтруктураПоиска.Вставить("УсловиеНормы", СтрокаДСписка.Данные["УсловиеНормы"]);
			
			НайденныеСтроки = тзНормыКопирования.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				//СтрокаДСписка.Оформление["НормаВыдачи"].УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗеленый);
				Для Каждого ТекЭлементКоллекции Из СтрокаДСписка.Оформление Цикл
					ТекЭлементКоллекции.Значение.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗеленый);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦелевыеНормыТЗПриАктивизацииСтроки(Элемент)
	
	// Учтем выбор нескольких строк
	МассивВыбранныхПодразделений = Новый Массив;
	МассивВыбранныхДолжностей = Новый Массив;
	МассивВыбранныхРабочихМест = Новый Массив;
	
	Если ЭтаФорма.Элементы.ЦелевыеНормыТЗ.ТекущиеДанные = Неопределено Тогда
		ТекущееПодразделение 	= ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
		ТекущаяДолжность 		= ПредопределенноеЗначение("Справочник.ДолжностиИПрофессии.ПустаяСсылка");
		ТекущееРабочееМесто 	= ПредопределенноеЗначение("Справочник.РабочиеМестаАСТБ.ПустаяСсылка");
		
		МассивВыбранныхПодразделений.Добавить(ТекущееПодразделение);
		МассивВыбранныхДолжностей.Добавить(ТекущаяДолжность);
		МассивВыбранныхРабочихМест.Добавить(ТекущееРабочееМесто);		
	Иначе

		Элементы.ЦелевыеНормыТаблица.ТолькоПросмотр = Ложь;
		Элементы.ЦелевыеНормыТаблица.Доступность = Истина;
		
		Элементы.ЦелевыеНормыПодробно.ТолькоПросмотр = Ложь;
		Элементы.ЦелевыеНормыПодробно.Доступность = Истина;
		
		ВыделенныеСтроки = Элементы.ЦелевыеНормыТЗ.ВыделенныеСтроки;
        Для Каждого СтрокаСписка Из ВыделенныеСтроки Цикл
            ДанныеСтрокиСписка = Элементы.ЦелевыеНормыТЗ.ДанныеСтроки(СтрокаСписка);
            МассивВыбранныхПодразделений.Добавить(ДанныеСтрокиСписка.Подразделение);
			МассивВыбранныхДолжностей.Добавить(ДанныеСтрокиСписка.Должность);
			МассивВыбранныхРабочихМест.Добавить(ДанныеСтрокиСписка.РабочееМесто);
        КонецЦикла;
		
	КонецЕсли;
	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормыПодробно.Отбор, "Организация", 	Объект.Организация,				ВидСравненияКомпоновкиДанных.Равно, 	"Организация", 	Истина);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормыПодробно.Отбор, "Подразделение", 	МассивВыбранныхПодразделений,	ВидСравненияКомпоновкиДанных.ВСписке,	"Подразделение",Истина);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормыПодробно.Отбор, "Должность", 		МассивВыбранныхДолжностей,		ВидСравненияКомпоновкиДанных.ВСписке, 	"Должность", 	Истина);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормыПодробно.Отбор, "РабочееМесто", 	МассивВыбранныхРабочихМест,		ВидСравненияКомпоновкиДанных.ВСписке, 	"РабочееМесто", Истина);
	//
	//ПоместитьНормыКопированияВПараметрДинамическогоСписка();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", 	Объект.Организация);
	СтруктураОтбора.Вставить("Подразделения", 	МассивВыбранныхПодразделений);
	СтруктураОтбора.Вставить("Должности", 		МассивВыбранныхДолжностей);
	СтруктураОтбора.Вставить("РабочиеМеста", 	МассивВыбранныхРабочихМест);
	
	ЗаполнитьТаблицуЦелевыхНорм(СтруктураОтбора); // Заполняем при активации текущей строки
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераКопированиеНормыСводная

&НаКлиенте
Процедура УстановитьОбщееОснованиеКопированияПриИзменении(Элемент)
	Элементы.ОбщееОснованиеКопирования.ТолькоПросмотр = НЕ УстановитьОбщееОснование;
	Элементы.ОбщееОснованиеКопирования.Доступность = ?(ЗначениеЗаполнено(ОбщееОснование), Истина, УстановитьОбщееОснование);
	
	Если УстановитьОбщееОснование И ЗначениеЗаполнено(ОбщееОснование) Тогда
		ЗаполнитьОснованиеВСтрокахСводногоДереваЗначенийНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбщееОснованиеКопированияПриИзменении(Элемент)
	Если УстановитьОбщееОснование И ЗначениеЗаполнено(ОбщееОснование) Тогда
		ЗаполнитьОснованиеВСтрокахСводногоДереваЗначенийНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОснованиеВСтрокахСводногоДереваЗначенийНаСервере()
	
	дзЦелевыеНормы = РеквизитФормыВЗначение("СводноеДеревоЦелевыхНорм");
	ЗаполнитьПолеВСтрокахДереваЗначений(ОбщееОснование, "Основание", дзЦелевыеНормы);
	ЗначениеВРеквизитФормы(дзЦелевыеНормы, "СводноеДеревоЦелевыхНорм")
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбщееУсловиеКопированияПриИзменении(Элемент)
	Элементы.ОбщееУсловиеКопирования.ТолькоПросмотр = НЕ УстановитьОбщееУсловие;
	Элементы.ОбщееУсловиеКопирования.Доступность = ?(ЗначениеЗаполнено(ОбщееУсловие), Истина, УстановитьОбщееУсловие);
	
	Если УстановитьОбщееУсловие И ЗначениеЗаполнено(ОбщееУсловие) Тогда
		ЗаполнитьУсловиеВСтрокахСводногоДереваЗначенийНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбщееУсловиеКопированияПриИзменении(Элемент)
	Если УстановитьОбщееУсловие И ЗначениеЗаполнено(ОбщееУсловие) Тогда
		ЗаполнитьУсловиеВСтрокахСводногоДереваЗначенийНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловиеВСтрокахСводногоДереваЗначенийНаСервере()
	
	дзЦелевыеНормы = РеквизитФормыВЗначение("СводноеДеревоЦелевыхНорм");
	ЗаполнитьПолеВСтрокахДереваЗначений(ОбщееУсловие, "УсловиеНормы", дзЦелевыеНормы);
	ЗначениеВРеквизитФормы(дзЦелевыеНормы, "СводноеДеревоЦелевыхНорм")
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбщуюНормуДляЗачетаПриИзменении(Элемент)
	Элементы.ОбщаяНормаКопирования.ТолькоПросмотр = НЕ УстановитьОбщуюНормуДляЗачета;
	Элементы.ОбщаяНормаКопирования.Доступность = ?(ЗначениеЗаполнено(ОбщаяНорма), Истина, УстановитьОбщуюНормуДляЗачета);
	
	Если УстановитьОбщуюНормуДляЗачета И ЗначениеЗаполнено(ОбщаяНорма) Тогда
		ЗаполнитьНормуДляЗачетаВСтрокахСводногоДереваЗначенийНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбщаяНормаКопированияПриИзменении(Элемент)
	Если УстановитьОбщуюНормуДляЗачета И ЗначениеЗаполнено(ОбщаяНорма) Тогда
		ЗаполнитьНормуДляЗачетаВСтрокахСводногоДереваЗначенийНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормуДляЗачетаВСтрокахСводногоДереваЗначенийНаСервере()
	
	дзЦелевыеНормы = РеквизитФормыВЗначение("СводноеДеревоЦелевыхНорм");
	ЗаполнитьПолеВСтрокахДереваЗначений(ОбщаяНорма, "НормаДляЗачета", дзЦелевыеНормы);
	ЗначениеВРеквизитФормы(дзЦелевыеНормы, "СводноеДеревоЦелевыхНорм")
	
КонецПроцедуры

&НаКлиенте
Процедура СводноеДеревоЦелевыхНормПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИДТекущейСтроки = Элементы.СводноеДеревоЦелевыхНорм.ТекущаяСтрока;

	Если ИДТекущейСтроки <> Неопределено Тогда
		СтрокаДерева = ЭтаФорма.СводноеДеревоЦелевыхНорм.НайтиПоИдентификатору(ИДТекущейСтроки);
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() = 0 Тогда
			// Не добавляем строки новой глубины вложения
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СводноеДеревоЦелевыхНормПометкаПриИзменении(Элемент)

	ИДТекущейСтроки = Элементы.СводноеДеревоЦелевыхНорм.ТекущаяСтрока;

	Если ИДТекущейСтроки <> Неопределено Тогда

		СтрокаДерева = ЭтаФорма.СводноеДеревоЦелевыхНорм.НайтиПоИдентификатору(ИДТекущейСтроки);

		Если СтрокаДерева.Пометка = 2 Тогда
			СтрокаДерева.Пометка = 0;
		КонецЕсли;

		УстановкаФлажковСводногоДерева(СтрокаДерева, СтрокаДерева.Пометка);

		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		Пока РодительскаяСтрока <> Неопределено Цикл
			РодительскаяСтрока.Пометка = ?(ФлажкиУстановленныДляВсехСтрокТекущегоУровня(СтрокаДерева), СтрокаДерева.Пометка, 2);
			РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ВыполнитьКомандуГотово();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераНачало

&НаКлиенте
Процедура КомандаНазначитьНормыВыдачи(Команда)
	
	КомандаМастера = "НазначитьНормы";
	ЗаполнитьТаблицуПереходов("НазначениеНорм");
	ВыполнитьПереходДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьНормыВыдачи(Команда)
	
	КомандаМастера = "КопироватьНормы";
	ОбновитьИсходныеНормы = Истина;
	ЗаполнитьТаблицуПереходов("КопированиеНорм");
	ВыполнитьПереходДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьНормыВыдачи(Команда)
	
	КомандаМастера = "ОтменитьНормы";
	ЗаполнитьТаблицуПереходов("ОтменаНорм");
	ВыполнитьПереходДалее();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераНазначитьНормыВыдачиРежимСпискаСотрудников

&НаКлиенте
Процедура ВыборНазначенияНормыПоДолжностям(Команда)
	
	ЗаполнитьТаблицуПереходов("НазначениеНорм_ОтборПоДолжностям");
	ВыполнитьПереходДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборНазначенияНормыПоСотрудникам(Команда)
	
	ЗаполнитьТаблицуПереходов("НазначениеНорм_ОтборПоСотрудникам");
	ВыполнитьПереходДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйВыборНазначенияНормы(Команда)
	
	ЗаполнитьТаблицуПереходов("НазначениеНорм_ПроизвольныйОтбор");
	ВыполнитьПереходДалее();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераНазначитьНормыВыдачиВыборПодразделений

&НаКлиенте
Процедура СнятьФлажкиВТаблицеДолжности(Команда)
	ИзменитьФлажкиНаСервере(Ложь, "ТаблицаОтборовДолжностей");
	Если НЕ ИмяПоследнегоОтбора = "ТаблицаОтборовДолжностей" Тогда
		ОбновитьОтборы("ТаблицаОтборовДолжностей");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиВТаблицеПодразделения(Команда)
	ИзменитьФлажкиНаСервере(Ложь, "ТаблицаОтборовПодразделений");
	Если НЕ ИмяПоследнегоОтбора = "ТаблицаОтборовПодразделений" Тогда
		ОбновитьОтборы("ТаблицаОтборовПодразделений");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиВТаблицеРабочиеМеста(Команда)
	ИзменитьФлажкиНаСервере(Ложь, "ТаблицаОтборовРабочиеМеста");
	Если НЕ ИмяПоследнегоОтбора = "ТаблицаОтборовРабочиеМеста" Тогда
		ОбновитьОтборы("ТаблицаОтборовРабочиеМеста");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВТаблицеДолжности(Команда)
	ИзменитьФлажкиНаСервере(Истина, "ТаблицаОтборовДолжностей");
	Если НЕ ИмяПоследнегоОтбора = "ТаблицаОтборовДолжностей" Тогда
		ОбновитьОтборы("ТаблицаОтборовДолжностей");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВТаблицеПодразделения(Команда)
	ИзменитьФлажкиНаСервере(Истина, "ТаблицаОтборовПодразделений");
	Если НЕ ИмяПоследнегоОтбора = "ТаблицаОтборовПодразделений" Тогда
		ОбновитьОтборы("ТаблицаОтборовПодразделений");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВТаблицеРабочиеМеста(Команда)
	ИзменитьФлажкиНаСервере(Истина, "ТаблицаОтборовРабочиеМеста");
	Если НЕ ИмяПоследнегоОтбора = "ТаблицаОтборовРабочиеМеста" Тогда
		ОбновитьОтборы("ТаблицаОтборовРабочиеМеста");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВлевоТаблицуДолжности(Команда)
	УстановитьПорядокТаблицОтбора("ТаблицаОтборовДолжностей", "Влево");
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВлевоТаблицуПодразделений(Команда)
	УстановитьПорядокТаблицОтбора("ТаблицаОтборовПодразделений", "Влево");
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВлевоТаблицуРабочиеМеста(Команда)
	УстановитьПорядокТаблицОтбора("ТаблицаОтборовРабочиеМеста", "Влево");
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВправоТаблицуДолжности(Команда)
	УстановитьПорядокТаблицОтбора("ТаблицаОтборовДолжностей", "Вправо");
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВправоТаблицуПодразделений(Команда)
	УстановитьПорядокТаблицОтбора("ТаблицаОтборовПодразделений", "Вправо");
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВправоТаблицуРабочиеМеста(Команда)
	УстановитьПорядокТаблицОтбора("ТаблицаОтборовРабочиеМеста", "Вправо");
	ОбновитьОтборы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераНазначитьНормыВыдачиВыборСотрудников

&НаСервере
Процедура УстановитьСнятьФлажкиТаблицаСотрудникиНаСервере(ЗначениеФлажка)
	ТЗСотрудники = ТаблицаСотрудники.Выгрузить();
	ТЗСотрудники.ЗаполнитьЗначения(ЗначениеФлажка, "Пометка");
	ТаблицаСотрудники.Загрузить(ТЗСотрудники);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиТаблицаСотрудники(Команда)
	УстановитьСнятьФлажкиТаблицаСотрудникиНаСервере(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиТаблицаСотрудники(Команда)
	УстановитьСнятьФлажкиТаблицаСотрудникиНаСервере(Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераКопированиеНормыНастройки

&НаСервере
Процедура УстановитьСнятьФлажкиИсходныеНормыНаСервере(ЗначениеФлажка)
	
	ТЗИсходныеНормы = ИсходныеНормыТаблица.Выгрузить();
	ТЗИсходныеНормы.ЗаполнитьЗначения(ЗначениеФлажка, "Переносить");
	ИсходныеНормыТаблица.Загрузить(ТЗИсходныеНормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиИсходныеНормы(Команда)
	// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)<<<
	Если НЕ ТаблицыЦелевыхНормАктивированы Тогда
		СтруктураОтбора = Новый Структура("Организация", Объект.Организация);
		ЗаполнитьТаблицуЦелевыеНормыТЗ(СтруктураОтбора);
	КонецЕсли;
	// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)>>>
	УстановитьСнятьФлажкиИсходныеНормыНаСервере(Истина);
	
	Элементы.ЦелевыеНормы.ТолькоПросмотр = Ложь;
	Элементы.ЦелевыеНормы.Доступность = Истина;
	
	Элементы.ЦелевыеНормыТЗ.ТолькоПросмотр = Ложь;
	Элементы.ЦелевыеНормыТЗ.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиИсходныеНормы(Команда)
	УстановитьСнятьФлажкиИсходныеНормыНаСервере(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНормы(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Переносить", Истина);
	НайденныеСтроки = ИсходныеНормыТаблица.НайтиСтроки(Отбор);
	
	Для Каждого Стр ИЗ НайденныеСтроки Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидВыдачиСИЗ", Стр.ВидВыдачиСИЗ);
		СтруктураОтбора.Вставить("ГОСТ", Стр.ГОСТ);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", Стр.ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("Использовать", Стр.Использовать);
		СтруктураОтбора.Вставить("НоменклатураНормы", Стр.НоменклатураНормы);
		СтруктураОтбора.Вставить("НормаВыдачи", Стр.НормаВыдачи);
		СтруктураОтбора.Вставить("ОснованиеНормы", Стр.ОснованиеНормы);
		СтруктураОтбора.Вставить("ПериодичностьВыдачи", Стр.ПериодичностьВыдачи);
		СтруктураОтбора.Вставить("УсловиеНормы", Стр.УсловиеНормы);
		НайденныеСтрокиОтбор = ЦелевыеНормыТаблица.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтрокиОтбор.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЦелевыеНормыТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		ТекущееПодразделение 	= ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные.Подразделение;
		ТекущаяДолжность 		= ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные.Должность;
		ТекущееРабочееМесто 	= ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные.РабочееМесто;
		НоваяСтрока.Подразделение = ТекущееПодразделение;
		НоваяСтрока.Должность = ТекущаяДолжность;
		НоваяСтрока.РабочееМесто = ТекущееРабочееМесто;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЦелевыеНормыНаСервере(СтруктураДляЗамены)
	
	//очистка записей целевой нормы
	ЦелевойНаборЗаписей = РегистрыСведений.ИсходныеНормыВыдачиСИЗ.СоздатьНаборЗаписей();
	ЦелевойНаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	ЦелевойНаборЗаписей.Отбор.Подразделение.Установить(СтруктураДляЗамены.ТекущееПодразделение);
	ЦелевойНаборЗаписей.Отбор.Должность.Установить(СтруктураДляЗамены.ТекущаяДолжность);
	ЦелевойНаборЗаписей.Отбор.РабочееМесто.Установить(СтруктураДляЗамены.ТекущееРабочееМесто);
	ЦелевойНаборЗаписей.Очистить();
	ЦелевойНаборЗаписей.Записать();
	
	Для Каждого СтрокаТаблицыИсходнойНормы Из Объект.ЦелевыеНормыТаблица Цикл
		НоваяЗапись	= ЦелевойНаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаТаблицыИсходнойНормы);
	КонецЦикла;
	
	ЦелевойНаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЦелевыеНормы(Команда)
	
	ТекущиеДанные = Элементы.ЦелевыеНормы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Целевые нормы не определены");  // отладка
		Возврат;
	КонецЕсли;
		
	СтруктураДляЗамены = Новый Структура;
	СтруктураДляЗамены.Вставить("ТекущееПодразделение", ТекущиеДанные.Подразделение);
	СтруктураДляЗамены.Вставить("ТекущаяДолжность", ТекущиеДанные.Должность);
	СтруктураДляЗамены.Вставить("ТекущееРабочееМесто", ТекущиеДанные.РабочееМесто);
	
	ЗаписатьЦелевыеНормыНаСервере(СтруктураДляЗамены);
	
КонецПроцедуры

&НаСервере
Функция СравнитьЦелевыеНормыНаСервере(СтруктураДляСравнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = НОВЫЙ Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходныеНормыВыдачиСИЗ.Подразделение,
	|	ИсходныеНормыВыдачиСИЗ.Должность,
	|	ИсходныеНормыВыдачиСИЗ.РабочееМесто,
	|	ИсходныеНормыВыдачиСИЗ.УсловиеНормы,
	|	ИсходныеНормыВыдачиСИЗ.НормаВыдачи,
	|	ИсходныеНормыВыдачиСИЗ.Использовать
	|ПОМЕСТИТЬ ВТ_ВсеНормы
	|ИЗ
	|	РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК ИсходныеНормыВыдачиСИЗ
	|ГДЕ
	|	ИсходныеНормыВыдачиСИЗ.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормыВыдачиСИЗСоставНормы.Ссылка КАК НормаВыдачи,
	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы,
	|	НормыВыдачиСИЗСоставНормы.ЕдиницаИзмерения,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи
	|ПОМЕСТИТЬ ВТ_СоставНормы
	|ИЗ
	|	Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеНормы.Использовать,
	|	ВТ_ВсеНормы.УсловиеНормы,
	|	ВТ_ВсеНормы.НормаВыдачи,
	|	ВТ_СоставНормы.НоменклатураНормы,
	|	ВТ_СоставНормы.ЕдиницаИзмерения,
	|	ВТ_СоставНормы.ПериодичностьВыдачи
	|ПОМЕСТИТЬ ВТ_ИсходныеНормы
	|ИЗ
	|	ВТ_ВсеНормы КАК ВТ_ВсеНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоставНормы КАК ВТ_СоставНормы
	|		ПО ВТ_ВсеНормы.НормаВыдачи = ВТ_СоставНормы.НормаВыдачи
	|ГДЕ
	|	ВТ_ВсеНормы.Подразделение = &ИсходноеПодразделение
	|	И ВТ_ВсеНормы.Должность = &ИсходнаяДолжность
	|	И ВТ_ВсеНормы.РабочееМесто = &ИсходноеРабочееМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеНормы.Использовать,
	|	ВТ_ВсеНормы.УсловиеНормы,
	|	ВТ_ВсеНормы.НормаВыдачи,
	|	ВТ_СоставНормы.НоменклатураНормы,
	|	ВТ_СоставНормы.ЕдиницаИзмерения,
	|	ВТ_СоставНормы.ПериодичностьВыдачи
	|ПОМЕСТИТЬ ВТ_ЦелевыеНормы
	|ИЗ
	|	ВТ_ВсеНормы КАК ВТ_ВсеНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоставНормы КАК ВТ_СоставНормы
	|		ПО ВТ_ВсеНормы.НормаВыдачи = ВТ_СоставНормы.НормаВыдачи
	|ГДЕ
	|	ВТ_ВсеНормы.Подразделение = &ЦелевоеПодразделение
	|	И ВТ_ВсеНормы.Должность = &ЦелеваяДолжность
	|	И ВТ_ВсеНормы.РабочееМесто = &ЦелевоеРабочееМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_ИсходныеНормы.Использовать, ВТ_ЦелевыеНормы.Использовать) КАК Использовать,
	|	ЕСТЬNULL(ВТ_ИсходныеНормы.УсловиеНормы, ВТ_ЦелевыеНормы.УсловиеНормы) КАК УсловиеНормы,
	|	ЕСТЬNULL(ВТ_ИсходныеНормы.НоменклатураНормы, ЗНАЧЕНИЕ(Справочник.НоменклатураНормОрганизации.ПустаяСсылка)) КАК ИсходнаяНоменклатураНормы,
	|	ЕСТЬNULL(ВТ_ИсходныеНормы.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ИсходнаяЕдиницаИзмерения,
	|	ЕСТЬNULL(ВТ_ИсходныеНормы.ПериодичностьВыдачи, ЗНАЧЕНИЕ(Справочник.ПериодичностьВыдачиСИЗ.ПустаяСсылка)) КАК ИсходнаяПериодичностьВыдачи,
	|	ЕСТЬNULL(ВТ_ЦелевыеНормы.НоменклатураНормы, ЗНАЧЕНИЕ(Справочник.НоменклатураНормОрганизации.ПустаяСсылка)) КАК ЦелеваяНоменклатураНормы,
	|	ЕСТЬNULL(ВТ_ЦелевыеНормы.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЦелеваяЕдиницаИзмерения,
	|	ЕСТЬNULL(ВТ_ЦелевыеНормы.ПериодичностьВыдачи, ЗНАЧЕНИЕ(Справочник.ПериодичностьВыдачиСИЗ.ПустаяСсылка)) КАК ЦелеваяПериодичностьВыдачи
	|ИЗ
	|	ВТ_ИсходныеНормы КАК ВТ_ИсходныеНормы
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЦелевыеНормы КАК ВТ_ЦелевыеНормы
	|		ПО ВТ_ИсходныеНормы.УсловиеНормы = ВТ_ЦелевыеНормы.УсловиеНормы
	|			И ВТ_ИсходныеНормы.НормаВыдачи = ВТ_ЦелевыеНормы.НормаВыдачи
	|			И ВТ_ИсходныеНормы.Использовать = ВТ_ЦелевыеНормы.Использовать
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ИсходныеНормы.УсловиеНормы.Наименование,
	|	ВТ_ЦелевыеНормы.УсловиеНормы.Наименование,
	|	ВТ_ИсходныеНормы.НоменклатураНормы.Наименование,
	|	ВТ_ЦелевыеНормы.НоменклатураНормы.Наименование,
	|	ВТ_ИсходныеНормы.ПериодичностьВыдачи.Наименование,
	|	ВТ_ЦелевыеНормы.ПериодичностьВыдачи.Наименование";
	
	Запрос.УстановитьПараметр("Организация",			Объект.Организация);
	Запрос.УстановитьПараметр("ИсходноеПодразделение",	СтруктураДляСравнения.ИсходноеПодразделение);
	Запрос.УстановитьПараметр("ИсходнаяДолжность",		СтруктураДляСравнения.ИсходнаяДолжность);
	Запрос.УстановитьПараметр("ИсходноеРабочееМесто",	СтруктураДляСравнения.ИсходноеРабочееМесто);
	Запрос.УстановитьПараметр("ЦелевоеПодразделение",	СтруктураДляСравнения.ЦелевоеПодразделение);
	Запрос.УстановитьПараметр("ЦелеваяДолжность",		СтруктураДляСравнения.ЦелеваяДолжность);
	Запрос.УстановитьПараметр("ЦелевоеРабочееМесто",	СтруктураДляСравнения.ЦелевоеРабочееМесто);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СравнениеНорм";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	Макет = ЭтотОбъект.РеквизитФормыВЗначение("Объект").ПолучитьМакет("СравнениеНорм");
	  
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(СтруктураДляСравнения);
	Область.Параметры.Организация = Объект.Организация;
	ТабличныйДокумент.Вывести(Область);
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(Область);
		
	КонецЦикла;	
	
	ТабличныйДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ОтображатьЗаголовки 	= Ложь;
	ТабличныйДокумент.ОтображатьСетку 		= Ложь;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура СравнитьЦелевыеНормы(Команда)
	
	Если ЭтаФорма.Элементы.ИсходныеНормы.ТекущиеДанные = Неопределено Тогда
		ИсходноеПодразделение 	= ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
		ИсходнаяДолжность 		= ПредопределенноеЗначение("Справочник.ДолжностиИПрофессии.ПустаяСсылка");
		ИсходноеРабочееМесто 	= ПредопределенноеЗначение("Справочник.РабочиеМестаАСТБ.ПустаяСсылка");
	Иначе
		ИсходноеПодразделение 	= ЭтаФорма.Элементы.ИсходныеНормы.ТекущиеДанные.Подразделение;
		ИсходнаяДолжность 		= ЭтаФорма.Элементы.ИсходныеНормы.ТекущиеДанные.Должность;
		ИсходноеРабочееМесто 	= ЭтаФорма.Элементы.ИсходныеНормы.ТекущиеДанные.РабочееМесто;
	КонецЕсли;
	
	Если ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные = Неопределено Тогда
		ЦелевоеПодразделение 	= ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
		ЦелеваяДолжность 		= ПредопределенноеЗначение("Справочник.ДолжностиИПрофессии.ПустаяСсылка");
		ЦелевоеРабочееМесто 	= ПредопределенноеЗначение("Справочник.РабочиеМестаАСТБ.ПустаяСсылка");
	Иначе
		ЦелевоеПодразделение 	= ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные.Подразделение;
		ЦелеваяДолжность 		= ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные.Должность;
		ЦелевоеРабочееМесто 	= ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные.РабочееМесто;
	КонецЕсли;
	
	СтруктураДляСравнения = НОВЫЙ Структура("ИсходноеПодразделение,ИсходнаяДолжность,ИсходноеРабочееМесто,ЦелевоеПодразделение,ЦелеваяДолжность,ЦелевоеРабочееМесто",
									ИсходноеПодразделение,ИсходнаяДолжность,ИсходноеРабочееМесто,ЦелевоеПодразделение,ЦелеваяДолжность,ЦелевоеРабочееМесто);
	
	ТабличныйДокумент = СравнитьЦелевыеНормыНаСервере(СтруктураДляСравнения);
	
	ТабличныйДокумент.Показать("Сравнение норм");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьЦелевыеНормы(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОтветНаВопросЗаменаНормЗавершение", ЭтаФорма);
	ПоказатьВопрос(Оповещение, "Будет выполнена полная замена текущих целевых норм на исходные. Выполнить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьЦелевыеНормыНаСервере(СтруктураДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходныеНормыВыдачиСИЗ.Организация КАК Организация,
	|	ИсходныеНормыВыдачиСИЗ.Подразделение КАК Подразделение,
	|	ИсходныеНормыВыдачиСИЗ.Должность КАК Должность,
	|	ИсходныеНормыВыдачиСИЗ.РабочееМесто КАК РабочееМесто,
	|	ИсходныеНормыВыдачиСИЗ.УсловиеНормы КАК УсловиеНормы,
	|	ИсходныеНормыВыдачиСИЗ.НормаВыдачи КАК НормаВыдачи,
	|	ИсходныеНормыВыдачиСИЗ.Использовать КАК Использовать
	|ИЗ
	|	РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК ИсходныеНормыВыдачиСИЗ
	|ГДЕ
	|	ИсходныеНормыВыдачиСИЗ.Организация = &Организация
	|	И ИсходныеНормыВыдачиСИЗ.Подразделение = &Подразделение
	|	И ИсходныеНормыВыдачиСИЗ.Должность = &Должность
	|	И ИсходныеНормыВыдачиСИЗ.РабочееМесто = &РабочееМесто";
	
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение",	СтруктураДляЗамены.ИсходноеПодразделение);
	Запрос.УстановитьПараметр("Должность",		СтруктураДляЗамены.ИсходнаяДолжность);
	Запрос.УстановитьПараметр("РабочееМесто",	СтруктураДляЗамены.ИсходноеРабочееМесто);
	
	ТаблицаИсходнойНормы = Запрос.Выполнить().Выгрузить();
	
	//очистка записей целевой нормы
	ЦелевойНаборЗаписей = РегистрыСведений.ИсходныеНормыВыдачиСИЗ.СоздатьНаборЗаписей();
	ЦелевойНаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	ЦелевойНаборЗаписей.Отбор.Подразделение.Установить(СтруктураДляЗамены.ЦелевоеПодразделение);
	ЦелевойНаборЗаписей.Отбор.Должность.Установить(СтруктураДляЗамены.ЦелеваяДолжность);
	ЦелевойНаборЗаписей.Отбор.РабочееМесто.Установить(СтруктураДляЗамены.ЦелевоеРабочееМесто);
	ЦелевойНаборЗаписей.Очистить();
	ЦелевойНаборЗаписей.Записать();
	
	Для Каждого СтрокаТаблицыИсходнойНормы Из ТаблицаИсходнойНормы Цикл
		
		НоваяЗапись 				= ЦелевойНаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаТаблицыИсходнойНормы);
		НоваяЗапись.Подразделение 	= СтруктураДляЗамены.ЦелевоеПодразделение;
		НоваяЗапись.Должность 		= СтруктураДляЗамены.ЦелеваяДолжность;
		НоваяЗапись.РабочееМесто 	= СтруктураДляЗамены.ЦелевоеРабочееМесто;
		
	КонецЦикла;
	
	ЦелевойНаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросЗаменаНормЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если ЭтаФорма.Элементы.ИсходныеНормы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		ИсходноеПодразделение 	= ЭтаФорма.Элементы.ИсходныеНормы.ТекущиеДанные.Подразделение;
		ИсходнаяДолжность 		= ЭтаФорма.Элементы.ИсходныеНормы.ТекущиеДанные.Должность;
		ИсходноеРабочееМесто 	= ЭтаФорма.Элементы.ИсходныеНормы.ТекущиеДанные.РабочееМесто;
	КонецЕсли;
	
	Если ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		ЦелевоеПодразделение 	= ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные.Подразделение;
		ЦелеваяДолжность 		= ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные.Должность;
		ЦелевоеРабочееМесто 	= ЭтаФорма.Элементы.ЦелевыеНормы.ТекущиеДанные.РабочееМесто;
	КонецЕсли;
	
	СтруктураДляЗамены = НОВЫЙ Структура("ИсходноеПодразделение,ИсходнаяДолжность,ИсходноеРабочееМесто,ЦелевоеПодразделение,ЦелеваяДолжность,ЦелевоеРабочееМесто",
									ИсходноеПодразделение,ИсходнаяДолжность,ИсходноеРабочееМесто,ЦелевоеПодразделение,ЦелеваяДолжность,ЦелевоеРабочееМесто);
									
	ЗаменитьЦелевыеНормыНаСервере(СтруктураДляЗамены);
	
	ЦелевыеНормыПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьФлажкиТаблицаНормыВыдачиНаСервере(ЗначениеФлажка)
	ТЗНормыВыдачи = ТаблицаНормыВыдачи.Выгрузить();
	ТЗНормыВыдачи.ЗаполнитьЗначения(ЗначениеФлажка, "Пометка");
	ТаблицаНормыВыдачи.Загрузить(ТЗНормыВыдачи);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиТаблицаНормыВыдачи(Команда)
	УстановитьСнятьФлажкиТаблицаНормыВыдачиНаСервере(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиТаблицаНормыВыдачи(Команда)
	УстановитьСнятьФлажкиТаблицаНормыВыдачиНаСервере(Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераНазначитьНормыВыдачиСводная

&НаКлиенте
Процедура УстановитьФлажкиСводноеДерево(Команда)
	УстановкаФлажковСводногоДерева(ЭтаФорма.СводноеДеревоЦелевыхНорм, 1);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиСводноеДерево(Команда)
	УстановкаФлажковСводногоДерева(ЭтаФорма.СводноеДеревоЦелевыхНорм, 0);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьПереходДалее()
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуГотово(Знач ЗакрыватьФорму = Истина)
	
	Отказ = Ложь;
	
	// Здесь могут быть различные обработчики завершения....
	Если КомандаМастера = "НазначитьНормы" Тогда
		
		НазначитьНормыВыдачи();
		
	ИначеЕсли КомандаМастера = "КопироватьНормы" Тогда
		
		КопироватьНормыВыдчи();
		
	ИначеЕсли КомандаМастера = "ОтменитьНормы" Тогда
		
		ОтменитьНормыВыдачи();
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
	Если ЗакрыватьФорму Тогда
		ЗакрытьФормуБезусловно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 1 Тогда
		
		ПорядковыйНомерПерехода = 1;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// Обработчик ПриПереходеДалее.
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			РезультатВычисления = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// Обработчик ПриПереходеНазад.
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			РезультатВычисления = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПереходов(РежимРаботыМастера)
	
	Если РежимРаботыМастера = "Инициализация" Тогда
		ТаблицаПереходовИнициализация();
	ИначеЕсли РежимРаботыМастера = "НазначениеНорм" Тогда
		ТаблицаПереходовНазначитьНормыВыдачи();
	ИначеЕсли РежимРаботыМастера = "НазначениеНорм_ОтборПоДолжностям" Тогда
		ТаблицаПереходовНазначитьНормыВыдачи_ОтборПоДолжностям();
	ИначеЕсли РежимРаботыМастера = "НазначениеНорм_ОтборПоСотрудникам" Тогда
		ТаблицаПереходовНазначитьНормыВыдачи_ОтборПоСотрудникам();
	ИначеЕсли РежимРаботыМастера = "НазначениеНорм_ПроизвольныйОтбор" Тогда
		ТаблицаПереходовНазначитьНормыВыдачи_ПроизвольныйОтбор();
	ИначеЕсли РежимРаботыМастера = "КопированиеНорм" Тогда
		ТаблицаПереходовСкопироватьНормыВыдачи();
	ИначеЕсли РежимРаботыМастера = "ОтменаНорм" Тогда
		ТаблицаПереходовОтменитьНормыВыдачи();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий переходов.

&НаКлиенте
Функция Подключаемый_СтраницаМастераНачало_ПриПереходеДалее(Отказ)
	
	Если Истина = ПропускатьКонтрольОтказаТекущейСтраницы Тогда
		ПропускатьКонтрольОтказаТекущейСтраницы = Неопределено;
		Возврат Неопределено;		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
		
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы_ПриПереходеДалее(Отказ)
	
	// На этом шаге не ищем норму выдачи. Это делаем позже
	//Подключаемый_СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы_ПриПереходеДалееНаСервере(Отказ);
		
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиСписокСотрудников_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
		
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиСписокСотрудников_ПриПереходеДалее(Отказ)
	
	СтраницаМастераНазначитьНормыВыдачиСписокСотрудников_ПриПереходеДалееНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиВыборПодразделений_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
		
	РазместитьОтборыНаФорме();
	
	Если ТаблицаОтборовДолжностей.Количество() = 0 И
			ТаблицаОтборовПодразделений.Количество() = 0 И
			ТаблицаОтборовРабочиеМеста.Количество() = 0 И
			ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьТаблицыОтборов();
		УстановитьВидимостьЭлементовСтраницаМастераНазначитьНормыВыдачиВыборПодразделений();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиВыборПодразделений_ПриПереходеДалее(Отказ)
	
	Подключаемый_СтраницаМастераНазначитьНормыВыдачиВыборПодразделений_ПриПереходеДалееНаСервере(Отказ);
		
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиВыборСотрудников_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ТаблицаСотрудники.Количество() = 0 И ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьТаблицуСотрудников();
		УстановитьВидимостьЭлементовСтраницаМастераНазначитьНормыВыдачиВыборСотрудников();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиВыборСотрудников_ПриПереходеДалее(Отказ)
	
	Подключаемый_СтраницаМастераНазначитьНормыВыдачиВыборСотрудников_ПриПереходеДалееНаСервере(Отказ);
		
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
		
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор_ПриПереходеДалее(Отказ)
	
	Подключаемый_СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор_ПриПереходеДалееНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиСводная_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Подключаемый_СтраницаМастераНазначитьНормыВыдачиСводная_ПриОткрытииНаСервере(Отказ, ПропуститьСтраницу, ЭтоПереходДалее);
	
	Элементы.ОбщееОснованиеНазначения.ТолькоПросмотр = Истина;
	Элементы.ОбщееУсловиеНазначения.ТолькоПросмотр = Истина;
	ПроводитьПриказПоНормам = "Нет";
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиСводная_ПриПереходеДалее(Отказ)
	
	// Проверим заполнение обязательных полей
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из СводнаяТаблицаНазначенияНорм Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НормаВыдачи) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указана норма выдачи.'"),, "СводнаяТаблицаНазначенияНорм["+НомерСтроки+"].НормаВыдачи",, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.УсловиеНормы) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указано условие нормы.'"),,"СводнаяТаблицаНазначенияНорм["+НомерСтроки+"].УсловиеНормы",, Отказ);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если НЕ Отказ Тогда
	
		НазначитьНормыВыдачи();
	
		Оповещение = Новый ОписаниеОповещения("НазначениеНормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Назначить ещё одну норму выдачи?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераКопированиеНормыНастройки_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ИсходныеНормы.Отбор
														,"Организация"
														,Объект.Организация
														,ВидСравненияКомпоновкиДанных.Равно
														,"Организация"
														,Истина);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ЦелевыеНормы.Отбор
	//													,"Организация"
	//													,Объект.Организация
	//													,ВидСравненияКомпоновкиДанных.Равно
	//													,"Организация"
	//													,Истина);
		
КонецФункции
													
&НаКлиенте
Функция Подключаемый_СтраницаМастераКопированиеНормыНастройки_ПриПереходеДалее(Отказ)
	
	Подключаемый_СтраницаМастераКопированиеНормыНастройки_ПриПереходеДалееНаСервере(Отказ);
	
КонецФункции	
	
&НаКлиенте
Функция Подключаемый_СтраницаМастераКопированиеНормыСводная_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Подключаемый_СтраницаМастераКопированиеНормыСводная_ПриОткрытииНаСервере(Отказ, ПропуститьСтраницу, ЭтоПереходДалее);
	
	Элементы.ОбщееОснованиеКопирования.ТолькоПросмотр = Истина;
	Элементы.ОбщееУсловиеКопирования.ТолькоПросмотр = Истина;
	Элементы.ОбщаяНормаКопирования.ТолькоПросмотр = Истина;
	
	ПроводитьПриказПоНормам = "Нет";
		
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеПолейДерева(ЭлементКоллекцииДерева, Отказ)

	ДочерниеСтроки = ЭлементКоллекцииДерева.ПолучитьЭлементы();
	
	Для Каждого ТекущаяСтрокаДерева Из ДочерниеСтроки Цикл
		ПроверитьЗаполнениеПолейДерева(ТекущаяСтрокаДерева, Отказ);
	КонецЦикла;
	
	// Проверяем заполнение только в конечных строках
	Если ДочерниеСтроки.Количество() = 0 Тогда
		Если НЕ ЗначениеЗаполнено(ЭлементКоллекцииДерева.НормаВыдачи) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле %1 в строке для подразделения %2 и должности %3.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, "норма выдачи", ЭлементКоллекцииДерева.Подразделение, ЭлементКоллекцииДерева.Должность);
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указана норма выдачи в строке.'"),, "СводноеДеревоЦелевыхНорм["+НомерСтроки+"].НормаВыдачи",, Отказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭлементКоллекцииДерева.УсловиеНормы) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле %1 в строке для подразделения %2 и должности %3.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, "условие нормы", ЭлементКоллекцииДерева.Подразделение, ЭлементКоллекцииДерева.Должность);
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указано условие нормы.'"),,"СводноеДеревоЦелевыхНорм["+НомерСтроки+"].УсловиеНормы",, Отказ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераКопированиеНормыСводная_ПриПереходеДалее(Отказ)
	
	// Проверим заполнение обязательных полей
	ПроверитьЗаполнениеПолейДерева(СводноеДеревоЦелевыхНорм, Отказ);
	
	Если НЕ Отказ Тогда
		Подключаемый_СтраницаМастераКопированиеНормыСводная_ПриПереходеДалееНаСервере(Отказ);
	
		УстановитьПорядковыйНомерПерехода(1);
	КонецЕсли;
			
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОтменаНормыНастройки_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПроводитьПриказПоНормам = "Нет";
		
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОтменаНормыНастройки_ПриПереходеДалее(Отказ)
	
	Подключаемый_СтраницаМастераОтменаНормыНастройки_ПриПереходеДалееНаСервере(Отказ);
	
	УстановитьПорядковыйНомерПерехода(1);
	
КонецФункции


//

&НаСервере
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы_ПриПереходеДалееНаСервере(Отказ)
	
	//ПараметрыНормы = Новый Структура;
	//ПараметрыНормы.Вставить("НоменклатураНормы", 	НоменклатураНормОрганизации);
	//ПараметрыНормы.Вставить("Периодичность", 		Периодичность);
	//ПараметрыНормы.Вставить("ВидВыдачи", 			ВидВыдачи);
	//ПараметрыНормы.Вставить("ВидРасчета", 			ВидРасчета);
	//ПараметрыНормы.Вставить("ЕдиницаИзмерения", 	ЕдиницаИзмерения);
	//ПараметрыНормы.Вставить("ГОСТ", 				ГОСТ);
	//
	//Если НЕ ЗначениеЗаполнено(НормаВыдачи) Тогда
	//	НормаВыдачи = ПодобратьСоздатьНормуВыдачи(ПараметрыНормы);
	//КонецЕсли;
	
КонецФункции

&НаСервере
Функция СтраницаМастераНазначитьНормыВыдачиСписокСотрудников_ПриПереходеДалееНаСервере(Отказ)
	
		
КонецФункции

&НаСервере
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор_ПриОткрытииНаСервере(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	СводнаяТаблицаНазначенияНорм.Очистить();
		
КонецФункции

&НаСервере
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиСводная_ПриОткрытииНаСервере(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ЗначениеЗаполнено(НормаВыдачи) Тогда
		ОбщееОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НормаВыдачи, "ОснованиеНормы");
		
		Если ЗначениеЗаполнено(ОбщееОснование) Тогда
			Для Каждого ТекСтрока Из СводнаяТаблицаНазначенияНорм Цикл
				ТекСтрока.Основание = ОбщееОснование;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ОбщееОснование = Справочники.ПунктыТОН.ПустаяСсылка();
		
		// Подобрали норму выдачи ранее
		//// Подбираем норму по указанным параметрам
		//ПараметрыНормы = Новый Структура;
		//ПараметрыНормы.Вставить("НоменклатураНормы", 	НоменклатураНормОрганизации);
		//ПараметрыНормы.Вставить("Периодичность", 		Периодичность);
		//ПараметрыНормы.Вставить("ВидВыдачи", 			ВидВыдачи);
		//ПараметрыНормы.Вставить("ВидРасчета", 			ВидРасчета);
		//ПараметрыНормы.Вставить("ЕдиницаИзмерения", 	ЕдиницаИзмерения);
		//ПараметрыНормы.Вставить("ГОСТ", 				ГОСТ);
		//ПараметрыНормы.Вставить("Организация", 			Объект.Организация);
		//ПараметрыНормы.Вставить("ОснованиеНормы", 		Неопределено);
		//
		//НормаВыдачи = ПодобратьСоздатьНормуВыдачи(ПараметрыНормы);
	КонецЕсли;
	
	УстановитьВидимостьЭлементовСтраницаМастераНазначитьНормыВыдачиСводная();
		
КонецФункции

&НаСервере
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиВыборПодразделений_ПриПереходеДалееНаСервере(Отказ)
	
	// Подбираем норму выдачи по указанным параметрам
	Если НЕ ЗначениеЗаполнено(НормаВыдачи) Тогда
		ПараметрыНормы = Новый Структура;
		ПараметрыНормы.Вставить("НоменклатураНормы", 	НоменклатураНормОрганизации);
		ПараметрыНормы.Вставить("Периодичность", 		Периодичность);
		ПараметрыНормы.Вставить("ВидВыдачи", 			ВидВыдачи);
		ПараметрыНормы.Вставить("ВидРасчета", 			ВидРасчета);
		ПараметрыНормы.Вставить("ЕдиницаИзмерения", 	ЕдиницаИзмерения);
		ПараметрыНормы.Вставить("ГОСТ", 				ГОСТ);
		ПараметрыНормы.Вставить("Организация", 			Объект.Организация);
		ПараметрыНормы.Вставить("ОснованиеНормы", 		Неопределено);
		
		НормаВыдачи = ПодобратьСоздатьНормуВыдачи(ПараметрыНормы);
	КонецЕсли;
	
	// Заполняем сводную таблицу
	СводнаяТаблицаНазначенияНорм.Очистить();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Должность КАК Должность,
		|	ВложенныйЗапрос.Подразделение КАК Подразделение,
		|	ВложенныйЗапрос.РабочееМесто КАК РабочееМесто,
		|	НЕОПРЕДЕЛЕНО КАК Основание,
		|	ВложенныйЗапрос.НормаВыдачи КАК НормаВыдачи,
		|	ЕСТЬNULL(ИсходныеНормыВыдачиСИЗ.УсловиеНормы, ЗНАЧЕНИЕ(Справочник.УсловияНорм.ПустаяСсылка)) КАК УсловиеНормы,
		|	ВложенныйЗапрос.Организация КАК Организация
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗанятыеРабочиеМеста.Должность КАК Должность,
		|		ЗанятыеРабочиеМеста.Подразделение КАК Подразделение,
		|		ЗанятыеРабочиеМеста.РабочееМесто КАК РабочееМесто,
		|		&Организация КАК Организация,
		|		&НормаВыдачи КАК НормаВыдачи
		|	ИЗ
		|		РегистрНакопления.ЗанятыеРабочиеМеста КАК ЗанятыеРабочиеМеста
		|	ГДЕ
		|		ЗанятыеРабочиеМеста.Организация = &Организация
		|		И ЗанятыеРабочиеМеста.Подразделение В(&Подразделения)
		|		И ЗанятыеРабочиеМеста.Должность В(&Должности)
		|		И (&БезУсловияПоРабочимМестам
		|				ИЛИ ЗанятыеРабочиеМеста.РабочееМесто В (&РабочиеМеста))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ШтатноеРасписание.Должность,
		|		ШтатноеРасписание.Подразделение,
		|		ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка),
		|		&Организация,
		|		&НормаВыдачи
		|	ИЗ
		|		РегистрСведений.ШтатноеРасписание КАК ШтатноеРасписание
		|	ГДЕ
		|		ШтатноеРасписание.Организация = &Организация
		|		И ШтатноеРасписание.Подразделение В(&Подразделения)
		|		И ШтатноеРасписание.Должность В(&Должности)) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК ИсходныеНормыВыдачиСИЗ
		|		ПО ВложенныйЗапрос.Организация = ИсходныеНормыВыдачиСИЗ.Организация
		|			И ВложенныйЗапрос.Подразделение = ИсходныеНормыВыдачиСИЗ.Подразделение
		|			И ВложенныйЗапрос.Должность = ИсходныеНормыВыдачиСИЗ.Должность
		|			И ВложенныйЗапрос.РабочееМесто = ИсходныеНормыВыдачиСИЗ.РабочееМесто
		|			И ВложенныйЗапрос.НормаВыдачи = ИсходныеНормыВыдачиСИЗ.НормаВыдачи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Подразделение,
		|	ВложенныйЗапрос.Должность,
		|	ВложенныйЗапрос.РабочееМесто,
		|	ВложенныйЗапрос.НормаВыдачи,
		|	ВложенныйЗапрос.Организация,
		|	ЕСТЬNULL(ИсходныеНормыВыдачиСИЗ.УсловиеНормы, ЗНАЧЕНИЕ(Справочник.УсловияНорм.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НормаВыдачи", НормаВыдачи);
	Запрос.УстановитьПараметр("БезУсловияПоРабочимМестам", Ложь);
	
	МассивОтборов_ТаблицаДолжностей = ТаблицаОтборовДолжностей.Выгрузить(Новый Структура("Пометка", Истина));
	МассивОтборов_ТаблицаДолжностей = МассивОтборов_ТаблицаДолжностей.ВыгрузитьКолонку("Должность");
	Запрос.УстановитьПараметр("Должности", МассивОтборов_ТаблицаДолжностей);
	
	МассивОтборов_ТаблицаПодразделений = ТаблицаОтборовПодразделений.Выгрузить(Новый Структура("Пометка", Истина));
	МассивОтборов_ТаблицаПодразделений = МассивОтборов_ТаблицаПодразделений.ВыгрузитьКолонку("Подразделение");
	Запрос.УстановитьПараметр("Подразделения", МассивОтборов_ТаблицаПодразделений);
	
	МассивОтборов_ТаблицаРабочихМест = ТаблицаОтборовРабочиеМеста.Выгрузить(Новый Структура("Пометка", Истина));
	МассивОтборов_ТаблицаРабочихМест = МассивОтборов_ТаблицаРабочихМест.ВыгрузитьКолонку("РабочееМесто");
	Запрос.УстановитьПараметр("РабочиеМеста", МассивОтборов_ТаблицаРабочихМест);
	
	Если НЕ Объект.Организация.ИспользоватьРабочиеМеста Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗанятыеРабочиеМеста.РабочееМесто КАК РабочееМесто", "ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка) КАК РабочееМесто");
		Запрос.УстановитьПараметр("БезУсловияПоРабочимМестам", Истина);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока	= СводнаяТаблицаНазначенияНорм.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
		
КонецФункции

&НаСервере
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиВыборСотрудников_ПриПереходеДалееНаСервере(Отказ)
	
	// Подбираем норму выдачи по указанным параметрам
	Если НЕ ЗначениеЗаполнено(НормаВыдачи) Тогда
		ПараметрыНормы = Новый Структура;
		ПараметрыНормы.Вставить("НоменклатураНормы", 	НоменклатураНормОрганизации);
		ПараметрыНормы.Вставить("Периодичность", 		Периодичность);
		ПараметрыНормы.Вставить("ВидВыдачи", 			ВидВыдачи);
		ПараметрыНормы.Вставить("ВидРасчета", 			ВидРасчета);
		ПараметрыНормы.Вставить("ЕдиницаИзмерения", 	ЕдиницаИзмерения);
		ПараметрыНормы.Вставить("ГОСТ", 				ГОСТ);
		ПараметрыНормы.Вставить("Организация", 			Объект.Организация);
		ПараметрыНормы.Вставить("ОснованиеНормы", 		Неопределено);
		
		НормаВыдачи = ПодобратьСоздатьНормуВыдачи(ПараметрыНормы);
	КонецЕсли;
	
	// Заполняем сводную таблицу
	СводнаяТаблицаНазначенияНорм.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тз_Сотрудники.Должность КАК Должность,
		|	тз_Сотрудники.Подразделение КАК Подразделение,
		|	тз_Сотрудники.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ вт_ВыбранныеСотрудники
		|ИЗ
		|	&тз_Сотрудники КАК тз_Сотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеНормыВыдачиСИЗ.Организация КАК Организация,
		|	ИсходныеНормыВыдачиСИЗ.Подразделение КАК Подразделение,
		|	ИсходныеНормыВыдачиСИЗ.Должность КАК Должность,
		|	ИсходныеНормыВыдачиСИЗ.РабочееМесто КАК РабочееМесто,
		|	ИсходныеНормыВыдачиСИЗ.УсловиеНормы КАК УсловиеНормы,
		|	ИсходныеНормыВыдачиСИЗ.НормаВыдачи КАК НормаВыдачи
		|ПОМЕСТИТЬ вт_ИсходныеНормыВыдачи
		|ИЗ
		|	РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК ИсходныеНормыВыдачиСИЗ
		|ГДЕ
		|	ИсходныеНормыВыдачиСИЗ.Организация = &Организация
		|	И ИсходныеНормыВыдачиСИЗ.НормаВыдачи = &НормаВыдачи
		|	И ИсходныеНормыВыдачиСИЗ.Подразделение В
		|			(ВЫБРАТЬ
		|				вт_ВыбранныеСотрудники.Подразделение
		|			ИЗ
		|				вт_ВыбранныеСотрудники КАК вт_ВыбранныеСотрудники)
		|	И ИсходныеНормыВыдачиСИЗ.Должность В
		|			(ВЫБРАТЬ
		|				вт_ВыбранныеСотрудники.Должность
		|			ИЗ
		|				вт_ВыбранныеСотрудники КАК вт_ВыбранныеСотрудники)
		|	И ИсходныеНормыВыдачиСИЗ.РабочееМесто В
		|			(ВЫБРАТЬ
		|				вт_ВыбранныеСотрудники.РабочееМесто
		|			ИЗ
		|				вт_ВыбранныеСотрудники КАК вт_ВыбранныеСотрудники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ВыбранныеСотрудники.Должность КАК Должность,
		|	вт_ВыбранныеСотрудники.Подразделение КАК Подразделение,
		|	вт_ВыбранныеСотрудники.РабочееМесто КАК РабочееМесто,
		|	НЕОПРЕДЕЛЕНО КАК Основание,
		|	&НормаВыдачи КАК НормаВыдачи,
		|	ЕСТЬNULL(вт_ИсходныеНормыВыдачи.УсловиеНормы, ЗНАЧЕНИЕ(Справочник.УсловияНорм.ПустаяСсылка)) КАК УсловиеНормы
		|ИЗ
		|	вт_ВыбранныеСотрудники КАК вт_ВыбранныеСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ИсходныеНормыВыдачи КАК вт_ИсходныеНормыВыдачи
		|		ПО вт_ВыбранныеСотрудники.Должность = вт_ИсходныеНормыВыдачи.Должность
		|			И вт_ВыбранныеСотрудники.Подразделение = вт_ИсходныеНормыВыдачи.Подразделение
		|			И вт_ВыбранныеСотрудники.РабочееМесто = вт_ИсходныеНормыВыдачи.РабочееМесто
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ВыбранныеСотрудники.Должность,
		|	вт_ВыбранныеСотрудники.Подразделение,
		|	вт_ВыбранныеСотрудники.РабочееМесто,
		|	ЕСТЬNULL(вт_ИсходныеНормыВыдачи.УсловиеНормы, ЗНАЧЕНИЕ(Справочник.УсловияНорм.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("тз_Сотрудники", ТаблицаСотрудники.Выгрузить(Новый Структура("Пометка", Истина)));
	Запрос.УстановитьПараметр("НормаВыдачи", НормаВыдачи);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока	= СводнаяТаблицаНазначенияНорм.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
		
КонецФункции

&НаСервере
Функция Подключаемый_СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор_ПриПереходеДалееНаСервере(Отказ)
	
	// Подбираем норму выдачи по указанным параметрам
	Если НЕ ЗначениеЗаполнено(НормаВыдачи) Тогда
		ПараметрыНормы = Новый Структура;
		ПараметрыНормы.Вставить("НоменклатураНормы", 	НоменклатураНормОрганизации);
		ПараметрыНормы.Вставить("Периодичность", 		Периодичность);
		ПараметрыНормы.Вставить("ВидВыдачи", 			ВидВыдачи);
		ПараметрыНормы.Вставить("ВидРасчета", 			ВидРасчета);
		ПараметрыНормы.Вставить("ЕдиницаИзмерения", 	ЕдиницаИзмерения);
		ПараметрыНормы.Вставить("ГОСТ", 				ГОСТ);
		ПараметрыНормы.Вставить("Организация", 			Объект.Организация);
		ПараметрыНормы.Вставить("ОснованиеНормы", 		Неопределено);
		
		НормаВыдачи = ПодобратьСоздатьНормуВыдачи(ПараметрыНормы);
	КонецЕсли;
	
	// Заполняем сводную таблицу
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	тз_ПроизвольныйВыбора.Должность КАК Должность,
		|	тз_ПроизвольныйВыбора.Подразделение КАК Подразделение,
		|	тз_ПроизвольныйВыбора.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ вт_ПроизвольныйВыборПодразделений
		|ИЗ
		|	&тз_ПроизвольныйВыбора КАК тз_ПроизвольныйВыбора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеНормыВыдачиСИЗ.Организация КАК Организация,
		|	ИсходныеНормыВыдачиСИЗ.Подразделение КАК Подразделение,
		|	ИсходныеНормыВыдачиСИЗ.Должность КАК Должность,
		|	ИсходныеНормыВыдачиСИЗ.РабочееМесто КАК РабочееМесто,
		|	ИсходныеНормыВыдачиСИЗ.УсловиеНормы КАК УсловиеНормы,
		|	ИсходныеНормыВыдачиСИЗ.НормаВыдачи КАК НормаВыдачи
		|ПОМЕСТИТЬ вт_ИсходныеНормыВыдачи
		|ИЗ
		|	РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК ИсходныеНормыВыдачиСИЗ
		|ГДЕ
		|	ИсходныеНормыВыдачиСИЗ.Организация = &Организация
		|	И ИсходныеНормыВыдачиСИЗ.НормаВыдачи = &НормаВыдачи
		|	И ИсходныеНормыВыдачиСИЗ.Подразделение В
		|			(ВЫБРАТЬ
		|				вт_ПроизвольныйВыборПодразделений.Подразделение
		|			ИЗ
		|				вт_ПроизвольныйВыборПодразделений КАК вт_ПроизвольныйВыборПодразделений)
		|	И ИсходныеНормыВыдачиСИЗ.Должность В
		|			(ВЫБРАТЬ
		|				вт_ПроизвольныйВыборПодразделений.Должность
		|			ИЗ
		|				вт_ПроизвольныйВыборПодразделений КАК вт_ПроизвольныйВыборПодразделений)
		|	И ИсходныеНормыВыдачиСИЗ.РабочееМесто В
		|			(ВЫБРАТЬ
		|				вт_ПроизвольныйВыборПодразделений.РабочееМесто
		|			ИЗ
		|				вт_ПроизвольныйВыборПодразделений КАК вт_ПроизвольныйВыборПодразделений)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ПроизвольныйВыборПодразделений.Должность КАК Должность,
		|	вт_ПроизвольныйВыборПодразделений.Подразделение КАК Подразделение,
		|	вт_ПроизвольныйВыборПодразделений.РабочееМесто КАК РабочееМесто,
		|	НЕОПРЕДЕЛЕНО КАК Основание,
		|	&НормаВыдачи КАК НормаВыдачи,
		|	ЕСТЬNULL(вт_ИсходныеНормыВыдачи.УсловиеНормы, ЗНАЧЕНИЕ(Справочник.УсловияНорм.ПустаяСсылка)) КАК УсловиеНормы
		|ИЗ
		|	вт_ПроизвольныйВыборПодразделений КАК вт_ПроизвольныйВыборПодразделений
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ИсходныеНормыВыдачи КАК вт_ИсходныеНормыВыдачи
		|		ПО вт_ПроизвольныйВыборПодразделений.Должность = вт_ИсходныеНормыВыдачи.Должность
		|			И вт_ПроизвольныйВыборПодразделений.Подразделение = вт_ИсходныеНормыВыдачи.Подразделение
		|			И вт_ПроизвольныйВыборПодразделений.РабочееМесто = вт_ИсходныеНормыВыдачи.РабочееМесто
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ПроизвольныйВыборПодразделений.Должность,
		|	вт_ПроизвольныйВыборПодразделений.Подразделение,
		|	вт_ПроизвольныйВыборПодразделений.РабочееМесто,
		|	ЕСТЬNULL(вт_ИсходныеНормыВыдачи.УсловиеНормы, ЗНАЧЕНИЕ(Справочник.УсловияНорм.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("тз_ПроизвольныйВыбора", СводнаяТаблицаНазначенияНорм.Выгрузить());
	Запрос.УстановитьПараметр("НормаВыдачи", НормаВыдачи);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СводнаяТаблицаНазначенияНорм.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция Подключаемый_СтраницаМастераКопированиеНормыНастройки_ПриПереходеДалееНаСервере(Отказ)
	
	// Заполняем талицу целевых норм для отмеченных подразделений/должностей/рабочих мест
	МассивВыбранныхПодразделений = Новый Массив;
	МассивВыбранныхДолжностей = Новый Массив;                                                                    
	МассивВыбранныхРабочихМест = Новый Массив;
	
	СтруктураПоиска = Новый Структура("Пометка", Истина);
	НайденныеСтроки = ЦелевыеНормыТЗ.НайтиСтроки(СтруктураПоиска);
	// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)<<<
	Если НайденныеСтроки.Количество() = 0 Тогда
	    Дерево = РеквизитФормыВЗначение("СводноеДеревоЦелевыхНорм");
		Дерево.Строки.Очистить();
		ЗначениеВРеквизитФормы(Дерево, "СводноеДеревоЦелевыхНорм");
		Возврат Неопределено;
	
	КонецЕсли; 
	// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)>>>

	
	// Значения строк дерева перенесем в таблицу
	Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл
		МассивВыбранныхПодразделений.Добавить(СтрокаТЗ.Подразделение);
		МассивВыбранныхДолжностей.Добавить(СтрокаТЗ.Должность);
		МассивВыбранныхРабочихМест.Добавить(СтрокаТЗ.РабочееМесто);	
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", 	Объект.Организация);
	СтруктураОтбора.Вставить("Подразделения", 	МассивВыбранныхПодразделений);
	СтруктураОтбора.Вставить("Должности", 		МассивВыбранныхДолжностей);
	СтруктураОтбора.Вставить("РабочиеМеста", 	МассивВыбранныхРабочихМест);
	
	ЗаполнитьТаблицуЦелевыхНорм(СтруктураОтбора);
	
	// Подготавливаем сводное дерево
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)<<<
		|	тзЦелевыеНормыПервичные.Подразделение КАК Подразделение,
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)>>>
		|	тзЦелевыеНормыПервичные.Должность КАК Должность,
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)<<<
		|	тзЦелевыеНормыПервичные.РабочееМесто КАК РабочееМесто,
		|	тзЦелевыеНормыПервичные.Пометка КАК Пометка
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)>>>
		|ПОМЕСТИТЬ втЦелевыеНормыПервичные
		|ИЗ
		|	&тзЦелевыеНормы КАК тзЦелевыеНормыПервичные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)<<<
		//|	втЦелевыеНормыПервичные.Организация КАК Организация,
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)>>>
		|	втЦелевыеНормыПервичные.Должность КАК Должность,
		|	втЦелевыеНормыПервичные.Подразделение КАК Подразделение,
		|	втЦелевыеНормыПервичные.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ втЦелевыеНормы
		|ИЗ
		|	втЦелевыеНормыПервичные КАК втЦелевыеНормыПервичные
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)<<<
		|ГДЕ
		|	втЦелевыеНормыПервичные.Пометка = ИСТИНА
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)>>>
		|
		|СГРУППИРОВАТЬ ПО
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)<<<
		//|	втЦелевыеНормыПервичные.Организация,
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)>>>
		|	втЦелевыеНормыПервичные.Должность,
		|	втЦелевыеНормыПервичные.Подразделение,
		|	втЦелевыеНормыПервичные.РабочееМесто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тзИсходныеНормы.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ,
		|	тзИсходныеНормы.ГОСТ КАК ГОСТ,
		|	тзИсходныеНормы.Должность КАК Должность,
		|	тзИсходныеНормы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	тзИсходныеНормы.Использовать КАК Использовать,
		|	тзИсходныеНормы.НоменклатураНормы КАК НоменклатураНормы,
		|	тзИсходныеНормы.НормаВыдачи КАК НормаВыдачи,
		|	тзИсходныеНормы.Организация КАК Организация,
		|	тзИсходныеНормы.ОснованиеНормы КАК ОснованиеНормы,
		|	тзИсходныеНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
		|	тзИсходныеНормы.Подразделение КАК Подразделение,
		|	тзИсходныеНормы.РабочееМесто КАК РабочееМесто,
		|	тзИсходныеНормы.УсловиеНормы КАК УсловиеНормы,
		|	тзИсходныеНормы.Переносить КАК Переносить
		|ПОМЕСТИТЬ втИсходныеНормы
		|ИЗ
		|	&тзИсходныеНормы КАК тзИсходныеНормы
		|ГДЕ
		|	тзИсходныеНормы.Переносить
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	0 КАК Пометка,
		|	втИсходныеНормы.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ,
		|	втИсходныеНормы.ГОСТ КАК ГОСТ,
		|	втИсходныеНормы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	втИсходныеНормы.Использовать КАК Использовать,
		|	втИсходныеНормы.НоменклатураНормы КАК НоменклатураНормы,
		|	втИсходныеНормы.НормаВыдачи КАК НормаВыдачи,
		|	втИсходныеНормы.ОснованиеНормы КАК Основание,
		|	втИсходныеНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
		|	втИсходныеНормы.УсловиеНормы КАК УсловиеНормы,
		|	ЛОЖЬ КАК Зачет,
		|	ЛОЖЬ КАК ОтменитьПредыдущую,
		|	НЕОПРЕДЕЛЕНО КАК НормаДляЗачета,
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)<<<
		|	втИсходныеНормы.Организация КАК Организация,
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)>>>
		|	втЦелевыеНормы.Должность КАК Должность,
		|	втЦелевыеНормы.Подразделение КАК Подразделение,
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)<<<
		|	втИсходныеНормы.РабочееМесто КАК РабочееМесто
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)>>>
		|ИЗ
		|	втИсходныеНормы КАК втИсходныеНормы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЦелевыеНормы КАК втЦелевыеНормы
		|		ПО (ИСТИНА)
		|ИТОГИ ПО
		|	Подразделение,
		|	Должность";
	
	Запрос.УстановитьПараметр("тзЦелевыеНормы", ЦелевыеНормыТЗ.Выгрузить());
	Запрос.УстановитьПараметр("тзИсходныеНормы", ИсходныеНормыТаблица.Выгрузить());
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Дерево, "СводноеДеревоЦелевыхНорм");
			
КонецФункции

&НаСервере
Функция Подключаемый_СтраницаМастераКопированиеНормыСводная_ПриОткрытииНаСервере(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	УстановитьВидимостьЭлементовСтраницаМастераКопированиеНормыСводная();
	
КонецФункции

&НаСервере
Функция Подключаемый_СтраницаМастераКопированиеНормыСводная_ПриПереходеДалееНаСервере(Отказ)
	
	КопироватьНормыВыдчи();
	
	// Переходим на страницу СтраницаМастераНачало
	// ЭтоПорядковыйНомерПерехода = 1
	ЗаполнитьТаблицуПереходов("Инициализация");
			
КонецФункции

&НаСервере
Функция Подключаемый_СтраницаМастераОтменаНормыНастройки_ПриПереходеДалееНаСервере(Отказ)
	
	ОтменитьНормыВыдачи();
	
	// Переходим на страницу СтраницаМастераНачало
	// ЭтоПорядковыйНомерПерехода = 1
	ЗаполнитьТаблицуПереходов("Инициализация");
			
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация переходов помощника.

&НаСервере
Процедура ТаблицаПереходовИнициализация()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 1;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНачало";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНазначитьНормыВыдачи()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 1;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНачало";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 2;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНазначитьНормыВыдачиЗаданиеНормы";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы_ПриПереходеДалее";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 3;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиРежимСпискаСотрудников";
	//НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНазначитьНормыВыдачиСписокСотрудников";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжениеТолькоНазад";
	//НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиСписокСотрудников_ПриПереходеДалее";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиСписокСотрудников_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 4;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиВыборПодразделений";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиВыборПодразделений_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиВыборПодразделений_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 5;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиВыборСотрудников";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиВыборСотрудников_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиВыборСотрудников_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 6;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 7;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиСводная";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиСводная_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиСводная_ПриОткрытии";

	//НовыйПереход = ТаблицаПереходов.Добавить();
	//НовыйПереход.ПорядковыйНомерПерехода = 7;
	//НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиСводная";
	//НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиСводная_ПриОткрытии";
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНазначитьНормыВыдачи_ОтборПоДолжностям()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 1;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНачало";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 2;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНазначитьНормыВыдачиЗаданиеНормы";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы_ПриПереходеДалее";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 3;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиРежимСпискаСотрудников";
	//НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНазначитьНормыВыдачиСписокСотрудников";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжениеТолькоНазад";
	//НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиСписокСотрудников_ПриПереходеДалее";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиСписокСотрудников_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 4;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиВыборПодразделений";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиВыборПодразделений_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиВыборПодразделений_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 5;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиСводная";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиСводная_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиСводная_ПриОткрытии";
	
	НовыйПереход = ТаблицаПереходов.Добавить(); // Фиктивная страница перехода, чтобы верно отработала команда
	НовыйПереход.ПорядковыйНомерПерехода = 6;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиСводная";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";

	//НовыйПереход = ТаблицаПереходов.Добавить();
	//НовыйПереход.ПорядковыйНомерПерехода = 5;
	//НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиСводная";
	//НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиСводная_ПриОткрытии";
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНазначитьНормыВыдачи_ОтборПоСотрудникам()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 1;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНачало";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 2;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНазначитьНормыВыдачиЗаданиеНормы";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы_ПриПереходеДалее";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 3;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиРежимСпискаСотрудников";
	//НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНазначитьНормыВыдачиСписокСотрудников";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжениеТолькоНазад";
	//НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиСписокСотрудников_ПриПереходеДалее";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиСписокСотрудников_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 4;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиВыборСотрудников";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиВыборСотрудников_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиВыборСотрудников_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 5;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиСводная";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиСводная_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиСводная_ПриОткрытии";
	
	НовыйПереход = ТаблицаПереходов.Добавить(); // Фиктивная страница перехода, чтобы верно отработала команда
	НовыйПереход.ПорядковыйНомерПерехода = 6;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиСводная";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";

	//НовыйПереход = ТаблицаПереходов.Добавить();
	//НовыйПереход.ПорядковыйНомерПерехода = 5;
	//НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиСводная";
	//НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиСводная_ПриОткрытии";
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНазначитьНормыВыдачи_ПроизвольныйОтбор()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 1;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНачало";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 2;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНазначитьНормыВыдачиЗаданиеНормы";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы_ПриПереходеДалее";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 3;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиРежимСпискаСотрудников";
	//НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНазначитьНормыВыдачиСписокСотрудников";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжениеТолькоНазад";
	//НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиСписокСотрудников_ПриПереходеДалее";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиСписокСотрудников_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 4;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 5;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиСводная";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНазначитьНормыВыдачиСводная_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиСводная_ПриОткрытии";
	
	НовыйПереход = ТаблицаПереходов.Добавить(); // Фиктивная страница перехода, чтобы верно отработала команда
	НовыйПереход.ПорядковыйНомерПерехода = 6;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиСводная";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";

	//НовыйПереход = ТаблицаПереходов.Добавить();
	//НовыйПереход.ПорядковыйНомерПерехода = 5;
	//НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНазначитьНормыВыдачиСводная";
	//НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераНазначитьНормыВыдачиСводная_ПриОткрытии";
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовСкопироватьНормыВыдачи()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 1;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНачало";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераНачало_ПриПереходеДалее";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 2;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераКопированиеНормыНастройки";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераКопированиеНормыНастройки_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераКопированиеНормыНастройки_ПриОткрытии";

	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 3;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераКопированиеНормыСводная";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераКопированиеНормыСводная_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераКопированиеНормыСводная_ПриОткрытии";
	
	НовыйПереход = ТаблицаПереходов.Добавить(); // Фиктивная страница перехода, чтобы верно отработала команда
	НовыйПереход.ПорядковыйНомерПерехода = 4;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераКопированиеНормыСводная";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	
	//НовыйПереход = ТаблицаПереходов.Добавить();
	//НовыйПереход.ПорядковыйНомерПерехода = 3;
	//НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераКопированиеНормыСводная";
	//НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераКопированиеНормыСводная_ПриОткрытии";

	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовОтменитьНормыВыдачи()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 1;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераНачало";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода = 2;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОтменаНормыНастройки";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее = "СтраницаМастераОтменаНормыНастройки_ПриПереходеДалее";
	НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераОтменаНормыНастройки_ПриОткрытии";
	
	НовыйПереход = ТаблицаПереходов.Добавить(); // Фиктивная страница перехода, чтобы верно отработала команда
	НовыйПереход.ПорядковыйНомерПерехода = 3;
	НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОтменаНормыНастройки";
	НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";

	//НовыйПереход = ТаблицаПереходов.Добавить();
	//НовыйПереход.ПорядковыйНомерПерехода = 2;
	//НовыйПереход.ИмяОсновнойСтраницы  = "СтраницаМастераОтменаНормыНастройки";
	//НовыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	//НовыйПереход.ИмяОбработчикаПриОткрытии = "СтраницаМастераОтменаНормыНастройки_ПриОткрытии";
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыНормыВыдачи(НормаВыдачиСИЗ)
	
	РеквизитыНормы = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы КАК НоменклатураНормы,
		|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
		|	НормыВыдачиСИЗСоставНормы.Ссылка.ВидВыдачиСИЗ КАК ВидВыдачи,
		|	НормыВыдачиСИЗСоставНормы.Ссылка.ВидРасчета КАК ВидРасчета,
		|	НормыВыдачиСИЗСоставНормы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НормыВыдачиСИЗСоставНормы.ГОСТ КАК ГОСТ
		|ИЗ
		|	Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
		|ГДЕ
		|	НормыВыдачиСИЗСоставНормы.Ссылка = &НормаВыдачиСИЗ";
	
	Запрос.УстановитьПараметр("НормаВыдачиСИЗ", НормаВыдачиСИЗ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РеквизитыНормы.Вставить("НоменклатураНормы", 	Выборка.НоменклатураНормы);
		РеквизитыНормы.Вставить("ПериодичностьВыдачи", 	Выборка.ПериодичностьВыдачи);
		РеквизитыНормы.Вставить("ВидВыдачи", 			Выборка.ВидВыдачи);
		РеквизитыНормы.Вставить("ВидРасчета", 			Выборка.ВидРасчета);
		РеквизитыНормы.Вставить("ЕдиницаИзмерения", 	Выборка.ЕдиницаИзмерения);
		РеквизитыНормы.Вставить("ГОСТ", 				Выборка.ГОСТ);
	КонецЦикла;
		
	Возврат РеквизитыНормы;	
	
КонецФункции

&НаСервере
Процедура ИзменитьФлажкиНаСервере(ЗначениеФлажка, ИмяТаблицыОбъекта)
	
	ТаблицаОбъекта = ЭтаФорма[ИмяТаблицыОбъекта].Выгрузить();
	ТаблицаОбъекта.ЗаполнитьЗначения(ЗначениеФлажка, "Пометка");
	ЭтаФорма[ИмяТаблицыОбъекта].Загрузить(ТаблицаОбъекта);

КонецПроцедуры

&НаСервере
Процедура УстановитьПорядокТаблицОтбора(ИмяТаблицы, Направление)

	НомерТаблицы = ПолучитьНомерТаблицы(ИмяТаблицы);
	
	ВсегоПозиций = СтрДлина(ПоследовательностьТЧ);
	
	НомерПозиции = СтрНайти(ПоследовательностьТЧ, НомерТаблицы);
	
	Если Направление = "Влево" Тогда
		НовыйНомерПозиции = НомерПозиции - 1;
	Иначе
		НовыйНомерПозиции = НомерПозиции + 1;	
	КонецЕсли;
	
	Если НовыйНомерПозиции <= 0 ИЛИ НовыйНомерПозиции > ВсегоПозиций Тогда
		//ПоказатьСообщение("Невозможно переместить таблицу."); // отладка
		Возврат;
	КонецЕсли;
	
	НомерЗамещаемойТаблицы = Сред(ПоследовательностьТЧ, НовыйНомерПозиции,1);
	НомерЗамещающейТаблицы = Сред(ПоследовательностьТЧ, НомерПозиции,1);
	
	Если Направление = "Влево" Тогда
		СтараяПоследовательность = "" + НомерЗамещаемойТаблицы + НомерЗамещающейТаблицы;
		НоваяПоследовательность	 = "" + НомерЗамещающейТаблицы + НомерЗамещаемойТаблицы;
	Иначе 
		СтараяПоследовательность = "" + НомерЗамещающейТаблицы + НомерЗамещаемойТаблицы;	
		НоваяПоследовательность  = "" + НомерЗамещаемойТаблицы + НомерЗамещающейТаблицы;
	КонецЕсли;

	ПоследовательностьТЧ = СтрЗаменить(ПоследовательностьТЧ, СтараяПоследовательность, НоваяПоследовательность); 
	//ПоказатьСообщение("Новая последовательность: " + Объект.ПоследовательностьТЧ); // отладка
	
	РазместитьОтборыНаФорме();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерТаблицы(ИмяТаблицы)
	
	Строки = ТаблицаНомеровТаблиц.НайтиСтроки(Новый Структура("НазваниеТаблицы", ИмяТаблицы));
	Возврат Строки[0].НомерСтроки;
	
КонецФункции

&НаСервере
Функция ПолучитьИмяТаблицы(НомерТаблицы)
	
	Строки = ТаблицаНомеровТаблиц.НайтиСтроки(Новый Структура("НомерТаблицы", НомерТаблицы));
	Возврат Строки[0].НазваниеТаблицы;
	
КонецФункции

&НаСервере
Процедура РазместитьОтборыНаФорме()
	
	ВсегоПозиций = СтрДлина(ПоследовательностьТЧ);
	Сч = 1;
	
	Пока Сч <= ВсегоПозиций Цикл
		
		ТекущийНомер = Сред(ПоследовательностьТЧ, Сч, 1);
		
		ИмяТаблицыПоНомеру = ПолучитьИмяТаблицы(ТекущийНомер);
		
		Элементы.Переместить(Элементы[ИмяТаблицыПоНомеру], Элементы.ГруппаОтборыПодразделений);
		
		Сч = Сч + 1;	
		
	КонецЦикла;	
	
	УстановитьВидимостьЭлементовСтраницаМастераНазначитьНормыВыдачиВыборПодразделений();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборы(ИмяТаблицы = "")
	
	ВсегоОтборов = СтрДлина(ПоследовательностьТЧ);
	Сч = 1;
	
	ИзмСч = 1;
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		НомерТаблицы = ПолучитьНомерТаблицы(ИмяТаблицы);
		ИзмСч = СтрНайти(ПоследовательностьТЧ, НомерТаблицы);
		// Изменены условия накладывания отборов: При выборе должности отражать все связанные подразделения,
		// и наборот, при выборе подразделения отражать все связанные должности
		Сч = СтрНайти(ПоследовательностьТЧ, НомерТаблицы);
	КонецЕсли;
	
	ИмяПоследнегоОтбора = ПолучитьИмяТаблицы(Прав(ПоследовательностьТЧ, 1));
	
	// При изменении последнего отбора пересчёт не нужен
	Если ИзмСч = ВсегоОтборов И ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	// собираем отборы до текущего
	МассивОтборов_ТаблицаДолжностей 	= Новый Массив;
	МассивОтборов_ТаблицаПодразделений	= Новый Массив;
	МассивОтборов_ТаблицаРабочихМест	= Новый Массив;
	ЕстьОтбор_Должности					= Ложь;
	ЕстьОтбор_Подразделения      		= Ложь;
	ЕстьОтбор_РабочиеМеста         		= Ложь;
	
	Пока Сч <= ИзмСч Цикл
		
		ТекущийОтбор = Сред(ПоследовательностьТЧ, Сч, 1);
		
		Если ТекущийОтбор = "1" Тогда
			//ТаблицаОтборовДолжностей
		    МассивОтборов_ТаблицаДолжностей = ТаблицаОтборовДолжностей.Выгрузить(Новый Структура("Пометка", Истина));
			МассивОтборов_ТаблицаДолжностей = МассивОтборов_ТаблицаДолжностей.ВыгрузитьКолонку("Должность");
			ЕстьОтбор_Должности = Истина;
		ИначеЕсли ТекущийОтбор = "2" Тогда	
			//ТаблицаОтборовПодразделений
			МассивОтборов_ТаблицаПодразделений = ТаблицаОтборовПодразделений.Выгрузить(Новый Структура("Пометка", Истина));
			МассивОтборов_ТаблицаПодразделений = МассивОтборов_ТаблицаПодразделений.ВыгрузитьКолонку("Подразделение");
			ЕстьОтбор_Подразделения = Истина;
		ИначеЕсли ТекущийОтбор = "3" Тогда
			//ТаблицаОтборовРабочиеМеста
			МассивОтборов_ТаблицаРабочихМест = ТаблицаОтборовРабочиеМеста.Выгрузить(Новый Структура("Пометка", Истина));
			МассивОтборов_ТаблицаРабочихМест = МассивОтборов_ТаблицаРабочихМест.ВыгрузитьКолонку("РабочееМесто");
			ЕстьОтбор_РабочиеМеста = Истина;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не предусмотрен отбор с кодом """ + ТекущийОтбор + """");
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	// накладываем отборы
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Организация КАК Организация,
	|	ШтатноеРасписание.Должность КАК Должность,
	|	ШтатноеРасписание.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМеста.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ ТаблицаЗначений
	|ИЗ
	|	РегистрСведений.ШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеРабочиеМеста КАК ЗанятыеРабочиеМеста
	|		ПО ШтатноеРасписание.Организация = ЗанятыеРабочиеМеста.Организация
	|			И ШтатноеРасписание.Подразделение = ЗанятыеРабочиеМеста.Подразделение
	|			И ШтатноеРасписание.Должность = ЗанятыеРабочиеМеста.Должность
	|ГДЕ
	|	ШтатноеРасписание.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтатноеРасписание.Организация,
	|	ШтатноеРасписание.Должность,
	|	ШтатноеРасписание.Подразделение,
	|	ЗанятыеРабочиеМеста.РабочееМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗначений.Организация КАК Организация,
	|	ТаблицаЗначений.Должность КАК Должность,
	|	ТаблицаЗначений.Подразделение КАК Подразделение,
	|	ТаблицаЗначений.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	ТаблицаЗначений КАК ТаблицаЗначений
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ЕстьОтбор_Должности
	|				ТОГДА ТаблицаЗначений.Должность В (&МассивОтборов_ТаблицаДолжностей)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЕстьОтбор_Подразделения
	|				ТОГДА ТаблицаЗначений.Подразделение В (&МассивОтборов_ТаблицаПодразделений)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЕстьОтбор_РабочиеМеста
	|				ТОГДА ТаблицаЗначений.Рабочееместо В (&МассивОтборов_ТаблицаРабочихМест)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|";
	
	Запрос.УстановитьПараметр("МассивОтборов_ТаблицаДолжностей", 	МассивОтборов_ТаблицаДолжностей);
	Запрос.УстановитьПараметр("ЕстьОтбор_Должности", 				ЕстьОтбор_Должности);
	Запрос.УстановитьПараметр("МассивОтборов_ТаблицаПодразделений",	МассивОтборов_ТаблицаПодразделений);
	Запрос.УстановитьПараметр("ЕстьОтбор_Подразделения", 			ЕстьОтбор_Подразделения);
	Запрос.УстановитьПараметр("МассивОтборов_ТаблицаРабочихМест", 	МассивОтборов_ТаблицаРабочихМест);
	Запрос.УстановитьПараметр("ЕстьОтбор_РабочиеМеста", 			ЕстьОтбор_РабочиеМеста);
	Запрос.УстановитьПараметр("Организация", 						Объект.Организация);
		
	ТЗ_ТаблицаОтборов = Запрос.Выполнить().Выгрузить();
	
	// получаем новые отборы
	
	// Изменены условия накладывания отборов: При выборе должности отражать все связанные подразделения,
	// и наборот, при выборе подразделения отражать все связанные должности
	
	// Отборы вышестоящие
	Для СчВыше = 1 По ИзмСч-1 Цикл
		
		ТекущийОтбор = Сред(ПоследовательностьТЧ, СчВыше, 1);
		
		Если ТекущийОтбор = "1" Тогда
			//ТаблицаОтборовДолжностей	
			ТЗ_ТаблицаДолжности = ТЗ_ТаблицаОтборов.Скопировать(,"Должность");
			ТЗ_ТаблицаДолжности.Свернуть("Должность");
			ТЗ_ТаблицаДолжности.Колонки.Добавить("Пометка");
			
			Для Каждого ТекСтрока Из ТаблицаОтборовДолжностей Цикл
				НайденнаяСтрока = ТЗ_ТаблицаДолжности.Найти(ТекСтрока.Должность, "Должность");
				Если НайденнаяСтрока <> Неопределено И ТекСтрока.Пометка Тогда
					НайденнаяСтрока.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
			
			ТЗ_ТаблицаДолжности.Сортировать("Должность");
			ТаблицаОтборовДолжностей.Загрузить(ТЗ_ТаблицаДолжности);
			
		ИначеЕсли ТекущийОтбор = "2" Тогда	
			//ТаблицаОтборовПодразделений
			ТЗ_ТаблицаПодразделения = ТЗ_ТаблицаОтборов.Скопировать(,"Подразделение");
			ТЗ_ТаблицаПодразделения.Свернуть("Подразделение");
			ТЗ_ТаблицаПодразделения.Колонки.Добавить("Пометка");
			
			Для Каждого ТекСтрока Из ТаблицаОтборовПодразделений Цикл
				НайденнаяСтрока = ТЗ_ТаблицаПодразделения.Найти(ТекСтрока.Подразделение, "Подразделение");
				Если НайденнаяСтрока <> Неопределено И ТекСтрока.Пометка Тогда
					НайденнаяСтрока.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
			
			ТЗ_ТаблицаПодразделения.Сортировать("Подразделение");
			ТаблицаОтборовПодразделений.Загрузить(ТЗ_ТаблицаПодразделения);
			
		ИначеЕсли ТекущийОтбор = "3" Тогда
			//ТаблицаОтборовРабочиеМеста
			ТЗ_ТаблицаРабочиеМеста = ТЗ_ТаблицаОтборов.Скопировать(,"РабочееМесто");
			ТЗ_ТаблицаРабочиеМеста.Свернуть("РабочееМесто");
			ТЗ_ТаблицаРабочиеМеста.Колонки.Добавить("Пометка");
			
			Для Каждого ТекСтрока Из ТаблицаОтборовРабочиеМеста Цикл
				НайденнаяСтрока = ТЗ_ТаблицаРабочиеМеста.Найти(ТекСтрока.РабочееМесто, "РабочееМесто");
				Если НайденнаяСтрока <> Неопределено И ТекСтрока.Пометка Тогда
					НайденнаяСтрока.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
			
			ТЗ_ТаблицаРабочиеМеста.Сортировать("РабочееМесто");
			ТаблицаОтборовРабочиеМеста.Загрузить(ТЗ_ТаблицаРабочиеМеста);
		КонецЕсли;
		
	КонецЦикла;
	
	// Отборы послестоящие
	Сч = ИзмСч+1;
	
	Пока Сч <= ВсегоОтборов Цикл
		
		ТекущийОтбор = Сред(ПоследовательностьТЧ, Сч, 1);
		
		Если ТекущийОтбор = "1" Тогда
			//ТаблицаОтборовДолжностей	
			ТЗ_ТаблицаДолжности = ТЗ_ТаблицаОтборов.Скопировать(,"Должность");
			ТЗ_ТаблицаДолжности.Свернуть("Должность");
			ТЗ_ТаблицаДолжности.Колонки.Добавить("Пометка");
			//ТЗ_ТаблицаДолжности.ЗаполнитьЗначения(Истина, "Пометка");
			ТЗ_ТаблицаДолжности.Сортировать("Должность");
			ТаблицаОтборовДолжностей.Загрузить(ТЗ_ТаблицаДолжности);
			
		ИначеЕсли ТекущийОтбор = "2" Тогда	
			//ТаблицаОтборовПодразделений
			ТЗ_ТаблицаПодразделения = ТЗ_ТаблицаОтборов.Скопировать(,"Подразделение");
			ТЗ_ТаблицаПодразделения.Свернуть("Подразделение");
			ТЗ_ТаблицаПодразделения.Колонки.Добавить("Пометка");
			//ТЗ_ТаблицаПодразделения.ЗаполнитьЗначения(Истина, "Пометка");
			ТЗ_ТаблицаПодразделения.Сортировать("Подразделение");
			ТаблицаОтборовПодразделений.Загрузить(ТЗ_ТаблицаПодразделения);
			
		ИначеЕсли ТекущийОтбор = "3" Тогда
			//ТаблицаОтборовРабочиеМеста
			ТЗ_ТаблицаРабочиеМеста = ТЗ_ТаблицаОтборов.Скопировать(,"РабочееМесто");
			ТЗ_ТаблицаРабочиеМеста.Свернуть("РабочееМесто");
			ТЗ_ТаблицаРабочиеМеста.Колонки.Добавить("Пометка");
			//ТЗ_ТаблицаРабочиеМеста.ЗаполнитьЗначения(Истина, "Пометка");
			ТЗ_ТаблицаРабочиеМеста.Сортировать("РабочееМесто");
			ТаблицаОтборовРабочиеМеста.Загрузить(ТЗ_ТаблицаРабочиеМеста);
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не предусмотрен отбор с кодом """ + ТекущийОтбор + """");
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Если ТаблицаОтборовДолжностей.Количество() = 0
		И ТаблицаОтборовПодразделений.Количество() = 0
		И ТаблицаОтборовРабочиеМеста.Количество() = 0
		Тогда
		ЗаполнитьТаблицыОтборов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИницициализироватьСлужебныеПеременныеОтборов()
	
	// Заполняем ТаблицуНомеровТаблиц
	НоваяСтрока = ТаблицаНомеровТаблиц.Добавить();
	НоваяСтрока.НомерСтроки = 1;
	НоваяСтрока.НазваниеТаблицы = "ТаблицаОтборовДолжностей";
	НоваяСтрока.НомерТаблицы = "1";
	НоваяСтрока = ТаблицаНомеровТаблиц.Добавить();
	НоваяСтрока.НомерСтроки = 2;
	НоваяСтрока.НазваниеТаблицы = "ТаблицаОтборовПодразделений";
	НоваяСтрока.НомерТаблицы = "2";
	НоваяСтрока = ТаблицаНомеровТаблиц.Добавить();
	НоваяСтрока.НомерСтроки = 3;
	НоваяСтрока.НазваниеТаблицы = "ТаблицаОтборовРабочиеМеста";
	НоваяСтрока.НомерТаблицы = "3";
	
	ПоследовательностьТЧ = "123";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыОтборов()
	
	ТаблицаОтборовДолжностей.Очистить();
	ТаблицаОтборовПодразделений.Очистить();
	ТаблицаОтборовРабочиеМеста.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗанятыеРабочиеМеста.Должность КАК Должность,
		|	ЗанятыеРабочиеМеста.Подразделение КАК Подразделение,
		|	ЗанятыеРабочиеМеста.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ вт_Данные
		|ИЗ
		|	РегистрНакопления.ЗанятыеРабочиеМеста КАК ЗанятыеРабочиеМеста
		|ГДЕ
		|	ЗанятыеРабочиеМеста.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗанятыеРабочиеМеста.РабочееМесто,
		|	ЗанятыеРабочиеМеста.Подразделение,
		|	ЗанятыеРабочиеМеста.Должность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШтатноеРасписание.Должность,
		|	ШтатноеРасписание.Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка)
		|ИЗ
		|	РегистрСведений.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Данные.Должность КАК Должность
		|ИЗ
		|	вт_Данные КАК вт_Данные
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_Данные.Должность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Данные.Подразделение КАК Подразделение
		|ИЗ
		|	вт_Данные КАК вт_Данные
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_Данные.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Данные.РабочееМесто КАК РабочееМесто
		|ИЗ
		|	вт_Данные КАК вт_Данные
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_Данные.РабочееМесто";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДолжности = ПакетЗапроса[1].Выбрать();
	Пока ВыборкаДолжности.Следующий() Цикл
		НоваяСтрока = ТаблицаОтборовДолжностей.Добавить();
		НоваяСтрока.Должность = ВыборкаДолжности.Должность;
	КонецЦикла;
	
	ВыборкаПодразделения = ПакетЗапроса[2].Выбрать();
	Пока ВыборкаПодразделения.Следующий() Цикл
		НоваяСтрока = ТаблицаОтборовПодразделений.Добавить();
		НоваяСтрока.Подразделение = ВыборкаПодразделения.Подразделение;
	КонецЦикла;
	
	ВыборкаРабочиеМеста = ПакетЗапроса[3].Выбрать();
	Пока ВыборкаРабочиеМеста.Следующий() Цикл
		НоваяСтрока = ТаблицаОтборовРабочиеМеста.Добавить();
		НоваяСтрока.РабочееМесто = ВыборкаРабочиеМеста.РабочееМесто;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСотрудников()
	
	//ОтмеченныеСотрудники = Новый Соответствие;
	//ОтмеченныеДолжности = Новый Соответствие;
	//ОтмеченныеПодраделения = Новый Соответствие;
	//ОтмеченныеРабочиеМеста = Новый Соответствие;
	
	ТаблицаСотрудники.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗРМОстатки.Сотрудник КАК Сотрудник,
		|	ЗРМОстатки.Подразделение КАК Подразделение,
		|	ЗРМОстатки.Должность КАК Должность,
		|	ЗРМОстатки.РабочееМесто КАК РабочееМесто
		|ИЗ
		|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(, Организация = &Организация) КАК ЗРМОстатки";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаСотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЦелевыхНорм(СтруктураОтбора)
	
	ЦелевыеНормыТаблица.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	тзНормыКопирования.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ,
	|	тзНормыКопирования.ГОСТ КАК ГОСТ,
	|	тзНормыКопирования.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	тзНормыКопирования.Использовать КАК Использовать,
	|	тзНормыКопирования.НоменклатураНормы КАК НоменклатураНормы,
	|	тзНормыКопирования.НормаВыдачи КАК НормаВыдачи,
	|	тзНормыКопирования.ОснованиеНормы КАК ОснованиеНормы,
	|	тзНормыКопирования.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	тзНормыКопирования.УсловиеНормы КАК УсловиеНормы,
	|	тзНормыКопирования.СовпадениеПоНорме КАК СовпадениеПоНорме
	|ПОМЕСТИТЬ втНормыКопирования
	|ИЗ
	|	&тзНормыКопирования КАК тзНормыКопирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.Организация КАК Организация,
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.Подразделение КАК Подразделение,
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.Должность КАК Должность,
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.РабочееМесто КАК РабочееМесто,
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.УсловиеНормы КАК УсловиеНормы,
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.НормаВыдачи КАК НормаВыдачи,
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.Использовать КАК Использовать,
	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы КАК НоменклатураНормы,
	|	НормыВыдачиСИЗСоставНормы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	НормыВыдачиСИЗСоставНормы.ГОСТ КАК ГОСТ,
	|	НормыВыдачиСИЗСоставНормы.Ссылка.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ,
	|	НормыВыдачиСИЗСоставНормы.Ссылка.ОснованиеНормы КАК ОснованиеНормы,
	|	НормыВыдачиСИЗСоставНормы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ втЦелевыеНормы
	|ИЗ
	|	РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК РегистрСведенийИсходныеНормыВыдачиСИЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|		ПО РегистрСведенийИсходныеНормыВыдачиСИЗ.НормаВыдачи = НормыВыдачиСИЗСоставНормы.Ссылка
	|ГДЕ
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.Организация = &Организация
	|	И РегистрСведенийИсходныеНормыВыдачиСИЗ.Подразделение В(&СписокПодразделений)
	|	И РегистрСведенийИсходныеНормыВыдачиСИЗ.Должность В(&СписокДолжностей)
	|	И РегистрСведенийИсходныеНормыВыдачиСИЗ.РабочееМесто В(&СписокРабочихМест)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦелевыеНормы.Организация КАК Организация,
	|	втЦелевыеНормы.Подразделение КАК Подразделение,
	|	втЦелевыеНормы.Должность КАК Должность,
	|	втЦелевыеНормы.РабочееМесто КАК РабочееМесто,
	|	втЦелевыеНормы.УсловиеНормы КАК УсловиеНормы,
	|	втЦелевыеНормы.НормаВыдачи КАК НормаВыдачи,
	|	втЦелевыеНормы.Использовать КАК Использовать,
	|	втЦелевыеНормы.НоменклатураНормы КАК НоменклатураНормы,
	|	втЦелевыеНормы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втЦелевыеНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	втЦелевыеНормы.ГОСТ КАК ГОСТ,
	|	втЦелевыеНормы.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ,
	|	втЦелевыеНормы.ОснованиеНормы КАК ОснованиеНормы,
	|	втЦелевыеНормы.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(втНормыКопирования.СовпадениеПоНорме, ЛОЖЬ) КАК СовпадениеПоНорме
	|ИЗ
	|	втЦелевыеНормы КАК втЦелевыеНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыКопирования КАК втНормыКопирования
	|		ПО втЦелевыеНормы.ВидВыдачиСИЗ = втНормыКопирования.ВидВыдачиСИЗ
	|			И втЦелевыеНормы.ГОСТ = втНормыКопирования.ГОСТ
	|			И втЦелевыеНормы.ЕдиницаИзмерения = втНормыКопирования.ЕдиницаИзмерения
	|			И втЦелевыеНормы.НоменклатураНормы = втНормыКопирования.НоменклатураНормы
	|			И втЦелевыеНормы.НормаВыдачи = втНормыКопирования.НормаВыдачи
	|			И втЦелевыеНормы.ОснованиеНормы = втНормыКопирования.ОснованиеНормы
	|			И втЦелевыеНормы.ПериодичностьВыдачи = втНормыКопирования.ПериодичностьВыдачи
	|			И втЦелевыеНормы.УсловиеНормы = втНормыКопирования.УсловиеНормы";
	
	Запрос.УстановитьПараметр("Организация", СтруктураОтбора.Организация);
	Запрос.УстановитьПараметр("СписокПодразделений", СтруктураОтбора.Подразделения);
	Запрос.УстановитьПараметр("СписокДолжностей", СтруктураОтбора.Должности);
	Запрос.УстановитьПараметр("СписокРабочихМест", СтруктураОтбора.РабочиеМеста);
	
	Запрос.УстановитьПараметр("тзНормыКопирования", ПолучитьТаблицуОтмеченныхНормКопирования());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЦелевыеНормыТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИсходныхНорм(СтруктураОтбора)
	
	ИсходныеНормыТаблица.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.Организация КАК Организация,
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.Подразделение КАК Подразделение,
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.Должность КАК Должность,
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.РабочееМесто КАК РабочееМесто,
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.УсловиеНормы КАК УсловиеНормы,
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.НормаВыдачи КАК НормаВыдачи,
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.Использовать КАК Использовать,
	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы КАК НоменклатураНормы,
	|	НормыВыдачиСИЗСоставНормы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	НормыВыдачиСИЗСоставНормы.ГОСТ КАК ГОСТ,
	|	НормыВыдачиСИЗСоставНормы.Ссылка.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ,
	|	НормыВыдачиСИЗСоставНормы.Ссылка.ОснованиеНормы КАК ОснованиеНормы,
	|	НормыВыдачиСИЗСоставНормы.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК РегистрСведенийИсходныеНормыВыдачиСИЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|		ПО РегистрСведенийИсходныеНормыВыдачиСИЗ.НормаВыдачи = НормыВыдачиСИЗСоставНормы.Ссылка
	|ГДЕ
	|	РегистрСведенийИсходныеНормыВыдачиСИЗ.Организация = &Организация
	|	И РегистрСведенийИсходныеНормыВыдачиСИЗ.Подразделение = &Подразделение
	|	И РегистрСведенийИсходныеНормыВыдачиСИЗ.Должность = &Должность
	|	И РегистрСведенийИсходныеНормыВыдачиСИЗ.РабочееМесто = &РабочееМесто";
	
	Запрос.УстановитьПараметр("Организация", СтруктураОтбора.Организация);
	Запрос.УстановитьПараметр("Подразделение", СтруктураОтбора.Подразделение);
	Запрос.УстановитьПараметр("Должность", СтруктураОтбора.Должность);
	Запрос.УстановитьПараметр("РабочееМесто", СтруктураОтбора.РабочееМесто);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ИсходныеНормыТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСтраницаМастераКопированиеНормыНастройки()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.ИсходныеНормы.ПодчиненныеЭлементы.ИсходныеНормыРабочееМесто.Видимость	= Объект.Организация.ИспользоватьРабочиеМеста;
		Элементы.ЦелевыеНормы.ПодчиненныеЭлементы.ЦелевыеНормыРабочееМесто.Видимость 	= Объект.Организация.ИспользоватьРабочиеМеста;
		Элементы.ЦелевыеНормыТЗ.ПодчиненныеЭлементы.ЦелевыеНормыТЗРабочееМесто.Видимость = Объект.Организация.ИспользоватьРабочиеМеста;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСтраницаМастераНазначитьНормыВыдачиВыборПодразделений()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.ТаблицаОтборовРабочиеМеста.Видимость = Объект.Организация.ИспользоватьРабочиеМеста;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСтраницаМастераНазначитьНормыВыдачиВыборСотрудников()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.ТаблицаСотрудники.ПодчиненныеЭлементы.ТаблицаСотрудникиРабочееМесто.Видимость = Объект.Организация.ИспользоватьРабочиеМеста;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.ТаблицаПроизвольныйВыбор.ПодчиненныеЭлементы.ТаблицаПроизвольныйВыборРабочееМесто.Видимость = Объект.Организация.ИспользоватьРабочиеМеста;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСтраницаМастераНазначитьНормыВыдачиСводная()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.СводнаяТаблицаНазначенияНорм.ПодчиненныеЭлементы.СводнаяТаблицаНазначенияНормРабочееМесто.Видимость = Объект.Организация.ИспользоватьРабочиеМеста;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСтраницаМастераКопированиеНормыСводная()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.СводноеДеревоЦелевыхНорм.ПодчиненныеЭлементы.СводноеДеревоЦелевыхНормРабочееМесто.Видимость = Объект.Организация.ИспользоватьРабочиеМеста;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСтраницаМастераОтменаНормыНастройки()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.РабочиеМестаОтмены.Видимость = Объект.Организация.ИспользоватьРабочиеМеста;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодобратьСоздатьНормуВыдачи(ПараметрыНормы)
	
	НормаВыдачи = Справочники.НормыВыдачиСИЗ.ПустаяСсылка();
	ПараметрыПустые = Истина;
	
	// Проверим заполнение параметров. Нет смысла искать норму с пустыми параметрами
	Для Каждого ТекущийЭлемент Из ПараметрыНормы Цикл
		Если ЗначениеЗаполнено(ТекущийЭлемент.Значение) Тогда
			ПараметрыПустые = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыПустые Тогда
		Возврат НормаВыдачи;
	КонецЕсли;
	
	// Ищем норму по заданным параметрам
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НормыВыдачиСИЗ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ КАК НормыВыдачиСИЗ
		|		ПО НормыВыдачиСИЗСоставНормы.Ссылка = НормыВыдачиСИЗ.Ссылка
		|ГДЕ
		|	(&ПустаяНоменклатураНормы
		|			ИЛИ НормыВыдачиСИЗСоставНормы.НоменклатураНормы = &НоменклатураНормы)
		|	И (&ПустаяПериодичность
		|			ИЛИ НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи = &ПериодичностьВыдачи)
		|	И (&ПустойВидВыдачи
		|			ИЛИ НормыВыдачиСИЗСоставНормы.Ссылка.ВидВыдачиСИЗ = &ВидВыдачиСИЗ)
		|	И (&ПустойВидРасчета
		|			ИЛИ НормыВыдачиСИЗСоставНормы.Ссылка.ВидРасчета = &ВидРасчета)
		|	И (&ПустаяЕдиницаИзмерения
		|			ИЛИ НормыВыдачиСИЗСоставНормы.ЕдиницаИзмерения = &ЕдиницаИзмерения)
		|	И (&ПустоеОснование
		|			ИЛИ НормыВыдачиСИЗ.ОснованиеНормы = &ОснованиеНормы)
		|	И (&ПустойГОСТ
		|			ИЛИ НормыВыдачиСИЗСоставНормы.ГОСТ ПОДОБНО &ГОСТ)
		|	И НЕ НормыВыдачиСИЗСоставНормы.Ссылка.ПометкаУдаления
		|	И НормыВыдачиСИЗСоставНормы.Ссылка.Владелец = &Организация";
	
	Запрос.УстановитьПараметр("ВидВыдачиСИЗ", 			ПараметрыНормы.ВидВыдачи);
	Запрос.УстановитьПараметр("ПустойВидВыдачи", 		НЕ ЗначениеЗаполнено(ПараметрыНормы.ВидВыдачи));
	Запрос.УстановитьПараметр("ВидРасчета", 			ПараметрыНормы.ВидРасчета);
	Запрос.УстановитьПараметр("ПустойВидРасчета", 		НЕ ЗначениеЗаполнено(ПараметрыНормы.ВидРасчета));
	Запрос.УстановитьПараметр("ГОСТ", 					ПараметрыНормы.ГОСТ);
	Запрос.УстановитьПараметр("ПустойГОСТ", 			НЕ ЗначениеЗаполнено(ПараметрыНормы.ГОСТ));
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", 		ПараметрыНормы.ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", НЕ ЗначениеЗаполнено(ПараметрыНормы.ЕдиницаИзмерения));
	Запрос.УстановитьПараметр("НоменклатураНормы", 		ПараметрыНормы.НоменклатураНормы);
	Запрос.УстановитьПараметр("ПустаяНоменклатураНормы",НЕ ЗначениеЗаполнено(ПараметрыНормы.НоменклатураНормы));
	Запрос.УстановитьПараметр("ПериодичностьВыдачи", 	ПараметрыНормы.Периодичность);
	Запрос.УстановитьПараметр("ПустаяПериодичность", 	НЕ ЗначениеЗаполнено(ПараметрыНормы.Периодичность));
	Запрос.УстановитьПараметр("Организация", 			ПараметрыНормы.Организация);
	Запрос.УстановитьПараметр("ОснованиеНормы", 		ПараметрыНормы.ОснованиеНормы);
	Запрос.УстановитьПараметр("ПустоеОснование", 		НЕ ЗначениеЗаполнено(ПараметрыНормы.ОснованиеНормы));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НормаВыдачи = Выборка.Ссылка;
	Иначе
		// Создаем новый элемент
		ОбъектНормаВыдачи = Справочники.НормыВыдачиСИЗ.СоздатьЭлемент();
		ОбъектНормаВыдачи.ВидВыдачиСИЗ 	= ПараметрыНормы.ВидВыдачи;
		ОбъектНормаВыдачи.ВидРасчета 	= ПараметрыНормы.ВидРасчета;
		ОбъектНормаВыдачи.Владелец 		= ПараметрыНормы.Организация;
		
		СтрокаТЧ = ОбъектНормаВыдачи.СоставНормы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПараметрыНормы);
		СтрокаТЧ.ПериодичностьВыдачи = ПараметрыНормы.Периодичность;
		
		// Заполняем наименование
		МассивНаименований = Справочники.НормыВыдачиСИЗ.СформироватьМассивНаименованийНормыВыдачиСИЗ(ОбъектНормаВыдачи);
		
		Наименование = "";
		Для Каждого ЭлементМассива ИЗ МассивНаименований Цикл
			Если СтрДлина(ЭлементМассива) > СтрДлина(Наименование) Тогда
				Наименование = ЭлементМассива;
			КонецЕсли;
		КонецЦикла;	
		
		ОбъектНормаВыдачи.Наименование = Наименование;
		
		ОбъектНормаВыдачи.Записать();
		
		НормаВыдачи = ОбъектНормаВыдачи.Ссылка;
	КонецЕсли;
	
	Возврат НормаВыдачи;
	
КонецФункции

&НаСервере
Процедура НазначитьНормыВыдачи()
	
	тзНазначенияНорм = ЗаполнитьТаблицуПоНастройкам(СводнаяТаблицаНазначенияНорм.Выгрузить());
	
	Если тзНазначенияНорм.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Уточнение основания нормы
	УточнитьОснованиеНормы(тзНазначенияНорм);
	
	// Записываем исходные нормы выдачи СИЗ
	ЗаписатьИсходныеНормыВыдачиСИЗ(тзНазначенияНорм);
	
	// Создание приказа
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Организация", Объект.Организация);
	ПараметрыДокумента.Вставить("СводнаяТаблицаНазначенияНорм", тзНазначенияНорм);
	Если ПроводитьПриказПоНормам = "Да" Тогда
		ПараметрыДокумента.Вставить("Провести", Истина);
	Иначе
		ПараметрыДокумента.Вставить("Провести", Ложь);
	КонецЕсли;
	
	СоздатьПриказПоНормамВыдачи(ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПриказПоНормамВыдачи(ПараметрыДокумента)
	
	// В документ записываем только те нормы, которых нет в РС Установленные нормы выдачи СИЗ
	
	// Подготавливаем данные для документа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗНазначенияНорм", ПараметрыДокумента.СводнаяТаблицаНазначенияНорм);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Периода", КонецДня(ТекущаяДатаСеанса()));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗНормы.Подразделение КАК Подразделение,
		|	ТЗНормы.Должность КАК Должность,
		|	ТЗНормы.РабочееМесто КАК РабочееМесто,
		|	ТЗНормы.УсловиеНормы КАК УсловиеНормы,
		|	ТЗНормы.НормаВыдачи КАК НормаВыдачи
		|ПОМЕСТИТЬ вт_НазначенияНорм
		|ИЗ
		|	&ТЗНазначенияНорм КАК ТЗНормы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.Организация КАК Организация,
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.Подразделение КАК Подразделение,
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.Должность КАК Должность,
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.РабочееМесто КАК РабочееМесто,
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.УсловиеНормы КАК УсловиеНормы,
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.НормаВыдачи КАК НормаВыдачи,
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.Использовать КАК Использовать
		|ПОМЕСТИТЬ вт_УстановленныеНормыВыдачи
		|ИЗ
		|	РегистрСведений.УстановленныеНормыВыдачиСИЗ.СрезПоследних(
		|			&Периода,
		|			Организация = &Организация
		|				И (Подразделение, Должность, РабочееМесто, УсловиеНормы, НормаВыдачи) В
		|					(ВЫБРАТЬ
		|						вт_НазначенияНорм.Подразделение,
		|						вт_НазначенияНорм.Должность,
		|						вт_НазначенияНорм.РабочееМесто,
		|						вт_НазначенияНорм.УсловиеНормы,
		|						вт_НазначенияНорм.НормаВыдачи
		|					ИЗ
		|						вт_НазначенияНорм КАК вт_НазначенияНорм)) КАК УстановленныеНормыВыдачиСИЗСрезПоследних
		|ГДЕ
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.Использовать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Организация КАК Организация,
		|	НазначенияНорм.Подразделение КАК Подразделение,
		|	НазначенияНорм.Должность КАК Должность,
		|	НазначенияНорм.РабочееМесто КАК РабочееМесто,
		|	НазначенияНорм.УсловиеНормы КАК УсловиеНормы,
		|	НазначенияНорм.НормаВыдачи КАК НормаВыдачи,
		|	ИСТИНА КАК Использовать
		|ИЗ
		|	вт_НазначенияНорм КАК НазначенияНорм
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_УстановленныеНормыВыдачи КАК вт_УстановленныеНормыВыдачи
		|		ПО НазначенияНорм.Подразделение = вт_УстановленныеНормыВыдачи.Подразделение
		|			И НазначенияНорм.Должность = вт_УстановленныеНормыВыдачи.Должность
		|			И НазначенияНорм.РабочееМесто = вт_УстановленныеНормыВыдачи.РабочееМесто
		|			И НазначенияНорм.УсловиеНормы = вт_УстановленныеНормыВыдачи.УсловиеНормы
		|			И НазначенияНорм.НормаВыдачи = вт_УстановленныеНормыВыдачи.НормаВыдачи
		|ГДЕ
		|	вт_УстановленныеНормыВыдачи.Использовать ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Организация КАК Организация,
		|	НазначенияНорм.Подразделение КАК Подразделение,
		|	НазначенияНорм.Должность КАК Должность,
		|	НазначенияНорм.РабочееМесто КАК РабочееМесто,
		|	НазначенияНорм.УсловиеНормы КАК УсловиеНормы,
		|	НазначенияНорм.НормаВыдачи КАК НормаВыдачи,
		|	ИСТИНА КАК Использовать
		|ИЗ
		|	вт_НазначенияНорм КАК НазначенияНорм
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_УстановленныеНормыВыдачи КАК вт_УстановленныеНормыВыдачи
		|		ПО НазначенияНорм.Подразделение = вт_УстановленныеНормыВыдачи.Подразделение
		|			И НазначенияНорм.Должность = вт_УстановленныеНормыВыдачи.Должность
		|			И НазначенияНорм.РабочееМесто = вт_УстановленныеНормыВыдачи.РабочееМесто
		|			И НазначенияНорм.УсловиеНормы = вт_УстановленныеНормыВыдачи.УсловиеНормы
		|			И НазначенияНорм.НормаВыдачи = вт_УстановленныеНормыВыдачи.НормаВыдачи
		|ГДЕ
		|	НЕ вт_УстановленныеНормыВыдачи.Использовать ЕСТЬ NULL";
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	РезультатПоНовымНормам = ПакетЗапросов[2];
	РезультатПоУстановленнымНормам = ПакетЗапросов[3];
	
	Выборка = РезультатПоНовымНормам.Выбрать();
	
	// Создаем документ
	НовыйДокумент = Документы.ПриказПоНормамВыдачиСИЗ.СоздатьДокумент();
	НовыйДокумент.Организация 			= ПараметрыДокумента.Организация;
	НовыйДокумент.Дата 					= ТекущаяДатаСеанса();
	НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.Комментарий 			= "Сформирован обработкой ""Мастер норм""";

	Пока Выборка.Следующий() Цикл
		НоваяСтрокаТЧ = НовыйДокумент.НормыВыдачиСИЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, Выборка);
	КонецЦикла;
		
	НовыйДокумент.УстановитьНовыйНомер();
	
	Если НовыйДокумент.НормыВыдачиСИЗ.Количество() = 0 Тогда
		// Нет смысла записывать пустой документ.
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внимание! Все выбранные нормы уже созданы ранее. Приказ записан не будет.");
	Иначе
		// Записываем документ
		Если ПараметрыДокумента.Провести Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)<<<
		ТекстСообщения = "Приказ номер - <%1> был успешно создан";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения,
		НовыйДокумент.Номер));
		// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)>>>
		
	КонецЕсли;
	// Выведем сообщения о непопавших нормах в приказ
	Если НЕ РезультатПоУстановленнымНормам.Пустой() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внимание! Следующие нормы не попали в приказ, т.к. они были установлены ранее:");
		
		ВыборкаУстановленныхНорм = РезультатПоУстановленнымНормам.Выбрать();
		Пока ВыборкаУстановленныхНорм.Следующий() Цикл
			ТекстСообщения = "Подразделение - <%1>; Должность - <%2>; Рабочее место - <%3>; Норма выдачи - <%4>";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения,
																		ВыборкаУстановленныхНорм.Подразделение,
																		ВыборкаУстановленныхНорм.Должность,
																		ВыборкаУстановленныхНорм.РабочееМесто, 
																		ВыборкаУстановленныхНорм.НормаВыдачи));
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УточнитьОснованиеНормы(тзСводнаяТаблицаНазначенияНорм)
	
	// Проверяем были ли записи в РС Уточненные основания норм выдачи
	Если НЕ УточненыеОснованияЗаданыВРегистре() Тогда
		// Записываем основание в норму
		Если УстановитьОбщееОснование Тогда
			Если ЗначениеЗаполнено(НормаВыдачи) Тогда
				ОбъектНормаВыдачи = НормаВыдачи.ПолучитьОбъект();
				ОбъектНормаВыдачи.ОснованиеНормы = ОбщееОснование;
				ОбъектНормаВыдачи.Записать();
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТЗНазначенияНорм", тзСводнаяТаблицаНазначенияНорм);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТЗНормы.НормаВыдачи КАК НормаВыдачи,
			|	ТЗНормы.Подразделение КАК Подразделение,
			|	ТЗНормы.Должность КАК Должность,
			|	ТЗНормы.РабочееМесто КАК РабочееМесто,
			|	ТЗНормы.Основание КАК Основание,
			|	&Организация КАК Организация
			|ПОМЕСТИТЬ вт_НазначенияНорм
			|ИЗ
			|	&ТЗНазначенияНорм КАК ТЗНормы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НазначенияНорм.Организация КАК Организация,
			|	НазначенияНорм.НормаВыдачи КАК НормаВыдачи,
			|	НазначенияНорм.Подразделение КАК Подразделение,
			|	НазначенияНорм.Должность КАК Должность,
			|	НазначенияНорм.РабочееМесто КАК РабочееМесто,
			|	НазначенияНорм.Основание КАК Основание
			|ИЗ
			|	вт_НазначенияНорм КАК НазначенияНорм
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УточненныеОснованияНормВыдачи КАК УточненныеОснованияНормВыдачи
			|		ПО НазначенияНорм.НормаВыдачи = УточненныеОснованияНормВыдачи.НормаВыдачи
			|			И НазначенияНорм.Подразделение = УточненныеОснованияНормВыдачи.Подразделение
			|			И НазначенияНорм.Должность = УточненныеОснованияНормВыдачи.Должность
			|			И НазначенияНорм.РабочееМесто = УточненныеОснованияНормВыдачи.РабочееМесто
			|			И НазначенияНорм.Организация = УточненныеОснованияНормВыдачи.Организация
			|ГДЕ
			|	УточненныеОснованияНормВыдачи.НормаВыдачи ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НазначенияНорм.Организация КАК Организация,
			|	НазначенияНорм.НормаВыдачи КАК НормаВыдачи,
			|	НазначенияНорм.Подразделение КАК Подразделение,
			|	НазначенияНорм.Должность КАК Должность,
			|	НазначенияНорм.РабочееМесто КАК РабочееМесто,
			|	НазначенияНорм.Основание КАК Основание
			|ИЗ
			|	вт_НазначенияНорм КАК НазначенияНорм
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УточненныеОснованияНормВыдачи КАК УточненныеОснованияНормВыдачи
			|		ПО НазначенияНорм.НормаВыдачи = УточненныеОснованияНормВыдачи.НормаВыдачи
			|			И НазначенияНорм.Подразделение = УточненныеОснованияНормВыдачи.Подразделение
			|			И НазначенияНорм.Должность = УточненныеОснованияНормВыдачи.Должность
			|			И НазначенияНорм.РабочееМесто = УточненныеОснованияНормВыдачи.РабочееМесто
			|			И НазначенияНорм.Организация = УточненныеОснованияНормВыдачи.Организация
			|ГДЕ
			|	НЕ УточненныеОснованияНормВыдачи.НормаВыдачи ЕСТЬ NULL";
		
		
		ПакетЗапросов = Запрос.ВыполнитьПакет();
		
		ЗапросНовыеЗаписи = ПакетЗапросов[1];
		ЗапросСуществующиеЗаписи = ПакетЗапросов[2];
		
		// Добавляем записи в РС Уточненные основания норм выдачи 
		// Определяем в регистре существующие записи. Совпадающие записи в РС не перезаписываем. Записываем только новые.
		Если НЕ ЗапросНовыеЗаписи.Пустой() Тогда
			НаборУточненныеОснования = РегистрыСведений.УточненныеОснованияНормВыдачи.СоздатьНаборЗаписей();
			НаборУточненныеОснования.Загрузить(ЗапросНовыеЗаписи.Выгрузить());

			НаборУточненныеОснования.Записать(Ложь);
		КонецЕсли;
		
		// Выведем сообщение пользователю, что для определенных связок основние уже установлено, и новые освнования установлены не будут.
		Выборка = ЗапросСуществующиеЗаписи.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = "Внимание! Для указанных параметров уже есть запись в регистре уточненные основания, новое основание установленно не будет:
								|Норма выдачи - %1
								|Организация - %2
								|Подразделение - %3
								|Должность - %4
								|Рабочее место - %5";
			
			// !! Окно закрывается, поэтому сообщение не видно
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения, 
																		Выборка.НормаВыдачи,
																		Выборка.Организация,
																		Выборка.Подразделение,
																		Выборка.Должность,
																		Выборка.РабочееМесто));
																		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИсходныеНормыВыдачиСИЗ(тзСводнаяТаблицаНазначенияНорм)
	
	// Совпадающие записи в РС не перезаписываем. Записываем только новые.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗНазначенияНорм", тзСводнаяТаблицаНазначенияНорм);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗНормы.Подразделение КАК Подразделение,
		|	ТЗНормы.Должность КАК Должность,
		|	ТЗНормы.РабочееМесто КАК РабочееМесто,
		|	ТЗНормы.УсловиеНормы КАК УсловиеНормы,
		|	ТЗНормы.НормаВыдачи КАК НормаВыдачи,
		|	&Организация КАК Организация
		|ПОМЕСТИТЬ вт_НазначенияНорм
		|ИЗ
		|	&ТЗНазначенияНорм КАК ТЗНормы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	вт_НазначенияНорм.Организация КАК Организация,
		|	вт_НазначенияНорм.Подразделение КАК Подразделение,
		|	вт_НазначенияНорм.Должность КАК Должность,
		|	вт_НазначенияНорм.РабочееМесто КАК РабочееМесто,
		|	вт_НазначенияНорм.УсловиеНормы КАК УсловиеНормы,
		|	вт_НазначенияНорм.НормаВыдачи КАК НормаВыдачи,
		|	ИСТИНА КАК Использовать
		|ИЗ
		|	вт_НазначенияНорм КАК вт_НазначенияНорм
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК ИсходныеНормыВыдачиСИЗ
		|		ПО вт_НазначенияНорм.Подразделение = ИсходныеНормыВыдачиСИЗ.Подразделение
		|			И вт_НазначенияНорм.Должность = ИсходныеНормыВыдачиСИЗ.Должность
		|			И вт_НазначенияНорм.РабочееМесто = ИсходныеНормыВыдачиСИЗ.РабочееМесто
		|			И вт_НазначенияНорм.НормаВыдачи = ИсходныеНормыВыдачиСИЗ.НормаВыдачи
		|			И вт_НазначенияНорм.Организация = ИсходныеНормыВыдачиСИЗ.Организация
		|			И вт_НазначенияНорм.УсловиеНормы = ИсходныеНормыВыдачиСИЗ.УсловиеНормы
		|ГДЕ
		|	ИсходныеНормыВыдачиСИЗ.Подразделение ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НаборИсходныеНормы = РегистрыСведений.ИсходныеНормыВыдачиСИЗ.СоздатьНаборЗаписей();
		НаборИсходныеНормы.Загрузить(РезультатЗапроса.Выгрузить());

		НаборИсходныеНормы.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНормВыдачи()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задан отбор по организации",,"ОрганизацияОтмены");
		Возврат;
	КонецЕсли;
	
	ТаблицаНормыВыдачи.Очистить();
	
	//Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Подразделение КАК Подразделение,
	//	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Должность КАК Должность,
	//	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.РабочееМесто КАК РабочееМесто
	//	|ПОМЕСТИТЬ вт_МестоРаботыСотрудника
	//	|ИЗ
	//	|	РегистрСведений.ОсновноеМестоРаботыСотрудника.СрезПоследних(
	//	|			,
	//	|			Организация = &Организация
	//	|				И Сотрудник = &Сотрудник) КАК ОсновноеМестоРаботыСотрудникаСрезПоследних
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	НормыВыдачиСИЗСоставНормы.Ссылка КАК НормаВыдачи,
	//	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы КАК НоменклатураНормы
	//	|ПОМЕСТИТЬ вт_СоставНормыВыдачи
	//	|ИЗ
	//	|	Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	//	|ГДЕ
	//	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы = &НоменклатураНормы
	//	|	И НормыВыдачиСИЗСоставНормы.Ссылка.Владелец = &Организация
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	НормыВыдачиСИЗСоставНормы.Ссылка,
	//	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	УстановленныеНормыВыдачиСИЗСрезПоследних.НормаВыдачи КАК НормаВыдачи,
	//	|	УстановленныеНормыВыдачиСИЗСрезПоследних.УсловиеНормы КАК УсловиеНормы,
	//	|	УстановленныеНормыВыдачиСИЗСрезПоследних.РабочееМесто КАК РабочееМесто,
	//	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Должность КАК Должность,
	//	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Подразделение КАК Подразделение
	//	|ИЗ
	//	|	РегистрСведений.УстановленныеНормыВыдачиСИЗ.СрезПоследних(
	//	|			,
	//	|			Организация = &Организация
	//	|				И (&БезОтбораПоДолжности
	//	|					ИЛИ Должность = &Должность)
	//	|				И (&БезОтбораПоПодразделениям
	//	|					ИЛИ Подразделение = &Подразделение)
	//	|				И (&БезОтбораПоРабочимМестам
	//	|					ИЛИ РабочееМесто = &РабочееМесто)
	//	|				И (&БезОтбораПоНормамВыдачи
	//	|					ИЛИ НормаВыдачи = &НормаВыдачи)
	//	|				И (&БезОтбораПоСотруднику
	//	|					ИЛИ (Подразделение, Должность, РабочееМесто) В
	//	|						(ВЫБРАТЬ
	//	|							вт_МестоРаботыСотрудника.Подразделение,
	//	|							вт_МестоРаботыСотрудника.Должность,
	//	|							вт_МестоРаботыСотрудника.РабочееМесто
	//	|						ИЗ
	//	|							вт_МестоРаботыСотрудника КАК вт_МестоРаботыСотрудника))
	//	|				И (&БезОтбораПоНоменклатуреНормы
	//	|					ИЛИ НормаВыдачи В
	//	|						(ВЫБРАТЬ
	//	|							вт_СоставНормыВыдачи.НормаВыдачи
	//	|						ИЗ
	//	|							вт_СоставНормыВыдачи КАК вт_СоставНормыВыдачи))) КАК УстановленныеНормыВыдачиСИЗСрезПоследних
	//	|ГДЕ
	//	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Использовать";
	//
	//Запрос.УстановитьПараметр("Организация", Объект.Организация);
	//Запрос.УстановитьПараметр("Должность", ДолжностиОтмены);
	//Запрос.УстановитьПараметр("БезОтбораПоДолжности", НЕ ЗначениеЗаполнено(ДолжностиОтмены));
	//Запрос.УстановитьПараметр("Подразделение", ПодразделенияОтмены);
	//Запрос.УстановитьПараметр("БезОтбораПоПодразделениям", НЕ ЗначениеЗаполнено(ПодразделенияОтмены));
	//Запрос.УстановитьПараметр("РабочееМесто", РабочиеМестаОтмены);
	//Запрос.УстановитьПараметр("БезОтбораПоРабочимМестам", НЕ ЗначениеЗаполнено(РабочиеМестаОтмены));
	//Запрос.УстановитьПараметр("НормаВыдачи", НормыВыдачиОтмены);
	//Запрос.УстановитьПараметр("БезОтбораПоНормамВыдачи", НЕ ЗначениеЗаполнено(НормыВыдачиОтмены));
	//Запрос.УстановитьПараметр("Сотрудник", СотрудникиОтмены);
	//Запрос.УстановитьПараметр("БезОтбораПоСотруднику", НЕ ЗначениеЗаполнено(СотрудникиОтмены));
	//Запрос.УстановитьПараметр("НоменклатураНормы", НоменклатураНормОтмены);
	//Запрос.УстановитьПараметр("БезОтбораПоНоменклатуреНормы", НЕ ЗначениеЗаполнено(НоменклатураНормОтмены));
	
	// Множественный выбор в полях отбора
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Подразделение КАК Подразделение,
		|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Должность КАК Должность,
		|	ОсновноеМестоРаботыСотрудникаСрезПоследних.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ вт_МестоРаботыСотрудника
		|ИЗ
		|	РегистрСведений.ОсновноеМестоРаботыСотрудника.СрезПоследних(
		|			,
		|			Организация = &Организация
		|				И Сотрудник В (&СписокСотрудников)) КАК ОсновноеМестоРаботыСотрудникаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НормыВыдачиСИЗСоставНормы.Ссылка КАК НормаВыдачи,
		|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы КАК НоменклатураНормы
		|ПОМЕСТИТЬ вт_СоставНормыВыдачи
		|ИЗ
		|	Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
		|ГДЕ
		|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы В(&СписокНоменклатурыНормы)
		|	И НормыВыдачиСИЗСоставНормы.Ссылка.Владелец = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	НормыВыдачиСИЗСоставНормы.Ссылка,
		|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.НормаВыдачи КАК НормаВыдачи,
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.УсловиеНормы КАК УсловиеНормы,
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.РабочееМесто КАК РабочееМесто,
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.Должность КАК Должность,
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.УстановленныеНормыВыдачиСИЗ.СрезПоследних(
		|			,
		|			Организация = &Организация
		|				И (&БезОтбораПоДолжности
		|					ИЛИ Должность В (&СписокДолжностей))
		|				И (&БезОтбораПоПодразделениям
		|					ИЛИ Подразделение В (&СписокПодразделений))
		|				И (&БезОтбораПоРабочимМестам
		|					ИЛИ РабочееМесто В (&СписокРабочихМест))
		|				И (&БезОтбораПоНормамВыдачи
		|					ИЛИ НормаВыдачи В (&СписокНормыВыдачи))
		|				И (&БезОтбораПоСотруднику
		|					ИЛИ (Подразделение, Должность, РабочееМесто) В
		|						(ВЫБРАТЬ
		|							вт_МестоРаботыСотрудника.Подразделение,
		|							вт_МестоРаботыСотрудника.Должность,
		|							вт_МестоРаботыСотрудника.РабочееМесто
		|						ИЗ
		|							вт_МестоРаботыСотрудника КАК вт_МестоРаботыСотрудника))
		|				И (&БезОтбораПоНоменклатуреНормы
		|					ИЛИ НормаВыдачи В
		|						(ВЫБРАТЬ
		|							вт_СоставНормыВыдачи.НормаВыдачи
		|						ИЗ
		|							вт_СоставНормыВыдачи КАК вт_СоставНормыВыдачи))) КАК УстановленныеНормыВыдачиСИЗСрезПоследних
		|ГДЕ
		|	УстановленныеНормыВыдачиСИЗСрезПоследних.Использовать";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СписокДолжностей", СписокДолжностиОтмены.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("БезОтбораПоДолжности", НЕ ЗначениеЗаполнено(СписокДолжностиОтмены));
	Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделенияОтмены.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("БезОтбораПоПодразделениям", НЕ ЗначениеЗаполнено(СписокПодразделенияОтмены));
	Запрос.УстановитьПараметр("СписокРабочихМест", СписокРабочиеМестаОтмены);
	Запрос.УстановитьПараметр("БезОтбораПоРабочимМестам", НЕ ЗначениеЗаполнено(СписокРабочиеМестаОтмены));
	Запрос.УстановитьПараметр("СписокНормыВыдачи", СписокНормыВыдачиОтмены.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("БезОтбораПоНормамВыдачи", НЕ ЗначениеЗаполнено(СписокНормыВыдачиОтмены));
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудникиОтмены.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("БезОтбораПоСотруднику", НЕ ЗначениеЗаполнено(СписокСотрудникиОтмены));
	Запрос.УстановитьПараметр("СписокНоменклатурыНормы", СписокНоменклатураНормОтмены.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("БезОтбораПоНоменклатуреНормы", НЕ ЗначениеЗаполнено(СписокНоменклатураНормОтмены));
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаНормыВыдачи.Добавить();
		//НоваяСтрока.НормаВыдачи = Выборка.НормаВыдачи;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОтменитьНормыВыдачи()
	
	тзНормыВыдачи = ТаблицаНормыВыдачи.Выгрузить(Новый Структура("Пометка", Истина));
	
	Если тзНормыВыдачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Записываем исходные нормы выдачи СИЗ
	ОтменитьВыбранныеИсходныеНормыВыдачиСИЗ(тзНормыВыдачи);
	
	// Создание приказа с отменой норм выдачи
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Организация", Объект.Организация);
	ПараметрыДокумента.Вставить("ТаблицаНормыВыдачи", тзНормыВыдачи);
	Если ПроводитьПриказПоНормам = "Да" Тогда
		ПараметрыДокумента.Вставить("Провести", Истина);
	Иначе
		ПараметрыДокумента.Вставить("Провести", Ложь);
	КонецЕсли;
	
	СоздатьПриказОтменыНормВыдачи(ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПриказОтменыНормВыдачи(ПараметрыДокумента)
	
	// Создаем документ
	НовыйДокумент = Документы.ПриказПоНормамВыдачиСИЗ.СоздатьДокумент();
	НовыйДокумент.Организация 			= ПараметрыДокумента.Организация;
	НовыйДокумент.Дата 					= ТекущаяДатаСеанса();
	НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.Комментарий 			= "Сформирован обработкой ""Мастер норм""";
	
	//Для Каждого СтрокаНормОтмены Из ТаблицаНормыВыдачи Цикл
	Для Каждого СтрокаНормОтмены Из ПараметрыДокумента.ТаблицаНормыВыдачи Цикл
		
		Если НЕ СтрокаНормОтмены.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТЧ = НовыйДокумент.НормыВыдачиСИЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаНормОтмены);
		
	КонецЦикла;
	
	НовыйДокумент.УстановитьНовыйНомер();
	
	Если НовыйДокумент.НормыВыдачиСИЗ.Количество() = 0 Тогда
		Возврат; // Нет смысла записывать пустой документ.
	КонецЕсли;
	
	// Записываем документ
	Если ПараметрыДокумента.Провести Тогда
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)<<<
	ТекстСообщения = "Приказ номер - <%1> был успешно создан";
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения,
	НовыйДокумент.Номер));
	// Мадатов Ю.А. --#122152 "Название"-- (16.09.21)>>>
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыбранныеИсходныеНормыВыдачиСИЗ(тзНормыВыдачи)
	
	ЗаписьИсходныеНормы = РегистрыСведений.ИсходныеНормыВыдачиСИЗ.СоздатьМенеджерЗаписи(); 
	
	Для каждого СтрокаТЗ Из тзНормыВыдачи Цикл
		
		ЗаписьИсходныеНормы.Организация 	= Объект.Организация;
		ЗаписьИсходныеНормы.Подразделение 	= СтрокаТЗ.Подразделение;
		ЗаписьИсходныеНормы.Должность 		= СтрокаТЗ.Должность;
		ЗаписьИсходныеНормы.РабочееМесто 	= СтрокаТЗ.РабочееМесто;
		ЗаписьИсходныеНормы.УсловиеНормы 	= СтрокаТЗ.УсловиеНормы;
		ЗаписьИсходныеНормы.НормаВыдачи 	= СтрокаТЗ.НормаВыдачи ;
		
		ЗаписьИсходныеНормы.Прочитать();

		Если ЗаписьИсходныеНормы.Выбран() Тогда
			//ЗаписьИсходныеНормы.Использовать = Ложь;			
			//ЗаписьИсходныеНормы.Записать();
			ЗаписьИсходныеНормы.Удалить();
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура КопироватьНормыВыдчи()
	
	тзВыбранныеЦелевыеНормы = ЗаполнитьТаблицуПоНастройкам(ПолучитьТаблицуВыбранныхСтрокЦелевыхНорм());
	
	Если тзВыбранныеЦелевыеНормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Уточнение основания нормы
	УточнитьОснованиеНормы(тзВыбранныеЦелевыеНормы);
	
	// Записываем исходные нормы выдачи СИЗ
	ЗаписатьИсходныеНормыВыдачиСИЗ(тзВыбранныеЦелевыеНормы);
	
	// Создание приказа
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Организация", Объект.Организация);
	ПараметрыДокумента.Вставить("СводнаяТаблицаНазначенияНорм", тзВыбранныеЦелевыеНормы);
	Если ПроводитьПриказПоНормам = "Да" Тогда
		ПараметрыДокумента.Вставить("Провести", Истина);
	Иначе
		ПараметрыДокумента.Вставить("Провести", Ложь);
	КонецЕсли;
	
	СоздатьПриказПоНормамВыдачи(ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Функция УточненыеОснованияЗаданыВРегистре()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УточненныеОснованияНормВыдачи.Основание КАК Основание
		|ИЗ
		|	РегистрСведений.УточненныеОснованияНормВыдачи КАК УточненныеОснованияНормВыдачи";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции

&НаСервере
Функция ПолучитьТаблицуВыбранныхСтрокЦелевыхНорм()
	
	ДеревоЦелевыхНорм = РеквизитФормыВЗначение("СводноеДеревоЦелевыхНорм");
	
	// Создадим таблицу для дальнейшей работы с ней
	ТаблицаВыбранныхЦелевыхНорм = Новый ТаблицаЗначений;
	
	Для Каждого КолонкаДерева Из ДеревоЦелевыхНорм.Колонки Цикл
		ТаблицаВыбранныхЦелевыхНорм.Колонки.Добавить(КолонкаДерева.Имя, КолонкаДерева.ТипЗначения);
	КонецЦикла;
	
	// Выберем строки дерева с пометкой
	СтруктураПоиска = Новый Структура("Пометка", 1);
	НайденныеСтроки = ДеревоЦелевыхНорм.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	
	// Значения строк дерева перенесем в таблицу
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		
		// Будем обрабатывать только конечные строки дерева
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаблицы = ТаблицаВыбранныхЦелевыхНорм.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаДерева);
	КонецЦикла;
		
	Возврат ТаблицаВыбранныхЦелевыхНорм;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуПоНастройкам(тзРезультат)
	
	Для Каждого СтрокаТаблицы Из тзРезультат Цикл
		Если УстановитьОбщееОснование Тогда
			СтрокаТаблицы.Основание = ОбщееОснование;
		КонецЕсли;
		Если УстановитьОбщееУсловие Тогда
			СтрокаТаблицы.УсловиеНормы = ОбщееУсловие;
		КонецЕсли;
		Если УстановитьОбщуюНормуДляЗачета Тогда
			Если тзРезультат.Колонки.Найти("НормаДляЗачета") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.НормаДляЗачета = ОбщаяНорма;
		КонецЕсли;
	КонецЦикла;
	
	Возврат тзРезультат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПолеВСтрокахТаблицыЗначений(ЗначениеПоля, ИмяПоля, ТЗ)
	
	Для Каждого СтрокаТаблицы Из ТЗ Цикл
		СтрокаТаблицы[ИмяПоля] = ЗначениеПоля;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолеВСтрокахДереваЗначений(ЗначениеПоля, ИмяПоля, ДЗ, ЗаполнятьВоВсехСтроках = Ложь)

	Для Каждого ТекущаяСтрокаДерева Из ДЗ.Строки Цикл
		
		Если ЗаполнятьВоВсехСтроках Тогда
			ТекущаяСтрокаДерева[ИмяПоля] = ЗначениеПоля;
		КонецЕсли;
		
		Если ТекущаяСтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьПолеВСтрокахДереваЗначений(ЗначениеПоля, ИмяПоля, ТекущаяСтрокаДерева);
		Иначе
			ТекущаяСтрокаДерева[ИмяПоля] = ЗначениеПоля;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаФлажковСводногоДерева(ЭлементКоллекции, ЗначениеПометки)

	ПодчиненныеСтроки = ЭлементКоллекции.ПолучитьЭлементы();
	
	Для Каждого ТекЭлемент Из ПодчиненныеСтроки Цикл
		ТекЭлемент.Пометка = ЗначениеПометки;
		УстановкаФлажковСводногоДерева(ТекЭлемент, ТекЭлемент.Пометка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ФлажкиУстановленныДляВсехСтрокТекущегоУровня(ЭлементКоллекции)

	СоседниеЭлементы = ЭлементКоллекции.ПолучитьРодителя().ПолучитьЭлементы();
	
	Для Каждого ТекЭлемент Из СоседниеЭлементы Цикл
		Если ТекЭлемент.Пометка <> ЭлементКоллекции.Пометка Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ПоместитьНормыКопированияВПараметрДинамическогоСписка()
	
	тзНормыКопирования = ПолучитьТаблицуОтмеченныхНормКопирования();
	
	Если тзНормыКопирования.Количество() > 0 Тогда
		ЭтаФорма.ЦелевыеНормыПодробно.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("АдресНормыКопирования", ПоместитьВоВременноеХранилище(тзНормыКопирования, ЭтаФорма.УникальныйИдентификатор));
    	Элементы.ЦелевыеНормыПодробно.Обновить();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуОтмеченныхНормКопирования()
	
	КС = Новый КвалификаторыСтроки(200);
	
	тзНормыКопирования = Новый ТаблицаЗначений;
	тзНормыКопирования.Колонки.Добавить("ВидВыдачиСИЗ",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВыдачиСИЗ"));
	тзНормыКопирования.Колонки.Добавить("ГОСТ",  Новый ОписаниеТипов("Строка",,,,КС));
	тзНормыКопирования.Колонки.Добавить("ЕдиницаИзмерения",  Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	тзНормыКопирования.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Булево"));
	тзНормыКопирования.Колонки.Добавить("НоменклатураНормы",  Новый ОписаниеТипов("СправочникСсылка.НоменклатураНормОрганизации"));
	тзНормыКопирования.Колонки.Добавить("НормаВыдачи",  Новый ОписаниеТипов("СправочникСсылка.НормыВыдачиСИЗ"));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ПунктыТОН"));
	тзНормыКопирования.Колонки.Добавить("ОснованиеНормы", Новый ОписаниеТипов(МассивТипов,,,,КС));
	тзНормыКопирования.Колонки.Добавить("ПериодичностьВыдачи",  Новый ОписаниеТипов("СправочникСсылка.ПериодичностьВыдачиСИЗ"));
	тзНормыКопирования.Колонки.Добавить("УсловиеНормы",  Новый ОписаниеТипов("СправочникСсылка.УсловияНорм"));
	тзНормыКопирования.Колонки.Добавить("СовпадениеПоНорме", Новый ОписаниеТипов("Булево"));
	
	Отбор = Новый Структура;
	Отбор.Вставить("Переносить", Истина);
	НайденныеСтроки = ИсходныеНормыТаблица.НайтиСтроки(Отбор);
	
	Для Каждого Стр ИЗ НайденныеСтроки Цикл
		НоваяСтрока = тзНормыКопирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.СовпадениеПоНорме = Истина;
	КонецЦикла;

	Возврат тзНормыКопирования;
	
КонецФункции

&НаКлиенте
Процедура НазначениеНормыЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Переходим на страницу СтраницаМастераНазначитьНормыВыдачиЗаданиеНормы
		// ЭтоПорядковыйНомерПерехода = 2
		КомандаМастера = "НазначитьНормы";
		ЗаполнитьТаблицуПереходов("НазначениеНорм");
		УстановитьПорядковыйНомерПерехода(1);
		ВыполнитьПереходДалее();
	Иначе
		// Переходим на страницу СтраницаМастераНачало
		// ЭтоПорядковыйНомерПерехода = 1
		ЗаполнитьТаблицуПереходов("Инициализация");
		УстановитьПорядковыйНомерПерехода(1);
	КонецЕсли;  

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПодразделений(Владелец)
	
	СписокПодразделений = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Подразделения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	Подразделения.Владелец = &Владелец
		|	И НЕ Подразделения.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделения.Наименование";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПодразделений.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокПодразделений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокРабочихМест(Владелец)
	
	СписокРМ = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаАСТБ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РабочиеМестаАСТБ КАК РабочиеМестаАСТБ
		|ГДЕ
		|	РабочиеМестаАСТБ.Владелец = &Владелец
		|	И НЕ РабочиеМестаАСТБ.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	РабочиеМестаАСТБ.Наименование";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокРМ.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокРМ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСотрудников(Владелец)
	
	СписокСотрудники = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Владелец = &Владелец
		|	И НЕ Сотрудники.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудники.Наименование";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокСотрудники.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокСотрудники;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокНоменклатурыНорм(Владелец)
	
	СписокНоменклатура = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураНормОрганизации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураНормОрганизации КАК НоменклатураНормОрганизации
		|ГДЕ
		|	НоменклатураНормОрганизации.Владелец = &Владелец
		|	И НЕ НоменклатураНормОрганизации.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураНормОрганизации.Наименование";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокНоменклатура.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокНоменклатура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокНормВыдачи(Владелец)
	
	СписокНорм = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НормыВыдачиСИЗ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НормыВыдачиСИЗ КАК НормыВыдачиСИЗ
		|ГДЕ
		|	НормыВыдачиСИЗ.Владелец = &Владелец
		|	И НЕ НормыВыдачиСИЗ.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НормыВыдачиСИЗ.Наименование";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокНорм.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокНорм;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЦелевыеНормыТЗ(СтруктураОтбора)
	
	ЦелевыеНормыТЗ.Очистить();
	
	ТаблицыЦелевыхНормАктивированы = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеНормыВыдачиСИЗ.Организация КАК Организация,
	|	ИсходныеНормыВыдачиСИЗ.Подразделение КАК Подразделение,
	|	ИсходныеНормыВыдачиСИЗ.Должность КАК Должность
	|ПОМЕСТИТЬ ВТ_ИН
	|ИЗ
	|	РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК ИсходныеНормыВыдачиСИЗ
	|ГДЕ
	|	ИсходныеНормыВыдачиСИЗ.Использовать
	|	И ИсходныеНормыВыдачиСИЗ.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(РегистрСведенийШтатноеРасписаниеСрезПоследних.Организация, ЗанятыеРабочиеМестаОстатки.Организация) КАК Организация,
	|	ЕСТЬNULL(РегистрСведенийШтатноеРасписаниеСрезПоследних.Подразделение, ЗанятыеРабочиеМестаОстатки.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(РегистрСведенийШтатноеРасписаниеСрезПоследних.Должность, ЗанятыеРабочиеМестаОстатки.Должность) КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто,
	|	ЗанятыеРабочиеМестаОстатки.КоличествоОстаток КАК Занято
	|ПОМЕСТИТЬ ВТ_ЗРМ_ШР
	|ИЗ
	|	РегистрСведений.ШтатноеРасписание.СрезПоследних(, Организация = &Организация) КАК РегистрСведенийШтатноеРасписаниеСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(, Организация = &Организация) КАК ЗанятыеРабочиеМестаОстатки
	|		ПО РегистрСведенийШтатноеРасписаниеСрезПоследних.Подразделение = ЗанятыеРабочиеМестаОстатки.Подразделение
	|			И РегистрСведенийШтатноеРасписаниеСрезПоследних.Должность = ЗанятыеРабочиеМестаОстатки.Должность
	|			И РегистрСведенийШтатноеРасписаниеСрезПоследних.Организация = ЗанятыеРабочиеМестаОстатки.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗРМ_ШР.Организация КАК Организация,
	|	ВТ_ЗРМ_ШР.Подразделение КАК Подразделение,
	|	ВТ_ЗРМ_ШР.Должность КАК Должность,
	|	ВТ_ЗРМ_ШР.РабочееМесто КАК РабочееМесто,
	|	ВТ_ЗРМ_ШР.Занято КАК Занято,
	|	НЕ ВТ_ИН.Должность ЕСТЬ NULL КАК ЕстьНорма
	|ИЗ
	|	ВТ_ЗРМ_ШР КАК ВТ_ЗРМ_ШР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИН КАК ВТ_ИН
	|		ПО ВТ_ЗРМ_ШР.Организация = ВТ_ИН.Организация
	|			И (ВТ_ЗРМ_ШР.Подразделение = ВТ_ИН.Подразделение
	|				ИЛИ ВТ_ИН.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|			И (ВТ_ЗРМ_ШР.Должность = ВТ_ИН.Должность
	|				ИЛИ ВТ_ИН.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ЗРМ_ШР.Подразделение.Наименование,
	|	ВТ_ЗРМ_ШР.Должность.Наименование,
	|	ВТ_ЗРМ_ШР.РабочееМесто.Наименование";
	
	Запрос.УстановитьПараметр("Организация", СтруктураОтбора.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЦелевыеНормыТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Функция ТекущаяСтрокаИсходныеНормыИзменена(СтруктураНовойСтрокиИсходныхНорм)
	
	ЭтоНоваяСтрока = Ложь;
	
	Если СтруктураТекущейСтрокиИсходныхНорм = Неопределено Тогда
		
		СтруктураТекущейСтрокиИсходныхНорм = Новый Структура("Организация, Подразделение, Должность, РабочееМесто");
		ЗаполнитьЗначенияСвойств(СтруктураТекущейСтрокиИсходныхНорм, СтруктураНовойСтрокиИсходныхНорм); 		
				
		Возврат Истина;
		
	КонецЕсли;
		
	// Сравниваем свойства новой и текущей строки
	Для Каждого ЭлементКоллекции Из СтруктураНовойСтрокиИсходныхНорм Цикл
		Если СтруктураНовойСтрокиИсходныхНорм[ЭлементКоллекции.Ключ] <> СтруктураТекущейСтрокиИсходныхНорм[ЭлементКоллекции.Ключ] Тогда
			ЭтоНоваяСтрока = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоНоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(СтруктураТекущейСтрокиИсходныхНорм, СтруктураНовойСтрокиИсходныхНорм);
	КонецЕсли;
	
	Возврат ЭтоНоваяСтрока;
	
КонецФункции

//Танцюра А.Н. -- №116939 Заполнение по ЗРМ без норм -- 03.09.2021 <<<

&НаСервере
Процедура ЗаполнитьПоЗРМБезНормНаСервере_ПроизвольныйВыбор()
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ ВТ_ЗРМ
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(, Организация = &Организация) КАК ЗанятыеРабочиеМестаОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Подразделение КАК Подразделение,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Должность КАК Должность,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ ВТ_Нормы
	|ИЗ
	|	РегистрСведений.УстановленныеНормыВыдачиСИЗ.СрезПоследних(, Организация = &Организация) КАК УстановленныеНормыВыдачиСИЗСрезПоследних
	|ГДЕ
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗРМ.Подразделение КАК Подразделение,
	|	ВТ_ЗРМ.Должность КАК Должность,
	|	ВТ_ЗРМ.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	ВТ_ЗРМ КАК ВТ_ЗРМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Нормы КАК ВТ_Нормы
	|		ПО ВТ_ЗРМ.Подразделение = ВТ_Нормы.Подразделение
	|			И ВТ_ЗРМ.Должность = ВТ_Нормы.Должность
	|			И ВТ_ЗРМ.РабочееМесто = ВТ_Нормы.РабочееМесто
	|ГДЕ
	|	ВТ_Нормы.Подразделение ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	СводнаяТаблицаНазначенияНорм.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьПоЗРМБезНормНаСервере_ВыборСотрудников()
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто,
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ЗРМ
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(, Организация = &Организация) КАК ЗанятыеРабочиеМестаОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Подразделение КАК Подразделение,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Должность КАК Должность,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ ВТ_Нормы
	|ИЗ
	|	РегистрСведений.УстановленныеНормыВыдачиСИЗ.СрезПоследних(, Организация = &Организация) КАК УстановленныеНормыВыдачиСИЗСрезПоследних
	|ГДЕ
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ВТ_ЗРМ.Сотрудник КАК Сотрудник,
	|	ВТ_ЗРМ.Подразделение КАК Подразделение,
	|	ВТ_ЗРМ.Должность КАК Должность,
	|	ВТ_ЗРМ.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	ВТ_ЗРМ КАК ВТ_ЗРМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Нормы КАК ВТ_Нормы
	|		ПО ВТ_ЗРМ.Подразделение = ВТ_Нормы.Подразделение
	|			И ВТ_ЗРМ.Должность = ВТ_Нормы.Должность
	|			И ВТ_ЗРМ.РабочееМесто = ВТ_Нормы.РабочееМесто
	|ГДЕ
	|	ВТ_Нормы.Подразделение ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация); 
	
	ТаблицаСотрудники.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗРМБезНормНаСервере_ВыборПодразделений()
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ ВТ_ЗРМ
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(, Организация = &Организация) КАК ЗанятыеРабочиеМестаОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Подразделение КАК Подразделение,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Должность КАК Должность,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ ВТ_Нормы
	|ИЗ
	|	РегистрСведений.УстановленныеНормыВыдачиСИЗ.СрезПоследних(, Организация = &Организация) КАК УстановленныеНормыВыдачиСИЗСрезПоследних
	|ГДЕ
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ВТ_ЗРМ.Подразделение КАК Подразделение,
	|	ВТ_ЗРМ.Должность КАК Должность,
	|	ВТ_ЗРМ.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	ВТ_ЗРМ КАК ВТ_ЗРМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Нормы КАК ВТ_Нормы
	|		ПО ВТ_ЗРМ.Подразделение = ВТ_Нормы.Подразделение
	|			И ВТ_ЗРМ.Должность = ВТ_Нормы.Должность
	|			И ВТ_ЗРМ.РабочееМесто = ВТ_Нормы.РабочееМесто
	|ГДЕ
	|	ВТ_Нормы.Подразделение ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация); 
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОтборовДолжностей.Загрузить(ТаблицаЗапроса);
	ТаблицаОтборовПодразделений.Загрузить(ТаблицаЗапроса);
	ТаблицаОтборовРабочиеМеста.Загрузить(ТаблицаЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗРМБезНорм(Команда)
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;

	Если ТекущаяСтраница.Имя = "СтраницаМастераНазначитьНормыВыдачиПроизвольныйВыбор" Тогда
		ЗаполнитьПоЗРМБезНормНаСервере_ПроизвольныйВыбор();                                
	ИначеЕсли ТекущаяСтраница.Имя = "СтраницаМастераНазначитьНормыВыдачиВыборСотрудников" Тогда
		ЗаполнитьПоЗРМБезНормНаСервере_ВыборСотрудников();
	ИначеЕсли ТекущаяСтраница.Имя = "СтраницаМастераНазначитьНормыВыдачиВыборПодразделений" Тогда
		ЗаполнитьПоЗРМБезНормНаСервере_ВыборПодразделений();
	Иначе
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

//Танцюра А.Н. -- №116939 Заполнение по ЗРМ без норм -- 03.09.2021 >>>

#КонецОбласти