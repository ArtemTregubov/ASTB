&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	ЗаполнитьТаблицуВидовЗагружаемыхДанныхПоСотрудникам();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	ОчиститьТаблицу();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицу(ИмяТаблицы = Неопределено) 
	
	Если ИмяТаблицы = Неопределено Тогда //очищаем все таблицы
		Объект.ТаблицаВыданныхСИЗ.Очистить();
		Объект.ТаблицаДанныхПоСотрудникам.Очистить();
		Объект.ТаблицаДоступныхУсловийРаботы.Очистить();
		Объект.ТаблицаЗанятыхРабочихМест.Очистить();
		Объект.ТаблицаИсходныхНорм.Очистить();
		Объект.ТаблицаМВЗ.Очистить();
		Объект.ТаблицаМестХраненияСИЗ.Очистить();
		Объект.ТаблицаНоменклатурныхНомеров.Очистить();
		Объект.ТаблицаНоменклатурыНорм.Очистить();
		Объект.ТаблицаНоменклатурыОрганизации.Очистить();
		Объект.ТаблицаОстатковНоменклатуры.Очистить();
		Объект.ТаблицаПараметровНоменклатуры.Очистить();
		Объект.ТаблицаРабочихМест.Очистить();
		Объект.ТаблицаСкладовВыдачи.Очистить();
		Объект.ТаблицаСоответствийНоменклатуры.Очистить();
		Объект.ТаблицаЦенНоменклатуры.Очистить();
		Объект.ТаблицаШтатногоРасписания.Очистить();
	Иначе
		Объект[ИмяТаблицы].Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	//ШтатноеРасписаниеКоличество 				= ПолучитьКоличествоЭлементовШтатногоРасписания();
	ШтатноеРасписаниеДатаАктуальности			= ТекущаяДата();
	//РабочиеМестаКоличество 						= ПолучитьКоличествоРабочихМест();
	//ЗанятыеРабочиеМестаКоличество 				= ПолучитьКоличествоЗанятыхРабочихМест();
	//МВЗКоличество								= ПолучитьКоличествоМВЗ();
	МВЗДатаАктуальности							= ТекущаяДата();
	//МестаХраненияКоличество						= ПолучитьКоличествоМестХранения();
	//ДанныеПоСотрудникамКоличество				= ПолучитьКоличествоДанныхПоСотрудникам();
	//СкладыВыдачиКоличество						= ПолучитьКоличествоСкладовВыдачи();
	//НоменклатураОрганизацииКоличество 			= ПолучитьКоличествоНоменклатурыОрганизации();
	НоменклатураОрганизацииДатаАктуальности 	= ТекущаяДата();
	НоменклатураОрганизацииПоставщик			= Справочники.Контрагенты.ВостокСервис;
	//НоменклатурныеНомераКоличество				= ПолучитьКоличествоНоменклатурныхНомеров();
	//ОстаткиНоменклатурыКоличество				= ПолучитьКоличествоОстатковНоменклатуры();
	ОстаткиНоменклатурыДатаАктуальности 		= ТекущаяДата();
	//ЦеныНоменклатурыКоличество					= ПолучитьКоличествоЦенНоменклатуры();
	ЦеныНоменклатурыДатаАктуальности			= ТекущаяДата();
	ЦеныНоменклатурыПоставщик					= Справочники.Контрагенты.ВостокСервис;
	//ИсходныеНормыКоличество						= ПолучитьКоличествоИсходныхНорм();
	//СоответствияНоменклатурыКоличество			= ПолучитьКоличествоСоответствийНоменклатуры();
	СоответствияНоменклатурыДатаАктуальности 	= ТекущаяДата();
	//ВыданныеСИЗКоличество						= ПолучитьКоличествоВыданныеСИЗ();
	ВыданныеСИЗДатаАктуальности					= ТекущаяДата();
	//ДоступныеУсловияРаботыКоличество 			= ПолучитьКоличествоДопустимыхУсловийРаботы();
	ДоступныеУсловияРаботыДатаАктуальности		= ТекущаяДата();
	//ПараметрыНоменклатурыКоличество				= ПолучитьКоличествоПараметровНоменклатуры();
	
	НаборЗаписей = РегистрыСведений.НастройкиШаблонаАдресацииМестХраненияСИЗ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		//включаем поля элементов адреса
		Использовать_ЭлементАдреса1 = Ложь;
		Использовать_ЭлементАдреса2 = Ложь;
		Использовать_ЭлементАдреса3 = Ложь;
		Использовать_ЭлементАдреса4 = Ложь;
		Использовать_ЭлементАдреса5 = Ложь;
		
		//значения незаполненных полей
		ПредставлениеПустогоЗначения_ЭлементАдреса1 = "";
		ПредставлениеПустогоЗначения_ЭлементАдреса2 = "";
		ПредставлениеПустогоЗначения_ЭлементАдреса3 = "";
		ПредставлениеПустогоЗначения_ЭлементАдреса4 = "";
		ПредставлениеПустогоЗначения_ЭлементАдреса5 = "";
		
		ИспользоватьПроизвольныйАдрес 		= Ложь;		
		ОдинАдресДляНесколькихСотрудников 	= Ложь;
		
		РазделительАдреса = "";
		
		ПримерАдресаМестаХранения = "<не задан>";
		
	Иначе
		
		СтруктураНастроек = НаборЗаписей[0].НастройкиШаблонаАдресации.Получить();
		
		СтруктураНастроек_ЭлементАдреса1 = СтруктураНастроек.ЭлементАдреса1;
		СтруктураНастроек_ЭлементАдреса2 = СтруктураНастроек.ЭлементАдреса2;
		СтруктураНастроек_ЭлементАдреса3 = СтруктураНастроек.ЭлементАдреса3;
		СтруктураНастроек_ЭлементАдреса4 = СтруктураНастроек.ЭлементАдреса4;
		СтруктураНастроек_ЭлементАдреса5 = СтруктураНастроек.ЭлементАдреса5;
		
		Использовать_ЭлементАдреса1 = СтруктураНастроек_ЭлементАдреса1.Использовать_ЭлементАдреса1;
		Использовать_ЭлементАдреса2 = СтруктураНастроек_ЭлементАдреса2.Использовать_ЭлементАдреса2;
		Использовать_ЭлементАдреса3 = СтруктураНастроек_ЭлементАдреса3.Использовать_ЭлементАдреса3;
		Использовать_ЭлементАдреса4 = СтруктураНастроек_ЭлементАдреса4.Использовать_ЭлементАдреса4;
		Использовать_ЭлементАдреса5 = СтруктураНастроек_ЭлементАдреса5.Использовать_ЭлементАдреса5;
		
		ПредставлениеПустогоЗначения_ЭлементАдреса1 = СтруктураНастроек_ЭлементАдреса1.ПредставлениеПустогоЗначения_ЭлементАдреса1;
		ПредставлениеПустогоЗначения_ЭлементАдреса2 = СтруктураНастроек_ЭлементАдреса2.ПредставлениеПустогоЗначения_ЭлементАдреса2;
		ПредставлениеПустогоЗначения_ЭлементАдреса3 = СтруктураНастроек_ЭлементАдреса3.ПредставлениеПустогоЗначения_ЭлементАдреса3;
		ПредставлениеПустогоЗначения_ЭлементАдреса4 = СтруктураНастроек_ЭлементАдреса4.ПредставлениеПустогоЗначения_ЭлементАдреса4;
		ПредставлениеПустогоЗначения_ЭлементАдреса5 = СтруктураНастроек_ЭлементАдреса5.ПредставлениеПустогоЗначения_ЭлементАдреса5;
		
		РазделительАдреса = СтруктураНастроек.Разделитель;
		
		ИспользоватьПроизвольныйАдрес 		= ?(СтруктураНастроек.Свойство("ИспользоватьПроизвольныйАдрес") = Ложь, Ложь, СтруктураНастроек.ИспользоватьПроизвольныйАдрес);		
		ОдинАдресДляНесколькихСотрудников 	= ?(СтруктураНастроек.Свойство("ОдинАдресДляНесколькихСотрудников") = Ложь, Ложь, СтруктураНастроек.ОдинАдресДляНесколькихСотрудников);
		
		Если ИспользоватьПроизвольныйАдрес Тогда
			ПримерАдресаМестаХранения = "<произвольный адрес>";
		Иначе
			ПримерАдресаМестаХранения = СформироватьАдрес("111","222","333","444","555");
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьАдрес(Результат_ЭлементАдреса1,Результат_ЭлементАдреса2,Результат_ЭлементАдреса3,Результат_ЭлементАдреса4,Результат_ЭлементАдреса5)
	
	Если РазделительАдреса = "П" Тогда
		РазделительСтрока = " ";	
	ИначеЕсли РазделительАдреса = "Н"	Тогда
		РазделительСтрока = "";	
	Иначе
		РазделительСтрока = РазделительАдреса;
	КонецЕсли;
	
	ЭлементАдреса1 = ?(Использовать_ЭлементАдреса1,СокрЛП(Результат_ЭлементАдреса1) + ?(ПустаяСтрока(Результат_ЭлементАдреса1), ПредставлениеПустогоЗначения_ЭлементАдреса1, РазделительСтрока),"");
	ЭлементАдреса2 = ?(Использовать_ЭлементАдреса2,СокрЛП(Результат_ЭлементАдреса2) + ?(ПустаяСтрока(Результат_ЭлементАдреса2), ПредставлениеПустогоЗначения_ЭлементАдреса2, РазделительСтрока),"");
	ЭлементАдреса3 = ?(Использовать_ЭлементАдреса3,СокрЛП(Результат_ЭлементАдреса3) + ?(ПустаяСтрока(Результат_ЭлементАдреса3), ПредставлениеПустогоЗначения_ЭлементАдреса3, РазделительСтрока),"");
	ЭлементАдреса4 = ?(Использовать_ЭлементАдреса4,СокрЛП(Результат_ЭлементАдреса4) + ?(ПустаяСтрока(Результат_ЭлементАдреса4), ПредставлениеПустогоЗначения_ЭлементАдреса4, РазделительСтрока),"");
	ЭлементАдреса5 = ?(Использовать_ЭлементАдреса5,СокрЛП(Результат_ЭлементАдреса5) + ?(ПустаяСтрока(Результат_ЭлементАдреса5), ПредставлениеПустогоЗначения_ЭлементАдреса5, РазделительСтрока),"");
	
	Адрес = ЭлементАдреса1 + ЭлементАдреса2 + ЭлементАдреса3 + ЭлементАдреса4 + ЭлементАдреса5;
	
	Если Прав(Адрес, 1) = РазделительСтрока Тогда
		Адрес = Лев(Адрес, СтрДлина(Адрес)-1);
	КонецЕсли;
	
	Возврат ?(ПустаяСтрока(Адрес),"Адрес не определен",Адрес);
		
КонецФункции

&НаСервере
Процедура ОбновитьИнтерфейсФормы()
	
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаШтатноеРасписание.Заголовок 		= "1. Штатное расписание (" 		+ ?(ШтатноеРасписаниеКоличество = 0,"-","+") 		+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаРабочиеМеста.Заголовок 				= "2. Рабочие места (" 				+ ?(РабочиеМестаКоличество = 0,"-","+") 			+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаЗанятыеРабочиеМеста.Заголовок		= "3. Занятые рабочие места (" 		+ ?(ЗанятыеРабочиеМестаКоличество = 0,"-","+")		+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаМВЗ.Заголовок						= "4. Места возникновения затрат (" + ?(МВЗКоличество = 0,"-","+")						+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаМестаХранения.Заголовок				= "5. Места хранения (" 			+ ?(МестаХраненияКоличество = 0,"-","+")			+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаДанныеПоСотрудникам.Заголовок		= "6. Данные по сотрудникам (" 		+ ?(ДанныеПоСотрудникамКоличество = 0,"-","+")		+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаСкладыВыдачи.Заголовок				= "7. Склады выдачи (" 				+ ?(СкладыВыдачиКоличество = 0,"-","+")				+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаНоменклатураОрганизации.Заголовок	= "8. Номенклатура организации (" 	+ ?(НоменклатураОрганизацииКоличество = 0,"-","+")	+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаНоменклатурныеНомера.Заголовок		= "9. Номенклатурные номера (" 		+ ?(НоменклатурныеНомераКоличество = 0,"-","+")		+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаОстаткиНоменклатуры.Заголовок		= "10. Инвентаризация (" 			+ ?(ОстаткиНоменклатурыКоличество = 0,"-","+")		+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаЦеныНоменклатуры.Заголовок			= "11. Цены номенклатуры (" 		+ ?(ЦеныНоменклатурыКоличество = 0,"-","+")			+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаИсходныеНормы.Заголовок				= "12. Исходные нормы (" 			+ ?(ИсходныеНормыКоличество = 0,"-","+")			+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаСоответствияНоменклатуры.Заголовок	= "13. Соответствия номенклатуры (" + ?(СоответствияНоменклатурыКоличество = 0,"-","+")	+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаВыданныеСИЗ.Заголовок				= "14. Выданные СИЗ (" 				+ ?(ВыданныеСИЗКоличество = 0,"-","+")				+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаДоступныеУсловияРаботы.Заголовок	= "15. Доступные условия работы (" 	+ ?(ДоступныеУсловияРаботыКоличество = 0,"-","+")	+ ")";
	//Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаПараметрыНоменклатуры.Заголовок		= "16. Параметры номенклатуры (" 	+ ?(ПараметрыНоменклатурыКоличество = 0,"-","+")	+ ")";
	
	Элементы.ТаблицаМестХраненияСИЗ.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗГруппаМестоХранения.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗГруппа1.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗЭлементАдреса1.Видимость 		= НЕ ИспользоватьПроизвольныйАдрес И Использовать_ЭлементАдреса1;
	Элементы.ТаблицаМестХраненияСИЗ.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗГруппаМестоХранения.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗГруппа1.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗЭлементАдреса2.Видимость 		= НЕ ИспользоватьПроизвольныйАдрес И Использовать_ЭлементАдреса2;
	Элементы.ТаблицаМестХраненияСИЗ.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗГруппаМестоХранения.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗГруппа1.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗЭлементАдреса3.Видимость 		= НЕ ИспользоватьПроизвольныйАдрес И Использовать_ЭлементАдреса3;
	Элементы.ТаблицаМестХраненияСИЗ.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗГруппаМестоХранения.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗГруппа1.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗЭлементАдреса4.Видимость 		= НЕ ИспользоватьПроизвольныйАдрес И Использовать_ЭлементАдреса4;
	Элементы.ТаблицаМестХраненияСИЗ.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗГруппаМестоХранения.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗГруппа1.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗЭлементАдреса5.Видимость 		= НЕ ИспользоватьПроизвольныйАдрес И Использовать_ЭлементАдреса5;
	Элементы.ТаблицаМестХраненияСИЗ.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗГруппаМестоХранения.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗГруппа1.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗПроизвольныйАдрес.Видимость 	= ИспользоватьПроизвольныйАдрес;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьКоличествоЭлементовШтатногоРасписания()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СУММА(1) КАК КоличествоЗаписей,
	|	ШтатноеРасписаниеСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ШтатноеРасписание.СрезПоследних(, Организация = &Организация) КАК ШтатноеРасписаниеСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтатноеРасписаниеСрезПоследних.Организация";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ПолучитьКоличествоРабочихМест()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочиеМестаАСТБ.Ссылка) КАК КоличествоЗаписей,
	|	РабочиеМестаАСТБ.Владелец КАК Владелец
	|ИЗ
	|	Справочник.РабочиеМестаАСТБ КАК РабочиеМестаАСТБ
	|ГДЕ
	|	РабочиеМестаАСТБ.Владелец = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочиеМестаАСТБ.Владелец";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ПолучитьКоличествоЗанятыхРабочихМест()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗанятыеРабочиеМестаОстатки.Организация КАК Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗанятыеРабочиеМестаОстатки.Сотрудник) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(, Организация = &Организация) КАК ЗанятыеРабочиеМестаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗанятыеРабочиеМестаОстатки.Организация";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоМВЗ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МВЗ.Ссылка) КАК КоличествоЗаписей,
	|	МВЗ.Владелец КАК Владелец
	|ИЗ
	|	Справочник.МВЗ КАК МВЗ
	|ГДЕ
	|	МВЗ.Владелец = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	МВЗ.Владелец";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоМестХранения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МестаХраненияСИЗСотрудников.Ссылка) КАК КоличествоЗаписей,
	|	МестаХраненияСИЗСотрудников.Владелец КАК Владелец
	|ИЗ
	|	Справочник.МестаХраненияСИЗСотрудников КАК МестаХраненияСИЗСотрудников
	|ГДЕ
	|	МестаХраненияСИЗСотрудников.Владелец = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	МестаХраненияСИЗСотрудников.Владелец";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ПолучитьКоличествоДанныхПоСотрудникам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗначенияАнтропометрическихСвойств.Сотрудник.Владелец КАК Организация,
	|	СУММА(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.ЗначенияАнтропометрическихСвойств КАК ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ЗначенияАнтропометрическихСвойств.Сотрудник.Владелец = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияАнтропометрическихСвойств.Сотрудник.Владелец";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		КоличествоАнтропометрии = 0;
	Иначе
		КоличествоАнтропометрии = Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Сотрудники.Владелец КАК Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Сотрудники.Идентификатор) КАК КоличествоЗаписей
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Организация
	|	И НЕ Сотрудники.Идентификатор = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Владелец";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		КоличестивоИдентификаторов = 0;
	Иначе
		КоличестивоИдентификаторов = Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Владелец КАК Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ФизическиеЛицаКонтактнаяИнформация.Представление) КАК КоличествоЗаписей
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО (Сотрудники.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка)
	|ГДЕ
	|	Сотрудники.Владелец = &Организация
	|	И НЕ ФизическиеЛицаКонтактнаяИнформация.Представление ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Владелец";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		КоличестивоКонтактнойИнформации = 0;
	Иначе
		КоличестивоКонтактнойИнформации = Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;
	
	Возврат КоличествоАнтропометрии + КоличестивоКонтактнойИнформации + КоличестивоИдентификаторов;
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоВыданныеСИЗ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыданныеСредстваЗащитыОстатки.Организация КАК Организация,
	|	ВыданныеСредстваЗащитыОстатки.Сотрудник КАК Сотрудник,
	|	ВыданныеСредстваЗащитыОстатки.НормаВыдачи КАК НормаВыдачи,
	|	ВыданныеСредстваЗащитыОстатки.НоменклатураНормы КАК НоменклатураНормы,
	|	ВыданныеСредстваЗащитыОстатки.Номенклатура КАК Номенклатура,
	|	ВыданныеСредстваЗащитыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВыданныеСредстваЗащитыОстатки.ДатаВыдачи КАК ДатаВыдачи,
	|	1 КАК Счетчик
	|ПОМЕСТИТЬ ВТ_Выдано
	|ИЗ
	|	РегистрНакопления.ВыданныеСредстваЗащиты.Остатки(, Организация = &Организация) КАК ВыданныеСредстваЗащитыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Выдано.Организация КАК Организация,
	|	СУММА(ВТ_Выдано.Счетчик) КАК КоличествоЗаписей
	|ИЗ
	|	ВТ_Выдано КАК ВТ_Выдано
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Выдано.Организация";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоСкладовВыдачи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Склады.Ссылка) КАК КоличествоЗаписей
	|ИЗ
	|	Справочник.Склады КАК Склады";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		КоличествоСкладов = 0;
	Иначе
		КоличествоСкладов = Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СкладыВыдачиСредствЗащиты.Организация КАК Организация,
	|	СУММА(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
	|ГДЕ
	|	СкладыВыдачиСредствЗащиты.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	СкладыВыдачиСредствЗащиты.Организация";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		КоличествоСкладовВыдачиСИЗ = 0;
	Иначе
		КоличествоСкладовВыдачиСИЗ = Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;
	
	Возврат КоличествоСкладов + КоличествоСкладовВыдачиСИЗ;
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоНоменклатурыОрганизации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатурныеНомераОрганизаций.Организация КАК Организация,
	|	НоменклатурныеНомераОрганизаций.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_НоменклатурныеНомера
	|ИЗ
	|	РегистрСведений.НоменклатурныеНомераОрганизаций КАК НоменклатурныеНомераОрганизаций
	|ГДЕ
	|	НоменклатурныеНомераОрганизаций.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.СтатусСбыта = &СтатусСбыта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Номенклатура.Номенклатура) КАК КоличествоЗаписей
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатурныеНомера КАК ВТ_НоменклатурныеНомера
	|		ПО ВТ_Номенклатура.Номенклатура = ВТ_НоменклатурныеНомера.Номенклатура
	|ГДЕ
	|	НЕ ВТ_НоменклатурныеНомера.Номенклатура ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("СтатусСбыта", Перечисления.СтатусыСбыта.СтраховыеЗапасы);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоНоменклатурныхНомеров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатурныеНомераОрганизаций.Организация КАК Организация,
	|	СУММА(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.НоменклатурныеНомераОрганизаций КАК НоменклатурныеНомераОрганизаций
	|ГДЕ
	|	НоменклатурныеНомераОрганизаций.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатурныеНомераОрганизаций.Организация";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоОстатковНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОстаткиНоменклатурыОстатки.Организация КАК Организация,
	|	ОстаткиНоменклатурыОстатки.Склад КАК Склад,
	|	ОстаткиНоменклатурыОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОстаткиНоменклатурыОстатки.ПроцентИзноса КАК ПроцентИзноса,
	|	1 КАК Счетчик
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			,
	|			Организация = &Организация
	|				ИЛИ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОстаткиНоменклатурыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Остатки.Счетчик) КАК КоличествоЗаписей
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоЦенНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатурыСрезПоследних.Организация КАК Организация,
	|	СУММА(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Организация = &Организация) КАК ЦеныНоменклатурыСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатурыСрезПоследних.Организация";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоСоответствийНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствияНоменклатурыВыдачиСрезПоследних.НоменклатураНормыОрганизации.Владелец КАК Организация,
	|	СУММА(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.СоответствияНоменклатурыВыдачи.СрезПоследних(, НоменклатураНормыОрганизации.Владелец = &Организация) КАК СоответствияНоменклатурыВыдачиСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствияНоменклатурыВыдачиСрезПоследних.НоменклатураНормыОрганизации.Владелец";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоДопустимыхУсловийРаботы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник.Владелец КАК Организация,
	|	СУММА(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.ДоступныеУсловияРаботыСотрудника.СрезПоследних(, Сотрудник.Владелец = &Организация) КАК ДоступныеУсловияРаботыСотрудникаСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник.Владелец";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ПолучитьКоличествоИсходныхНорм()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсходныеНормыВыдачиСИЗ.Организация КАК Организация,
	|	СУММА(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК ИсходныеНормыВыдачиСИЗ
	|ГДЕ
	|	ИсходныеНормыВыдачиСИЗ.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеНормыВыдачиСИЗ.Организация";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат Результат.Выгрузить()[0].КоличествоЗаписей;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоПараметровНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КраснаяЛиния.Организация КАК Организация,
	|	СУММА(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.КраснаяЛиния КАК КраснаяЛиния
	|ГДЕ
	|	КраснаяЛиния.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	КраснаяЛиния.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СрокиДоставкиСИЗ.Организация КАК Организация,
	|	СУММА(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.СрокиДоставкиСИЗ КАК СрокиДоставкиСИЗ
	|ГДЕ
	|	СрокиДоставкиСИЗ.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	СрокиДоставкиСИЗ.Организация";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаСтраховыхЗапасов = Результат[0].Выгрузить();
	ТаблицаСроковДоставки 	= Результат[1].Выгрузить();
	
	Если ТаблицаСтраховыхЗапасов.Количество() = 0 Тогда
		КоличествоСтраховыхЗапасов = 0;
	Иначе
		КоличествоСтраховыхЗапасов = ТаблицаСтраховыхЗапасов[0].КоличествоЗаписей;
	КонецЕсли;	
	
	Если ТаблицаСроковДоставки.Количество() = 0 Тогда
		КоличествоСроковДоставки = 0;
	Иначе
		КоличествоСроковДоставки = ТаблицаСроковДоставки[0].КоличествоЗаписей;
	КонецЕсли;
	
	Возврат КоличествоСтраховыхЗапасов + КоличествоСроковДоставки;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиШтатногоРасписания(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиШтатногоРасписания");
	
	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиРабочихМест(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиРабочихМест");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиЗанятыхРабочихМест(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиЗанятыхРабочихМест");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиМВЗ(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиМВЗ");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиМестХранения(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиМестХраненияСИЗ");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиДанныхПоСотрудникам(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиДанныхПоСотрудникам");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиВыданныхСИЗ(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиВыданныхСИЗ");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиСкладовВыдачи(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиСкладовВыдачи");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиНоменклатурыОрганизации(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиНоменклатурыОрганизации");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиНоменклатурныхНомеров(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиНоменклатурныхНомеров");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиОстатковНоменклатуры(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиОстатковНоменклатуры");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиЦенНоменклатуры(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиЦенНоменклатуры");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиСоответствийНоменклатуры(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиСоответствийНоменклатуры");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиНоменклатурыНорм(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
	ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиНоменклатурыНорм");
	
	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиИсходныхНорм(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
	ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиИсходныхНорм");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиДоступныхУсловийРаботы(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиДоступныхУсловийРаботы");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиПараметровНоменклатуры(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
    ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиПараметровНоменклатуры");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьФорматЗагрузкиШтатногоРасписания(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "наименование подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "код подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "подразделение родитель (наименование)" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "подразделение родитель (код)" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "должность" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "код должности" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "количество ставок" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[7] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

&НаСервере
Функция ПроверитьФорматЗагрузкиРабочихМест(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "наименование рабочего места" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "код рабочего места" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

&НаСервере
Функция ПроверитьФорматЗагрузкиЗанятыхРабочихМест(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "табельный номер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "фио" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "код физического лица" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "пол" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "дата приема" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "наименование подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "код подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[7] = "должность" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[8] = "код должности" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[9] = "количество ставок" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[10] = "наименование рабочего места" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[11] = "код рабочего места" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[12] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиМВЗ(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "наименование мвз" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "код мвз" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "табельный номер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "фио" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "наименование подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "код подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "наименование должности" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[7] = "код должности" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[8] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиМестХранения(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "1-й элемент адреса" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "2-й элемент адреса" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "3-й элемент адреса" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "4-й элемент адреса" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "5-й элемент адреса" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "произвольный адрес" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "табельный номер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[7] = "фио" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[8] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиДанныхПоСотрудникам(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "табельный номер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "фио" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "рост" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "размер одежды" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "размер обуви" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "размер головного убора" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "размер противогаза" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[7] = "размер респиратора" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[8] = "размер рукавиц" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[9] = "размер перчаток" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[10] = "размер рубашки" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[11] = "идентификатор" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[12] = "телефон" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[13] = "электронная почта" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[14] = "дата приема для личной карточки" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[15] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиСкладовВыдачи(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "склад" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "код синхронизации" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "фио мол" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "табельный номер мол" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "фио" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "табельный номер сотрудника" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "подразделение" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[7] = "код подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[8] = "вид выдачи сиз" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[9] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиНоменклатурыОрганизации(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "артикул" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "код синхронизации" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "номенклатура выдачи" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "размер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "номенклатурный номер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "код единицы измерения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "количество" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[7] = "цена с ндс" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[8] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиНоменклатурныхНомеров(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "номенклатура выдачи" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "код синхронизации" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "размер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "номенклатурный номер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "наименование номенклатуры организации" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиОстатковНоменклатуры(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "артикул" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "номенклатура выдачи" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "код синхронизации" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "размер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "количество" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиЦенНоменклатуры(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "артикул" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "номенклатура выдачи" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "код синхронизации" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "цена с ндс" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиИсходныхНорм(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "должность" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "код должности" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "наименование подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "код подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "наименование рабочего места" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "код рабочего места" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "номер тон" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[7] = "номер приложения тон" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[8] = "номер профессии в тон" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[9] = "основание" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[10] = "условие нормы" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[11] = "гост" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[12] = "номер группы или" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[13] = "номенклатура нормы" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[14] = "код единицы измерения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[15] = "вид расчета" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[16] = "вид выдачи" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[17] = "тип периода" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[18] = "количество в периоде" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[19] = "количество периодов" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[20] = "периодичность для лк" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[21] = "учитывать в потребности" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[22] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиУточненныхОснованийНорм(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "должность" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "код должности" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "наименование подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "код подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "наименование рабочего места" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "код рабочего места" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "номер тон" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[7] = "номер приложения тон" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[8] = "номер профессии в тон" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[9] = "норма выдачи сиз" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[10] = "код" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[11] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиСоответствийНоменклатуры(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "номенклатура нормы" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "артикул" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "номенклатура выдачи" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "код синхронизации" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "табельный номер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "фио" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "наименование подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[7] = "код подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[8] = "должность" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[9] = "код должности" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[10] = "приоритет" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[11] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиВыданныхСИЗ(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "табельный номер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "фио" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "номенклатура нормы" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//+++АсТБ_Alexey_106247_********************************************************************
	Если НЕ МассивКолонок[3] = "группа взаимозаменяемых норм" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "артикул" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "номенклатура выдачи" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "код синхронизации" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[7] = "размер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[8] = "дата" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[9] = "количество" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[10] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	//---АсТБ_Alexey_106247_********************************************************************
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиДоступныхУсловийРаботы(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "табельный номер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "фио" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "наименование подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "код подразделения" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "должность" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "код должности" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "наименование рабочего места" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[7] = "код рабочего места" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[8] = "условие нормы" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[9] = "использовать" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[10] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьФорматЗагрузкиПараметровНоменклатуры(МассивКолонок)
	
	Если НЕ МассивКолонок[0] = "номенклатура выдачи" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[1] = "код синхронизации" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[2] = "размер" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[3] = "страховой запас" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[4] = "тип периода" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[5] = "количество периодов" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МассивКолонок[6] = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПрочитатьФайлШтатногоРасписанияНаСервере(Адрес)

	Объект.ТаблицаШтатногоРасписания.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 8 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиШтатногоРасписания(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
			Иначе
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 2, Сч, 2).Значение) = ТИП("Число") Тогда
					КодПодразделения = Формат(ТабДок.Область(Сч, 2, Сч, 2).Значение,"ЧГ=");
				Иначе
					КодПодразделения = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
				КонецЕсли;
			Иначе
				КодПодразделения = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				НаименованиеРодителяПодразделения = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение);
			Иначе
				НаименованиеРодителяПодразделения = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 4, Сч, 4).Значение) = ТИП("Число") Тогда
					КодРодителяПодразделения = Формат(ТабДок.Область(Сч, 4, Сч, 4).Значение,"ЧГ=");
				Иначе
					КодРодителяПодразделения = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
				КонецЕсли;
			Иначе
				КодРодителяПодразделения = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение);
			Иначе
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 6, Сч, 6).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 6, Сч, 6).Значение) = ТИП("Число") Тогда
					КодДолжности	= Формат(ТабДок.Область(Сч, 6, Сч, 6).Значение,"ЧГ=");
				Иначе
					КодДолжности	= СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Значение);
				КонецЕсли;
			Иначе
				КодДолжности	= СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст);
			КонецЕсли;
			
			Попытка
				КоличествоСтавок = ?(ЗначениеЗаполнено(СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Значение)),Число(СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Значение)),0);
			Исключение
				КоличествоСтавок = 0;
			КонецПопытки;
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если СтрДлина(НаименованиеПодразделения) > 150 Тогда
				ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования подразделения превышает 150 символов.";
				ЕстьОшибкиВСтроке = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НаименованиеПодразделения) Тогда
				ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Строка " + Сч + " - не задано наименование подразделения.";
				ЕстьОшибкиВСтроке = Ложь;
			КонецЕсли;
			Если СтрДлина(КодПодразделения) > 20 Тогда
				ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Строка " + Сч + " - длина кода подразделения превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(НаименованиеРодителяПодразделения) > 150 Тогда
				ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования родителя подразделения превышает 150 символов.";
				ЕстьОшибкиВСтроке = Ложь;
			КонецЕсли;
			Если СтрДлина(КодРодителяПодразделения) > 20 Тогда
				ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Строка " + Сч + " - длина кода головного подразделения превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(НаименованиеДолжности) > 150 Тогда
				ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования должности превышает 150 символов.";
				ЕстьОшибкиВСтроке = Ложь;
			КонецЕсли;
			Если СтрДлина(КодДолжности) > 20 Тогда
				ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Строка " + Сч + " - длина кода должности превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 									= Объект.ТаблицаШтатногоРасписания.Добавить();
			НоваяСтрока.НаименованиеПодразделения			= НаименованиеПодразделения;
			НоваяСтрока.КодПодразделения					= КодПодразделения;
			НоваяСтрока.НаименованиеРодителяПодразделения	= НаименованиеРодителяПодразделения;
			НоваяСтрока.КодРодителяПодразделения 			= КодРодителяПодразделения;
			НоваяСтрока.НаименованиеДолжности 				= НаименованиеДолжности;
			НоваяСтрока.КодДолжности						= КодДолжности;
			НоваяСтрока.Количество 							= КоличествоСтавок;			
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлШтатногоРасписания(Команда)
	
	ШтатноеРасписаниеПротокол = "*****Чтение файла загрузки*****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Не выбрана организация!";
		ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Не выбран файл загрузки!";
		ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;		
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлШтатногоРасписанияНаСервере(ВременноеХранилище);
	
	ПроверитьДублиВФайлеШтатногоРасписания();
	
	Если ШтатноеРасписаниеЕстьДубли Тогда
		ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "В файле загрузки существуют дубли! Загрузка не доступна.";
		Элементы.ТаблицаШтатногоРасписанияЗагрузитьШтатноеРасписание.Доступность = Ложь;
	Иначе
		ПроверитьШтатноеРасписаниеВБазе();
		Если ШтатноеРасписаниеЕстьДубли Тогда
			ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
			Элементы.ТаблицаШтатногоРасписанияЗагрузитьШтатноеРасписание.Доступность = Ложь;
		Конецесли;	
	Конецесли;	
	
	ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиВФайлеШтатногоРасписания()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаШтатногоРасписания.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаШтатногоРасписания.КодПодразделения КАК КодПодразделения,
	|	ТаблицаШтатногоРасписания.НаименованиеРодителяПодразделения КАК НаименованиеРодителяПодразделения,
	|	ТаблицаШтатногоРасписания.КодРодителяПодразделения КАК КодРодителяПодразделения,
	|	ТаблицаШтатногоРасписания.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаШтатногоРасписания.КодДолжности КАК КодДолжности,
	|	ТаблицаШтатногоРасписания.НомерСтроки КАК НомерСтроки,
	|	ТаблицаШтатногоРасписания.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаШтатногоРасписания
	|ИЗ
	|	&ТаблицаШтатногоРасписания КАК ТаблицаШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаШтатногоРасписания.КодДолжности КАК КодДолжности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТаблицаШтатногоРасписания.НомерСтроки) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_ТаблицаШтатногоРасписания КАК ВТ_ТаблицаШтатногоРасписания
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.КодПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеДолжности,
	|	ВТ_ТаблицаШтатногоРасписания.КодДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеРодителяПодразделения КАК НаименованиеРодителяПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.КодРодителяПодразделения КАК КодРодителяПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаШтатногоРасписания.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаШтатногоРасписания.Количество КАК Количество,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_ТаблицаШтатногоРасписания КАК ВТ_ТаблицаШтатногоРасписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_ТаблицаШтатногоРасписания.НаименованиеПодразделения = ВТ_АнализДублей.НаименованиеПодразделения
	|			И ВТ_ТаблицаШтатногоРасписания.КодПодразделения = ВТ_АнализДублей.КодПодразделения
	|			И ВТ_ТаблицаШтатногоРасписания.НаименованиеДолжности = ВТ_АнализДублей.НаименованиеДолжности
	|			И ВТ_ТаблицаШтатногоРасписания.КодДолжности = ВТ_АнализДублей.КодДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_АнализДублей.КодПодразделения КАК КодПодразделения,
	|	ВТ_АнализДублей.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_АнализДублей.КодДолжности КАК КодДолжности,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаШтатногоРасписания",Объект.ТаблицаШтатногоРасписания.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[3].Выгрузить();
	
	ШтатноеРасписаниеЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаШтатногоРасписания.Загрузить(Результат[2].Выгрузить());
	
КонецПроцедуры	

&НаСервере
Процедура ПроверитьШтатноеРасписаниеВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаШтатногоРасписания.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаШтатногоРасписания.КодПодразделения КАК КодПодразделения,
	|	ТаблицаШтатногоРасписания.НаименованиеРодителяПодразделения КАК НаименованиеРодителяПодразделения,
	|	ТаблицаШтатногоРасписания.КодРодителяПодразделения КАК КодРодителяПодразделения,
	|	ТаблицаШтатногоРасписания.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаШтатногоРасписания.КодДолжности КАК КодДолжности,
	|	ТаблицаШтатногоРасписания.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаШтатногоРасписания
	|ИЗ
	|	&ТаблицаШтатногоРасписания КАК ТаблицаШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Ссылка,
	|	Подразделения.Родитель КАК Родитель,
	|	Подразделения.КодСинхронизации КАК КодСинхронизации,
	|	Подразделения.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Подразделения
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолжностиИПрофессии.Ссылка КАК Ссылка,
	|	ДолжностиИПрофессии.Наименование КАК Наименование,
	|	ДолжностиИПрофессии.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_Должности
	|ИЗ
	|	Справочник.ДолжностиИПрофессии КАК ДолжностиИПрофессии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтатноеРасписаниеСрезПоследних.Подразделение КАК Подразделение,
	|	ШтатноеРасписаниеСрезПоследних.Должность КАК Должность,
	|	ШтатноеРасписаниеСрезПоследних.КоличествоСтавок КАК КоличествоСтавок,
	|	ШтатноеРасписаниеСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТ_ШтатноеРасписание
	|ИЗ
	|	РегистрСведений.ШтатноеРасписание.СрезПоследних(&ДатаАнализа, Организация = &Организация) КАК ШтатноеРасписаниеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеРодителяПодразделения КАК НаименованиеРодителяПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.КодРодителяПодразделения КАК КодРодителяПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаШтатногоРасписания.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаШтатногоРасписания.Количество КАК Количество,
	|	ЕСТЬNULL(ВТ_Подразделения.Ссылка, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК ПодразделениеРодитель,
	|	ЕСТЬNULL(ВТ_Подразделения1.Ссылка, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(ВТ_Должности.Ссылка, ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)) КАК Должность
	|ПОМЕСТИТЬ ВТ_Подразделения_Должности
	|ИЗ
	|	ВТ_ТаблицаШтатногоРасписания КАК ВТ_ТаблицаШтатногоРасписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения
	|		ПО ВТ_ТаблицаШтатногоРасписания.НаименованиеРодителяПодразделения = ВТ_Подразделения.Наименование
	|			И ВТ_ТаблицаШтатногоРасписания.КодРодителяПодразделения = ВТ_Подразделения.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения1
	|		ПО ВТ_ТаблицаШтатногоРасписания.НаименованиеПодразделения = ВТ_Подразделения1.Наименование
	|			И ВТ_ТаблицаШтатногоРасписания.КодПодразделения = ВТ_Подразделения1.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Должности КАК ВТ_Должности
	|		ПО ВТ_ТаблицаШтатногоРасписания.НаименованиеДолжности = ВТ_Должности.Наименование
	|			И ВТ_ТаблицаШтатногоРасписания.КодДолжности = ВТ_Должности.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Подразделения_Должности.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Подразделения_Должности.КодПодразделения КАК КодПодразделения,
	|	ВТ_Подразделения_Должности.НаименованиеРодителяПодразделения КАК НаименованиеРодителяПодразделения,
	|	ВТ_Подразделения_Должности.КодРодителяПодразделения КАК КодРодителяПодразделения,
	|	ВТ_Подразделения_Должности.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Подразделения_Должности.КодДолжности КАК КодДолжности,
	|	ВТ_Подразделения_Должности.Количество КАК Количество,
	|	ВТ_Подразделения_Должности.Подразделение КАК Подразделение,
	|	ВТ_Подразделения_Должности.ПодразделениеРодитель КАК ПодразделениеРодитель,
	|	ВТ_Подразделения_Должности.Должность КАК Должность,
	|	ВЫБОР
	|		КОГДА ВТ_ШтатноеРасписание.Подразделение ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Существует
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_Подразделения_Должности КАК ВТ_Подразделения_Должности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ШтатноеРасписание КАК ВТ_ШтатноеРасписание
	|		ПО ВТ_Подразделения_Должности.Подразделение = ВТ_ШтатноеРасписание.Подразделение
	|			И ВТ_Подразделения_Должности.Должность = ВТ_ШтатноеРасписание.Должность
	|			И ВТ_Подразделения_Должности.Количество = ВТ_ШтатноеРасписание.КоличествоСтавок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеРодителяПодразделения КАК НаименованиеРодителяПодразделения,
	|	ВТ_Результат.КодРодителяПодразделения КАК КодРодителяПодразделения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.ПодразделениеРодитель) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейГоловныхПодразделений
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеРодителяПодразделения,
	|	ВТ_Результат.КодРодителяПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Подразделение) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейПодразделений
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Должность) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейДолжностей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	ВТ_Результат.НаименованиеРодителяПодразделения КАК НаименованиеРодителяПодразделения,
	|	ВТ_Результат.КодРодителяПодразделения КАК КодРодителяПодразделения,
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	ВТ_Результат.Количество КАК Количество,
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.ПодразделениеРодитель КАК ПодразделениеРодитель,
	|	ВТ_Результат.Должность КАК Должность,
	|	ВТ_Результат.Существует КАК Существует,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейПодразделений.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейДолжностей.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейДолжностей.КоличествоДублей
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_АнализДублейГоловныхПодразделений.КоличествоДублей > 1
	|							ТОГДА ВТ_АнализДублейГоловныхПодразделений.КоличествоДублей
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|		ПО ВТ_Результат.НаименованиеПодразделения = ВТ_АнализДублейПодразделений.НаименованиеПодразделения
	|			И ВТ_Результат.КодПодразделения = ВТ_АнализДублейПодразделений.КодПодразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|		ПО ВТ_Результат.НаименованиеДолжности = ВТ_АнализДублейДолжностей.НаименованиеДолжности
	|			И ВТ_Результат.КодДолжности = ВТ_АнализДублейДолжностей.КодДолжности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейГоловныхПодразделений КАК ВТ_АнализДублейГоловныхПодразделений
	|		ПО ВТ_Результат.НаименованиеРодителяПодразделения = ВТ_АнализДублейГоловныхПодразделений.НаименованиеРодителяПодразделения
	|			И ВТ_Результат.КодРодителяПодразделения = ВТ_АнализДублейГоловныхПодразделений.КодРодителяПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейПодразделений.НаименованиеПодразделения КАК Наименование,
	|	ВТ_АнализДублейПодразделений.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|ГДЕ
	|	ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейДолжностей.НаименованиеДолжности,
	|	ВТ_АнализДублейДолжностей.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|ГДЕ
	|	ВТ_АнализДублейДолжностей.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейГоловныхПодразделений.НаименованиеРодителяПодразделения,
	|	ВТ_АнализДублейГоловныхПодразделений.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейГоловныхПодразделений КАК ВТ_АнализДублейГоловныхПодразделений
	|ГДЕ
	|	ВТ_АнализДублейГоловныхПодразделений.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаШтатногоРасписания",	Объект.ТаблицаШтатногоРасписания.Выгрузить());
	Запрос.УстановитьПараметр("ДатаАнализа",				КонецДня(ШтатноеРасписаниеДатаАктуальности));
	Запрос.УстановитьПараметр("Организация",				Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[10].Выгрузить();
	
	ШтатноеРасписаниеЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаШтатногоРасписания.Загрузить(Результат[9].Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШтатноеРасписание(Команда)
	
	ЗагрузитьШтатноеРасписаниеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьШтатноеРасписаниеНаСервере()
	
	ШтатноеРасписаниеПротокол = "*****Загрузка штатного расписания*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаШтатногоРасписания.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаШтатногоРасписания.КодПодразделения КАК КодПодразделения,
	|	ТаблицаШтатногоРасписания.НаименованиеРодителяПодразделения КАК НаименованиеРодителяПодразделения,
	|	ТаблицаШтатногоРасписания.КодРодителяПодразделения КАК КодРодителяПодразделения,
	|	ТаблицаШтатногоРасписания.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаШтатногоРасписания.КодДолжности КАК КодДолжности,
	|	ТаблицаШтатногоРасписания.Количество КАК Количество,
	|	ТаблицаШтатногоРасписания.Подразделение КАК Подразделение,
	|	ТаблицаШтатногоРасписания.ПодразделениеРодитель КАК ПодразделениеРодитель,
	|	ТаблицаШтатногоРасписания.Должность КАК Должность,
	|	ТаблицаШтатногоРасписания.Существует КАК Существует
	|ПОМЕСТИТЬ ВТ_ТаблицаШтатногоРасписания
	|ИЗ
	|	&ТаблицаШтатногоРасписания КАК ТаблицаШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеРодителяПодразделения КАК НаименованиеРодителяПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.КодРодителяПодразделения КАК КодРодителяПодразделения,
	|	ВТ_ТаблицаШтатногоРасписания.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаШтатногоРасписания.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаШтатногоРасписания.Количество КАК Количество,
	|	ВТ_ТаблицаШтатногоРасписания.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаШтатногоРасписания.ПодразделениеРодитель КАК ПодразделениеРодитель,
	|	ВТ_ТаблицаШтатногоРасписания.Должность КАК Должность,
	|	ВТ_ТаблицаШтатногоРасписания.Существует КАК Существует
	|ИЗ
	|	ВТ_ТаблицаШтатногоРасписания КАК ВТ_ТаблицаШтатногоРасписания
	|ГДЕ
	|	НЕ ВТ_ТаблицаШтатногоРасписания.Существует";
	
	Запрос.УстановитьПараметр("ТаблицаШтатногоРасписания",	Объект.ТаблицаШтатногоРасписания.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Информация для загрузки штатного расписания не найдена.";
		
	Иначе
		
		ТаблицаЗапроса = Результат.Выгрузить();
		
		Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
			
			//определяем головное подразделение
			Если ЗначениеЗаполнено(СокрЛП(СтрокаТаблицыЗапроса.НаименованиеРодителяПодразделения)) И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ПодразделениеРодитель) Тогда
			    СтрокаТаблицыЗапроса.ПодразделениеРодитель = ПолучитьПодразделение(СтрокаТаблицыЗапроса.КодРодителяПодразделения, СтрокаТаблицыЗапроса.НаименованиеРодителяПодразделения);
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ПодразделениеРодитель) Тогда
					ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Не найдено головное подразделение: " + СокрЛП(СтрокаТаблицыЗапроса.НаименованиеРодителяПодразделения) + " для подразделения <<" + СокрЛП(СтрокаТаблицыЗапроса.НаименованиеПодразделения) + ">>";
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			//создаем подразделение
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Подразделение) Тогда
				СтрокаТаблицыЗапроса.Подразделение = ПолучитьПодразделение(СтрокаТаблицыЗапроса.КодПодразделения, СтрокаТаблицыЗапроса.НаименованиеПодразделения, СтрокаТаблицыЗапроса.ПодразделениеРодитель);
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Подразделение) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			//определяем (создаем) должность
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Должность) Тогда
				СтрокаТаблицыЗапроса.Должность = ПолучитьДолжность(СтрокаТаблицыЗапроса.НаименованиеДолжности, СтрокаТаблицыЗапроса.КодДолжности);
			КонецЕсли;
			
			//заполняем штатное расписание
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Подразделение) И ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Должность) Тогда
				ЗаписатьШтатноеРасписание(СтрокаТаблицыЗапроса.Подразделение, СтрокаТаблицыЗапроса.Должность, СтрокаТаблицыЗапроса.Количество);
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьШтатноеРасписаниеВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "*****Загрузка штатного расписания завершена*****";
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьШтатноеРасписание(Подразделение, Должность, КолСтавок)
	
	РегистрШтатноеРасписание 					= РегистрыСведений.ШтатноеРасписание.СоздатьМенеджерЗаписи();
	РегистрШтатноеРасписание.Период    			= НачалоДня(ШтатноеРасписаниеДатаАктуальности);
	РегистрШтатноеРасписание.Организация    	= Объект.Организация;
	РегистрШтатноеРасписание.Подразделение      = Подразделение;
	РегистрШтатноеРасписание.Должность 			= Должность;
	РегистрШтатноеРасписание.КоличествоСтавок 	= КолСтавок;
	Попытка
		РегистрШтатноеРасписание.Записать();
		ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Выполнена запись в штатное расписание. Подразделение: " + Подразделение + ". Должность: " + Должность + ". Количество ставок: " + КолСтавок;
	Исключение
		ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Не удалось создать запись в штатном расписании." + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделение(КодСинхронизации, Наименование, ПодразделениеРодитель = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Владелец
	|	И Подразделения.Наименование = &Наименование
	|	И Подразделения.КодСинхронизации = &КодСинхронизации";
	
	Запрос.УстановитьПараметр("Владелец",			Объект.Организация);
	Запрос.УстановитьПараметр("Наименование",		Наименование);
	Запрос.УстановитьПараметр("КодСинхронизации",	КодСинхронизации);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Если ПодразделениеРодитель = Неопределено Тогда //это поиск головного подразделения, создавать ничего не нужно
			Поздазделение = Справочники.Подразделения.ПустаяСсылка();
		Иначе //нужно создать новое подразделение
			Подразделение 						= Справочники.Подразделения.СоздатьЭлемент();
			Подразделение.КодСинхронизации 		= КодСинхронизации;
			Подразделение.Наименование 			= Наименование;
			Подразделение.НаименованиеПолное 	= Наименование;
			Подразделение.Владелец 				= Объект.Организация;
			Подразделение.Родитель 				= ПодразделениеРодитель;
			Подразделение.УстановитьНовыйКод();
			
			Попытка
				Подразделение.Записать();
				ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Создано подразделение: " + Наименование;
				Подразделение = Подразделение.Ссылка;
			Исключение
				Поздазделение = Справочники.Подразделения.ПустаяСсылка();
				ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Не удалось создать подразделение: " + Наименование + Символы.ПС + ОписаниеОшибки();
			КонецПопытки;
		Конецесли;	
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Подразделение = Выборка.Подразделение;
	КонецЕсли;

	Возврат Подразделение;
	
КонецФункции

&НаСервере
Функция ПолучитьДолжность(НаименованиеДолжности, КодДолжности)
	
	Если НЕ ЗначениеЗаполнено(НаименованиеДолжности) Тогда
		Возврат Справочники.ДолжностиИПрофессии.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолжностиИПрофессии.Ссылка КАК Должность
	|ИЗ
	|	Справочник.ДолжностиИПрофессии КАК ДолжностиИПрофессии
	|ГДЕ
	|	ДолжностиИПрофессии.Наименование = &Наименование
	|	И ДолжностиИПрофессии.КодСинхронизации = &КодСинхронизации";
	
	Запрос.УстановитьПараметр("Наименование",		НаименованиеДолжности);
	Запрос.УстановитьПараметр("КодСинхронизации",	КодДолжности);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда //нужно создать новую должность
		
		НоваяДолжность 						= Справочники.ДолжностиИПрофессии.СоздатьЭлемент();
		НоваяДолжность.Наименование 		= НаименованиеДолжности;
		НоваяДолжность.НаименованиеПолное 	= НаименованиеДолжности;
		НоваяДолжность.Источник 			= Перечисления.ИсточникиДолжностей.ВведеныВручную;
		НоваяДолжность.КодСинхронизации		= КодДолжности;
		НоваяДолжность.УстановитьНовыйКод();
		
		Попытка
			НоваяДолжность.Записать();
			Должность = НоваяДолжность.Ссылка;
			ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Создана должность: " + НаименованиеДолжности;
		Исключение
			Должность = Справочники.ДолжностиИПрофессии.ПустаяСсылка();
			ШтатноеРасписаниеПротокол = ШтатноеРасписаниеПротокол + Символы.ПС + "Не удалось создать должность: " + НаименованиеДолжности + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Должность = Выборка.Должность;
		
	КонецЕсли;
	
	Возврат Должность;
		
КонецФункции

&НаСервере
Процедура ПрочитатьФайлРабочихМестНаСервере(Адрес)
	
	Объект.ТаблицаРабочихМест.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 3 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиРабочихМест(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				НаименованиеРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
			Иначе
				НаименованиеРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 2, Сч, 2).Значение) = ТИП("Число") Тогда
					КодРабочегоМеста = Формат(ТабДок.Область(Сч, 2, Сч, 2).Значение,"ЧГ=");
				Иначе
					КодРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
				КонецЕсли;
			Иначе
				КодРабочегоМеста = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст),Символы.НПП,"");
			КонецЕсли;
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если СтрДлина(НаименованиеРабочегоМеста) > 150 Тогда
				РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования рабочего места превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НаименованиеРабочегоМеста) Тогда
				РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - не заполнено наименование рабочего места.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(КодРабочегоМеста) > 9 Тогда
				РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - длина кода синхронизациии рабочего места превышает 9 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 							= Объект.ТаблицаРабочихМест.Добавить();
			НоваяСтрока.НаименованиеРабочегоМеста	= НаименованиеРабочегоМеста;
			НоваяСтрока.КодСинхронизации			= КодРабочегоМеста;			
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлРабочихМест(Команда)
	
	РабочиеМестаПротокол = "*****Чтение файла загрузки****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "Не выбрана организация!";
		РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "Не выбран файл загрузки!";
		РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;		
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлРабочихМестНаСервере(ВременноеХранилище);
	
	ПроверитьРабочиеМестаВБазе();
	
	Если РабочиеМестаЕстьДубли Тогда
		РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
		Элементы.ТаблицаРабочихМестЗагрузитьРабочиеМеста.Доступность = Ложь;
	Конецесли;
		
	РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРабочиеМестаВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРабочихМест.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ТаблицаРабочихМест.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_ТаблицаРабочихМест
	|ИЗ
	|	&ТаблицаРабочихМест КАК ТаблицаРабочихМест
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМестаАСТБ.Наименование КАК Наименование,
	|	РабочиеМестаАСТБ.КодСинхронизации КАК КодСинхронизации,
	|	РабочиеМестаАСТБ.Ссылка КАК РабочееМесто
	|ПОМЕСТИТЬ ВТ_РАбочиеМеста
	|ИЗ
	|	Справочник.РабочиеМестаАСТБ КАК РабочиеМестаАСТБ
	|ГДЕ
	|	РабочиеМестаАСТБ.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРабочихМест.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаРабочихМест.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_РАбочиеМеста.РабочееМесто КАК РабочееМесто,
	|	НЕ ВТ_РАбочиеМеста.РабочееМесто ЕСТЬ NULL КАК Существует
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаРабочихМест КАК ВТ_ТаблицаРабочихМест
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РАбочиеМеста КАК ВТ_РАбочиеМеста
	|		ПО ВТ_ТаблицаРабочихМест.НаименованиеРабочегоМеста = ВТ_РАбочиеМеста.Наименование
	|			И ВТ_ТаблицаРабочихМест.КодСинхронизации = ВТ_РАбочиеМеста.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.РабочееМесто) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеРабочегоМеста,
	|	ВТ_Результат.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.РабочееМесто КАК РабочееМесто,
	|	ВТ_Результат.Существует КАК Существует,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_Результат.НаименованиеРабочегоМеста = ВТ_АнализДублей.НаименованиеРабочегоМеста
	|			И ВТ_Результат.КодСинхронизации = ВТ_АнализДублей.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_АнализДублей.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаРабочихМест",	Объект.ТаблицаРабочихМест.Выгрузить());
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[5].Выгрузить();
	
	РабочиеМестаЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаРабочихМест.Загрузить(Результат[4].Выгрузить());
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьРабочиеМеста(Команда)
	
	ЗагрузитьРабочиеМестаНаСервере();
	
	Элементы.СтраницаРабочиеМеста.ПодчиненныеЭлементы.ТаблицаРабочихМест.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаРабочихМестЗагрузитьРабочиеМеста.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРабочиеМестаНаСервере()
	
	РабочиеМестаПротокол = "*****Загрузка рабочих мест*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРабочихМест.НаименованиеРабочегоМеста,
	|	ТаблицаРабочихМест.КодСинхронизации,
	|	ТаблицаРабочихМест.РабочееМесто,
	|	ТаблицаРабочихМест.Существует
	|ПОМЕСТИТЬ ВТ_ТаблицаРабочихМест
	|ИЗ
	|	&ТаблицаРабочихМест КАК ТаблицаРабочихМест
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРабочихМест.НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаРабочихМест.КодСинхронизации,
	|	ВТ_ТаблицаРабочихМест.РабочееМесто,
	|	ВТ_ТаблицаРабочихМест.Существует
	|ИЗ
	|	ВТ_ТаблицаРабочихМест КАК ВТ_ТаблицаРабочихМест
	|ГДЕ
	|	НЕ ВТ_ТаблицаРабочихМест.Существует";
	
	Запрос.УстановитьПараметр("ТаблицаРабочихМест",	Объект.ТаблицаРабочихМест.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "Информация для загрузки рабочих мест не найдена.";
		
	Иначе
		
		ТаблицаЗапроса = Результат.Выгрузить();
		
		Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
			
			РабочееМесто = ПолучитьРабочееМесто(СтрокаТаблицыЗапроса.НаименованиеРабочегоМеста, СтрокаТаблицыЗапроса.КодСинхронизации);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьРабочиеМестаВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "*****Загрузка рабочих мест завершена*****";	
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьРабочееМесто(НаименованиеРабочегоМеста, КодСинхронизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РабочиеМестаАСТБ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РабочиеМестаАСТБ КАК РабочиеМестаАСТБ
	|ГДЕ
	|	РабочиеМестаАСТБ.Владелец = &Владелец
	|	И РабочиеМестаАСТБ.Наименование = &Наименование
	|	И РабочиеМестаАСТБ.КодСинхронизации = &КодСинхронизации";
	
	Запрос.УстановитьПараметр("Владелец",			Объект.Организация);
	Запрос.УстановитьПараметр("Наименование",		НаименованиеРабочегоМеста);
	Запрос.УстановитьПараметр("КодСинхронизации",	КодСинхронизации);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		РабочееМестоОбъект = Справочники.РабочиеМестаАСТБ.СоздатьЭлемент();
		РабочееМестоОбъект.Владелец = Объект.Организация;
		РабочееМестоОбъект.КодСинхронизации = КодСинхронизации;
		РабочееМестоОбъект.Наименование = НаименованиеРабочегоМеста;
		РабочееМестоОбъект.УстановитьНовыйКод();
		
		Попытка
			РабочееМестоОбъект.Записать();
			РабочееМесто = РабочееМестоОбъект.Ссылка;
			РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "Создано рабочее место: " + НаименованиеРабочегоМеста;
		Исключение
			РабочееМесто = Справочники.РабочиеМестаАСТБ.ПустаяСсылка();
			РабочиеМестаПротокол = РабочиеМестаПротокол + Символы.ПС + "Не удалось создать рабочее место: " + НаименованиеРабочегоМеста + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		РабочееМесто = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат РабочееМесто;
	
КонецФункции	

&НаСервере
Функция ОпределитьПолСотрудника(ТекстПол)
	
	Перем Результат;
	
	Если нрег(СокрЛП(ТекстПол)) = "м" ИЛИ нрег(СокрЛП(ТекстПол)) = "m" ИЛИ нрег(СокрЛП(ТекстПол)) = "муж" ИЛИ нрег(СокрЛП(ТекстПол)) = "мужской" Тогда
		Результат = перечисления.ПолФизическогоЛица.Мужской;
	Иначе
		Результат = перечисления.ПолФизическогоЛица.Женский;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПрочитатьФайлЗанятыхРабочихМестНаСервере(Адрес)
	
	Объект.ТаблицаЗанятыхРабочихМест.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 13 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиЗанятыхРабочихМест(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 1, Сч, 1).Значение) = ТИП("Число") Тогда
					ТабельныйНомер = Формат(ТабДок.Область(Сч, 1, Сч, 1).Значение,"ЧГ=");
				Иначе
					ТабельныйНомер = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
				КонецЕсли;
			Иначе
				ТабельныйНомер = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				ФИО = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
			Иначе
				ФИО = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 3, Сч, 3).Значение) = ТИП("Число") Тогда
					КодСинхронизации = Формат(ТабДок.Область(Сч, 3, Сч, 3).Значение,"ЧГ=");
				Иначе
					КодСинхронизации = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение);
				КонецЕсли;
			Иначе
				КодСинхронизации = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				Пол = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
			Иначе
				Пол = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 5, Сч, 5).Значение) = ТИП("Дата") Тогда
					ДатаПриема = ТабДок.Область(Сч, 5, Сч, 5).Значение;
				Иначе
					ДатаПриема = ПолучитьДату(ТабДок.Область(Сч, 5, Сч, 5).Значение);
				КонецЕсли;
			Иначе
				ДатаПриема = ПолучитьДату(ТабДок.Область(Сч, 5, Сч, 5).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 6, Сч, 6).СодержитЗначение Тогда
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Значение);
			Иначе
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 7, Сч, 7).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 7, Сч, 7).Значение) = ТИП("Число") Тогда
					КодПодразделения = Формат(ТабДок.Область(Сч, 7, Сч, 7).Значение,"ЧГ=");
				Иначе
					КодПодразделения = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Значение);
				КонецЕсли;
			Иначе
				КодПодразделения = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 8, Сч, 8).СодержитЗначение Тогда
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Значение);
			Иначе
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 9, Сч, 9).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 9, Сч, 9).Значение) = ТИП("Число") Тогда
					КодДолжности = Формат(ТабДок.Область(Сч, 9, Сч, 9).Значение,"ЧГ=");
				Иначе
					КодДолжности = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Значение);
				КонецЕсли;
			Иначе
				КодДолжности = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Текст);
			КонецЕсли;
			
			Попытка
				КоличествоСтавок = ?(ЗначениеЗаполнено(СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Значение)),Число(СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Значение)),0);
			Исключение
				КоличествоСтавок = 0;
			КонецПопытки;
			
			Если ТабДок.Область(Сч, 11, Сч, 11).СодержитЗначение Тогда
				НаименованиеРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 11, Сч, 11).Значение);
			Иначе
				НаименованиеРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 11, Сч, 11).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 12, Сч, 12).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 12, Сч, 12).Значение) = ТИП("Число") Тогда
					КодРабочегоМеста = Формат(ТабДок.Область(Сч, 12, Сч, 12).Значение,"ЧГ=");
				Иначе
					КодРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 12, Сч, 12).Значение);
				КонецЕсли;
			Иначе
				КодРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 12, Сч, 12).Текст);
			КонецЕсли;
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если СтрДлина(НаименованиеПодразделения) > 150 Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования подразделения превышает 150 символов.";
				ЕстьОшибкиВСтроке = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НаименованиеПодразделения) Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - не задано наименование подразделения.";
				ЕстьОшибкиВСтроке = Ложь;
			КонецЕсли;
			Если СтрДлина(КодПодразделения) > 20 Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - длина кода подразделения превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(НаименованиеДолжности) > 150 Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования должности превышает 150 символов.";
				ЕстьОшибкиВСтроке = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НаименованиеДолжности) Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - не задано наименование должности.";
				ЕстьОшибкиВСтроке = Ложь;
			КонецЕсли;
			Если СтрДлина(КодДолжности) > 20 Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - длина кода должности превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(НаименованиеРабочегоМеста) > 150 Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования рабочего места превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(КодРабочегоМеста) > 9 Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - длина кода рабочего места превышает 9 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(ТабельныйНомер) > 13 Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - длина табельного номера превышает 13 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(ФИО) > 100 Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - длина ФИО превышает 100 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ФИО) Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - не задано ФИО.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(КодСинхронизации) > 14 Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " - длина кода физического лица превышает 14 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 							= Объект.ТаблицаЗанятыхРабочихМест.Добавить();
			НоваяСтрока.ТабельныйНомер 				= ТабельныйНомер;
			НоваяСтрока.ФИО 						= ФИО;
			НоваяСтрока.КодСинхронизации 			= КодСинхронизации;
			НоваяСтрока.Пол 						= ОпределитьПолСотрудника(Пол);
			НоваяСтрока.ДатаПриема 					= ДатаПриема;
			НоваяСтрока.НаименованиеПодразделения	= НаименованиеПодразделения;
			НоваяСтрока.КодПодразделения			= КодПодразделения;
			НоваяСтрока.НаименованиеДолжности 		= НаименованиеДолжности;
			НоваяСтрока.КодДолжности				= КодДолжности;
			НоваяСтрока.Количество 					= КоличествоСтавок;
			НоваяСтрока.НаименованиеРабочегоМеста 	= НаименованиеРабочегоМеста;
			НоваяСтрока.КодРабочегоМеста 			= КодРабочегоМеста;			
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПрочитатьФайлЗанятыхРабочихМест(Команда)
	
	ЗанятыеРабочиеМестаПротокол = "*****Чтение файла загрузки *****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Не выбрана организация!";
		ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Не выбран файл загрузки!";
		ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;		
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлЗанятыхРабочихМестНаСервере(ВременноеХранилище);
	
	ПроверитьДублиВФайлеЗанятыхРабочихМест();
	
	Если ЗанятыеРабочиеМестаЕстьДубли Тогда
		ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "В файле загрузки существуют дубли! Загрузка не доступна.";
		Элементы.ТаблицаЗанятыхРабочихМестЗагрузитьЗанятыеРабочиеМеста.Доступность = Ложь;
	Иначе
		ПроверитьЗанятыеРабочиеМестаВБазе();
		Если ЗанятыеРабочиеМестаЕстьДубли Тогда
			ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
			Элементы.ТаблицаЗанятыхРабочихМестЗагрузитьЗанятыеРабочиеМеста.Доступность = Ложь;
		Конецесли;
	Конецесли;
	
	ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиВФайлеЗанятыхРабочихМест()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗанятыхРабочихМест.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаЗанятыхРабочихМест.ФИО КАК ФИО,
	|	ТаблицаЗанятыхРабочихМест.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаЗанятыхРабочихМест.КодПодразделения КАК КодПодразделения,
	|	ТаблицаЗанятыхРабочихМест.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаЗанятыхРабочихМест.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ТаблицаЗанятыхРабочихМест.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ТаблицаЗанятыхРабочихМест.КодДолжности КАК КодДолжности,
	|	ТаблицаЗанятыхРабочихМест.Пол КАК Пол,
	|	ТаблицаЗанятыхРабочихМест.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаЗанятыхРабочихМест.ДатаПриема КАК ДатаПриема,
	|	ТаблицаЗанятыхРабочихМест.Количество КАК Количество,
	|	ТаблицаЗанятыхРабочихМест.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаЗанятыхРабочихМест
	|ИЗ
	|	&ТаблицаЗанятыхРабочихМест КАК ТаблицаЗанятыхРабочихМест
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗанятыхРабочихМест.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаЗанятыхРабочихМест.ФИО КАК ФИО,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодРабочегоМеста КАК КодРабочегоМеста,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТаблицаЗанятыхРабочихМест.НомерСтроки) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_ТаблицаЗанятыхРабочихМест КАК ВТ_ТаблицаЗанятыхРабочихМест
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаЗанятыхРабочихМест.ТабельныйНомер,
	|	ВТ_ТаблицаЗанятыхРабочихМест.ФИО,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеПодразделения,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодПодразделения,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеДолжности,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодДолжности,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодРабочегоМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗанятыхРабочихМест.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаЗанятыхРабочихМест.ФИО КАК ФИО,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаЗанятыхРабочихМест.Пол КАК Пол,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаЗанятыхРабочихМест.ДатаПриема КАК ДатаПриема,
	|	ВТ_ТаблицаЗанятыхРабочихМест.Количество КАК Количество,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_ТаблицаЗанятыхРабочихМест КАК ВТ_ТаблицаЗанятыхРабочихМест
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_ТаблицаЗанятыхРабочихМест.ТабельныйНомер = ВТ_АнализДублей.ТабельныйНомер
	|			И ВТ_ТаблицаЗанятыхРабочихМест.ФИО = ВТ_АнализДублей.ФИО
	|			И ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеПодразделения = ВТ_АнализДублей.НаименованиеПодразделения
	|			И ВТ_ТаблицаЗанятыхРабочихМест.КодПодразделения = ВТ_АнализДублей.КодПодразделения
	|			И ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеДолжности = ВТ_АнализДублей.НаименованиеДолжности
	|			И ВТ_ТаблицаЗанятыхРабочихМест.КодДолжности = ВТ_АнализДублей.КодДолжности
	|			И ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеРабочегоМеста = ВТ_АнализДублей.НаименованиеРабочегоМеста
	|			И ВТ_ТаблицаЗанятыхРабочихМест.КодРабочегоМеста = ВТ_АнализДублей.КодРабочегоМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_АнализДублей.ФИО КАК ФИО,
	|	ВТ_АнализДублей.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_АнализДублей.КодПодразделения КАК КодПодразделения,
	|	ВТ_АнализДублей.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_АнализДублей.КодДолжности КАК КодДолжности,
	|	ВТ_АнализДублей.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_АнализДублей.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаЗанятыхРабочихМест", Объект.ТаблицаЗанятыхРабочихМест.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[3].Выгрузить();
	
	ЗанятыеРабочиеМестаЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаЗанятыхРабочихМест.Загрузить(Результат[2].Выгрузить());
	
КонецПроцедуры	
	
&НаСервере
Процедура ПроверитьЗанятыеРабочиеМестаВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗанятыхРабочихМест.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаЗанятыхРабочихМест.ФИО КАК ФИО,
	|	ТаблицаЗанятыхРабочихМест.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаЗанятыхРабочихМест.КодПодразделения КАК КодПодразделения,
	|	ТаблицаЗанятыхРабочихМест.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаЗанятыхРабочихМест.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ТаблицаЗанятыхРабочихМест.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ТаблицаЗанятыхРабочихМест.КодДолжности КАК КодДолжности,
	|	ТаблицаЗанятыхРабочихМест.Пол КАК Пол,
	|	ТаблицаЗанятыхРабочихМест.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаЗанятыхРабочихМест.ДатаПриема КАК ДатаПриема,
	|	ТаблицаЗанятыхРабочихМест.КоличествоДублей КАК КоличествоДублей,
	|	ТаблицаЗанятыхРабочихМест.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаЗанятыхРабочихМест
	|ИЗ
	|	&ТаблицаЗанятыхРабочихМест КАК ТаблицаЗанятыхРабочихМест
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ТабельныйНомер КАК ТабельныйНомер,
	|	Сотрудники.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.КодСинхронизации КАК КодСинхронизации,
	|	Подразделения.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Подразделение
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолжностиИПрофессии.Ссылка КАК Должность,
	|	ДолжностиИПрофессии.Наименование КАК Наименование,
	|	ДолжностиИПрофессии.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_Должности
	|ИЗ
	|	Справочник.ДолжностиИПрофессии КАК ДолжностиИПрофессии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМестаАСТБ.Ссылка КАК РабочееМесто,
	|	РабочиеМестаАСТБ.Наименование КАК Наименование,
	|	РабочиеМестаАСТБ.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_РабочиеМеста
	|ИЗ
	|	Справочник.РабочиеМестаАСТБ КАК РабочиеМестаАСТБ
	|ГДЕ
	|	РабочиеМестаАСТБ.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник,
	|	СУММА(ЗанятыеРабочиеМестаОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ ВТ_ЗанятыеРабочиеМеста
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(&ДатаАнализа, Организация = &Организация) КАК ЗанятыеРабочиеМестаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗанятыеРабочиеМестаОстатки.Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность,
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗанятыхРабочихМест.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаЗанятыхРабочихМест.ФИО КАК ФИО,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаЗанятыхРабочихМест.Пол КАК Пол,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаЗанятыхРабочихМест.ДатаПриема КАК ДатаПриема,
	|	ВТ_ТаблицаЗанятыхРабочихМест.Количество КАК Количество,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КоличествоДублей КАК КоличествоДублей,
	|	ЕСТЬNULL(ВТ_Сотрудники.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	ЕСТЬNULL(ВТ_Подразделение.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(ВТ_Должности.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)) КАК Должность,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРабочиеМеста
	|			ТОГДА ЕСТЬNULL(ВТ_РабочиеМеста.РабочееМесто, ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка)
	|	КОНЕЦ КАК РабочееМесто
	|ПОМЕСТИТЬ ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы
	|ИЗ
	|	ВТ_ТаблицаЗанятыхРабочихМест КАК ВТ_ТаблицаЗанятыхРабочихМест
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ПО ВТ_ТаблицаЗанятыхРабочихМест.ТабельныйНомер = ВТ_Сотрудники.ТабельныйНомер
	|			И ВТ_ТаблицаЗанятыхРабочихМест.ФИО = ВТ_Сотрудники.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделение КАК ВТ_Подразделение
	|		ПО ВТ_ТаблицаЗанятыхРабочихМест.КодПодразделения = ВТ_Подразделение.КодСинхронизации
	|			И ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеПодразделения = ВТ_Подразделение.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Должности КАК ВТ_Должности
	|		ПО ВТ_ТаблицаЗанятыхРабочихМест.КодДолжности = ВТ_Должности.КодСинхронизации
	|			И ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеДолжности = ВТ_Должности.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РабочиеМеста КАК ВТ_РабочиеМеста
	|		ПО ВТ_ТаблицаЗанятыхРабочихМест.КодРабочегоМеста = ВТ_РабочиеМеста.КодСинхронизации
	|			И ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеРабочегоМеста = ВТ_РабочиеМеста.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.ФИО КАК ФИО,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.Пол КАК Пол,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.ДатаПриема КАК ДатаПриема,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.Должность КАК Должность,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.РабочееМесто КАК РабочееМесто,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.Количество КАК Количество,
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.КоличествоДублей КАК КоличествоДублей,
	|	НЕ ВТ_ЗанятыеРабочиеМеста.КоличествоОстаток ЕСТЬ NULL КАК Существует
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы КАК ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗанятыеРабочиеМеста КАК ВТ_ЗанятыеРабочиеМеста
	|		ПО ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.Сотрудник = ВТ_ЗанятыеРабочиеМеста.Сотрудник
	|			И ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.Подразделение = ВТ_ЗанятыеРабочиеМеста.Подразделение
	|			И ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.Должность = ВТ_ЗанятыеРабочиеМеста.Должность
	|			И ВТ_ТаблицаЗанятыхРабочихМест_ДанныеБазы.РабочееМесто = ВТ_ЗанятыеРабочиеМеста.РабочееМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Сотрудник) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейСотрудников
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.ТабельныйНомер,
	|	ВТ_Результат.ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Подразделение) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейПодразделений
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Должность) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейДолжностей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_Результат.КодРабочегоМеста КАК КодРабочегоМеста,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.РабочееМесто) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейРабочихМест
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеРабочегоМеста,
	|	ВТ_Результат.КодРабочегоМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	ВТ_Результат.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_Результат.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_Результат.Пол КАК Пол,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.ДатаПриема КАК ДатаПриема,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.Должность КАК Должность,
	|	ВТ_Результат.РабочееМесто КАК РабочееМесто,
	|	ВТ_Результат.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейСотрудников.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейСотрудников.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейПодразделений.КоличествоДублей
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_АнализДублейДолжностей.КоличествоДублей > 1
	|							ТОГДА ВТ_АнализДублейДолжностей.КоличествоДублей
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_АнализДублейРабочихМест.КоличествоДублей > 1
	|									ТОГДА ВТ_АнализДублейРабочихМест.КоличествоДублей
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей,
	|	ВТ_Результат.Существует КАК Существует
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейСотрудников КАК ВТ_АнализДублейСотрудников
	|		ПО ВТ_Результат.ТабельныйНомер = ВТ_АнализДублейСотрудников.ТабельныйНомер
	|			И ВТ_Результат.ФИО = ВТ_АнализДублейСотрудников.ФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|		ПО ВТ_Результат.НаименованиеПодразделения = ВТ_АнализДублейПодразделений.НаименованиеПодразделения
	|			И ВТ_Результат.КодПодразделения = ВТ_АнализДублейПодразделений.КодПодразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|		ПО ВТ_Результат.НаименованиеДолжности = ВТ_АнализДублейДолжностей.НаименованиеДолжности
	|			И ВТ_Результат.КодДолжности = ВТ_АнализДублейДолжностей.КодДолжности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейРабочихМест КАК ВТ_АнализДублейРабочихМест
	|		ПО ВТ_Результат.НаименованиеРабочегоМеста = ВТ_АнализДублейРабочихМест.НаименованиеРабочегоМеста
	|			И ВТ_Результат.КодРабочегоМеста = ВТ_АнализДублейРабочихМест.КодРабочегоМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейСотрудников.ФИО КАК Наименование,
	|	ВТ_АнализДублейСотрудников.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейСотрудников КАК ВТ_АнализДублейСотрудников
	|ГДЕ
	|	ВТ_АнализДублейСотрудников.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейПодразделений.НаименованиеПодразделения,
	|	ВТ_АнализДублейПодразделений.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|ГДЕ
	|	ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейДолжностей.НаименованиеДолжности,
	|	ВТ_АнализДублейДолжностей.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|ГДЕ
	|	ВТ_АнализДублейДолжностей.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейРабочихМест.НаименованиеРабочегоМеста,
	|	ВТ_АнализДублейРабочихМест.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейРабочихМест КАК ВТ_АнализДублейРабочихМест
	|ГДЕ
	|	ВТ_АнализДублейРабочихМест.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаЗанятыхРабочихМест",	Объект.ТаблицаЗанятыхРабочихМест.Выгрузить());
	Запрос.УстановитьПараметр("ДатаАнализа",				ТекущаяДата());
	Запрос.УстановитьПараметр("Организация",				Объект.Организация);
	Запрос.УстановитьПараметр("ИспользоватьРабочиеМеста",	Объект.Организация.ИспользоватьРабочиеМеста);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[13].Выгрузить();
	
	ЗанятыеРабочиеМестаЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаЗанятыхРабочихМест.Загрузить(Результат[12].Выгрузить());
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьЗанятыеРабочиеМестаНаСервере()
	
	ЗанятыеРабочиеМестаПротокол = "*****Загрузка занятых рабочих мест*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗанятыхРабочихМест.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаЗанятыхРабочихМест.ФИО КАК ФИО,
	|	ТаблицаЗанятыхРабочихМест.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаЗанятыхРабочихМест.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ТаблицаЗанятыхРабочихМест.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ТаблицаЗанятыхРабочихМест.КодПодразделения КАК КодПодразделения,
	|	ТаблицаЗанятыхРабочихМест.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаЗанятыхРабочихМест.КодДолжности КАК КодДолжности,
	|	ТаблицаЗанятыхРабочихМест.Пол КАК Пол,
	|	ТаблицаЗанятыхРабочихМест.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаЗанятыхРабочихМест.ДатаПриема КАК ДатаПриема,
	|	ТаблицаЗанятыхРабочихМест.Количество КАК Количество,
	|	ТаблицаЗанятыхРабочихМест.Сотрудник КАК Сотрудник,
	|	ТаблицаЗанятыхРабочихМест.Подразделение КАК Подразделение,
	|	ТаблицаЗанятыхРабочихМест.Должность КАК Должность,
	|	ТаблицаЗанятыхРабочихМест.РабочееМесто КАК РабочееМесто,
	|	ТаблицаЗанятыхРабочихМест.Существует КАК Существует
	|ПОМЕСТИТЬ ВТ_ТаблицаЗанятыхРабочихМест
	|ИЗ
	|	&ТаблицаЗанятыхРабочихМест КАК ТаблицаЗанятыхРабочихМест
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗанятыхРабочихМест.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаЗанятыхРабочихМест.ФИО КАК ФИО,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаЗанятыхРабочихМест.Пол КАК Пол,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаЗанятыхРабочихМест.ДатаПриема КАК ДатаПриема,
	|	ВТ_ТаблицаЗанятыхРабочихМест.Количество КАК Количество,
	|	ВТ_ТаблицаЗанятыхРабочихМест.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаЗанятыхРабочихМест.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаЗанятыхРабочихМест.Должность КАК Должность,
	|	ВТ_ТаблицаЗанятыхРабочихМест.Существует КАК Существует,
	|	ВТ_ТаблицаЗанятыхРабочихМест.РабочееМесто КАК РабочееМесто,
	|	ВТ_ТаблицаЗанятыхРабочихМест.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаЗанятыхРабочихМест.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста
	|ИЗ
	|	ВТ_ТаблицаЗанятыхРабочихМест КАК ВТ_ТаблицаЗанятыхРабочихМест
	|ГДЕ
	|	НЕ ВТ_ТаблицаЗанятыхРабочихМест.Существует
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПриема,
	|	ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаЗанятыхРабочихМест.ДатаПриема КАК ДатаПриема
	|ИЗ
	|	ВТ_ТаблицаЗанятыхРабочихМест КАК ВТ_ТаблицаЗанятыхРабочихМест
	|ГДЕ
	|	НЕ ВТ_ТаблицаЗанятыхРабочихМест.Существует
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПриема";
	
	Запрос.УстановитьПараметр("ТаблицаЗанятыхРабочихМест",	Объект.ТаблицаЗанятыхРабочихМест.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗанятыхРабочихМест 	= Результат[1].Выгрузить();
	ТаблицаДатаПриема 			= Результат[2].Выгрузить();
	
	Если ТаблицаЗанятыхРабочихМест.Количество() = 0 Тогда
		
		ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Информация для загрузки занятых рабочих мест не найдена.";
		
	Иначе
		
		Для Каждого СтрокаТаблицыДатПриема Из ТаблицаДатаПриема Цикл
			
			НайденныеСтроки = ТаблицаЗанятыхРабочихМест.НайтиСтроки(НОВЫЙ Структура("ДатаПриема",СтрокаТаблицыДатПриема.ДатаПриема));
			
			Если СтрокаТаблицыДатПриема.ДатаПриема > ТекущаяДата() Тогда
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Дата приема " + Формат(СтрокаТаблицыДатПриема.ДатаПриема,"ДФ=dd.MM.yyyy") + " больше текущей даты. Документ не загружен.";
				Продолжить;
			КонецЕсли;	
			
			НовыйДокумент = Документы.ПриемНаРаботу.СоздатьДокумент();
			НовыйДокумент.Дата 					= НачалоДня(СтрокаТаблицыДатПриема.ДатаПриема);
			НовыйДокумент.Комментарий 			= "Загружен автоматически";
			НовыйДокумент.Организация 			= Объект.Организация;
			НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
			НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
			НовыйДокумент.УстановитьНовыйНомер();
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				МестоРаботыОпределено = Истина;
				
				Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Количество) Тогда
					ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Не указано количество занимаемых ставок";
					МестоРаботыОпределено = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Подразделение) Тогда
					ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Не найдено подразделение: " + НайденнаяСтрока.НаименованиеПодразделения;
					МестоРаботыОпределено = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Должность) Тогда
					ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Не найдена должность: " + НайденнаяСтрока.НаименованиеДолжности;
					МестоРаботыОпределено = Ложь;
				КонецЕсли;
				
				Если Объект.Организация.ИспользоватьРабочиеМеста И НЕ ЗначениеЗаполнено(НайденнаяСтрока.РабочееМесто) Тогда
					ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Не найдено рабочее место: " + НайденнаяСтрока.НаименованиеРабочегоМеста;
					МестоРаботыОпределено = Ложь;
				КонецЕсли;
				
				//определяем (создаем) сотрудника
				Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Сотрудник) Тогда
					НайденнаяСтрока.Сотрудник = ПолучитьСотрудника(НайденнаяСтрока);
				КонецЕсли;
				
				Если МестоРаботыОпределено Тогда
					
					НоваяСтрока 					= НовыйДокумент.Работники.Добавить();
					НоваяСтрока.Сотрудник 			= НайденнаяСтрока.Сотрудник;
					НоваяСтрока.Подразделение 		= НайденнаяСтрока.Подразделение;
					НоваяСтрока.Должность 			= НайденнаяСтрока.Должность;
					НоваяСтрока.РабочееМесто 		= НайденнаяСтрока.РабочееМесто;
					НоваяСтрока.ЗанимаемыхСтавок 	= НайденнаяСтрока.Количество;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ НовыйДокумент.Работники.Количество() = 0 Тогда
				
				Попытка
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
					ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Сформирован документ: " + НовыйДокумент.Ссылка;
				Исключение
					ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Документ приема на работу не сформирован." + Символы.ПС + ОписаниеОшибки();
				КонецПопытки;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьЗанятыеРабочиеМестаВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "*****Загрузка занятых рабочих мест завершена*****";
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьЗанятыеРабочиеМеста(Команда)
	
	ЗагрузитьЗанятыеРабочиеМестаНаСервере();
	
	Элементы.СтраницаЗанятыеРабочиеМеста.ПодчиненныеЭлементы.ТаблицаЗанятыхРабочихМест.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаЗанятыхРабочихМестЗагрузитьЗанятыеРабочиеМеста.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСотрудника(СтрокаТаблицыЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Владелец
	|	И Сотрудники.Наименование = &Наименование
	|	И Сотрудники.ТабельныйНомер = &ТабельныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование = &Наименование
	|	И ФизическиеЛица.КодСинхронизации = &КодСинхронизации";
	
	Запрос.УстановитьПараметр("Владелец",			Объект.Организация);
	Запрос.УстановитьПараметр("Наименование",		СтрокаТаблицыЗапроса.ФИО);
	Запрос.УстановитьПараметр("ТабельныйНомер",		СтрокаТаблицыЗапроса.ТабельныйНомер);
	Запрос.УстановитьПараметр("КодСинхронизации",	СтрокаТаблицыЗапроса.КодСинхронизации);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаСотрудников 		= Результат[0].Выгрузить();
	ТаблицаФизическихЛиц 	= Результат[1].Выгрузить();
	
	Если ТаблицаФизическихЛиц.Количество() = 0 Тогда
		
		НовоеФизЛицо 					= Справочники.ФизическиеЛица.СоздатьЭлемент();
		НовоеФизЛицо.КодСинхронизации 	= СтрокаТаблицыЗапроса.КодСинхронизации;
		НовоеФизЛицо.Наименование 		= СтрокаТаблицыЗапроса.ФИО;
		НовоеФизЛицо.Пол 				= СтрокаТаблицыЗапроса.Пол;
		НовоеФизЛицо.УстановитьНовыйКод();
		
		Попытка
			НовоеФизЛицо.Записать();
			ФизЛицо = НовоеФизЛицо.Ссылка;
			ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Создано физ. лицо: " + СтрокаТаблицыЗапроса.ФИО;
		Исключение
			ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
			ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Не удалось создать физ. лицо: " + СтрокаТаблицыЗапроса.ФИО + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			
			//запись в регистр	
			МассивФИО = ФизическиеЛицаПереопределяемый.ПолучитьМассивФИО(ФизЛицо.Наименование);	
			ФизическиеЛицаПереопределяемый.ЗаписатьФИОФизЛиц(МассивФИО,ФизЛицо);
			
		КонецЕсли;	
		
	Иначе
		
		ФизЛицо = ТаблицаФизическихЛиц[0].ФизическоеЛицо;
		
	КонецЕсли;	
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			
			НовыйСотрудник 					= Справочники.Сотрудники.СоздатьЭлемент();
			НовыйСотрудник.Владелец 		= Объект.Организация;
			НовыйСотрудник.Наименование 	= СтрокаТаблицыЗапроса.ФИО;
			НовыйСотрудник.ТабельныйНомер 	= СтрокаТаблицыЗапроса.ТабельныйНомер;
			НовыйСотрудник.ФизическоеЛицо 	= ФизЛицо;
			НовыйСотрудник.УстановитьНовыйКод();
			
			Попытка
				НовыйСотрудник.Записать();
				Сотрудник = НовыйСотрудник.Ссылка;
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Создан сотрудник: " + СтрокаТаблицыЗапроса.ФИО;
			Исключение
				Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
				ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Не удалось создать сотрудника: " + СтрокаТаблицыЗапроса.ФИО + Символы.ПС + ОписаниеОшибки();
			КонецПопытки;
			
		Иначе
			
			ЗанятыеРабочиеМестаПротокол = ЗанятыеРабочиеМестаПротокол + Символы.ПС + "Не удалось создать сотрудника: " + СтрокаТаблицыЗапроса.ФИО + ", т.к. не создано физ. лицо";
			Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
			
		КонецЕсли;
		
	Иначе
		
		Сотрудник = ТаблицаСотрудников[0].Сотрудник;
		
	КонецЕсли;
	
	Возврат Сотрудник;
	
КонецФункции

&НаСервере
Функция ПолучитьДату(ЗначениеДаты)
	
	Если ТипЗнч(ЗначениеДаты) = Тип("Число") Тогда
		
		ИсходнаяДата = Дата('19000101');
		
		Если ЗначениеДаты > 60 Тогда
			ЧислоСекунд = (ЗначениеДаты - 2) * 60 * 60 * 24;
			Возврат ИсходнаяДата + ЧислоСекунд;
		Иначе
			ЧислоСекунд = (ЗначениеДаты - 1) * 60 * 60 * 24;
			Возврат ИсходнаяДата + ЧислоСекунд;
		КонецЕсли;
		
	Иначе
		
		Возврат Дата(Прав(СокрЛП(ЗначениеДаты),4),Сред(СокрЛП(ЗначениеДаты),4,2),Лев(СокрЛП(ЗначениеДаты),2));
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПрочитатьФайлМВЗНаСервере(Адрес)
	
	Объект.ТаблицаМВЗ.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 9 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиМВЗ(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			МВЗПротокол = МВЗПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				НаименованиеМВЗ = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
			Иначе
				НаименованиеМВЗ = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 2, Сч, 2).Значение) = ТИП("Число") Тогда
					КодСинхронизации = Формат(ТабДок.Область(Сч, 2, Сч, 2).Значение,"ЧГ=");
				Иначе
					КодСинхронизации = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
				КонецЕсли;
			Иначе
				КодСинхронизации = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 3, Сч, 3).Значение) = ТИП("Число") Тогда
					ТабельныйНомер = Формат(ТабДок.Область(Сч, 3, Сч, 3).Значение,"ЧГ=");
				Иначе
					ТабельныйНомер = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение);
				КонецЕсли;
			Иначе
				ТабельныйНомер = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				ФИО = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
			Иначе
				ФИО = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение);
			Иначе
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 6, Сч, 6).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 6, Сч, 6).Значение) = ТИП("Число") Тогда
					КодПодразделения = Формат(ТабДок.Область(Сч, 6, Сч, 6).Значение,"ЧГ=");
				Иначе
					КодПодразделения = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Значение);
				КонецЕсли;
			Иначе
				КодПодразделения = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 7, Сч, 7).СодержитЗначение Тогда
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Значение);
			Иначе
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 8, Сч, 8).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 8, Сч, 8).Значение) = ТИП("Число") Тогда
					КодДолжности = Формат(ТабДок.Область(Сч, 8, Сч, 8).Значение,"ЧГ=");
				Иначе
					КодДолжности = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Значение);
				КонецЕсли;
			Иначе
				КодДолжности = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Текст);
			КонецЕсли;
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если СтрДлина(НаименованиеМВЗ) > 150 Тогда
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования МВЗ превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НаименованиеМВЗ) Тогда
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Строка " + Сч + " - не задано наименование МВЗ.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(КодСинхронизации) > 20 Тогда
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Строка " + Сч + " - длина кода синхронизациии МВЗ превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(ТабельныйНомер) > 13 Тогда
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Строка " + Сч + " - длина табельного номера превышает 13 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(ФИО) > 100 Тогда
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Строка " + Сч + " - длина ФИО превышает 100 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(НаименованиеПодразделения) > 150 Тогда
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования подразделения превышает 150 символов.";
				ЕстьОшибкиВСтроке = Ложь;
			КонецЕсли;
			Если СтрДлина(КодПодразделения) > 20 Тогда
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Строка " + Сч + " - длина кода подразделения превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(НаименованиеДолжности) > 150 Тогда
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования должности превышает 150 символов.";
				ЕстьОшибкиВСтроке = Ложь;
			КонецЕсли;
			Если СтрДлина(КодДолжности) > 20 Тогда
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Строка " + Сч + " - длина кода должности превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 							= Объект.ТаблицаМВЗ.Добавить();
			НоваяСтрока.НаименованиеМВЗ				= НаименованиеМВЗ;
			НоваяСтрока.КодСинхронизации			= КодСинхронизации;
			НоваяСтрока.ТабельныйНомер				= ТабельныйНомер;
			НоваяСтрока.ФИО							= ФИО;
			НоваяСтрока.НаименованиеПодразделения	= НаименованиеПодразделения;
			НоваяСтрока.КодПодразделения			= КодПодразделения;
			НоваяСтрока.НаименованиеДолжности		= НаименованиеДолжности;
			НоваяСтрока.КодДолжности				= КодДолжности;
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		МВЗПротокол = МВЗПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлМВЗ(Команда)
	
	МВЗПротокол = "*****Чтение файла загрузки мест возникновения затрат****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		МВЗПротокол = МВЗПротокол + Символы.ПС + "Не выбрана организация!";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		МВЗПротокол = МВЗПротокол + Символы.ПС + "Не выбран файл загрузки!";
		Возврат;
	КонецЕсли;		
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлМВЗНаСервере(ВременноеХранилище);
	
	ПроверитьМВЗВБазе();
	
	Если МВЗЕстьДубли Тогда
		МВЗПротокол = МВЗПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
		Элементы.ТаблицаМВЗЗагрузитьМВЗ.Доступность = Ложь;
	Конецесли;
	
	МВЗПротокол = МВЗПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьМВЗВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаМВЗ.НаименованиеМВЗ КАК НаименованиеМВЗ,
	|	ТаблицаМВЗ.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаМВЗ.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаМВЗ.ФИО КАК ФИО,
	|	ТаблицаМВЗ.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаМВЗ.КодПодразделения КАК КодПодразделения,
	|	ТаблицаМВЗ.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаМВЗ.КодДолжности КАК КодДолжности
	|ПОМЕСТИТЬ ВТ_ТаблицаМВЗ
	|ИЗ
	|	&ТаблицаМВЗ КАК ТаблицаМВЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МВЗ.Наименование КАК Наименование,
	|	МВЗ.КодСинхронизации КАК КодСинхронизации,
	|	МВЗ.Ссылка КАК МВЗ
	|ПОМЕСТИТЬ ВТ_МВЗ
	|ИЗ
	|	Справочник.МВЗ КАК МВЗ
	|ГДЕ
	|	МВЗ.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.ТабельныйНомер КАК ТабельныйНомер
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.КодСинхронизации КАК КодСинхронизации,
	|	Подразделения.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Подразделения
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолжностиИПрофессии.Ссылка КАК Должность,
	|	ДолжностиИПрофессии.КодСинхронизации КАК КодСинхронизации,
	|	ДолжностиИПрофессии.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Должности
	|ИЗ
	|	Справочник.ДолжностиИПрофессии КАК ДолжностиИПрофессии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МВЗПодразделенийСрезПоследних.Подразделение КАК Подразделение,
	|	МВЗПодразделенийСрезПоследних.МВЗ КАК МВЗ
	|ПОМЕСТИТЬ ВТ_МВЗПодразделений
	|ИЗ
	|	РегистрСведений.МВЗПодразделений.СрезПоследних(, Подразделение.Владелец = &Организация) КАК МВЗПодразделенийСрезПоследних
	|ГДЕ
	|	МВЗПодразделенийСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МВЗСотрудников.Сотрудник КАК Сотрудник,
	|	МВЗСотрудников.МВЗ КАК МВЗ
	|ПОМЕСТИТЬ ВТ_МВЗСотрудников
	|ИЗ
	|	РегистрСведений.МВЗСотрудников КАК МВЗСотрудников
	|ГДЕ
	|	МВЗСотрудников.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МВЗДолжностейСрезПоследних.Должность КАК Должность,
	|	МВЗДолжностейСрезПоследних.МВЗ КАК МВЗ
	|ПОМЕСТИТЬ ВТ_МВЗДолжностей
	|ИЗ
	|	РегистрСведений.МВЗДолжностей.СрезПоследних КАК МВЗДолжностейСрезПоследних
	|ГДЕ
	|	МВЗДолжностейСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаМВЗ.НаименованиеМВЗ КАК НаименованиеМВЗ,
	|	ВТ_ТаблицаМВЗ.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаМВЗ.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаМВЗ.ФИО КАК ФИО,
	|	ВТ_ТаблицаМВЗ.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаМВЗ.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаМВЗ.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаМВЗ.КодДолжности КАК КодДолжности,
	|	ЕСТЬNULL(ВТ_МВЗ.МВЗ, ЗНАЧЕНИЕ(Справочник.МВЗ.ПустаяСсылка)) КАК МВЗ,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаМВЗ.ФИО = """"
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ВТ_Сотрудники.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	|	КОНЕЦ КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаМВЗ.НаименованиеПодразделения = """"
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ВТ_Подразделения.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаМВЗ.НаименованиеДолжности = """"
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ВТ_Должности.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка))
	|	КОНЕЦ КАК Должность
	|ПОМЕСТИТЬ ВТ_СоСправочниками
	|ИЗ
	|	ВТ_ТаблицаМВЗ КАК ВТ_ТаблицаМВЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МВЗ КАК ВТ_МВЗ
	|		ПО ВТ_ТаблицаМВЗ.НаименованиеМВЗ = ВТ_МВЗ.Наименование
	|			И ВТ_ТаблицаМВЗ.КодСинхронизации = ВТ_МВЗ.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ПО ВТ_ТаблицаМВЗ.ТабельныйНомер = ВТ_Сотрудники.ТабельныйНомер
	|			И ВТ_ТаблицаМВЗ.ФИО = ВТ_Сотрудники.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения
	|		ПО ВТ_ТаблицаМВЗ.КодПодразделения = ВТ_Подразделения.КодСинхронизации
	|			И ВТ_ТаблицаМВЗ.НаименованиеПодразделения = ВТ_Подразделения.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Должности КАК ВТ_Должности
	|		ПО ВТ_ТаблицаМВЗ.КодДолжности = ВТ_Должности.КодСинхронизации
	|			И ВТ_ТаблицаМВЗ.НаименованиеДолжности = ВТ_Должности.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоСправочниками.НаименованиеМВЗ КАК НаименованиеМВЗ,
	|	ВТ_СоСправочниками.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_СоСправочниками.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_СоСправочниками.ФИО КАК ФИО,
	|	ВТ_СоСправочниками.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_СоСправочниками.КодПодразделения КАК КодПодразделения,
	|	ВТ_СоСправочниками.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_СоСправочниками.КодДолжности КАК КодДолжности,
	|	ВТ_СоСправочниками.МВЗ КАК МВЗ,
	|	ВТ_СоСправочниками.Сотрудник КАК Сотрудник,
	|	ВТ_СоСправочниками.Подразделение КАК Подразделение,
	|	ВТ_СоСправочниками.Должность КАК Должность,
	|	ВЫБОР
	|		КОГДА ВТ_СоСправочниками.МВЗ = ЗНАЧЕНИЕ(Справочник.МВЗ.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_СоСправочниками.ФИО = """"
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_СоСправочниками.НаименованиеПодразделения = """"
	|								ТОГДА ВЫБОР
	|										КОГДА ВТ_СоСправочниками.НаименованиеДолжности = """"
	|											ТОГДА ИСТИНА
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ВТ_МВЗДолжностей.Должность ЕСТЬ NULL
	|													ТОГДА ЛОЖЬ
	|												ИНАЧЕ ИСТИНА
	|											КОНЕЦ
	|									КОНЕЦ
	|							ИНАЧЕ ВЫБОР
	|									КОГДА ВТ_МВЗПодразделений.Подразделение ЕСТЬ NULL
	|										ТОГДА ЛОЖЬ
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_МВЗСотрудников.Сотрудник ЕСТЬ NULL
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_СоСправочниками.НаименованиеПодразделения = """"
	|									ТОГДА ВЫБОР
	|											КОГДА ВТ_СоСправочниками.НаименованиеДолжности = """"
	|												ТОГДА ИСТИНА
	|											ИНАЧЕ ВЫБОР
	|													КОГДА ВТ_МВЗДолжностей.Должность ЕСТЬ NULL
	|														ТОГДА ЛОЖЬ
	|													ИНАЧЕ ИСТИНА
	|												КОНЕЦ
	|										КОНЕЦ
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ВТ_МВЗПодразделений.Подразделение ЕСТЬ NULL
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ИСТИНА
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Существует
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_СоСправочниками КАК ВТ_СоСправочниками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МВЗСотрудников КАК ВТ_МВЗСотрудников
	|		ПО ВТ_СоСправочниками.Сотрудник = ВТ_МВЗСотрудников.Сотрудник
	|			И ВТ_СоСправочниками.МВЗ = ВТ_МВЗСотрудников.МВЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МВЗПодразделений КАК ВТ_МВЗПодразделений
	|		ПО ВТ_СоСправочниками.Подразделение = ВТ_МВЗПодразделений.Подразделение
	|			И ВТ_СоСправочниками.МВЗ = ВТ_МВЗПодразделений.МВЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МВЗДолжностей КАК ВТ_МВЗДолжностей
	|		ПО ВТ_СоСправочниками.Должность = ВТ_МВЗДолжностей.Должность
	|			И ВТ_СоСправочниками.МВЗ = ВТ_МВЗДолжностей.МВЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеМВЗ КАК НаименованиеМВЗ,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.МВЗ) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейМВЗ
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеМВЗ,
	|	ВТ_Результат.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Сотрудник) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейСотрудников
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.ТабельныйНомер,
	|	ВТ_Результат.ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Подразделение) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейПодразделений
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Должность) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейДолжностей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.КодСинхронизации) КАК КоличествоМВЗ
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.ТабельныйНомер,
	|	ВТ_Результат.ФИО,
	|	ВТ_Результат.НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.КодСинхронизации) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеМВЗ КАК НаименованиеМВЗ,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	ВТ_Результат.МВЗ КАК МВЗ,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.Должность КАК Должность,
	|	ВТ_Результат.Существует КАК Существует,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейМВЗ.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейМВЗ.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейСотрудников.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейСотрудников.КоличествоДублей
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|							ТОГДА ВТ_АнализДублейПодразделений.КоличествоДублей
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_АнализДублейДолжностей.КоличествоДублей > 1
	|									ТОГДА ВТ_АнализДублейДолжностей.КоличествоДублей
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейМВЗ КАК ВТ_АнализДублейМВЗ
	|		ПО ВТ_Результат.НаименованиеМВЗ = ВТ_АнализДублейМВЗ.НаименованиеМВЗ
	|			И ВТ_Результат.КодСинхронизации = ВТ_АнализДублейМВЗ.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейСотрудников КАК ВТ_АнализДублейСотрудников
	|		ПО ВТ_Результат.ТабельныйНомер = ВТ_АнализДублейСотрудников.ТабельныйНомер
	|			И ВТ_Результат.ФИО = ВТ_АнализДублейСотрудников.ФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|		ПО ВТ_Результат.НаименованиеПодразделения = ВТ_АнализДублейПодразделений.НаименованиеПодразделения
	|			И ВТ_Результат.КодПодразделения = ВТ_АнализДублейПодразделений.КодПодразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|		ПО ВТ_Результат.НаименованиеДолжности = ВТ_АнализДублейДолжностей.НаименованиеДолжности
	|			И ВТ_Результат.КодДолжности = ВТ_АнализДублейДолжностей.КодДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейМВЗ.НаименованиеМВЗ КАК Наименование,
	|	ВТ_АнализДублейМВЗ.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейМВЗ КАК ВТ_АнализДублейМВЗ
	|ГДЕ
	|	ВТ_АнализДублейМВЗ.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейСотрудников.ФИО,
	|	ВТ_АнализДублейСотрудников.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейСотрудников КАК ВТ_АнализДублейСотрудников
	|ГДЕ
	|	ВТ_АнализДублейСотрудников.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейПодразделений.НаименованиеПодразделения,
	|	ВТ_АнализДублейПодразделений.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|ГДЕ
	|	ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейДолжностей.НаименованиеДолжности,
	|	ВТ_АнализДублейДолжностей.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|ГДЕ
	|	ВТ_АнализДублейДолжностей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаМВЗ",	Объект.ТаблицаМВЗ.Выгрузить());
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРазличныхМВЗ = Результат[14].Выгрузить();
	
	Если НЕ ТаблицаРазличныхМВЗ.Количество() = 0 Тогда
		Если МВЗПротокол = "" Тогда
			МВЗПротокол = "Существует несколько мест возникновения затрат для одних и тех же получателей. Проверьте данные файла!";
		Иначе
			МВЗПротокол = МВЗПротокол + Символы.ПС + "Существует несколько мест возникновения затрат для одних и тех же получателей. Проверьте данные файла!";
		КонецЕсли;
	КонецЕсли;	
	
	ТаблицаДублей = Результат[16].Выгрузить();
	
	МВЗЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
		
	Объект.ТаблицаМВЗ.Загрузить(Результат[15].Выгрузить());
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьМВЗ(Команда)
	
	ЗагрузитьМВЗНаСервере();
	
	Элементы.СтраницаМВЗ.ПодчиненныеЭлементы.Группа3.ПодчиненныеЭлементы.Группа2.ПодчиненныеЭлементы.ТаблицаМВЗЗагрузитьМВЗ.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьМВЗНаСервере()
	
	МВЗПротоколПротокол = "*****Загрузка мест возникновения затрат*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаМВЗ.НаименованиеМВЗ КАК НаименованиеМВЗ,
	|	ТаблицаМВЗ.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаМВЗ.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаМВЗ.ФИО КАК ФИО,
	|	ТаблицаМВЗ.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаМВЗ.КодПодразделения КАК КодПодразделения,
	|	ТаблицаМВЗ.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаМВЗ.КодДолжности КАК КодДолжности,
	|	ТаблицаМВЗ.МВЗ КАК МВЗ,
	|	ТаблицаМВЗ.Сотрудник КАК Сотрудник,
	|	ТаблицаМВЗ.Подразделение КАК Подразделение,
	|	ТаблицаМВЗ.Должность КАК Должность,
	|	ТаблицаМВЗ.Существует КАК Существует
	|ПОМЕСТИТЬ ВТ_ТаблицаМВЗ
	|ИЗ
	|	&ТаблицаМВЗ КАК ТаблицаМВЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаМВЗ.НаименованиеМВЗ КАК НаименованиеМВЗ,
	|	ВТ_ТаблицаМВЗ.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаМВЗ.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаМВЗ.ФИО КАК ФИО,
	|	ВТ_ТаблицаМВЗ.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаМВЗ.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаМВЗ.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаМВЗ.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаМВЗ.МВЗ КАК МВЗ,
	|	ВТ_ТаблицаМВЗ.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаМВЗ.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаМВЗ.Должность КАК Должность,
	|	ВТ_ТаблицаМВЗ.Существует КАК Существует
	|ИЗ
	|	ВТ_ТаблицаМВЗ КАК ВТ_ТаблицаМВЗ
	|ГДЕ
	|	НЕ ВТ_ТаблицаМВЗ.Существует";
	
	Запрос.УстановитьПараметр("ТаблицаМВЗ",	Объект.ТаблицаМВЗ.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		МВЗПротокол = МВЗПротокол + Символы.ПС + "Информация для загрузки мест возникновения затрат не найдена.";
		
	Иначе
		
		ТаблицаЗапроса = Результат.Выгрузить();
		
		Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.МВЗ) Тогда
				
				СтрокаТаблицыЗапроса.МВЗ = ПолучитьМВЗ(СтрокаТаблицыЗапроса.НаименованиеМВЗ, СтрокаТаблицыЗапроса.КодСинхронизации);
				
			Иначе
				
				СтрокаТаблицыЗапроса.МВЗ = СтрокаТаблицыЗапроса.МВЗ;
				
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НаименованиеПодразделения) И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Подразделение) Тогда
				
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Не найдено подразделение: " + СтрокаТаблицыЗапроса.НаименованиеПодразделения;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НаименованиеДолжности) И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Должность) Тогда
				
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Не найдена должность: " + СтрокаТаблицыЗапроса.НаименованиеДолжности;
				
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ТабельныйНомер) и ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ФИО)) И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Сотрудник) Тогда
				
				МВЗПротокол = МВЗПротокол + Символы.ПС + "Не найден сотрудник: " + СтрокаТаблицыЗапроса.ФИО;
				
			Иначе
				
				Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Сотрудник) Тогда
					
					НаборЗаписей = РегистрыСведений.МВЗСотрудников.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
					НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТаблицыЗапроса.Сотрудник);
					//+++АСТБ_Горюшин_Алексей_59687
					//было
					//НаборЗаписей.Прочитать();
					//---АСТБ_Горюшин_Алексей_59687
					
					НоваяЗапись 			= НаборЗаписей.Добавить();
					НоваяЗапись.Организация = Объект.Организация;
					НоваяЗапись.Сотрудник 	= СтрокаТаблицыЗапроса.Сотрудник;
					НоваяЗапись.МВЗ			= СтрокаТаблицыЗапроса.МВЗ;
					НаборЗаписей.Записать();
					
					//+++АСТБ_Горюшин_Алексей_59687
					МВЗПротокол = МВЗПротокол + Символы.ПС + "Для сотрудника """ + СтрокаТаблицыЗапроса.Сотрудник + """ сделана запись с МВЗ """ + СтрокаТаблицыЗапроса.МВЗ + """."; 
					//---АСТБ_Горюшин_Алексей_59687
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаМВЗ.НаименованиеМВЗ КАК НаименованиеМВЗ,
	|	ТаблицаМВЗ.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаМВЗ.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаМВЗ.ФИО КАК ФИО,
	|	ТаблицаМВЗ.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаМВЗ.КодПодразделения КАК КодПодразделения,
	|	ТаблицаМВЗ.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаМВЗ.КодДолжности КАК КодДолжности,
	|	ТаблицаМВЗ.МВЗ КАК МВЗ,
	|	ТаблицаМВЗ.Сотрудник КАК Сотрудник,
	|	ТаблицаМВЗ.Подразделение КАК Подразделение,
	|	ТаблицаМВЗ.Должность КАК Должность,
	|	ТаблицаМВЗ.Существует КАК Существует
	|ПОМЕСТИТЬ ВТ_ТаблицаМВЗ
	|ИЗ
	|	&ТаблицаМВЗ КАК ТаблицаМВЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаМВЗ.МВЗ КАК МВЗ,
	|	ВТ_ТаблицаМВЗ.Подразделение КАК Подразделение,
	|	ИСТИНА КАК Использовать
	|ИЗ
	|	ВТ_ТаблицаМВЗ КАК ВТ_ТаблицаМВЗ
	|ГДЕ
	|	НЕ ВТ_ТаблицаМВЗ.Существует
	|	И НЕ ВТ_ТаблицаМВЗ.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаМВЗ.МВЗ КАК МВЗ,
	|	ВТ_ТаблицаМВЗ.Должность КАК Должность,
	|	ИСТИНА КАК Использовать
	|ИЗ
	|	ВТ_ТаблицаМВЗ КАК ВТ_ТаблицаМВЗ
	|ГДЕ
	|	НЕ ВТ_ТаблицаМВЗ.Существует
	|	И НЕ ВТ_ТаблицаМВЗ.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ТаблицаМВЗ",	ТаблицаЗапроса);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДляПодразделений = Результат[1].Выгрузить();
	ТаблицаДляДолжностей 	= Результат[2].Выгрузить();
	
	Если ТаблицаДляПодразделений.Количество() = 0 Тогда
		
		МВЗПротокол = МВЗПротокол + Символы.ПС + "Информация для загрузки мест возникновения затрат подразделений не найдена.";
		
	Иначе
		
		НовыйДокумент = Документы.УстановкаМВЗПодразделений.СоздатьДокумент();
		НовыйДокумент.Дата 					= НачалоДня(МВЗДатаАктуальности);
		НовыйДокумент.Комментарий 			= "Загружен автоматически";
		НовыйДокумент.Организация 			= Объект.Организация;
		НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.УстановитьНовыйНомер();
		НовыйДокумент.МВЗПодразделений.Загрузить(ТаблицаДляПодразделений);
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			МВЗПротокол = МВЗПротокол + Символы.ПС + "Загрузка мест возникновения затрат подразделений выполнена!" + Символы.ПС + "Сформирован документ: " + НовыйДокумент.Ссылка;
		Исключение
			МВЗПротокол = МВЗПротокол + Символы.ПС + "Загрузка мест возникновения затрат подразделений не выполнена!" + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
	
	КонецЕсли;
	
	Если ТаблицаДляДолжностей.Количество() = 0 Тогда
		
		МВЗПротокол = МВЗПротокол + Символы.ПС + "Информация для загрузки мест возникновения затрат должностей не найдена.";
		
	Иначе
		
		НовыйДокумент = Документы.УстановкаМВЗДолжностей.СоздатьДокумент();
		НовыйДокумент.Дата 					= НачалоДня(МВЗДатаАктуальности);
		НовыйДокумент.Комментарий 			= "Загружен автоматически";
		НовыйДокумент.Организация 			= Объект.Организация;
		НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.УстановитьНовыйНомер();
		НовыйДокумент.МВЗДолжностей.Загрузить(ТаблицаДляДолжностей);
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			МВЗПротокол = МВЗПротокол + Символы.ПС + "Загрузка мест возникновения затрат должностей выполнена!" + Символы.ПС + "Сформирован документ: " + НовыйДокумент.Ссылка;
		Исключение
			МВЗПротокол = МВЗПротокол + Символы.ПС + "Загрузка мест возникновения затрат должностей не выполнена!" + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
	
	КонецЕсли;
	
	ПроверитьМВЗВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	МВЗПротокол = МВЗПротокол + Символы.ПС + "*****Загрузка мест возникновения затрат завершена*****";	
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьМВЗ(НаименованиеМВЗ, КодСинхронизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МВЗ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МВЗ КАК МВЗ
	|ГДЕ
	|	МВЗ.Владелец = &Владелец
	|	И МВЗ.Наименование = &Наименование
	|	И МВЗ.КодСинхронизации = &КодСинхронизации";
	
	Запрос.УстановитьПараметр("Владелец",			Объект.Организация);
	Запрос.УстановитьПараметр("Наименование",		НаименованиеМВЗ);
	Запрос.УстановитьПараметр("КодСинхронизации",	КодСинхронизации);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		МВЗОбъект = Справочники.МВЗ.СоздатьЭлемент();
		МВЗОбъект.Владелец 			= Объект.Организация;
		МВЗОбъект.КодСинхронизации 	= КодСинхронизации;
		МВЗОбъект.Наименование 		= НаименованиеМВЗ;
		МВЗОбъект.УстановитьНовыйКод();
		
		Попытка
			МВЗОбъект.Записать();
			МВЗ = МВЗОбъект.Ссылка;
			МВЗПротокол = МВЗПротокол + Символы.ПС + "Создано МВЗ: " + НаименованиеМВЗ;
		Исключение
			МВЗ = Справочники.МВЗ.ПустаяСсылка();
			МВЗПротокол = МВЗПротокол + Символы.ПС + "Не удалось создать МВЗ: " + НаименованиеМВЗ + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		МВЗ = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат МВЗ;
	
КонецФункции	

&НаСервере
Процедура ПрочитатьФайлМестХраненияНаСервере(Адрес)
	
	Объект.ТаблицаМестХраненияСИЗ.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 9 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиМестХранения(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				ЭлементАдреса1 = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
			Иначе
				ЭлементАдреса1 = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				ЭлементАдреса2 = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
			Иначе
				ЭлементАдреса2 = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				ЭлементАдреса3 = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение);
			Иначе
				ЭлементАдреса3 = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				ЭлементАдреса4 = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
			Иначе
				ЭлементАдреса4 = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				ЭлементАдреса5 = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение);
			Иначе
				ЭлементАдреса5 = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 6, Сч, 6).СодержитЗначение Тогда
				ПроизвольныйАдрес = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Значение);
			Иначе
				ПроизвольныйАдрес = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 7, Сч, 7).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 7, Сч, 7).Значение) = ТИП("Число") Тогда
					ТабельныйНомер = Формат(ТабДок.Область(Сч, 7, Сч, 7).Значение,"ЧГ=");
				Иначе
					ТабельныйНомер = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Значение);
				КонецЕсли;
			Иначе
				ТабельныйНомер = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 8, Сч, 8).СодержитЗначение Тогда
				ФИО = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Значение);
			Иначе
				ФИО = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Текст);
			КонецЕсли;
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если ИспользоватьПроизвольныйАдрес Тогда
				
				Если ЗначениеЗаполнено(ПроизвольныйАдрес) Тогда
					Если СтрДлина(ПроизвольныйАдрес) > 35 Тогда
						МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - длина произвольного адреса превышает 35 символов.";
						ЕстьОшибкиВСтроке = Истина;
					КонецЕсли;
				Иначе
					МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - не задано значение произвольного адреса.";
					ЕстьОшибкиВСтроке = Истина;
				КонецЕсли;
				
			Иначе
				
				Если Использовать_ЭлементАдреса1 Тогда
					Если ЗначениеЗаполнено(ЭлементАдреса1) Тогда
						Если СтрДлина(ЭлементАдреса1) > 3 Тогда
							МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - длина первого элемента адреса превышает 3 символа.";
							ЕстьОшибкиВСтроке = Истина;
						КонецЕсли;
					Иначе
						МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - не задан первый элемент адреса. Он заменен на <" + ПредставлениеПустогоЗначения_ЭлементАдреса1 +">.";
						ЭлементАдреса1 = ПредставлениеПустогоЗначения_ЭлементАдреса1;
					КонецЕсли;
				КонецЕсли;
				
				Если Использовать_ЭлементАдреса2 Тогда
					Если ЗначениеЗаполнено(ЭлементАдреса2) Тогда
						Если СтрДлина(ЭлементАдреса2) > 3 Тогда
							МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - длина второго элемента адреса превышает 3 символа.";
							ЕстьОшибкиВСтроке = Истина;
						КонецЕсли;
					Иначе
						МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - не задан второй элемент адреса. Он заменен на <" + ПредставлениеПустогоЗначения_ЭлементАдреса2 +">.";
						ЭлементАдреса2 = ПредставлениеПустогоЗначения_ЭлементАдреса2;
					КонецЕсли;
				КонецЕсли;
				
				Если Использовать_ЭлементАдреса3 Тогда
					Если ЗначениеЗаполнено(ЭлементАдреса3) Тогда
						Если СтрДлина(ЭлементАдреса3) > 3 Тогда
							МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - длина третьего элемента адреса превышает 3 символа.";
							ЕстьОшибкиВСтроке = Истина;
						КонецЕсли;
					Иначе
						МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - не задан первый элемент адреса. Он заменен на <" + ПредставлениеПустогоЗначения_ЭлементАдреса3 +">.";
						ЭлементАдреса3 = ПредставлениеПустогоЗначения_ЭлементАдреса3;
					КонецЕсли;
				КонецЕсли;
				
				Если Использовать_ЭлементАдреса4 Тогда
					Если ЗначениеЗаполнено(ЭлементАдреса4) Тогда
						Если СтрДлина(ЭлементАдреса4) > 3 Тогда
							МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - длина четвертого элемента адреса превышает 3 символа.";
							ЕстьОшибкиВСтроке = Истина;
						КонецЕсли;
					Иначе
						МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - не задан первый элемент адреса. Он заменен на <" + ПредставлениеПустогоЗначения_ЭлементАдреса4 +">.";
						ЭлементАдреса4 = ПредставлениеПустогоЗначения_ЭлементАдреса4;
					КонецЕсли;
				КонецЕсли;
				
				Если Использовать_ЭлементАдреса5 Тогда
					Если ЗначениеЗаполнено(ЭлементАдреса5) Тогда
						Если СтрДлина(ЭлементАдреса5) > 3 Тогда
							МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - длина пятого элемента адреса превышает 3 символа.";
							ЕстьОшибкиВСтроке = Истина;
						КонецЕсли;
					Иначе
						МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - не задан первый элемент адреса. Он заменен на <" + ПредставлениеПустогоЗначения_ЭлементАдреса5 +">.";
						ЭлементАдреса5 = ПредставлениеПустогоЗначения_ЭлементАдреса5;
					КонецЕсли;
				КонецЕсли;
					
			КонецЕсли;	
					
			Если СтрДлина(ТабельныйНомер) > 13 Тогда
				МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - длина табельного номера превышает 13 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(ФИО) > 100 Тогда
				МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " - длина ФИО превышает 100 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 					= Объект.ТаблицаМестХраненияСИЗ.Добавить();
			НоваяСтрока.ЭлементАдреса1  	= ЭлементАдреса1;
			НоваяСтрока.ЭлементАдреса2  	= ЭлементАдреса2;
			НоваяСтрока.ЭлементАдреса3  	= ЭлементАдреса3;
			НоваяСтрока.ЭлементАдреса4  	= ЭлементАдреса4;
			НоваяСтрока.ЭлементАдреса5		= ЭлементАдреса5;
			НоваяСтрока.ПроизвольныйАдрес	= ПроизвольныйАдрес;
			НоваяСтрока.ТабельныйНомер		= ТабельныйНомер;
			НоваяСтрока.ФИО					= ФИО;
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлМестХранения(Команда)
	
	МестаХраненияПротокол = "*****Чтение файла загрузки****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Не выбрана организация!";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Не выбран файл загрузки!";
		Возврат;
	КонецЕсли;
	
	Если ПримерАдресаМестаХранения = "<не задан>" Тогда
		МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Не задан шаблон адресации!";
		МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;		
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлМестХраненияНаСервере(ВременноеХранилище);
	
	ПроверитьМестаХраненияСИЗВБазе();
	
	Если МестаХраненияЕстьДубли Тогда
		МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
		Элементы.ТаблицаМестХраненияСИЗЗагрузитьМестаХранения.Доступность = Ложь;
	Конецесли;
	
	МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьМестаХраненияСИЗВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаМестХраненияСИЗ.ЭлементАдреса1 КАК ЭлементАдреса1,
	|	ТаблицаМестХраненияСИЗ.ЭлементАдреса2 КАК ЭлементАдреса2,
	|	ТаблицаМестХраненияСИЗ.ЭлементАдреса3 КАК ЭлементАдреса3,
	|	ТаблицаМестХраненияСИЗ.ЭлементАдреса4 КАК ЭлементАдреса4,
	|	ТаблицаМестХраненияСИЗ.ЭлементАдреса5 КАК ЭлементАдреса5,
	|	ТаблицаМестХраненияСИЗ.ПроизвольныйАдрес КАК ПроизвольныйАдрес,
	|	ТаблицаМестХраненияСИЗ.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаМестХраненияСИЗ.ФИО КАК ФИО
	|ПОМЕСТИТЬ ВТ_ТаблицаМестХраненияСИЗ
	|ИЗ
	|	&ТаблицаМестХраненияСИЗ КАК ТаблицаМестХраненияСИЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ТабельныйНомер КАК ТабельныйНомер,
	|	Сотрудники.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестаХраненияСИЗСотрудников.Ссылка КАК МестоХранения,
	|	МестаХраненияСИЗСотрудников.ЭлементАдреса1 КАК ЭлементАдреса1,
	|	МестаХраненияСИЗСотрудников.ЭлементАдреса2 КАК ЭлементАдреса2,
	|	МестаХраненияСИЗСотрудников.ЭлементАдреса3 КАК ЭлементАдреса3,
	|	МестаХраненияСИЗСотрудников.ЭлементАдреса4 КАК ЭлементАдреса4,
	|	МестаХраненияСИЗСотрудников.ЭлементАдреса5 КАК ЭлементАдреса5,
	|	МестаХраненияСИЗСотрудников.Код КАК Код
	|ПОМЕСТИТЬ ВТ_МестаХранения
	|ИЗ
	|	Справочник.МестаХраненияСИЗСотрудников КАК МестаХраненияСИЗСотрудников
	|ГДЕ
	|	МестаХраненияСИЗСотрудников.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса1 КАК ЭлементАдреса1,
	|	ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса2 КАК ЭлементАдреса2,
	|	ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса3 КАК ЭлементАдреса3,
	|	ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса4 КАК ЭлементАдреса4,
	|	ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса5 КАК ЭлементАдреса5,
	|	ВТ_ТаблицаМестХраненияСИЗ.ПроизвольныйАдрес КАК ПроизвольныйАдрес,
	|	ВТ_ТаблицаМестХраненияСИЗ.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаМестХраненияСИЗ.ФИО КАК ФИО,
	|	ЕСТЬNULL(ВТ_Сотрудники.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	ЕСТЬNULL(ВТ_МестаХранения.МестоХранения, ЗНАЧЕНИЕ(Справочник.МестаХраненияСИЗСотрудников.ПустаяСсылка)) КАК МестоХранения,
	|	ВЫБОР
	|		КОГДА ВТ_МестаХранения.МестоХранения ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ТаблицаМестХраненияСИЗ.ТабельныйНомер = """"
	|						И ВТ_ТаблицаМестХраненияСИЗ.ФИО = """"
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_Сотрудники.Сотрудник ЕСТЬ NULL
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_Сотрудники.Сотрудник.МестоХраненияСИЗ = ВТ_МестаХранения.МестоХранения
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Существует
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаМестХраненияСИЗ КАК ВТ_ТаблицаМестХраненияСИЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ПО ВТ_ТаблицаМестХраненияСИЗ.ТабельныйНомер = ВТ_Сотрудники.ТабельныйНомер
	|			И ВТ_ТаблицаМестХраненияСИЗ.ФИО = ВТ_Сотрудники.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МестаХранения КАК ВТ_МестаХранения
	|		ПО (ВЫБОР
	|				КОГДА &ИспользоватьПроизвольныйАдрес
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса1 = ВТ_МестаХранения.ЭлементАдреса1
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА &ИспользоватьПроизвольныйАдрес
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса2 = ВТ_МестаХранения.ЭлементАдреса2
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА &ИспользоватьПроизвольныйАдрес
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса3 = ВТ_МестаХранения.ЭлементАдреса3
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА &ИспользоватьПроизвольныйАдрес
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса4 = ВТ_МестаХранения.ЭлементАдреса4
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА &ИспользоватьПроизвольныйАдрес
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса5 = ВТ_МестаХранения.ЭлементАдреса5
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА &ИспользоватьПроизвольныйАдрес
	|					ТОГДА ВТ_ТаблицаМестХраненияСИЗ.ПроизвольныйАдрес = ВТ_МестаХранения.Код
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ЭлементАдреса1 КАК ЭлементАдреса1,
	|	ВТ_Результат.ЭлементАдреса2 КАК ЭлементАдреса2,
	|	ВТ_Результат.ЭлементАдреса3 КАК ЭлементАдреса3,
	|	ВТ_Результат.ЭлементАдреса4 КАК ЭлементАдреса4,
	|	ВТ_Результат.ЭлементАдреса5 КАК ЭлементАдреса5,
	|	ВТ_Результат.ПроизвольныйАдрес КАК ПроизвольныйАдрес,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.ФИО) КАК КоличествоСотрудников
	|ПОМЕСТИТЬ ВТ_АнализАдресатов
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.ЭлементАдреса1,
	|	ВТ_Результат.ЭлементАдреса2,
	|	ВТ_Результат.ЭлементАдреса3,
	|	ВТ_Результат.ЭлементАдреса4,
	|	ВТ_Результат.ЭлементАдреса5,
	|	ВТ_Результат.ПроизвольныйАдрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Сотрудник) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.ТабельныйНомер,
	|	ВТ_Результат.ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ЭлементАдреса1 КАК ЭлементАдреса1,
	|	ВТ_Результат.ЭлементАдреса2 КАК ЭлементАдреса2,
	|	ВТ_Результат.ЭлементАдреса3 КАК ЭлементАдреса3,
	|	ВТ_Результат.ЭлементАдреса4 КАК ЭлементАдреса4,
	|	ВТ_Результат.ЭлементАдреса5 КАК ЭлементАдреса5,
	|	ВТ_Результат.ПроизвольныйАдрес КАК ПроизвольныйАдрес,
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.МестоХранения КАК МестоХранения,
	|	ВТ_Результат.Существует КАК Существует,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_Результат.ТабельныйНомер = ВТ_АнализДублей.ТабельныйНомер
	|			И ВТ_Результат.ФИО = ВТ_АнализДублей.ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализАдресатов.ЭлементАдреса1 КАК ЭлементАдреса1,
	|	ВТ_АнализАдресатов.ЭлементАдреса2 КАК ЭлементАдреса2,
	|	ВТ_АнализАдресатов.ЭлементАдреса3 КАК ЭлементАдреса3,
	|	ВТ_АнализАдресатов.ЭлементАдреса4 КАК ЭлементАдреса4,
	|	ВТ_АнализАдресатов.ЭлементАдреса5 КАК ЭлементАдреса5,
	|	ВТ_АнализАдресатов.ПроизвольныйАдрес КАК ПроизвольныйАдрес,
	|	ВТ_АнализАдресатов.КоличествоСотрудников КАК КоличествоСотрудников
	|ИЗ
	|	ВТ_АнализАдресатов КАК ВТ_АнализАдресатов
	|ГДЕ
	|	ВТ_АнализАдресатов.КоличествоСотрудников > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_АнализДублей.ФИО КАК ФИО,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("Организация",						Объект.Организация);
	Запрос.УстановитьПараметр("ТаблицаМестХраненияСИЗ",				Объект.ТаблицаМестХраненияСИЗ.Выгрузить());
	Запрос.УстановитьПараметр("ИспользоватьПроизвольныйАдрес",		ИспользоватьПроизвольныйАдрес);
	Запрос.УстановитьПараметр("ОдинАдресДляНесколькихСотрудников",	ОдинАдресДляНесколькихСотрудников);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ ОдинАдресДляНесколькихСотрудников Тогда
		ТаблицаАнализаАдресатов = Результат[7].Выгрузить();
		Если НЕ ТаблицаАнализаАдресатов.Количество() = 0 Тогда
			МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "В файле присутствую записи, в которых одно место хранения предназначено для разных сотрудников, что противоречит настройкам шаблона адресации. Проверьте данные файла.";
		КонецЕсли;	
	КонецЕсли;
	
	ТаблицаДублей = Результат[8].Выгрузить();
	
	МестаХраненияЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаМестХраненияСИЗ.Загрузить(Результат[6].Выгрузить());
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьМестаХраненияНаСервере()
	
	МестаХраненияПротокол = "*****Загрузка мест хранения*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаМестХраненияСИЗ.ЭлементАдреса1 КАК ЭлементАдреса1,
	|	ТаблицаМестХраненияСИЗ.ЭлементАдреса2 КАК ЭлементАдреса2,
	|	ТаблицаМестХраненияСИЗ.ЭлементАдреса3 КАК ЭлементАдреса3,
	|	ТаблицаМестХраненияСИЗ.ЭлементАдреса4 КАК ЭлементАдреса4,
	|	ТаблицаМестХраненияСИЗ.ЭлементАдреса5 КАК ЭлементАдреса5,
	|	ТаблицаМестХраненияСИЗ.ПроизвольныйАдрес КАК ПроизвольныйАдрес,
	|	ТаблицаМестХраненияСИЗ.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаМестХраненияСИЗ.ФИО КАК ФИО,
	|	ТаблицаМестХраненияСИЗ.Сотрудник КАК Сотрудник,
	|	ТаблицаМестХраненияСИЗ.МестоХранения КАК МестоХранения,
	|	ТаблицаМестХраненияСИЗ.Существует КАК Существует
	|ПОМЕСТИТЬ ВТ_ТаблицаМестХраненияСИЗ
	|ИЗ
	|	&ТаблицаМестХраненияСИЗ КАК ТаблицаМестХраненияСИЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса1 КАК ЭлементАдреса1,
	|	ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса2 КАК ЭлементАдреса2,
	|	ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса3 КАК ЭлементАдреса3,
	|	ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса4 КАК ЭлементАдреса4,
	|	ВТ_ТаблицаМестХраненияСИЗ.ЭлементАдреса5 КАК ЭлементАдреса5,
	|	ВТ_ТаблицаМестХраненияСИЗ.ПроизвольныйАдрес КАК ПроизвольныйАдрес,
	|	ВТ_ТаблицаМестХраненияСИЗ.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаМестХраненияСИЗ.ФИО КАК ФИО,
	|	ВТ_ТаблицаМестХраненияСИЗ.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаМестХраненияСИЗ.МестоХранения КАК МестоХранения,
	|	ВТ_ТаблицаМестХраненияСИЗ.Существует КАК Существует
	|ИЗ
	|	ВТ_ТаблицаМестХраненияСИЗ КАК ВТ_ТаблицаМестХраненияСИЗ
	|ГДЕ
	|	НЕ ВТ_ТаблицаМестХраненияСИЗ.Существует";
	
	Запрос.УстановитьПараметр("ТаблицаМестХраненияСИЗ",Объект.ТаблицаМестХраненияСИЗ.Выгрузить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.МестоХранения) Тогда
			
			МестоХранения = ПолучитьМестоХранения(СтрокаТаблицыЗапроса);
			
		Иначе
			
			МестоХранения = СтрокаТаблицыЗапроса.МестоХранения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Сотрудник) Тогда
			
			СотрудникОбъект = СтрокаТаблицыЗапроса.Сотрудник.ПолучитьОбъект();
			СотрудникОбъект.МестоХраненияСИЗ = МестоХранения;
			СотрудникОбъект.Записать();
			
			МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.Сотрудник.Наименование + " Создано место хранения: " + МестоХранения.Код;		
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ПроверитьМестаХраненияСИЗВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "*****Загрузка мест хранения завершена*****";	
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьМестоХранения(СтрокаТаблицыЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияСИЗСотрудников.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МестаХраненияСИЗСотрудников КАК МестаХраненияСИЗСотрудников
	|ГДЕ
	|	МестаХраненияСИЗСотрудников.Код = &Код
	|	И МестаХраненияСИЗСотрудников.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Организация);
	
	Если ИспользоватьПроизвольныйАдрес Тогда
		
		Запрос.УстановитьПараметр("Код", СтрокаТаблицыЗапроса.ПроизвольныйАдрес);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			МестоХранения 					= Справочники.МестаХраненияСИЗСотрудников.СоздатьЭлемент();
			МестоХранения.Владелец 			= Объект.Организация;
			МестоХранения.Код 				= СтрокаТаблицыЗапроса.ПроизвольныйАдрес;
			МестоХранения.Наименование 		= МестоХранения.Код;
			МестоХранения.Записать();				
			
			МестоХранения = МестоХранения.Ссылка;
			
			СтрокаТаблицыЗапроса.МестоХранения = МестоХранения;
			
			МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Создано место хранения: " + МестоХранения.Код;
			
		Иначе
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			МестоХранения = Выборка.Ссылка;
			
		КонецЕсли;
		
	Иначе
		
		Адрес = СформироватьАдрес(СтрокаТаблицыЗапроса.ЭлементАдреса1,СтрокаТаблицыЗапроса.ЭлементАдреса2,СтрокаТаблицыЗапроса.ЭлементАдреса3,СтрокаТаблицыЗапроса.ЭлементАдреса4,СтрокаТаблицыЗапроса.ЭлементАдреса5);
		
		Запрос.УстановитьПараметр("Код", Адрес);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			МестоХранения 					= Справочники.МестаХраненияСИЗСотрудников.СоздатьЭлемент();
			МестоХранения.Владелец 			= Объект.Организация;
			МестоХранения.Код 				= Адрес;
			МестоХранения.Наименование 		= Адрес;
			МестоХранения.ЭлементАдреса1 	= СтрокаТаблицыЗапроса.ЭлементАдреса1;
			МестоХранения.ЭлементАдреса2 	= СтрокаТаблицыЗапроса.ЭлементАдреса2;
			МестоХранения.ЭлементАдреса3 	= СтрокаТаблицыЗапроса.ЭлементАдреса3;
			МестоХранения.ЭлементАдреса4 	= СтрокаТаблицыЗапроса.ЭлементАдреса4;
			МестоХранения.ЭлементАдреса5 	= СтрокаТаблицыЗапроса.ЭлементАдреса5;
			МестоХранения.Записать();
			
			МестоХранения = МестоХранения.Ссылка;
			
			СтрокаТаблицыЗапроса.МестоХранения = МестоХранения;
			
			МестаХраненияПротокол = МестаХраненияПротокол + Символы.ПС + "Создано место хранения: " + МестоХранения.Код;
			
		Иначе
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			МестоХранения = Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МестоХранения;
	
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьМестаХранения(Команда)
	
	ЗагрузитьМестаХраненияНаСервере();
	
	Элементы.СтраницаМестаХранения.ПодчиненныеЭлементы.Группа4.ПодчиненныеЭлементы.Группа5.ПодчиненныеЭлементы.ТаблицаМестХраненияСИЗЗагрузитьМестаХранения.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлДанныхПоСотрудникамНаСервере(Адрес)
	
	Объект.ТаблицаДанныхПоСотрудникам.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 16 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиДанныхПоСотрудникам(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 1, Сч, 1).Значение) = ТИП("Число") Тогда
					ТабельныйНомер = Формат(ТабДок.Область(Сч, 1, Сч, 1).Значение,"ЧГ=");
				Иначе
					ТабельныйНомер = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
				КонецЕсли;
			Иначе
				ТабельныйНомер = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				ФИО = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
			Иначе
				ФИО = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст);
			КонецЕсли;
			
			Если ЗагружатьДанныеПоСотрудникам("Рост") Тогда
				Попытка 
					Рост = Число(СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст)); 
				Исключение  
					Рост = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст); 
				КонецПопытки;
			Иначе
				Рост = "";
			КонецЕсли;	
			
			Если ЗагружатьДанныеПоСотрудникам("Размер одежды") Тогда
				Попытка 
					РазмерОдежды = Число(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст)); 
				Исключение  
					РазмерОдежды = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст); 
				КонецПопытки;
			Иначе
				РазмерОдежды = "";
			КонецЕсли;
			
			Если ЗагружатьДанныеПоСотрудникам("Размер обуви") Тогда
				Попытка 
					РазмерОбуви = Число(СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст)); 	
				Исключение  
					РазмерОбуви = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст); 		
				КонецПопытки;
			Иначе
				РазмерОбуви = "";
			КонецЕсли;
			
			Если ЗагружатьДанныеПоСотрудникам("Размер головного убора") Тогда
				Попытка 
					РазмерГоловногоУбора = Число(СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст)); 	
				Исключение  
					РазмерГоловногоУбора = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст); 		
				КонецПопытки;
			Иначе
				РазмерГоловногоУбора = "";
			КонецЕсли;
			
			Если ЗагружатьДанныеПоСотрудникам("Размер противогаза") Тогда
				Попытка 
					РазмерПротивогаза = Число(СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Текст)); 	
				Исключение  
					РазмерПротивогаза = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Текст); 		
				КонецПопытки;
			Иначе
				РазмерПротивогаза = "";
			КонецЕсли;
			
			Если ЗагружатьДанныеПоСотрудникам("Размер респиратора") Тогда
				Попытка 
					РазмерРеспиратора = Число(СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Текст)); 	
				Исключение  
					РазмерРеспиратора = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Текст); 		
				КонецПопытки;
			Иначе
				РазмерРеспиратора = "";
			КонецЕсли;
			
			Если ЗагружатьДанныеПоСотрудникам("Размер рукавиц") Тогда
				Попытка 
					РазмерРукавиц = Число(СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Текст)); 	
				Исключение  
					РазмерРукавиц = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Текст); 		
				КонецПопытки;
			Иначе
				РазмерРукавиц = "";
			КонецЕсли;
			
			Если ЗагружатьДанныеПоСотрудникам("Размер перчаток") Тогда
				Попытка 
					РазмерПерчаток = Число(СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Текст)); 	
				Исключение  
					РазмерПерчаток = СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Текст); 	
				КонецПопытки;
			Иначе
				РазмерПерчаток = "";
			КонецЕсли;
			
			Если ЗагружатьДанныеПоСотрудникам("Размер рубашки") Тогда
				Попытка 
					РазмерРубашки = Число(СокрЛП(ТабДок.Область(Сч, 11, Сч, 11).Текст)); 	
				Исключение  
					РазмерРубашки = СокрЛП(ТабДок.Область(Сч, 11, Сч, 11).Текст); 	
				КонецПопытки;
			Иначе
				РазмерРубашки = "";
			КонецЕсли;
			
			Если ЗагружатьДанныеПоСотрудникам("Идентификатор") Тогда
				Если ТабДок.Область(Сч, 12, Сч, 12).СодержитЗначение Тогда
					Если ТипЗнч(ТабДок.Область(Сч, 12, Сч, 12).Значение) = ТИП("Число") Тогда
						Идентификатор = Формат(ТабДок.Область(Сч, 12, Сч, 12).Значение,"ЧГ=");
					Иначе
						Идентификатор = СокрЛП(ТабДок.Область(Сч, 12, Сч, 12).Значение);
					КонецЕсли;
				Иначе
					Идентификатор = СокрЛП(ТабДок.Область(Сч, 12, Сч, 12).Текст);
				КонецЕсли;
			Иначе
				Идентификатор = "";
			КонецЕсли;
			
			Если ЗагружатьДанныеПоСотрудникам("Телефон") Тогда
				Если ТабДок.Область(Сч, 13, Сч, 13).СодержитЗначение Тогда
					Если ТипЗнч(ТабДок.Область(Сч, 13, Сч, 13).Значение) = ТИП("Число") Тогда
						НомерТелефона = Формат(ТабДок.Область(Сч, 13, Сч, 13).Значение,"ЧГ=");
					Иначе
						НомерТелефона = СокрЛП(ТабДок.Область(Сч, 13, Сч, 13).Значение);
					КонецЕсли;
				Иначе
					НомерТелефона = СокрЛП(ТабДок.Область(Сч, 13, Сч, 13).Текст);
				КонецЕсли;
			Иначе
				НомерТелефона = "";
			КонецЕсли;
			
			Если ЗагружатьДанныеПоСотрудникам("Электронная почта") Тогда
				Если ТабДок.Область(Сч, 14, Сч, 14).СодержитЗначение Тогда
					АдресЭП = СокрЛП(ТабДок.Область(Сч, 14, Сч, 14).Значение);
				Иначе
					АдресЭП = СокрЛП(ТабДок.Область(Сч, 14, Сч, 14).Текст);
				КонецЕсли;
			Иначе
				АдресЭП = "";
			КонецЕсли;
			
			Если ЗагружатьДанныеПоСотрудникам("Дата приема для личной карточки") Тогда
				Если ТабДок.Область(Сч, 15, Сч, 15).СодержитЗначение Тогда
					Если ТипЗнч(ТабДок.Область(Сч, 15, Сч, 15).Значение) = ТИП("Дата") Тогда
						ДатаПриемаДляЛичнойКарточки	= ТабДок.Область(Сч, 15, Сч, 15).Значение;
					Иначе
						ДатаПриемаДляЛичнойКарточки	= ПолучитьДату(СокрЛП(ТабДок.Область(Сч, 15, Сч, 15).Значение));
					КонецЕсли;
				Иначе
					ДатаПриемаДляЛичнойКарточки	= ПолучитьДату(СокрЛП(ТабДок.Область(Сч, 15, Сч, 15).Текст));
				КонецЕсли;
			Иначе
				ДатаПриемаДляЛичнойКарточки = Дата('00010101');
			КонецЕсли;
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если СтрДлина(ТабельныйНомер) > 13 Тогда
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Строка " + Сч + " - длина табельного номера превышает 13 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(ФИО) > 100 Тогда
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Строка " + Сч + " - длина ФИО превышает 100 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(Идентификатор) > 100 Тогда
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Строка " + Сч + " - длина идентификатора превышает 100 символов. Идентификатор загружен не будет.";
				Идентификатор = "";
			КонецЕсли;
			Если СтрДлина(НомерТелефона) > 20 Тогда
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Строка " + Сч + " - длина номера телефона превышает 20 символов. Номер телефон загружен не будет.";
				НомерТелефона = "";
			КонецЕсли;
			Если СтрДлина(АдресЭП) > 100 Тогда
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Строка " + Сч + " - длина адреса электронной почты превышает 100 символов. Адрес электронной почты загружен не будет.";
				АдресЭП = "";
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
				
			НоваяСтрока = Объект.ТаблицаДанныхПоСотрудникам.Добавить();
			НоваяСтрока.ТабельныйНомер 				= ТабельныйНомер;
			НоваяСтрока.ФИО							= ФИО;
			НоваяСтрока.Рост 						= Рост;
			НоваяСтрока.РазмерОдежды 				= РазмерОдежды;
			НоваяСтрока.РазмерОбуви 				= РазмерОбуви;
			НоваяСтрока.РазмерГоловногоУбора 		= РазмерГоловногоУбора;
			НоваяСтрока.РазмерПротивогаза 			= РазмерПротивогаза;
			НоваяСтрока.РазмерРеспиратора 			= РазмерРеспиратора;
			НоваяСтрока.РазмерРукавиц 				= РазмерРукавиц;
			НоваяСтрока.РазмерПерчаток 				= РазмерПерчаток;
			НоваяСтрока.РазмерРубашки 				= РазмерРубашки;
			НоваяСтрока.Идентификатор 				= Идентификатор;
			НоваяСтрока.НомерТелефона 				= НомерТелефона;
			НоваяСтрока.АдресЭП 					= АдресЭП;
			НоваяСтрока.ДатаПриемаДляЛичнойКарточки	= ДатаПриемаДляЛичнойКарточки;
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлДанныхПоСотрудникам(Команда)
	
	ДанныеПоСотрудникамПротокол = "*****Чтение файла загрузки*****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Не выбрана организация!";
		ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Не выбран файл загрузки!";
		ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;		
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлДанныхПоСотрудникамНаСервере(ВременноеХранилище);
	
	ПроверитьДублиВФайлеДанныхПоСотрудникам();
	
	Если ДанныеПоСотрудникамЕстьДубли Тогда
		ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "В файле загрузки существуют дубли! Загрузка не доступна.";
		Элементы.ТаблицаДанныхПоСотрудникамЗагрузитьДанныеПоСотрудникам.Доступность = Ложь;
	Иначе
		ПроверитьДанныеПоСотрудникамВБазе();
		Если ДанныеПоСотрудникамЕстьДубли Тогда
			ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
			Элементы.ТаблицаДанныхПоСотрудникамЗагрузитьДанныеПоСотрудникам.Доступность = Ложь;
		Конецесли;
	Конецесли;
	
	ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиВФайлеДанныхПоСотрудникам()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанныхПоСотрудникам.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаДанныхПоСотрудникам.ФИО КАК ФИО,
	|	ТаблицаДанныхПоСотрудникам.Рост КАК Рост,
	|	ТаблицаДанныхПоСотрудникам.РазмерОдежды КАК РазмерОдежды,
	|	ТаблицаДанныхПоСотрудникам.РазмерОбуви КАК РазмерОбуви,
	|	ТаблицаДанныхПоСотрудникам.РазмерГоловногоУбора КАК РазмерГоловногоУбора,
	|	ТаблицаДанныхПоСотрудникам.РазмерПротивогаза КАК РазмерПротивогаза,
	|	ТаблицаДанныхПоСотрудникам.РазмерРеспиратора КАК РазмерРеспиратора,
	|	ТаблицаДанныхПоСотрудникам.РазмерРукавиц КАК РазмерРукавиц,
	|	ТаблицаДанныхПоСотрудникам.РазмерПерчаток КАК РазмерПерчаток,
	|	ТаблицаДанныхПоСотрудникам.РазмерРубашки КАК РазмерРубашки,
	|	ТаблицаДанныхПоСотрудникам.Идентификатор КАК Идентификатор,
	|	ТаблицаДанныхПоСотрудникам.НомерТелефона КАК НомерТелефона,
	|	ТаблицаДанныхПоСотрудникам.АдресЭП КАК АдресЭП,
	|	ТаблицаДанныхПоСотрудникам.ДатаПриемаДляЛичнойКарточки КАК ДатаПриемаДляЛичнойКарточки,
	|	ТаблицаДанныхПоСотрудникам.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаДанныхПоСотрудникам
	|ИЗ
	|	&ТаблицаДанныхПоСотрудникам КАК ТаблицаДанныхПоСотрудникам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДанныхПоСотрудникам.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаДанныхПоСотрудникам.ФИО КАК ФИО,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТаблицаДанныхПоСотрудникам.НомерСтроки) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_ТаблицаДанныхПоСотрудникам КАК ВТ_ТаблицаДанныхПоСотрудникам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаДанныхПоСотрудникам.ТабельныйНомер,
	|	ВТ_ТаблицаДанныхПоСотрудникам.ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДанныхПоСотрудникам.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаДанныхПоСотрудникам.ФИО КАК ФИО,
	|	ВТ_ТаблицаДанныхПоСотрудникам.Рост КАК Рост,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерОдежды КАК РазмерОдежды,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерОбуви КАК РазмерОбуви,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерГоловногоУбора КАК РазмерГоловногоУбора,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерПротивогаза КАК РазмерПротивогаза,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерРеспиратора КАК РазмерРеспиратора,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерРукавиц КАК РазмерРукавиц,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерПерчаток КАК РазмерПерчаток,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерРубашки КАК РазмерРубашки,
	|	ВТ_ТаблицаДанныхПоСотрудникам.Идентификатор КАК Идентификатор,
	|	ВТ_ТаблицаДанныхПоСотрудникам.НомерТелефона КАК НомерТелефона,
	|	ВТ_ТаблицаДанныхПоСотрудникам.АдресЭП КАК АдресЭП,
	|	ВТ_ТаблицаДанныхПоСотрудникам.ДатаПриемаДляЛичнойКарточки КАК ДатаПриемаДляЛичнойКарточки,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_ТаблицаДанныхПоСотрудникам КАК ВТ_ТаблицаДанныхПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_ТаблицаДанныхПоСотрудникам.ТабельныйНомер = ВТ_АнализДублей.ТабельныйНомер
	|			И ВТ_ТаблицаДанныхПоСотрудникам.ФИО = ВТ_АнализДублей.ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_АнализДублей.ФИО КАК ФИО,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаДанныхПоСотрудникам",	Объект.ТаблицаДанныхПоСотрудникам.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[3].Выгрузить();
	
	ДанныеПоСотрудникамЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаДанныхПоСотрудникам.Загрузить(Результат[2].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеПоСотрудникамВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанныхПоСотрудникам.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаДанныхПоСотрудникам.ФИО КАК ФИО,
	|	ТаблицаДанныхПоСотрудникам.Рост КАК Рост,
	|	ТаблицаДанныхПоСотрудникам.РазмерОдежды КАК РазмерОдежды,
	|	ТаблицаДанныхПоСотрудникам.РазмерОбуви КАК РазмерОбуви,
	|	ТаблицаДанныхПоСотрудникам.РазмерГоловногоУбора КАК РазмерГоловногоУбора,
	|	ТаблицаДанныхПоСотрудникам.РазмерПротивогаза КАК РазмерПротивогаза,
	|	ТаблицаДанныхПоСотрудникам.РазмерРеспиратора КАК РазмерРеспиратора,
	|	ТаблицаДанныхПоСотрудникам.РазмерРукавиц КАК РазмерРукавиц,
	|	ТаблицаДанныхПоСотрудникам.РазмерПерчаток КАК РазмерПерчаток,
	|	ТаблицаДанныхПоСотрудникам.РазмерРубашки КАК РазмерРубашки,
	|	ТаблицаДанныхПоСотрудникам.Идентификатор КАК Идентификатор,
	|	ТаблицаДанныхПоСотрудникам.НомерТелефона КАК НомерТелефона,
	|	ТаблицаДанныхПоСотрудникам.АдресЭП КАК АдресЭП,
	|	ТаблицаДанныхПоСотрудникам.ДатаПриемаДляЛичнойКарточки КАК ДатаПриемаДляЛичнойКарточки
	|ПОМЕСТИТЬ ВТ_ТаблицаДанныхПоСотрудникам
	|ИЗ
	|	&ТаблицаДанныхПоСотрудникам КАК ТаблицаДанныхПоСотрудникам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.ТабельныйНомер КАК ТабельныйНомер
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопустимыеЗначенияАнтропометрическихСвойств.ВидСвойства КАК ВидСвойства,
	|	ДопустимыеЗначенияАнтропометрическихСвойств.ДопустимоеЗначение КАК ДопустимоеЗначение
	|ПОМЕСТИТЬ ВТ_ДопустимаяАнтропометрия
	|ИЗ
	|	РегистрСведений.ДопустимыеЗначенияАнтропометрическихСвойств КАК ДопустимыеЗначенияАнтропометрическихСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДопустимаяАнтропометрия.ДопустимоеЗначение КАК ДопустимыйРост
	|ПОМЕСТИТЬ ВТ_ДопустимыеЗначенияРоста
	|ИЗ
	|	ВТ_ДопустимаяАнтропометрия КАК ВТ_ДопустимаяАнтропометрия
	|ГДЕ
	|	ВТ_ДопустимаяАнтропометрия.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.Рост)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДопустимаяАнтропометрия.ДопустимоеЗначение КАК ДопустимыйРазмерОдежды
	|ПОМЕСТИТЬ ВТ_ДопустимыеРазмерыОдежды
	|ИЗ
	|	ВТ_ДопустимаяАнтропометрия КАК ВТ_ДопустимаяАнтропометрия
	|ГДЕ
	|	ВТ_ДопустимаяАнтропометрия.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерОдежды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДопустимаяАнтропометрия.ДопустимоеЗначение КАК ДопустимыйРазмерОбуви
	|ПОМЕСТИТЬ ВТ_ДопустимыеРазмерыОбуви
	|ИЗ
	|	ВТ_ДопустимаяАнтропометрия КАК ВТ_ДопустимаяАнтропометрия
	|ГДЕ
	|	ВТ_ДопустимаяАнтропометрия.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерОбуви)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДопустимаяАнтропометрия.ДопустимоеЗначение КАК ДопустимыйРазмерГоловногоУбора
	|ПОМЕСТИТЬ ВТ_ДопустимыеРазмерыГоловногоУбора
	|ИЗ
	|	ВТ_ДопустимаяАнтропометрия КАК ВТ_ДопустимаяАнтропометрия
	|ГДЕ
	|	ВТ_ДопустимаяАнтропометрия.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерГоловногоУбора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДопустимаяАнтропометрия.ДопустимоеЗначение КАК ДопустимыйРазмерПротивогаза
	|ПОМЕСТИТЬ ВТ_ДопустимыеРазмерыПротивогаза
	|ИЗ
	|	ВТ_ДопустимаяАнтропометрия КАК ВТ_ДопустимаяАнтропометрия
	|ГДЕ
	|	ВТ_ДопустимаяАнтропометрия.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерПротивогаза)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДопустимаяАнтропометрия.ДопустимоеЗначение КАК ДопустимыйРазмерРеспиратора
	|ПОМЕСТИТЬ ВТ_ДопустимыеРазмерыРеспиратора
	|ИЗ
	|	ВТ_ДопустимаяАнтропометрия КАК ВТ_ДопустимаяАнтропометрия
	|ГДЕ
	|	ВТ_ДопустимаяАнтропометрия.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерРеспиратора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДопустимаяАнтропометрия.ДопустимоеЗначение КАК ДопустимыйРазмерРукавиц
	|ПОМЕСТИТЬ ВТ_ДопустимыеРазмерыРукавиц
	|ИЗ
	|	ВТ_ДопустимаяАнтропометрия КАК ВТ_ДопустимаяАнтропометрия
	|ГДЕ
	|	ВТ_ДопустимаяАнтропометрия.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерРукавиц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДопустимаяАнтропометрия.ДопустимоеЗначение КАК ДопустимыйРазмерПерчаток
	|ПОМЕСТИТЬ ВТ_ДопустимыеРазмерыПерчаток
	|ИЗ
	|	ВТ_ДопустимаяАнтропометрия КАК ВТ_ДопустимаяАнтропометрия
	|ГДЕ
	|	ВТ_ДопустимаяАнтропометрия.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерПерчаток)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДопустимаяАнтропометрия.ДопустимоеЗначение КАК ДопустимыйРазмерРубашки
	|ПОМЕСТИТЬ ВТ_ДопустимыеРазмерыРубашки
	|ИЗ
	|	ВТ_ДопустимаяАнтропометрия КАК ВТ_ДопустимаяАнтропометрия
	|ГДЕ
	|	ВТ_ДопустимаяАнтропометрия.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерРубашки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ЗначенияАнтропометрическихСвойств.ВидСвойства КАК ВидСвойства,
	|	ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК ЗначениеСвойства
	|ПОМЕСТИТЬ ВТ_ЗначенияАнтропометрическихСвойств
	|ИЗ
	|	РегистрСведений.ЗначенияАнтропометрическихСвойств КАК ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ЗначенияАнтропометрическихСвойств.Сотрудник.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК РостСотрудника
	|ПОМЕСТИТЬ ВТ_ЗначенияРостаСотрудников
	|ИЗ
	|	ВТ_ЗначенияАнтропометрическихСвойств КАК ВТ_ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.Рост)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК РазмерОдеждыСотрудника
	|ПОМЕСТИТЬ ВТ_РазмерыОдеждыСотрудников
	|ИЗ
	|	ВТ_ЗначенияАнтропометрическихСвойств КАК ВТ_ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерОдежды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК РазмерОбувиСотрудника
	|ПОМЕСТИТЬ ВТ_РазмерыОбувиСотрудников
	|ИЗ
	|	ВТ_ЗначенияАнтропометрическихСвойств КАК ВТ_ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерОбуви)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК РазмерГоловногоУбораСотрудника
	|ПОМЕСТИТЬ ВТ_РазмерыГоловногоУбораСотрудников
	|ИЗ
	|	ВТ_ЗначенияАнтропометрическихСвойств КАК ВТ_ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерГоловногоУбора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК РазмерПротивогазаСотрудника
	|ПОМЕСТИТЬ ВТ_РазмерыПротивогазаСотрудников
	|ИЗ
	|	ВТ_ЗначенияАнтропометрическихСвойств КАК ВТ_ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерПротивогаза)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК РазмерРеспиратораСотрудника
	|ПОМЕСТИТЬ ВТ_РазмерыРеспиратораСотрудников
	|ИЗ
	|	ВТ_ЗначенияАнтропометрическихСвойств КАК ВТ_ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерРеспиратора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК РазмерРукавицСотрудника
	|ПОМЕСТИТЬ ВТ_РазмерыРукавицСотрудников
	|ИЗ
	|	ВТ_ЗначенияАнтропометрическихСвойств КАК ВТ_ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерРукавиц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК РазмерПерчатокСотрудника
	|ПОМЕСТИТЬ ВТ_РазмерыПерчатокСотрудников
	|ИЗ
	|	ВТ_ЗначенияАнтропометрическихСвойств КАК ВТ_ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерПерчаток)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияАнтропометрическихСвойств.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК РазмерРубашкиСотрудника
	|ПОМЕСТИТЬ ВТ_РазмерыРубашкиСотрудников
	|ИЗ
	|	ВТ_ЗначенияАнтропометрическихСвойств КАК ВТ_ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ВТ_ЗначенияАнтропометрическихСвойств.ВидСвойства = ЗНАЧЕНИЕ(Справочник.ВидыАнтропометрическихСвойств.РазмерРубашки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДанныхПоСотрудникам.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаДанныхПоСотрудникам.ФИО КАК ФИО,
	|	ВТ_ТаблицаДанныхПоСотрудникам.Рост КАК Рост,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерОдежды КАК РазмерОдежды,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерОбуви КАК РазмерОбуви,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерГоловногоУбора КАК РазмерГоловногоУбора,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерПротивогаза КАК РазмерПротивогаза,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерРеспиратора КАК РазмерРеспиратора,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерРукавиц КАК РазмерРукавиц,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерПерчаток КАК РазмерПерчаток,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерРубашки КАК РазмерРубашки,
	|	ЕСТЬNULL(ВТ_Сотрудники.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	ВТ_ТаблицаДанныхПоСотрудникам.Идентификатор КАК Идентификатор,
	|	ВТ_ТаблицаДанныхПоСотрудникам.НомерТелефона КАК НомерТелефона,
	|	ВТ_ТаблицаДанныхПоСотрудникам.АдресЭП КАК АдресЭП,
	|	ВТ_ТаблицаДанныхПоСотрудникам.ДатаПриемаДляЛичнойКарточки КАК ДатаПриемаДляЛичнойКарточки
	|ПОМЕСТИТЬ ВТ_ТаблицаДанныхПоСотрудникамССотрудниками
	|ИЗ
	|	ВТ_ТаблицаДанныхПоСотрудникам КАК ВТ_ТаблицаДанныхПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ПО ВТ_ТаблицаДанныхПоСотрудникам.ТабельныйНомер = ВТ_Сотрудники.ТабельныйНомер
	|			И ВТ_ТаблицаДанныхПоСотрудникам.ФИО = ВТ_Сотрудники.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияРостаСотрудников.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияРостаСотрудников.РостСотрудника КАК РостСотрудника,
	|	NULL КАК РазмерОдеждыСотрудника,
	|	NULL КАК РазмерОбувиСотрудника,
	|	NULL КАК РазмерГоловногоУбораСотрудника,
	|	NULL КАК РазмерПротивогазаСотрудника,
	|	NULL КАК РазмерРеспиратораСотрудника,
	|	NULL КАК РазмерРукавицСотрудника,
	|	NULL КАК РазмерПерчатокСотрудника,
	|	NULL КАК РазмерРубашкиСотрудника
	|ПОМЕСТИТЬ ВТ_АнтропометрияСотрудниковПоБазе
	|ИЗ
	|	ВТ_ЗначенияРостаСотрудников КАК ВТ_ЗначенияРостаСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_РазмерыОдеждыСотрудников.Сотрудник,
	|	NULL,
	|	ВТ_РазмерыОдеждыСотрудников.РазмерОдеждыСотрудника,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТ_РазмерыОдеждыСотрудников КАК ВТ_РазмерыОдеждыСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_РазмерыОбувиСотрудников.Сотрудник,
	|	NULL,
	|	NULL,
	|	ВТ_РазмерыОбувиСотрудников.РазмерОбувиСотрудника,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТ_РазмерыОбувиСотрудников КАК ВТ_РазмерыОбувиСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_РазмерыГоловногоУбораСотрудников.Сотрудник,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВТ_РазмерыГоловногоУбораСотрудников.РазмерГоловногоУбораСотрудника,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТ_РазмерыГоловногоУбораСотрудников КАК ВТ_РазмерыГоловногоУбораСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_РазмерыПротивогазаСотрудников.Сотрудник,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВТ_РазмерыПротивогазаСотрудников.РазмерПротивогазаСотрудника,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТ_РазмерыПротивогазаСотрудников КАК ВТ_РазмерыПротивогазаСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_РазмерыРеспиратораСотрудников.Сотрудник,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВТ_РазмерыРеспиратораСотрудников.РазмерРеспиратораСотрудника,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТ_РазмерыРеспиратораСотрудников КАК ВТ_РазмерыРеспиратораСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_РазмерыРукавицСотрудников.Сотрудник,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВТ_РазмерыРукавицСотрудников.РазмерРукавицСотрудника,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТ_РазмерыРукавицСотрудников КАК ВТ_РазмерыРукавицСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_РазмерыПерчатокСотрудников.Сотрудник,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВТ_РазмерыПерчатокСотрудников.РазмерПерчатокСотрудника,
	|	NULL
	|ИЗ
	|	ВТ_РазмерыПерчатокСотрудников КАК ВТ_РазмерыПерчатокСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_РазмерыРубашкиСотрудников.Сотрудник,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВТ_РазмерыРубашкиСотрудников.РазмерРубашкиСотрудника
	|ИЗ
	|	ВТ_РазмерыРубашкиСотрудников КАК ВТ_РазмерыРубашкиСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнтропометрияСотрудниковПоБазе.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВТ_АнтропометрияСотрудниковПоБазе.РостСотрудника) КАК РостСотрудника,
	|	МАКСИМУМ(ВТ_АнтропометрияСотрудниковПоБазе.РазмерОдеждыСотрудника) КАК РазмерОдеждыСотрудника,
	|	МАКСИМУМ(ВТ_АнтропометрияСотрудниковПоБазе.РазмерОбувиСотрудника) КАК РазмерОбувиСотрудника,
	|	МАКСИМУМ(ВТ_АнтропометрияСотрудниковПоБазе.РазмерГоловногоУбораСотрудника) КАК РазмерГоловногоУбораСотрудника,
	|	МАКСИМУМ(ВТ_АнтропометрияСотрудниковПоБазе.РазмерПротивогазаСотрудника) КАК РазмерПротивогазаСотрудника,
	|	МАКСИМУМ(ВТ_АнтропометрияСотрудниковПоБазе.РазмерРеспиратораСотрудника) КАК РазмерРеспиратораСотрудника,
	|	МАКСИМУМ(ВТ_АнтропометрияСотрудниковПоБазе.РазмерРукавицСотрудника) КАК РазмерРукавицСотрудника,
	|	МАКСИМУМ(ВТ_АнтропометрияСотрудниковПоБазе.РазмерПерчатокСотрудника) КАК РазмерПерчатокСотрудника,
	|	МАКСИМУМ(ВТ_АнтропометрияСотрудниковПоБазе.РазмерРубашкиСотрудника) КАК РазмерРубашкиСотрудника
	|ПОМЕСТИТЬ ВТ_СгруппированнаяАнтропометрияПоБазе
	|ИЗ
	|	ВТ_АнтропометрияСотрудниковПоБазе КАК ВТ_АнтропометрияСотрудниковПоБазе
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_АнтропометрияСотрудниковПоБазе.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.ФИО КАК ФИО,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Рост КАК Рост,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерОдежды КАК РазмерОдежды,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерОбуви КАК РазмерОбуви,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерГоловногоУбора КАК РазмерГоловногоУбора,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерПротивогаза КАК РазмерПротивогаза,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерРеспиратора КАК РазмерРеспиратора,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерРукавиц КАК РазмерРукавиц,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерПерчаток КАК РазмерПерчаток,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерРубашки КАК РазмерРубашки,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Рост = """"
	|						И ВТ_ДопустимыеЗначенияРоста.ДопустимыйРост ЕСТЬ NULL
	|					ТОГДА 3
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Рост = ЕСТЬNULL(ВТ_СгруппированнаяАнтропометрияПоБазе.РостСотрудника, """")
	|							ТОГДА 1
	|						ИНАЧЕ 2
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК АнализРоста,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерОдежды = """"
	|						И ВТ_ДопустимыеРазмерыОдежды.ДопустимыйРазмерОдежды ЕСТЬ NULL
	|					ТОГДА 3
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерОдежды = ЕСТЬNULL(ВТ_СгруппированнаяАнтропометрияПоБазе.РазмерОдеждыСотрудника, """")
	|							ТОГДА 1
	|						ИНАЧЕ 2
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК АнализРазмераОдежды,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерОбуви = """"
	|						И ВТ_ДопустимыеРазмерыОбуви.ДопустимыйРазмерОбуви ЕСТЬ NULL
	|					ТОГДА 3
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерОбуви = ЕСТЬNULL(ВТ_СгруппированнаяАнтропометрияПоБазе.РазмерОбувиСотрудника, """")
	|							ТОГДА 1
	|						ИНАЧЕ 2
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК АнализРазмераОбуви,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерГоловногоУбора = """"
	|						И ВТ_ДопустимыеРазмерыГоловногоУбора.ДопустимыйРазмерГоловногоУбора ЕСТЬ NULL
	|					ТОГДА 3
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерГоловногоУбора = ЕСТЬNULL(ВТ_СгруппированнаяАнтропометрияПоБазе.РазмерГоловногоУбораСотрудника, """")
	|							ТОГДА 1
	|						ИНАЧЕ 2
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК АнализРазмераГоловногоУбора,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерПротивогаза = """"
	|						И ВТ_ДопустимыеРазмерыПротивогаза.ДопустимыйРазмерПротивогаза ЕСТЬ NULL
	|					ТОГДА 3
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерПротивогаза = ЕСТЬNULL(ВТ_СгруппированнаяАнтропометрияПоБазе.РазмерПротивогазаСотрудника, """")
	|							ТОГДА 1
	|						ИНАЧЕ 2
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК АнализРазмераПротивогаза,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерРеспиратора = """"
	|						И ВТ_ДопустимыеРазмерыРеспиратора.ДопустимыйРазмерРеспиратора ЕСТЬ NULL
	|					ТОГДА 3
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерРеспиратора = ЕСТЬNULL(ВТ_СгруппированнаяАнтропометрияПоБазе.РазмерРеспиратораСотрудника, """")
	|							ТОГДА 1
	|						ИНАЧЕ 2
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК АнализРазмераРеспиратора,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерРукавиц = """"
	|						И ВТ_ДопустимыеРазмерыРукавиц.ДопустимыйРазмерРукавиц ЕСТЬ NULL
	|					ТОГДА 3
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерРукавиц = ЕСТЬNULL(ВТ_СгруппированнаяАнтропометрияПоБазе.РазмерРукавицСотрудника, """")
	|							ТОГДА 1
	|						ИНАЧЕ 2
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК АнализРазмераРукавиц,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерПерчаток = """"
	|						И ВТ_ДопустимыеРазмерыПерчаток.ДопустимыйРазмерПерчаток ЕСТЬ NULL
	|					ТОГДА 3
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерПерчаток = ЕСТЬNULL(ВТ_СгруппированнаяАнтропометрияПоБазе.РазмерПерчатокСотрудника, """")
	|							ТОГДА 1
	|						ИНАЧЕ 2
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК АнализРазмераПерчаток,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерРубашки = """"
	|						И ВТ_ДопустимыеРазмерыРубашки.ДопустимыйРазмерРубашки ЕСТЬ NULL
	|					ТОГДА 3
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерРубашки = ЕСТЬNULL(ВТ_СгруппированнаяАнтропометрияПоБазе.РазмерРубашкиСотрудника, """")
	|							ТОГДА 1
	|						ИНАЧЕ 2
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК АнализРазмераРубашки,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Идентификатор КАК Идентификатор,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.НомерТелефона КАК НомерТелефона,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.АдресЭП КАК АдресЭП,
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.ДатаПриемаДляЛичнойКарточки КАК ДатаПриемаДляЛичнойКарточки
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаДанныхПоСотрудникамССотрудниками КАК ВТ_ТаблицаДанныхПоСотрудникамССотрудниками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СгруппированнаяАнтропометрияПоБазе КАК ВТ_СгруппированнаяАнтропометрияПоБазе
	|		ПО ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Сотрудник = ВТ_СгруппированнаяАнтропометрияПоБазе.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДопустимыеЗначенияРоста КАК ВТ_ДопустимыеЗначенияРоста
	|		ПО ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.Рост = ВТ_ДопустимыеЗначенияРоста.ДопустимыйРост
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДопустимыеРазмерыОдежды КАК ВТ_ДопустимыеРазмерыОдежды
	|		ПО ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерОдежды = ВТ_ДопустимыеРазмерыОдежды.ДопустимыйРазмерОдежды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДопустимыеРазмерыОбуви КАК ВТ_ДопустимыеРазмерыОбуви
	|		ПО ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерОбуви = ВТ_ДопустимыеРазмерыОбуви.ДопустимыйРазмерОбуви
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДопустимыеРазмерыГоловногоУбора КАК ВТ_ДопустимыеРазмерыГоловногоУбора
	|		ПО ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерГоловногоУбора = ВТ_ДопустимыеРазмерыГоловногоУбора.ДопустимыйРазмерГоловногоУбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДопустимыеРазмерыПротивогаза КАК ВТ_ДопустимыеРазмерыПротивогаза
	|		ПО ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерПротивогаза = ВТ_ДопустимыеРазмерыПротивогаза.ДопустимыйРазмерПротивогаза
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДопустимыеРазмерыРеспиратора КАК ВТ_ДопустимыеРазмерыРеспиратора
	|		ПО ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерРеспиратора = ВТ_ДопустимыеРазмерыРеспиратора.ДопустимыйРазмерРеспиратора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДопустимыеРазмерыРукавиц КАК ВТ_ДопустимыеРазмерыРукавиц
	|		ПО ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерРукавиц = ВТ_ДопустимыеРазмерыРукавиц.ДопустимыйРазмерРукавиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДопустимыеРазмерыПерчаток КАК ВТ_ДопустимыеРазмерыПерчаток
	|		ПО ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерПерчаток = ВТ_ДопустимыеРазмерыПерчаток.ДопустимыйРазмерПерчаток
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДопустимыеРазмерыРубашки КАК ВТ_ДопустимыеРазмерыРубашки
	|		ПО ВТ_ТаблицаДанныхПоСотрудникамССотрудниками.РазмерРубашки = ВТ_ДопустимыеРазмерыРубашки.ДопустимыйРазмерРубашки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Сотрудник) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.ТабельныйНомер,
	|	ВТ_Результат.ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	ВТ_Результат.Рост КАК Рост,
	|	ВТ_Результат.РазмерОдежды КАК РазмерОдежды,
	|	ВТ_Результат.РазмерОбуви КАК РазмерОбуви,
	|	ВТ_Результат.РазмерГоловногоУбора КАК РазмерГоловногоУбора,
	|	ВТ_Результат.РазмерПротивогаза КАК РазмерПротивогаза,
	|	ВТ_Результат.РазмерРеспиратора КАК РазмерРеспиратора,
	|	ВТ_Результат.РазмерРукавиц КАК РазмерРукавиц,
	|	ВТ_Результат.РазмерПерчаток КАК РазмерПерчаток,
	|	ВТ_Результат.РазмерРубашки КАК РазмерРубашки,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.АнализРоста КАК АнализРоста,
	|	ВТ_Результат.АнализРазмераОдежды КАК АнализРазмераОдежды,
	|	ВТ_Результат.АнализРазмераОбуви КАК АнализРазмераОбуви,
	|	ВТ_Результат.АнализРазмераГоловногоУбора КАК АнализРазмераГоловногоУбора,
	|	ВТ_Результат.АнализРазмераПротивогаза КАК АнализРазмераПротивогаза,
	|	ВТ_Результат.АнализРазмераРеспиратора КАК АнализРазмераРеспиратора,
	|	ВТ_Результат.АнализРазмераРукавиц КАК АнализРазмераРукавиц,
	|	ВТ_Результат.АнализРазмераПерчаток КАК АнализРазмераПерчаток,
	|	ВТ_Результат.АнализРазмераРубашки КАК АнализРазмераРубашки,
	|	ВТ_Результат.Идентификатор КАК Идентификатор,
	|	ВТ_Результат.НомерТелефона КАК НомерТелефона,
	|	ВТ_Результат.АдресЭП КАК АдресЭП,
	|	ВТ_Результат.ДатаПриемаДляЛичнойКарточки КАК ДатаПриемаДляЛичнойКарточки,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_Результат.ТабельныйНомер = ВТ_АнализДублей.ТабельныйНомер
	|			И ВТ_Результат.ФИО = ВТ_АнализДублей.ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_АнализДублей.ФИО КАК ФИО,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаДанныхПоСотрудникам",	Объект.ТаблицаДанныхПоСотрудникам.Выгрузить());
	Запрос.УстановитьПараметр("Организация",				Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[28].Выгрузить();
	
	ДанныеПоСотрудникамЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаДанныхПоСотрудникам.Загрузить(Результат[27].Выгрузить()); 	
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьДанныеПоСотрудникамНаСервере()
	
	ДанныеПоСотрудникамПротокол = "*****Загрузка данных по сотрудникам*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанныхПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ТаблицаДанныхПоСотрудникам.Рост КАК Рост,
	|	ТаблицаДанныхПоСотрудникам.РазмерОдежды КАК РазмерОдежды,
	|	ТаблицаДанныхПоСотрудникам.РазмерОбуви КАК РазмерОбуви,
	|	ТаблицаДанныхПоСотрудникам.РазмерГоловногоУбора КАК РазмерГоловногоУбора,
	|	ТаблицаДанныхПоСотрудникам.РазмерПротивогаза КАК РазмерПротивогаза,
	|	ТаблицаДанныхПоСотрудникам.РазмерРеспиратора КАК РазмерРеспиратора,
	|	ТаблицаДанныхПоСотрудникам.РазмерРукавиц КАК РазмерРукавиц,
	|	ТаблицаДанныхПоСотрудникам.РазмерПерчаток КАК РазмерПерчаток,
	|	ТаблицаДанныхПоСотрудникам.РазмерРубашки КАК РазмерРубашки,
	|	ТаблицаДанныхПоСотрудникам.АнализРоста КАК АнализРоста,
	|	ТаблицаДанныхПоСотрудникам.АнализРазмераОдежды КАК АнализРазмераОдежды,
	|	ТаблицаДанныхПоСотрудникам.АнализРазмераОбуви КАК АнализРазмераОбуви,
	|	ТаблицаДанныхПоСотрудникам.АнализРазмераГоловногоУбора КАК АнализРазмераГоловногоУбора,
	|	ТаблицаДанныхПоСотрудникам.АнализРазмераПротивогаза КАК АнализРазмераПротивогаза,
	|	ТаблицаДанныхПоСотрудникам.АнализРазмераРеспиратора КАК АнализРазмераРеспиратора,
	|	ТаблицаДанныхПоСотрудникам.АнализРазмераРукавиц КАК АнализРазмераРукавиц,
	|	ТаблицаДанныхПоСотрудникам.АнализРазмераПерчаток КАК АнализРазмераПерчаток,
	|	ТаблицаДанныхПоСотрудникам.АнализРазмераРубашки КАК АнализРазмераРубашки,
	|	ТаблицаДанныхПоСотрудникам.ФИО КАК ФИО,
	|	ТаблицаДанныхПоСотрудникам.Идентификатор КАК Идентификатор,
	|	ТаблицаДанныхПоСотрудникам.НомерТелефона КАК НомерТелефона,
	|	ТаблицаДанныхПоСотрудникам.АдресЭП КАК АдресЭП,
	|	ТаблицаДанныхПоСотрудникам.ДатаПриемаДляЛичнойКарточки КАК ДатаПриемаДляЛичнойКарточки
	|ПОМЕСТИТЬ ВТ_ТаблицаДанныхПоСотрудникам
	|ИЗ
	|	&ТаблицаДанныхПоСотрудникам КАК ТаблицаДанныхПоСотрудникам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДанныхПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДанныхПоСотрудникам.Рост КАК Рост,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерОдежды КАК РазмерОдежды,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерОбуви КАК РазмерОбуви,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерГоловногоУбора КАК РазмерГоловногоУбора,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерПротивогаза КАК РазмерПротивогаза,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерРеспиратора КАК РазмерРеспиратора,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерРукавиц КАК РазмерРукавиц,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерПерчаток КАК РазмерПерчаток,
	|	ВТ_ТаблицаДанныхПоСотрудникам.РазмерРубашки КАК РазмерРубашки,
	|	ВТ_ТаблицаДанныхПоСотрудникам.АнализРоста КАК АнализРоста,
	|	ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераОдежды КАК АнализРазмераОдежды,
	|	ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераОбуви КАК АнализРазмераОбуви,
	|	ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераГоловногоУбора КАК АнализРазмераГоловногоУбора,
	|	ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераПротивогаза КАК АнализРазмераПротивогаза,
	|	ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераРеспиратора КАК АнализРазмераРеспиратора,
	|	ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераРукавиц КАК АнализРазмераРукавиц,
	|	ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераПерчаток КАК АнализРазмераПерчаток,
	|	ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераРубашки КАК АнализРазмераРубашки,
	|	ВТ_ТаблицаДанныхПоСотрудникам.ФИО КАК ФИО,
	|	ВТ_ТаблицаДанныхПоСотрудникам.Идентификатор КАК Идентификатор,
	|	ВТ_ТаблицаДанныхПоСотрудникам.НомерТелефона КАК НомерТелефона,
	|	ВТ_ТаблицаДанныхПоСотрудникам.АдресЭП КАК АдресЭП,
	|	ВТ_ТаблицаДанныхПоСотрудникам.ДатаПриемаДляЛичнойКарточки КАК ДатаПриемаДляЛичнойКарточки
	|ИЗ
	|	ВТ_ТаблицаДанныхПоСотрудникам КАК ВТ_ТаблицаДанныхПоСотрудникам
	|ГДЕ
	|	НЕ ВТ_ТаблицаДанныхПоСотрудникам.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И (ВТ_ТаблицаДанныхПоСотрудникам.АнализРоста = 2
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераОдежды = 2
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераОбуви = 2
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераГоловногоУбора = 2
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераПротивогаза = 2
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераРеспиратора = 2
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераРукавиц = 2
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераПерчаток = 2
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераРубашки = 2
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРоста = 3
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераОдежды = 3
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераОбуви = 3
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераГоловногоУбора = 3
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераПротивогаза = 3
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераРеспиратора = 3
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераРукавиц = 3
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераПерчаток = 3
	|			ИЛИ ВТ_ТаблицаДанныхПоСотрудникам.АнализРазмераРубашки = 3
	|			ИЛИ НЕ ВТ_ТаблицаДанныхПоСотрудникам.Идентификатор = """"
	|			ИЛИ НЕ ВТ_ТаблицаДанныхПоСотрудникам.НомерТелефона = """"
	|			ИЛИ НЕ ВТ_ТаблицаДанныхПоСотрудникам.АдресЭП = """"
	|			ИЛИ НЕ ВТ_ТаблицаДанныхПоСотрудникам.ДатаПриемаДляЛичнойКарточки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))";
	
	Запрос.УстановитьПараметр("ТаблицаДанныхПоСотрудникам",Объект.ТаблицаДанныхПоСотрудникам.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Информация для загрузки данных по сотрудникам не найдена.";
		
	Иначе
		
		ТаблицаЗапроса = Результат.Выгрузить();
		
		Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
			
			//запись роста
			Если СтрокаТаблицыЗапроса.АнализРоста = 2 Тогда
				
				Если ЗагружатьДанныеПоСотрудникам("Рост") Тогда
					
					РегистрСвойств 					= РегистрыСведений.ЗначенияАнтропометрическихСвойств.СоздатьМенеджерЗаписи();
					РегистрСвойств.Сотрудник 		= СтрокаТаблицыЗапроса.Сотрудник;
					РегистрСвойств.ВидСвойства 		= Справочники.ВидыАнтропометрическихСвойств.Рост;
					РегистрСвойств.ЗначениеСвойства = СтрокаТаблицыЗапроса.Рост;
					
					Попытка
						РегистрСвойств.Записать(ИСТИНА);
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " установлен рост: " + СтрокаТаблицыЗапроса.Рост;
					Исключение
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Рост для сотрудника " + СтрокаТаблицыЗапроса.ФИО + " не загружен." + Символы.ПС + ОписаниеОшибки();
					КонецПопытки;
					
				КонецЕсли;
			
			ИначеЕсли СтрокаТаблицыЗапроса.АнализРоста = 3 Тогда
				
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " задан недопустимый рост: " + СтрокаТаблицыЗапроса.Рост;
				
			КонецЕсли;
			
			//запись размера одежды
			Если СтрокаТаблицыЗапроса.АнализРазмераОдежды = 2 Тогда
				
				Если ЗагружатьДанныеПоСотрудникам("Размер одежды") Тогда
					
					РегистрСвойств 					= РегистрыСведений.ЗначенияАнтропометрическихСвойств.СоздатьМенеджерЗаписи();
					РегистрСвойств.Сотрудник 		= СтрокаТаблицыЗапроса.Сотрудник;
					РегистрСвойств.ВидСвойства 		= Справочники.ВидыАнтропометрическихСвойств.РазмерОдежды;
					РегистрСвойств.ЗначениеСвойства = СтрокаТаблицыЗапроса.РазмерОдежды;
					
					Попытка
						РегистрСвойств.Записать(ИСТИНА);
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " установлен размер одежды: " + СтрокаТаблицыЗапроса.РазмерОдежды;
					Исключение
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Размер одежды для сотрудника " + СтрокаТаблицыЗапроса.ФИО + " не загружен." + Символы.ПС + ОписаниеОшибки();
					КонецПопытки;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыЗапроса.АнализРазмераОдежды = 3 Тогда
				
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " задан недопустимый размер одежды: " + СтрокаТаблицыЗапроса.РазмерОдежды;
				
			КонецЕсли;
			
			//запись размера обуви
			Если СтрокаТаблицыЗапроса.АнализРазмераОбуви = 2 Тогда
				
				Если ЗагружатьДанныеПоСотрудникам("Размер обуви") Тогда
					
					РегистрСвойств 					= РегистрыСведений.ЗначенияАнтропометрическихСвойств.СоздатьМенеджерЗаписи();
					РегистрСвойств.Сотрудник 		= СтрокаТаблицыЗапроса.Сотрудник;
					РегистрСвойств.ВидСвойства 		= Справочники.ВидыАнтропометрическихСвойств.РазмерОбуви;
					РегистрСвойств.ЗначениеСвойства = СтрокаТаблицыЗапроса.РазмерОбуви;
					
					Попытка
						РегистрСвойств.Записать(ИСТИНА);
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " установлен размер обуви: " + СтрокаТаблицыЗапроса.РазмерОбуви;
					Исключение
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Размер обуви для сотрудника " + СтрокаТаблицыЗапроса.ФИО + " не загружен." + Символы.ПС + ОписаниеОшибки();
					КонецПопытки;
					
				КонецЕсли;
			
			ИначеЕсли СтрокаТаблицыЗапроса.АнализРазмераОбуви = 3 Тогда
				
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " задан недопустимый размер обуви: " + СтрокаТаблицыЗапроса.РазмерОбуви;
				
			КонецЕсли;
			
			//запись размера головного убора
			Если СтрокаТаблицыЗапроса.АнализРазмераГоловногоУбора = 2 Тогда
				
				Если ЗагружатьДанныеПоСотрудникам("Размер головного убора") Тогда
					
					РегистрСвойств 					= РегистрыСведений.ЗначенияАнтропометрическихСвойств.СоздатьМенеджерЗаписи();
					РегистрСвойств.Сотрудник 		= СтрокаТаблицыЗапроса.Сотрудник;
					РегистрСвойств.ВидСвойства 		= Справочники.ВидыАнтропометрическихСвойств.РазмерГоловногоУбора;
					РегистрСвойств.ЗначениеСвойства = СтрокаТаблицыЗапроса.РазмерГоловногоУбора;
					
					Попытка
						РегистрСвойств.Записать(ИСТИНА);
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " установлен размер головного убора: " + СтрокаТаблицыЗапроса.РазмерГоловногоУбора;
					Исключение
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Размер головного убора для сотрудника " + СтрокаТаблицыЗапроса.ФИО + " не загружен." + Символы.ПС + ОписаниеОшибки();
					КонецПопытки;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыЗапроса.АнализРазмераГоловногоУбора = 3 Тогда
				
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " задан недопустимый размер головного убора: " + СтрокаТаблицыЗапроса.РазмерГоловногоУбора;
				
			КонецЕсли;
			
			//запись размера противогаза
			Если СтрокаТаблицыЗапроса.АнализРазмераПротивогаза = 2 Тогда
				
				Если ЗагружатьДанныеПоСотрудникам("Размер противогаза") Тогда
					
					РегистрСвойств 					= РегистрыСведений.ЗначенияАнтропометрическихСвойств.СоздатьМенеджерЗаписи();
					РегистрСвойств.Сотрудник 		= СтрокаТаблицыЗапроса.Сотрудник;
					РегистрСвойств.ВидСвойства 		= Справочники.ВидыАнтропометрическихСвойств.РазмерПротивогаза;
					РегистрСвойств.ЗначениеСвойства = СтрокаТаблицыЗапроса.РазмерПротивогаза;
					
					Попытка
						РегистрСвойств.Записать(ИСТИНА);
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " установлен размер противогаза: " + СтрокаТаблицыЗапроса.РазмерПротивогаза;
					Исключение
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Размер противогаза для сотрудника " + СтрокаТаблицыЗапроса.ФИО + " не загружен." + Символы.ПС + ОписаниеОшибки();
					КонецПопытки;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыЗапроса.АнализРазмераПротивогаза = 3 Тогда
				
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " задан недопустимый размер противогаза: " + СтрокаТаблицыЗапроса.РазмерПротивогаза;
				
			КонецЕсли;
			
			//запись размера респиратора
			Если СтрокаТаблицыЗапроса.АнализРазмераРеспиратора = 2 Тогда
				
				Если ЗагружатьДанныеПоСотрудникам("Размер респиратора") Тогда
					
					РегистрСвойств 					= РегистрыСведений.ЗначенияАнтропометрическихСвойств.СоздатьМенеджерЗаписи();
					РегистрСвойств.Сотрудник 		= СтрокаТаблицыЗапроса.Сотрудник;
					РегистрСвойств.ВидСвойства 		= Справочники.ВидыАнтропометрическихСвойств.РазмерРеспиратора;
					РегистрСвойств.ЗначениеСвойства = СтрокаТаблицыЗапроса.РазмерРеспиратора;
					
					Попытка
						РегистрСвойств.Записать(ИСТИНА);
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " установлен размер респиратора: " + СтрокаТаблицыЗапроса.РазмерРеспиратора;
					Исключение
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Размер респиратора для сотрудника " + СтрокаТаблицыЗапроса.ФИО + " не загружен." + Символы.ПС + ОписаниеОшибки();
					КонецПопытки;
					
				КонецЕсли;
			
			ИначеЕсли СтрокаТаблицыЗапроса.АнализРазмераРеспиратора = 3 Тогда
				
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " задан недопустимый размер респиратора: " + СтрокаТаблицыЗапроса.РазмерРеспиратора;
				
			КонецЕсли;
			
			//запись размера рукавиц
			Если СтрокаТаблицыЗапроса.АнализРазмераРукавиц = 2 Тогда
				
				Если ЗагружатьДанныеПоСотрудникам("Размер рукавиц") Тогда
					
					РегистрСвойств 					= РегистрыСведений.ЗначенияАнтропометрическихСвойств.СоздатьМенеджерЗаписи();
					РегистрСвойств.Сотрудник 		= СтрокаТаблицыЗапроса.Сотрудник;
					РегистрСвойств.ВидСвойства 		= Справочники.ВидыАнтропометрическихСвойств.РазмерРукавиц;
					РегистрСвойств.ЗначениеСвойства = СтрокаТаблицыЗапроса.РазмерРукавиц;
					
					Попытка
						РегистрСвойств.Записать(ИСТИНА);
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " установлен размер рукавиц: " + СтрокаТаблицыЗапроса.РазмерРукавиц;
					Исключение
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Размер рукавиц для сотрудника " + СтрокаТаблицыЗапроса.ФИО + " не загружен." + Символы.ПС + ОписаниеОшибки();
					КонецПопытки;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыЗапроса.АнализРазмераРукавиц = 3 Тогда
				
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " задан недопустимый размер рукавиц: " + СтрокаТаблицыЗапроса.РазмерРукавиц;
				
			КонецЕсли;
			
			//запись размера перчаток
			Если СтрокаТаблицыЗапроса.АнализРазмераПерчаток = 2 Тогда
				
				Если ЗагружатьДанныеПоСотрудникам("Размер перчаток") Тогда
					
					РегистрСвойств 					= РегистрыСведений.ЗначенияАнтропометрическихСвойств.СоздатьМенеджерЗаписи();
					РегистрСвойств.Сотрудник 		= СтрокаТаблицыЗапроса.Сотрудник;
					РегистрСвойств.ВидСвойства 		= Справочники.ВидыАнтропометрическихСвойств.РазмерПерчаток;
					РегистрСвойств.ЗначениеСвойства = СтрокаТаблицыЗапроса.РазмерПерчаток;
					
					Попытка
						РегистрСвойств.Записать(ИСТИНА);
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " установлен размер перчаток: " + СтрокаТаблицыЗапроса.РазмерПерчаток;
					Исключение
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Размер перчаток для сотрудника " + СтрокаТаблицыЗапроса.ФИО + " не загружен." + Символы.ПС + ОписаниеОшибки();
					КонецПопытки;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыЗапроса.АнализРазмераПерчаток = 3 Тогда
				
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " задан недопустимый размер перчаток: " + СтрокаТаблицыЗапроса.РазмерПерчаток;
				
			КонецЕсли;
			
			//запись размера рубашки
			Если СтрокаТаблицыЗапроса.АнализРазмераРубашки = 2 Тогда
				
				Если ЗагружатьДанныеПоСотрудникам("Размер рубашки") Тогда
					
					РегистрСвойств 					= РегистрыСведений.ЗначенияАнтропометрическихСвойств.СоздатьМенеджерЗаписи();
					РегистрСвойств.Сотрудник 		= СтрокаТаблицыЗапроса.Сотрудник;
					РегистрСвойств.ВидСвойства 		= Справочники.ВидыАнтропометрическихСвойств.РазмерРубашки;
					РегистрСвойств.ЗначениеСвойства = СтрокаТаблицыЗапроса.РазмерРубашки;
					
					Попытка
						РегистрСвойств.Записать(ИСТИНА);
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " установлен размер рубашки: " + СтрокаТаблицыЗапроса.РазмерРубашки;
					Исключение
						ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Размер рубашки для сотрудника " + СтрокаТаблицыЗапроса.ФИО + " не загружен." + Символы.ПС + ОписаниеОшибки();
					КонецПопытки;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыЗапроса.АнализРазмераРубашки = 3 Тогда
				
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " задан недопустимый размер рубашки: " + СтрокаТаблицыЗапроса.РазмерРубашки;
				
			КонецЕсли;
			
			//запись идентификатора
			Если ЗагружатьДанныеПоСотрудникам("Идентификатор") Тогда
				СотрудникОбъект = СтрокаТаблицыЗапроса.Сотрудник.ПолучитьОбъект();
				СотрудникОбъект.Идентификатор = СтрокаТаблицыЗапроса.Идентификатор;
				СотрудникОбъект.Записать();
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " установлен идентификатор: " + СтрокаТаблицыЗапроса.Идентификатор;
			КонецЕсли;
			
			//запись даты приема для личной карточки
			Если ЗагружатьДанныеПоСотрудникам("Дата приема для личной карточки") Тогда
				СотрудникОбъект = СтрокаТаблицыЗапроса.Сотрудник.ПолучитьОбъект();
				СотрудникОбъект.ДатаПриемаДляЛичнойКарточки = СтрокаТаблицыЗапроса.ДатаПриемаДляЛичнойКарточки;
				СотрудникОбъект.Записать();
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыЗапроса.ФИО + " установлена дата приема для личной карточки: " + СтрокаТаблицыЗапроса.ДатаПриемаДляЛичнойКарточки;
			КонецЕсли;
		
			//запись контактной информации
			ФизЛицоОбъект = СтрокаТаблицыЗапроса.Сотрудник.ФизическоеЛицо.ПолучитьОбъект();
			
			ЗаписыватьОбъект = Ложь;
			
			//АсТБ_Alexey_103069_********************************************************************
			Если ЗагружатьДанныеПоСотрудникам("Телефон") И ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерТелефона) Тогда
			//АсТБ_Alexey_103069_********************************************************************	
				
				МассивСтрок = ФизЛицоОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон));
				
				Если МассивСтрок.Количество() = 0 Тогда
					СтрокаТелефон = ФизЛицоОбъект.КонтактнаяИнформация.Добавить();
				Иначе	
					СтрокаТелефон = МассивСтрок[0];
				КонецЕсли;
				
				XDTOИнформация = КонтактнаяИнформацияПоЗначениюРеквизитов(Перечисления.ТипыКонтактнойИнформации.Телефон,"+" + Лев(СтрокаТаблицыЗапроса.НомерТелефона,1),Сред(СтрокаТаблицыЗапроса.НомерТелефона,2,3),Прав(СтрокаТаблицыЗапроса.НомерТелефона,7));
				
				СтрокаТелефон.Тип 					= Перечисления.ТипыКонтактнойИнформации.Телефон;
				СтрокаТелефон.Вид 					= Справочники.ВидыКонтактнойИнформации.ТелефонФизическиеЛица;
				СтрокаТелефон.ЗначенияПолей 		= УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(XDTOИнформация);
				СтрокаТелефон.НомерТелефона 		= СтрокаТаблицыЗапроса.НомерТелефона;
				СтрокаТелефон.НомерТелефонаБезКодов = Прав(СтрокаТаблицыЗапроса.НомерТелефона,7);
				СтрокаТелефон.Представление 		= XDTOИнформация.Представление;
				
				ЗаписыватьОбъект = Истина;
				
			КонецЕсли;
			
			//АсТБ_Alexey_103069_********************************************************************
			Если ЗагружатьДанныеПоСотрудникам("Электронная почта") И ЗначениеЗаполнено(СтрокаТаблицыЗапроса.АдресЭП) Тогда
			//АсТБ_Alexey_103069_********************************************************************
			
				МассивСтрок = ФизЛицоОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
				
				Если МассивСтрок.Количество() = 0 Тогда
					СтрокаПочта = ФизЛицоОбъект.КонтактнаяИнформация.Добавить();
				Иначе	
					СтрокаПочта = МассивСтрок[0];
				КонецЕсли;
				
				Поз = СтрНайти(СтрокаТаблицыЗапроса.АдресЭП, "@");
				
				СтрокаПочта.Тип 				= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				СтрокаПочта.Вид 				= Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица;
				СтрокаПочта.ЗначенияПолей 		= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СтрокаТаблицыЗапроса.АдресЭП,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				СтрокаПочта.АдресЭП 			= СтрокаТаблицыЗапроса.АдресЭП;
				СтрокаПочта.ДоменноеИмяСервера	= Сред(СтрокаТаблицыЗапроса.АдресЭП, Поз+1);
				СтрокаПочта.Представление 		= СтрокаТаблицыЗапроса.АдресЭП;
				
				ЗаписыватьОбъект = Истина;
				
			КонецЕсли;
			
			Если ЗаписыватьОбъект Тогда
				ФизЛицоОбъект.Записать();
				ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "Записана контактная информация: " + ФизЛицоОбъект.Наименование + ?(ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерТелефона)," Телефон: " + СтрокаТелефон.Представление,"") + ?(ЗначениеЗаполнено(СтрокаТаблицыЗапроса.АдресЭП)," E-mail: " + СтрокаПочта.Представление,"");
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	ПроверитьДанныеПоСотрудникамВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	ДанныеПоСотрудникамПротокол = ДанныеПоСотрудникамПротокол + Символы.ПС + "*****Загрузка данных по сотрудникам завершена*****";
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьДанныеПоСотрудникам(Команда)
	
	ЗагрузитьДанныеПоСотрудникамНаСервере();
	
	Элементы.СтраницаДанныеПоСотрудникам.ПодчиненныеЭлементы.Группа21.ПодчиненныеЭлементы.ТаблицаДанныхПоСотрудникам.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаДанныхПоСотрудникамЗагрузитьДанныеПоСотрудникам.Доступность = Ложь;
	
КонецПроцедуры

// Возвращает XTDO объект типа "Контактная информация" по значению реквизитов.
&НаСервере
Функция КонтактнаяИнформацияПоЗначениюРеквизитов(ТипКонтактнойИнформации,КодСтраны,КодГорода,НомерТелефона)
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") );
	
	Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Данные = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") );
		Данные.КодСтраны  = КодСтраны;
		Данные.КодГорода  = КодГорода;
		Данные.Номер      = НомерТелефона;
		Данные.Добавочный = "";
		Результат.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеТелефона(Данные);
	КонецЕсли;
	
	Результат.Состав      = Данные;
	Результат.Комментарий = "";
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПрочитатьФайлСкладовВыдачиНаСервере(Адрес)

	Объект.ТаблицаСкладовВыдачи.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 10 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиСкладовВыдачи(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				НаименованиеСклада = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
			Иначе
				НаименованиеСклада = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 2, Сч, 2).Значение) = ТИП("Число") Тогда
					КодСинхронизации = Формат(ТабДок.Область(Сч, 2, Сч, 2).Значение,"ЧГ=");
				Иначе
					КодСинхронизации = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
				КонецЕсли;
			Иначе
				КодСинхронизации = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				ФИО_МОЛ = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение);
			Иначе
				ФИО_МОЛ = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 4, Сч, 4).Значение) = ТИП("Число") Тогда
					ТабельныйНомерМОЛ = Формат(ТабДок.Область(Сч, 4, Сч, 4).Значение,"ЧГ=");
				Иначе
					ТабельныйНомерМОЛ = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
				КонецЕсли;
			Иначе
				ТабельныйНомерМОЛ = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				ФИО = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение);
			Иначе
				ФИО = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 6, Сч, 6).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 6, Сч, 6).Значение) = ТИП("Число") Тогда
					ТабельныйНомер = Формат(ТабДок.Область(Сч, 6, Сч, 6).Значение,"ЧГ=");
				Иначе
					ТабельныйНомер = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Значение);
				КонецЕсли;
			Иначе
				ТабельныйНомер = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 7, Сч, 7).СодержитЗначение Тогда
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Значение);
			Иначе
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 8, Сч, 8).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 8, Сч, 8).Значение) = ТИП("Число") Тогда
					КодПодразделения	= Формат(ТабДок.Область(Сч, 8, Сч, 8).Значение,"ЧГ=");
				Иначе
					КодПодразделения	= СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Значение);
				КонецЕсли;
			Иначе
				КодПодразделения	= СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 9, Сч, 9).СодержитЗначение Тогда
				ВидВыдачи = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Значение);
			Иначе
				ВидВыдачи = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Текст);
			КонецЕсли;
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если СтрДлина(НаименованиеСклада) > 150 Тогда
				СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования склада превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НаименованиеСклада) Тогда
				СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Строка " + Сч + " - не задано наименование склада.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(КодСинхронизации) > 20 Тогда
				СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Строка " + Сч + " - длина кода синхронизации склада превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(ТабельныйНомерМОЛ) > 13 Тогда
				СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Строка " + Сч + " - длина табельного номера МОЛ превышает 13 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(ФИО_МОЛ) > 100 Тогда
				СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Строка " + Сч + " - длина ФИО МОЛ превышает 100 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(ТабельныйНомер) > 13 Тогда
				СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Строка " + Сч + " - длина табельного номера сотрудника превышает 13 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(ФИО) > 100 Тогда
				СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Строка " + Сч + " - длина ФИО сотрудника превышает 100 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(КодПодразделения) > 20 Тогда
				СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Строка " + Сч + " - длина кода подразделения превышает 20 символов.";
				НомерТелефона = "";
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;			
			
			НоваяСтрока 							= Объект.ТаблицаСкладовВыдачи.Добавить();
			НоваяСтрока.НаименованиеСклада			= НаименованиеСклада;
			НоваяСтрока.КодСинхронизации			= КодСинхронизации;
			НоваяСтрока.ФИО_МОЛ						= ФИО_МОЛ;
			НоваяСтрока.ТабельныйНомерМОЛ			= ТабельныйНомерМОЛ;
			НоваяСтрока.ФИО							= ФИО;
			НоваяСтрока.ТабельныйНомер				= ТабельныйНомер;
			НоваяСтрока.НаименованиеПодразделения	= НаименованиеПодразделения;
			НоваяСтрока.КодПодразделения			= КодПодразделения;
			Если ЗначениеЗаполнено(ВидВыдачи) Тогда
				НоваяСтрока.ВидВыдачи = ?(НРег(ВидВыдачи) = "коллективно",ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача"),ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача"));
			Иначе
				НоваяСтрока.ВидВыдачи = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПустаяСсылка");
			КонецЕсли;			
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлСкладовВыдачи(Команда)
	
	СкладыВыдачиПротокол = "*****Чтение файла загрузки*****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Не выбрана организация!";
		СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Не выбран файл загрузки!";
		СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлСкладовВыдачиНаСервере(ВременноеХранилище);
	
	ПроверитьСкладыВыдачиВБазе();
	
	Если СкладыВыдачиЕстьДубли Тогда
		СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
		Элементы.ТаблицаСкладовВыдачиЗагрузитьСкладыВыдачи.Доступность = Ложь;
	Конецесли;
		
	СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСкладыВыдачиВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСкладовВыдачи.НаименованиеСклада КАК НаименованиеСклада,
	|	ТаблицаСкладовВыдачи.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаСкладовВыдачи.ФИО_МОЛ КАК ФИО_МОЛ,
	|	ТаблицаСкладовВыдачи.ТабельныйНомерМОЛ КАК ТабельныйНомерМОЛ,
	|	ТаблицаСкладовВыдачи.ФИО КАК ФИО,
	|	ТаблицаСкладовВыдачи.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаСкладовВыдачи.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаСкладовВыдачи.КодПодразделения КАК КодПодразделения,
	|	ТаблицаСкладовВыдачи.ВидВыдачи КАК ВидВыдачи
	|ПОМЕСТИТЬ ВТ_ТаблицаСкладовВыдачи
	|ИЗ
	|	&ТаблицаСкладовВыдачи КАК ТаблицаСкладовВыдачи
	|ГДЕ
	|	НЕ ТаблицаСкладовВыдачи.НаименованиеСклада = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.КодСинхронизации КАК КодСинхронизации,
	|	Подразделения.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Подразделения
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.Наименование КАК Наименование,
	|	Сотрудники.ТабельныйНомер КАК ТабельныйНомер
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСкладовВыдачи.НаименованиеСклада КАК НаименованиеСклада,
	|	ВТ_ТаблицаСкладовВыдачи.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаСкладовВыдачи.ФИО_МОЛ КАК ФИО_МОЛ,
	|	ВТ_ТаблицаСкладовВыдачи.ТабельныйНомерМОЛ КАК ТабельныйНомерМОЛ,
	|	ВТ_ТаблицаСкладовВыдачи.ФИО КАК ФИО,
	|	ВТ_ТаблицаСкладовВыдачи.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаСкладовВыдачи.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаСкладовВыдачи.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаСкладовВыдачи.ВидВыдачи КАК ВидВыдачи,
	|	Склады.Ссылка КАК Склад,
	|	ВТ_Сотрудники.Сотрудник КАК МОЛ,
	|	ВТ_Сотрудники1.Сотрудник КАК Сотрудник,
	|	ВТ_Подразделения.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТ_ТаблицаСкладовВыдачиСоСправочниками
	|ИЗ
	|	ВТ_ТаблицаСкладовВыдачи КАК ВТ_ТаблицаСкладовВыдачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ВТ_ТаблицаСкладовВыдачи.НаименованиеСклада = Склады.Наименование
	|			И ВТ_ТаблицаСкладовВыдачи.КодСинхронизации = Склады.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ПО ВТ_ТаблицаСкладовВыдачи.ФИО_МОЛ = ВТ_Сотрудники.Наименование
	|			И ВТ_ТаблицаСкладовВыдачи.ТабельныйНомерМОЛ = ВТ_Сотрудники.ТабельныйНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники1
	|		ПО ВТ_ТаблицаСкладовВыдачи.ФИО = ВТ_Сотрудники1.Наименование
	|			И ВТ_ТаблицаСкладовВыдачи.ТабельныйНомер = ВТ_Сотрудники1.ТабельныйНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения
	|		ПО ВТ_ТаблицаСкладовВыдачи.КодПодразделения = ВТ_Подразделения.КодСинхронизации
	|			И ВТ_ТаблицаСкладовВыдачи.НаименованиеПодразделения = ВТ_Подразделения.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыВыдачиСредствЗащиты.Склад КАК Склад,
	|	СкладыВыдачиСредствЗащиты.Получатель КАК Получатель,
	|	СкладыВыдачиСредствЗащиты.ВидВыдачиСИЗ КАК ВидВыдачиСИЗ
	|ПОМЕСТИТЬ ВТ_СкладыВыдачиВБазе
	|ИЗ
	|	РегистрСведений.СкладыВыдачиСредствЗащиты КАК СкладыВыдачиСредствЗащиты
	|ГДЕ
	|	СкладыВыдачиСредствЗащиты.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.НаименованиеСклада КАК НаименованиеСклада,
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.ФИО_МОЛ КАК ФИО_МОЛ,
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.ТабельныйНомерМОЛ КАК ТабельныйНомерМОЛ,
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.ФИО КАК ФИО,
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.ВидВыдачи КАК ВидВыдачи,
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.Склад КАК Склад,
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.МОЛ КАК МОЛ,
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками.Подразделение КАК Подразделение,
	|	НЕ ВТ_СкладыВыдачиВБазе.Склад ЕСТЬ NULL КАК Существует
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаСкладовВыдачиСоСправочниками КАК ВТ_ТаблицаСкладовВыдачиСоСправочниками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкладыВыдачиВБазе КАК ВТ_СкладыВыдачиВБазе
	|		ПО ВТ_ТаблицаСкладовВыдачиСоСправочниками.ВидВыдачи = ВТ_СкладыВыдачиВБазе.ВидВыдачиСИЗ
	|			И ВТ_ТаблицаСкладовВыдачиСоСправочниками.Склад = ВТ_СкладыВыдачиВБазе.Склад
	|			И (ВЫБОР
	|				КОГДА НЕ ВТ_ТаблицаСкладовВыдачиСоСправочниками.ТабельныйНомер = """"
	|					ТОГДА ВТ_ТаблицаСкладовВыдачиСоСправочниками.Сотрудник = ВТ_СкладыВыдачиВБазе.Получатель
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НЕ ВТ_ТаблицаСкладовВыдачиСоСправочниками.КодПодразделения = """"
	|							ТОГДА ВТ_ТаблицаСкладовВыдачиСоСправочниками.Подразделение = ВТ_СкладыВыдачиВБазе.Получатель
	|						ИНАЧЕ ВТ_СкладыВыдачиВБазе.Получатель = НЕОПРЕДЕЛЕНО
	|					КОНЕЦ
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеСклада КАК НаименованиеСклада,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Склад) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейСкладов
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеСклада,
	|	ВТ_Результат.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ФИО_МОЛ КАК ФИО_МОЛ,
	|	ВТ_Результат.ТабельныйНомерМОЛ КАК ТабельныйНомерМОЛ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.МОЛ) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейМОЛ
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.ФИО_МОЛ,
	|	ВТ_Результат.ТабельныйНомерМОЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ФИО КАК ФИО,
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Сотрудник) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейСотрудников
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.ФИО,
	|	ВТ_Результат.ТабельныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Подразделение) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейПодразделений
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеСклада КАК НаименованиеСклада,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.ФИО_МОЛ КАК ФИО_МОЛ,
	|	ВТ_Результат.ТабельныйНомерМОЛ КАК ТабельныйНомерМОЛ,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	ВТ_Результат.ВидВыдачи КАК ВидВыдачи,
	|	ВТ_Результат.Склад КАК Склад,
	|	ВТ_Результат.МОЛ КАК МОЛ,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.Существует КАК Существует,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейСкладов.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейСкладов.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейМОЛ.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейМОЛ.КоличествоДублей
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_АнализДублейСотрудников.КоличествоДублей > 1
	|							ТОГДА ВТ_АнализДублейСотрудников.КоличествоДублей
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|									ТОГДА ВТ_АнализДублейПодразделений.КоличествоДублей
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейСкладов КАК ВТ_АнализДублейСкладов
	|		ПО ВТ_Результат.НаименованиеСклада = ВТ_АнализДублейСкладов.НаименованиеСклада
	|			И ВТ_Результат.КодСинхронизации = ВТ_АнализДублейСкладов.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейМОЛ КАК ВТ_АнализДублейМОЛ
	|		ПО ВТ_Результат.ФИО_МОЛ = ВТ_АнализДублейМОЛ.ФИО_МОЛ
	|			И ВТ_Результат.ТабельныйНомерМОЛ = ВТ_АнализДублейМОЛ.ТабельныйНомерМОЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейСотрудников КАК ВТ_АнализДублейСотрудников
	|		ПО ВТ_Результат.ФИО = ВТ_АнализДублейСотрудников.ФИО
	|			И ВТ_Результат.ТабельныйНомер = ВТ_АнализДублейСотрудников.ТабельныйНомер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|		ПО ВТ_Результат.НаименованиеПодразделения = ВТ_АнализДублейПодразделений.НаименованиеПодразделения
	|			И ВТ_Результат.КодПодразделения = ВТ_АнализДублейПодразделений.КодПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейСкладов.НаименованиеСклада КАК Наименование,
	|	ВТ_АнализДублейСкладов.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейСкладов КАК ВТ_АнализДублейСкладов
	|ГДЕ
	|	ВТ_АнализДублейСкладов.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейМОЛ.ФИО_МОЛ,
	|	ВТ_АнализДублейМОЛ.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейМОЛ КАК ВТ_АнализДублейМОЛ
	|ГДЕ
	|	ВТ_АнализДублейМОЛ.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейСотрудников.ФИО,
	|	ВТ_АнализДублейСотрудников.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейСотрудников КАК ВТ_АнализДублейСотрудников
	|ГДЕ
	|	ВТ_АнализДублейСотрудников.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейПодразделений.НаименованиеПодразделения,
	|	ВТ_АнализДублейПодразделений.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|ГДЕ
	|	ВТ_АнализДублейПодразделений.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаСкладовВыдачи",	Объект.ТаблицаСкладовВыдачи.Выгрузить());
	Запрос.УстановитьПараметр("Организация",			Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[11].Выгрузить();
	
	СкладыВыдачиЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаСкладовВыдачи.Загрузить(Результат[10].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСкладыВыдачиНаСервере()
	
	СкладыВыдачиПротокол = "*****Загрузка складов выдачи*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСкладовВыдачи.НаименованиеСклада КАК НаименованиеСклада,
	|	ТаблицаСкладовВыдачи.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаСкладовВыдачи.ФИО_МОЛ КАК ФИО_МОЛ,
	|	ТаблицаСкладовВыдачи.ТабельныйНомерМОЛ КАК ТабельныйНомерМОЛ,
	|	ТаблицаСкладовВыдачи.ФИО КАК ФИО,
	|	ТаблицаСкладовВыдачи.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаСкладовВыдачи.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаСкладовВыдачи.КодПодразделения КАК КодПодразделения,
	|	ТаблицаСкладовВыдачи.ВидВыдачи КАК ВидВыдачи,
	|	ТаблицаСкладовВыдачи.Склад КАК Склад,
	|	ТаблицаСкладовВыдачи.МОЛ КАК МОЛ,
	|	ТаблицаСкладовВыдачи.Сотрудник КАК Сотрудник,
	|	ТаблицаСкладовВыдачи.Подразделение КАК Подразделение,
	|	ТаблицаСкладовВыдачи.Существует КАК Существует
	|ПОМЕСТИТЬ ВТ_ТаблицаСкладовВыдачи
	|ИЗ
	|	&ТаблицаСкладовВыдачи КАК ТаблицаСкладовВыдачи
	|ГДЕ
	|	НЕ ТаблицаСкладовВыдачи.Существует
	|	И НЕ ТаблицаСкладовВыдачи.ВидВыдачи = ЗНАЧЕНИЕ(Перечисление.ВидыВыдачиСИЗ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаСкладовВыдачи.НаименованиеСклада КАК НаименованиеСклада,
	|	ВТ_ТаблицаСкладовВыдачи.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаСкладовВыдачи.ФИО_МОЛ КАК ФИО_МОЛ,
	|	ВТ_ТаблицаСкладовВыдачи.ТабельныйНомерМОЛ КАК ТабельныйНомерМОЛ,
	|	ВТ_ТаблицаСкладовВыдачи.ФИО КАК ФИО,
	|	ВТ_ТаблицаСкладовВыдачи.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаСкладовВыдачи.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаСкладовВыдачи.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаСкладовВыдачи.ВидВыдачи КАК ВидВыдачи,
	|	ВТ_ТаблицаСкладовВыдачи.Склад КАК Склад,
	|	ВТ_ТаблицаСкладовВыдачи.МОЛ КАК МОЛ,
	|	ВТ_ТаблицаСкладовВыдачи.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаСкладовВыдачи.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаСкладовВыдачи.Существует КАК Существует
	|ИЗ
	|	ВТ_ТаблицаСкладовВыдачи КАК ВТ_ТаблицаСкладовВыдачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаСкладовВыдачи.НаименованиеСклада КАК НаименованиеСклада,
	|	ВТ_ТаблицаСкладовВыдачи.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаСкладовВыдачи.МОЛ КАК МОЛ,
	|	ВТ_ТаблицаСкладовВыдачи.Склад КАК Склад
	|ИЗ
	|	ВТ_ТаблицаСкладовВыдачи КАК ВТ_ТаблицаСкладовВыдачи";
	
	Запрос.УстановитьПараметр("ТаблицаСкладовВыдачи",Объект.ТаблицаСкладовВыдачи.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗапроса = Результат[1].Выгрузить();
	ТаблицаСкладов = Результат[2].Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Информация для загрузки складов выдачи не найдена.";
		Возврат;
	КонецЕсли;
	
	//создаем склады и проверяем МОЛов
	Для Каждого СтрокаТаблицыСкладов Из ТаблицаСкладов Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицыСкладов.Склад) Тогда //проверяем состав МОЛов
			Если ЗначениеЗаполнено(СтрокаТаблицыСкладов.МОЛ) Тогда
				НайденныеСтроки = СтрокаТаблицыСкладов.Склад.МатериальноОтветственныеЛица.НайтиСтроки(НОВЫЙ Структура("МОЛ",СтрокаТаблицыСкладов.МОЛ));
				Если НайденныеСтроки.Количество() = 0 Тогда //добавляем МОЛа
					СкладОбъект 	= СтрокаТаблицыСкладов.Склад.ПолучитьОбъект();
					НоваяСтрока 	= СкладОбъект.МатериальноОтветственныеЛица.Добавить();
					НоваяСтрока.МОЛ = СтрокаТаблицыСкладов.МОЛ;
					СкладОбъект.Записать();
					СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "К складу: " + СтрокаТаблицыСкладов.Склад + " Добавлен МОЛ: " + СтрокаТаблицыСкладов.МОЛ;
				КонецЕсли;
			КонецЕсли;
		Иначе //создаем новый склад
			НайденныйСклад = ПолучитьСклад(СтрокаТаблицыСкладов);
			СтрокаТаблицыСкладов.Склад = НайденныйСклад;
		КонецЕсли;
		
	КонецЦикла;	
	
	//перебор основной таблицы
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		МожноЗагружать = Истина;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ТабельныйНомерМОЛ) 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.МОЛ) Тогда
			СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Не найден МОЛ по табельному номеру: " + СтрокаТаблицыЗапроса.ТабельныйНомерМОЛ;
			МожноЗагружать = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ТабельныйНомер) 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Сотрудник) Тогда
			СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Не найден сотрудник по табельному номеру: " + СтрокаТаблицыЗапроса.ТабельныйНомер;
			МожноЗагружать = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.КодПодразделения) 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Подразделение) Тогда
			СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Не найдено подразделение по коду: " + СтрокаТаблицыЗапроса.КодПодразделения;
			МожноЗагружать = Ложь;
		КонецЕсли;
		
		Если НЕ МожноЗагружать Тогда
			СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Информация не загружена!";
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаСкладов.НайтиСтроки(Новый Структура("НаименованиеСклада, КодСинхронизации",СтрокаТаблицыЗапроса.НаименованиеСклада, СтрокаТаблицыЗапроса.КодСинхронизации));
		
		ТекущийСклад 		= НайденныеСтроки[0].Склад;
		ТекущийВидВыдачи 	= СтрокаТаблицыЗапроса.ВидВыдачи;
		Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Сотрудник) Тогда //получатель-сотрудник
			ТекущийПолучатель = СтрокаТаблицыЗапроса.Сотрудник;
		Иначе //проверяем подразделение
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Подразделение) Тогда //получатель-подразделение
				ТекущийПолучатель = СтрокаТаблицыЗапроса.Подразделение;
			Иначе //получатель-НЕОПРЕДЕЛЕНО
				ТекущийПолучатель = НЕОПРЕДЕЛЕНО;
			КонецЕсли;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыСведений.СкладыВыдачиСредствЗащиты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
		НаборЗаписей.Отбор.Склад.Установить(ТекущийСклад);
		НаборЗаписей.Отбор.Получатель.Установить(ТекущийПолучатель);
		НаборЗаписей.Отбор.ВидВыдачиСИЗ.Установить(ТекущийВидВыдачи);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись 				= НаборЗаписей.Добавить();
			НоваяЗапись.Организация 	= Объект.Организация;
			НоваяЗапись.Склад 			= ТекущийСклад;
			НоваяЗапись.Получатель 		= ТекущийПолучатель;
			НоваяЗапись.ВидВыдачиСИЗ	= ТекущийВидВыдачи;
			
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
			Если ТекущийПолучатель = Неопределено Тогда
				СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Выполнена запись в по складу выдачи: " + ТекущийСклад + ". Получатель не задан. Вид выдачи: " + ТекущийВидВыдачи;
			Иначе
				СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Выполнена запись в по складу выдачи: " + ТекущийСклад + ". Получатель: " + ТекущийПолучатель + ". Вид выдачи: " + ТекущийВидВыдачи;
			КонецЕсли;
		Исключение
			СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Не удалось создать запись по складу выдачи: " + ТекущийСклад + "." + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	ПроверитьСкладыВыдачиВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "*****Загрузка складов выдачи завершена*****";
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСклад(СтрокаТаблицыСкладов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Наименование = &Наименование
	|	И Склады.КодСинхронизации = &КодСинхронизации";
	
	Запрос.УстановитьПараметр("Наименование",		СтрокаТаблицыСкладов.НаименованиеСклада);
	Запрос.УстановитьПараметр("КодСинхронизации",	СтрокаТаблицыСкладов.КодСинхронизации);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда //создаем новый
		
		НовыйСклад 					= Справочники.Склады.СоздатьЭлемент();
		НовыйСклад.Наименование 	= СтрокаТаблицыСкладов.НаименованиеСклада;
		НовыйСклад.КодСинхронизации = СтрокаТаблицыСкладов.КодСинхронизации;
		Если ЗначениеЗаполнено(СтрокаТаблицыСкладов.МОЛ) Тогда
			НоваяСтрока 	= НовыйСклад.МатериальноОтветственныеЛица.Добавить();
			НоваяСтрока.МОЛ = СтрокаТаблицыСкладов.МОЛ;
		КонецЕсли;
		НовыйСклад.УстановитьНовыйКод();
		НовыйСклад.Записать();
		
		СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "Создан склад: " + СтрокаТаблицыСкладов.НаименованиеСклада;
		
		Склад = НовыйСклад.Ссылка;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Склад = Выборка.Ссылка;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыСкладов.МОЛ) Тогда
			НайденныеСтроки = Склад.МатериальноОтветственныеЛица.НайтиСтроки(НОВЫЙ Структура("МОЛ",СтрокаТаблицыСкладов.МОЛ));
			Если НайденныеСтроки.Количество() = 0 Тогда //добавляем МОЛа
				СкладОбъект 	= Склад.ПолучитьОбъект();
				НоваяСтрока 	= СкладОбъект.МатериальноОтветственныеЛица.Добавить();
				НоваяСтрока.МОЛ = СтрокаТаблицыСкладов.МОЛ;
				СкладОбъект.Записать();
				СкладыВыдачиПротокол = СкладыВыдачиПротокол + Символы.ПС + "К складу: " + СтрокаТаблицыСкладов.Склад + " Добавлен МОЛ: " + СтрокаТаблицыСкладов.МОЛ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСкладыВыдачи(Команда)
	
	ЗагрузитьСкладыВыдачиНаСервере();
	
	Элементы.СтраницаСкладыВыдачи.ПодчиненныеЭлементы.ТаблицаСкладовВыдачи.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаСкладовВыдачиЗагрузитьСкладыВыдачи.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНоменклатурыОрганизацииНаСервере(Адрес)
	
	Объект.ТаблицаНоменклатурыОрганизации.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 9 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиНоменклатурыОрганизации(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 1, Сч, 1).Значение) = ТИП("Число") Тогда
					Артикул = Формат(ТабДок.Область(Сч, 1, Сч, 1).Значение,"ЧГ=");
				Иначе
					Артикул = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
				КонецЕсли;
			Иначе
				Артикул = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Попытка
				Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
					Если ТипЗнч(ТабДок.Область(Сч, 2, Сч, 2).Значение) = ТИП("Число") Тогда
						КодСинхронизации = ТабДок.Область(Сч, 2, Сч, 2).Значение;
					Иначе
						КодСинхронизации = Число(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение));
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст),Символы.НПП,"")) Тогда
						КодСинхронизации = Число(СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст),Символы.НПП,""));
					Иначе
						КодСинхронизации = 0;
					КонецЕсли;
				КонецЕсли;
				ДлинаКодаСинхронизации = СтрДлина(Формат(КодСинхронизации,"ЧГ="));
			Исключение
				НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Строка " + Сч + ": " + Символы.ПС + ОписаниеОшибки();
				ЕстьОшибкиВСтроке = Истина;
				ДлинаКодаСинхронизации = 0;
			КонецПопытки;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение);
			Иначе
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				НаименованиеМетрики = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
			Иначе
				НаименованиеМетрики = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 5, Сч, 5).Значение) = ТИП("Число") Тогда
					НоменклатурныйНомер = Формат(ТабДок.Область(Сч, 5, Сч, 5).Значение,"ЧГ=");
				Иначе
					НоменклатурныйНомер = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение);
				КонецЕсли;
			Иначе
				НоменклатурныйНомер = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 6, Сч, 6).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 6, Сч, 6).Значение) = ТИП("Число") Тогда
					КодЕдиницыИзмерения	= Формат(ТабДок.Область(Сч, 6, Сч, 6).Значение,"ЧГ=");
				Иначе
					КодЕдиницыИзмерения	= СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Значение);
				КонецЕсли;
			Иначе
				КодЕдиницыИзмерения	= СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст);
			КонецЕсли;
			
			Попытка
				
				Если ТабДок.Область(Сч, 7, Сч, 7).СодержитЗначение Тогда
					Если ТипЗнч(ТабДок.Область(Сч, 7, Сч, 7).Значение) = ТИП("Число") Тогда
						Количество	= ТабДок.Область(Сч, 7, Сч, 7).Значение;
					Иначе
						Количество	= Число(СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Значение));
					КонецЕсли;
				Иначе
					Количество	= Число(СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Текст));
				КонецЕсли;
				
			Исключение
				
				НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Строка " + Сч + ": " + Символы.ПС + ОписаниеОшибки();
				ЕстьОшибкиВСтроке = Истина;
				
			КонецПопытки;
			
			Попытка
				
				Если ЗначениеЗаполнено(ТабДок.Область(Сч, 8, Сч, 8).Текст) Тогда
					Если ТабДок.Область(Сч, 8, Сч, 8).СодержитЗначение Тогда
						Если ТипЗнч(ТабДок.Область(Сч, 8, Сч, 8).Значение) = ТИП("Число") Тогда
							Цена = ТабДок.Область(Сч, 8, Сч, 8).Значение;
						Иначе
							Цена = Число(СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Значение));
						КонецЕсли;
					Иначе
						Цена = Число(СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Текст));
					КонецЕсли;
				Иначе
					Цена = 0;
				КонецЕсли;
				
			Исключение
				
				НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Строка " + Сч + ": " + Символы.ПС + ОписаниеОшибки();
				ЕстьОшибкиВСтроке = Истина;
				
			КонецПопытки;
			
			Если СтрДлина(Артикул) > 25 Тогда
				НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Строка " + Сч + " - длина артикула превышает 25 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если ДлинаКодаСинхронизации > 15 Тогда
				НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Строка " + Сч + " - длина кода синхронизации превышает 15 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(НаименованиеНоменклатуры) > 150 Тогда
				НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования номенклатуры превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(НаименованиеМетрики) > 50 Тогда
				НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования размера превышает 50 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(НоменклатурныйНомер) > 14 Тогда
				НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Строка " + Сч + " - длина номенклатурного номера превышает 14 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(КодЕдиницыИзмерения) > 3 Тогда
				НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Строка " + Сч + " - длина кода единицы измерения превышает 3 символа.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;			
			
			НоваяСтрока 							= Объект.ТаблицаНоменклатурыОрганизации.Добавить();
			НоваяСтрока.Артикул						= Артикул;
			НоваяСтрока.КодСинхронизации			= КодСинхронизации;
			НоваяСтрока.НаименованиеНоменклатуры	= НаименованиеНоменклатуры;
			НоваяСтрока.НаименованиеМетрики			= НаименованиеМетрики;
			НоваяСтрока.НоменклатурныйНомер			= НоменклатурныйНомер;
			НоваяСтрока.КодЕдиницыИзмерения			= КодЕдиницыИзмерения;
			НоваяСтрока.Количество					= Количество;
			НоваяСтрока.Цена						= Цена;
			НоваяСтрока.СтатусСбыта					= ПредопределенноеЗначение("Перечисление.СтатусыСбыта.СтраховыеЗапасы");			
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлНоменклатурыОрганизации(Команда)
	
	НоменклатураОрганизацииПротокол = "*****Чтение файла загрузки*****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Не выбрана организация!";
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Не выбран файл загрузки!";
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоменклатураОрганизацииДатаАктуальности) Тогда
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Не задана дата актуальности!";
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоменклатураОрганизацииСклад) Тогда
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Не задан склад!";
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоменклатураОрганизацииГруппаНоменклатуры) Тогда
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Не задана группа номенклатуры!";
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоменклатураОрганизацииПоставщик) Тогда
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Не задан поставщик!";
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлНоменклатурыОрганизацииНаСервере(ВременноеХранилище);
	
	ПроверитьДублиВФайлеНоменклатурыОрганизации();
	
	Если НоменклатураОрганизацииЕстьДубли Тогда
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "В файле загрузки существуют дубли! Загрузка не доступна.";
		Элементы.ТаблицаНоменклатурыОрганизацииЗагрузитьНоменклатуруОрганизации.Доступность = Ложь;
	Иначе
		ПроверитьНоменклатуруОрганизацииВБазе();
		Если НоменклатураОрганизацииЕстьДубли Тогда
			НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
			Элементы.ТаблицаНоменклатурыОрганизацииЗагрузитьНоменклатуруОрганизации.Доступность = Ложь;
		Конецесли;
	Конецесли;
	
	НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиВФайлеНоменклатурыОрганизации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДляЗагрузки.Артикул КАК Артикул,
	|	ТаблицаДляЗагрузки.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаДляЗагрузки.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаДляЗагрузки.НаименованиеМетрики КАК НаименованиеМетрики,
	|	ТаблицаДляЗагрузки.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ТаблицаДляЗагрузки.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ТаблицаДляЗагрузки.СтатусСбыта КАК СтатусСбыта,
	|	ТаблицаДляЗагрузки.Количество КАК Количество,
	|	ТаблицаДляЗагрузки.Цена КАК Цена,
	|	ТаблицаДляЗагрузки.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаДляЗагрузки
	|ИЗ
	|	&ТаблицаДляЗагрузки КАК ТаблицаДляЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДляЗагрузки.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаДляЗагрузки.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаДляЗагрузки.НаименованиеМетрики КАК НаименованиеМетрики,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТаблицаДляЗагрузки.НомерСтроки) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_ТаблицаДляЗагрузки КАК ВТ_ТаблицаДляЗагрузки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаДляЗагрузки.КодСинхронизации,
	|	ВТ_ТаблицаДляЗагрузки.НаименованиеНоменклатуры,
	|	ВТ_ТаблицаДляЗагрузки.НаименованиеМетрики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДляЗагрузки.Артикул КАК Артикул,
	|	ВТ_ТаблицаДляЗагрузки.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаДляЗагрузки.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаДляЗагрузки.НаименованиеМетрики КАК НаименованиеМетрики,
	|	ВТ_ТаблицаДляЗагрузки.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ВТ_ТаблицаДляЗагрузки.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_ТаблицаДляЗагрузки.СтатусСбыта КАК СтатусСбыта,
	|	ВТ_ТаблицаДляЗагрузки.Количество КАК Количество,
	|	ВТ_ТаблицаДляЗагрузки.Цена КАК Цена,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_ТаблицаДляЗагрузки КАК ВТ_ТаблицаДляЗагрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_ТаблицаДляЗагрузки.КодСинхронизации = ВТ_АнализДублей.КодСинхронизации
	|			И ВТ_ТаблицаДляЗагрузки.НаименованиеНоменклатуры = ВТ_АнализДублей.НаименованиеНоменклатуры
	|			И ВТ_ТаблицаДляЗагрузки.НаименованиеМетрики = ВТ_АнализДублей.НаименованиеМетрики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_АнализДублей.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_АнализДублей.НаименованиеМетрики КАК НаименованиеМетрики,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки",	Объект.ТаблицаНоменклатурыОрганизации.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[3].Выгрузить();
	
	НоменклатураОрганизацииЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаНоменклатурыОрганизации.Загрузить(Результат[2].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНоменклатуруОрганизацииВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДляЗагрузки.Артикул КАК Артикул,
	|	ТаблицаДляЗагрузки.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаДляЗагрузки.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаДляЗагрузки.НаименованиеМетрики КАК НаименованиеМетрики,
	|	ТаблицаДляЗагрузки.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ТаблицаДляЗагрузки.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ТаблицаДляЗагрузки.СтатусСбыта КАК СтатусСбыта,
	|	ТаблицаДляЗагрузки.Количество КАК Количество,
	|	ТаблицаДляЗагрузки.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ТаблицаДляЗагрузки
	|ИЗ
	|	&ТаблицаДляЗагрузки КАК ТаблицаДляЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНоменклатурыОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ОстаткиНоменклатурыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(&ДатаАнализа, Организация = &ОрганизацияДляОстатков) КАК ОстаткиНоменклатурыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатурыОстатки.Номенклатура,
	|	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДляЗагрузки.Артикул КАК Артикул,
	|	ВТ_ТаблицаДляЗагрузки.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаДляЗагрузки.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаДляЗагрузки.НаименованиеМетрики КАК НаименованиеМетрики,
	|	ВТ_ТаблицаДляЗагрузки.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ВТ_ТаблицаДляЗагрузки.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	СУММА(ВТ_ТаблицаДляЗагрузки.Количество) КАК Количество,
	|	ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(Метрики.Ссылка, ЗНАЧЕНИЕ(Справочник.Метрики.ПустаяСсылка)) КАК Метрика,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ВТ_ТаблицаДляЗагрузки.СтатусСбыта КАК СтатусСбыта,
	|	ВТ_ТаблицаДляЗагрузки.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаДляЗагрузки КАК ВТ_ТаблицаДляЗагрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТ_ТаблицаДляЗагрузки.НаименованиеНоменклатуры = Номенклатура.Наименование
	|			И ВТ_ТаблицаДляЗагрузки.КодСинхронизации = Номенклатура.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Метрики КАК Метрики
	|		ПО ВТ_ТаблицаДляЗагрузки.НаименованиеМетрики = Метрики.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ВТ_ТаблицаДляЗагрузки.КодЕдиницыИзмерения = ЕдиницыИзмерения.Код
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаДляЗагрузки.Артикул,
	|	ВТ_ТаблицаДляЗагрузки.НаименованиеНоменклатуры,
	|	ВТ_ТаблицаДляЗагрузки.НаименованиеМетрики,
	|	ВТ_ТаблицаДляЗагрузки.КодЕдиницыИзмерения,
	|	ВТ_ТаблицаДляЗагрузки.НоменклатурныйНомер,
	|	ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ЕСТЬNULL(Метрики.Ссылка, ЗНАЧЕНИЕ(Справочник.Метрики.ПустаяСсылка)),
	|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)),
	|	ВТ_ТаблицаДляЗагрузки.СтатусСбыта,
	|	ВТ_ТаблицаДляЗагрузки.Цена,
	|	ВТ_ТаблицаДляЗагрузки.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Артикул КАК Артикул,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.НаименованиеМетрики КАК НаименованиеМетрики,
	|	ВТ_Результат.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ВТ_Результат.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_Результат.Количество КАК Количество,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.Метрика КАК Метрика,
	|	ВТ_Результат.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) КАК Остаток,
	|	ВТ_Результат.СтатусСбыта КАК СтатусСбыта,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаВБазе,
	|	ВТ_Результат.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ИтоговаяТаблица
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВТ_Результат.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|			И ВТ_Результат.Метрика = ХарактеристикиНоменклатуры.Метрика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО ВТ_Результат.Номенклатура = ВТ_Остатки.Номенклатура
	|			И (ВЫБОР
	|				КОГДА ВТ_Результат.Метрика = ЗНАЧЕНИЕ(Справочник.Метрики.ПустаяСсылка)
	|					ТОГДА ВТ_Остатки.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяССылка)
	|				ИНАЧЕ ВТ_Результат.Метрика = ВТ_Остатки.ХарактеристикаНоменклатуры.Метрика
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаАнализа,
	|				Организация = &Организация
	|					И Поставщик = &Поставщик) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВТ_Результат.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИтоговаяТаблица.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ИтоговаяТаблица.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ИтоговаяТаблица.Номенклатура) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейНоменклатуры
	|ИЗ
	|	ВТ_ИтоговаяТаблица КАК ВТ_ИтоговаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИтоговаяТаблица.КодСинхронизации,
	|	ВТ_ИтоговаяТаблица.НаименованиеНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИтоговаяТаблица.НаименованиеМетрики КАК НаименованиеМетрики,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ИтоговаяТаблица.Метрика) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейМетрик
	|ИЗ
	|	ВТ_ИтоговаяТаблица КАК ВТ_ИтоговаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИтоговаяТаблица.НаименованиеМетрики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИтоговаяТаблица.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ИтоговаяТаблица.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ИтоговаяТаблица.НаименованиеМетрики КАК НаименованиеМетрики,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ИтоговаяТаблица.ХарактеристикаНоменклатуры) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейХарактеристик
	|ИЗ
	|	ВТ_ИтоговаяТаблица КАК ВТ_ИтоговаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИтоговаяТаблица.КодСинхронизации,
	|	ВТ_ИтоговаяТаблица.НаименованиеНоменклатуры,
	|	ВТ_ИтоговаяТаблица.НаименованиеМетрики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИтоговаяТаблица.Артикул КАК Артикул,
	|	ВТ_ИтоговаяТаблица.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ИтоговаяТаблица.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ИтоговаяТаблица.НаименованиеМетрики КАК НаименованиеМетрики,
	|	ВТ_ИтоговаяТаблица.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ВТ_ИтоговаяТаблица.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_ИтоговаяТаблица.Количество КАК Количество,
	|	ВТ_ИтоговаяТаблица.Номенклатура КАК Номенклатура,
	|	ВТ_ИтоговаяТаблица.Метрика КАК Метрика,
	|	ВТ_ИтоговаяТаблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ИтоговаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ИтоговаяТаблица.Остаток КАК Остаток,
	|	ВТ_ИтоговаяТаблица.СтатусСбыта КАК СтатусСбыта,
	|	ВТ_ИтоговаяТаблица.ЦенаВБазе КАК ЦенаВБазе,
	|	ВТ_ИтоговаяТаблица.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейНоменклатуры.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейНоменклатуры.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейХарактеристик.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейХарактеристик.КоличествоДублей
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_АнализДублейМетрик.КоличествоДублей > 1
	|							ТОГДА ВТ_АнализДублейМетрик.КоличествоДублей
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей
	|ИЗ
	|	ВТ_ИтоговаяТаблица КАК ВТ_ИтоговаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейНоменклатуры КАК ВТ_АнализДублейНоменклатуры
	|		ПО ВТ_ИтоговаяТаблица.КодСинхронизации = ВТ_АнализДублейНоменклатуры.КодСинхронизации
	|			И ВТ_ИтоговаяТаблица.НаименованиеНоменклатуры = ВТ_АнализДублейНоменклатуры.НаименованиеНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейХарактеристик КАК ВТ_АнализДублейХарактеристик
	|		ПО ВТ_ИтоговаяТаблица.КодСинхронизации = ВТ_АнализДублейХарактеристик.КодСинхронизации
	|			И ВТ_ИтоговаяТаблица.НаименованиеНоменклатуры = ВТ_АнализДублейХарактеристик.НаименованиеНоменклатуры
	|			И ВТ_ИтоговаяТаблица.НаименованиеМетрики = ВТ_АнализДублейХарактеристик.НаименованиеМетрики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейМетрик КАК ВТ_АнализДублейМетрик
	|		ПО ВТ_ИтоговаяТаблица.НаименованиеМетрики = ВТ_АнализДублейМетрик.НаименованиеМетрики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_АнализДублейНоменклатуры.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейНоменклатуры КАК ВТ_АнализДублейНоменклатуры
	|ГДЕ
	|	ВТ_АнализДублейНоменклатуры.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейХарактеристик.НаименованиеМетрики,
	|	ВТ_АнализДублейХарактеристик.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейХарактеристик КАК ВТ_АнализДублейХарактеристик
	|ГДЕ
	|	ВТ_АнализДублейХарактеристик.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейМетрик.НаименованиеМетрики,
	|	ВТ_АнализДублейМетрик.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейМетрик КАК ВТ_АнализДублейМетрик
	|ГДЕ
	|	ВТ_АнализДублейМетрик.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки",		Объект.ТаблицаНоменклатурыОрганизации.Выгрузить());
	Запрос.УстановитьПараметр("Организация",			Объект.Организация);
	Запрос.УстановитьПараметр("Поставщик",				НоменклатураОрганизацииПоставщик);
	Запрос.УстановитьПараметр("ДатаАнализа",			НоменклатураОрганизацииДатаАктуальности + 1);
	Запрос.УстановитьПараметр("ОрганизацияДляОстатков",	?(ПолучитьФункциональнуюОпцию("НеВестиУчетОстатковНоменклатурыПоОрганизации"),Справочники.Организации.ПустаяСсылка(),Объект.Организация));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[8].Выгрузить();
	
	НоменклатураОрганизацииЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаНоменклатурыОрганизации.Загрузить(Результат[7].Выгрузить());	
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьНоменклатуруОрганизацииНаСервере()
	
	НоменклатураОрганизацииПротокол = "*****Загрузка номенклатуры организации*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатурыОрганизации.Артикул КАК Артикул,
	|	ТаблицаНоменклатурыОрганизации.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаНоменклатурыОрганизации.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаНоменклатурыОрганизации.НаименованиеМетрики КАК НаименованиеМетрики,
	|	ТаблицаНоменклатурыОрганизации.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатурыОрганизации.Метрика КАК Метрика,
	|	ТаблицаНоменклатурыОрганизации.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ТаблицаНоменклатурыОрганизации.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатурыОрганизации.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ТаблицаНоменклатурыОрганизации.Количество КАК Количество,
	|	ТаблицаНоменклатурыОрганизации.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаНоменклатурыОрганизации.СтатусСбыта КАК СтатусСбыта,
	|	ТаблицаНоменклатурыОрганизации.Остаток КАК Остаток,
	|	ТаблицаНоменклатурыОрганизации.Цена КАК Цена,
	|	ТаблицаНоменклатурыОрганизации.ЦенаВБазе КАК ЦенаВБазе
	|ПОМЕСТИТЬ ВТ_ТаблицаНоменклатурыОрганизации
	|ИЗ
	|	&ТаблицаНоменклатурыОрганизации КАК ТаблицаНоменклатурыОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНоменклатурыОрганизации.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаНоменклатурыОрганизации.Цена КАК Цена,
	|	ВТ_ТаблицаНоменклатурыОрганизации.ЦенаВБазе КАК ЦенаВБазе
	|ПОМЕСТИТЬ ВТ_Цены
	|ИЗ
	|	ВТ_ТаблицаНоменклатурыОрганизации КАК ВТ_ТаблицаНоменклатурыОрганизации
	|ГДЕ
	|	НЕ ВТ_ТаблицаНоменклатурыОрганизации.Цена = ВТ_ТаблицаНоменклатурыОрганизации.ЦенаВБазе
	|	И НЕ ВТ_ТаблицаНоменклатурыОрганизации.Цена = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНоменклатурыОрганизации.Артикул КАК Артикул,
	|	ВТ_ТаблицаНоменклатурыОрганизации.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаНоменклатурыОрганизации.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаНоменклатурыОрганизации.НаименованиеМетрики КАК НаименованиеМетрики,
	|	ВТ_ТаблицаНоменклатурыОрганизации.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаНоменклатурыОрганизации.Метрика КАК Метрика,
	|	ВТ_ТаблицаНоменклатурыОрганизации.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ВТ_ТаблицаНоменклатурыОрганизации.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТаблицаНоменклатурыОрганизации.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_ТаблицаНоменклатурыОрганизации.Количество КАК Количество,
	|	ВТ_ТаблицаНоменклатурыОрганизации.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ТаблицаНоменклатурыОрганизации.СтатусСбыта КАК СтатусСбыта,
	|	ВТ_ТаблицаНоменклатурыОрганизации.Остаток КАК Остаток,
	|	ВТ_ТаблицаНоменклатурыОрганизации.Цена КАК Цена,
	|	ВТ_ТаблицаНоменклатурыОрганизации.ЦенаВБазе КАК ЦенаВБазе
	|ИЗ
	|	ВТ_ТаблицаНоменклатурыОрганизации КАК ВТ_ТаблицаНоменклатурыОрганизации";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыОрганизации",Объект.ТаблицаНоменклатурыОрганизации.Выгрузить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Информация для загрузки номенклатуры организации не найдена.";
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыЗапроса Из  ТаблицаЗапроса Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НаименованиеМетрики) И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Метрика) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ЕдиницаИзмерения) Тогда
			СтрокаТаблицыЗапроса.ЕдиницаИзмерения = ПроцедурыРаботыСНормамиСервер.ПолучитьЕдиницуИзмерения(СтрокаТаблицыЗапроса.КодЕдиницыИзмерения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Номенклатура) Тогда
			СтрокаТаблицыЗапроса.Номенклатура = ПолучитьНоменклатуруОрганизации(СтрокаТаблицыЗапроса.Артикул, СтрокаТаблицыЗапроса.КодСинхронизации, СтрокаТаблицыЗапроса.НаименованиеНоменклатуры, СтрокаТаблицыЗапроса.ЕдиницаИзмерения, СтрокаТаблицыЗапроса.СтатусСбыта);
		КонецЕсли;
		
		СтрокаТаблицыЗапроса.ХарактеристикаНоменклатуры = ПолучитьХарактеристикуНоменклатурыОрганизации(СтрокаТаблицыЗапроса.Номенклатура,СтрокаТаблицыЗапроса.Метрика);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НоменклатурныйНомер) Тогда
			Продолжить;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыСведений.НоменклатурныеНомераОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицыЗапроса.Номенклатура);
		НаборЗаписей.Отбор.ХарактеристикаНоменклатуры.Установить(СтрокаТаблицыЗапроса.ХарактеристикаНоменклатуры);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись 			 				= НаборЗаписей.Добавить();
			НоваяЗапись.Организация 				= Объект.Организация;
			НоваяЗапись.Номенклатура				= СтрокаТаблицыЗапроса.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры	= СтрокаТаблицыЗапроса.ХарактеристикаНоменклатуры;
			НоваяЗапись.НоменклатурныйНомер			= СтрокаТаблицыЗапроса.НоменклатурныйНомер;
			НоваяЗапись.НаименованиеОрганизации		= СтрокаТаблицыЗапроса.НаименованиеНоменклатуры;
			
		Иначе
			
			НоваяЗапись 			 				= НаборЗаписей[0];
			НоваяЗапись.Организация 				= Объект.Организация;
			НоваяЗапись.Номенклатура				= СтрокаТаблицыЗапроса.Номенклатура;
			НоваяЗапись.ХарактеристикаНоменклатуры	= СтрокаТаблицыЗапроса.ХарактеристикаНоменклатуры;
			НоваяЗапись.НоменклатурныйНомер			= СтрокаТаблицыЗапроса.НоменклатурныйНомер;
			НоваяЗапись.НаименованиеОрганизации		= СтрокаТаблицыЗапроса.НаименованиеНоменклатуры;
			
		КонецЕсли;
	
		Попытка
			НаборЗаписей.Записать(Истина);
			НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Выполнена запись номенклатурного номера организации. Номенклатура: " + СтрокаТаблицыЗапроса.НаименованиеНоменклатуры + ?(ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ХарактеристикаНоменклатуры),". Характеристика: " + СтрокаТаблицыЗапроса.ХарактеристикаНоменклатуры,"") + ". Номенклатурный номер: " + СтрокаТаблицыЗапроса.НоменклатурныйНомер;
		Исключение
			НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Не удалось создать запись номера номенклатуры организации." + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
	Объект.ТаблицаНоменклатурыОрганизации.Загрузить(ТаблицаЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатурыОрганизации.Артикул КАК Артикул,
	|	ТаблицаНоменклатурыОрганизации.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаНоменклатурыОрганизации.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаНоменклатурыОрганизации.НаименованиеМетрики КАК НаименованиеМетрики,
	|	ТаблицаНоменклатурыОрганизации.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатурыОрганизации.Метрика КАК Метрика,
	|	ТаблицаНоменклатурыОрганизации.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ТаблицаНоменклатурыОрганизации.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатурыОрганизации.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ТаблицаНоменклатурыОрганизации.Количество КАК Количество,
	|	ТаблицаНоменклатурыОрганизации.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаНоменклатурыОрганизации.СтатусСбыта КАК СтатусСбыта,
	|	ТаблицаНоменклатурыОрганизации.Остаток КАК Остаток,
	|	ТаблицаНоменклатурыОрганизации.Цена КАК Цена,
	|	ТаблицаНоменклатурыОрганизации.ЦенаВБазе КАК ЦенаВБазе
	|ПОМЕСТИТЬ ВТ_ТаблицаНоменклатурыОрганизации
	|ИЗ
	|	&ТаблицаНоменклатурыОрганизации КАК ТаблицаНоменклатурыОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНоменклатурыОрганизации.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаНоменклатурыОрганизации.Цена КАК Цена,
	|	ВТ_ТаблицаНоменклатурыОрганизации.ЦенаВБазе КАК ЦенаВБазе
	|ПОМЕСТИТЬ ВТ_Цены
	|ИЗ
	|	ВТ_ТаблицаНоменклатурыОрганизации КАК ВТ_ТаблицаНоменклатурыОрганизации
	|ГДЕ
	|	НЕ ВТ_ТаблицаНоменклатурыОрганизации.Цена = ВТ_ТаблицаНоменклатурыОрганизации.ЦенаВБазе
	|	И НЕ ВТ_ТаблицаНоменклатурыОрганизации.Цена = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Цены.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВТ_Цены.Цена) КАК Цена
	|ИЗ
	|	ВТ_Цены КАК ВТ_Цены
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Цены.Номенклатура";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыОрганизации",Объект.ТаблицаНоменклатурыОрганизации.Выгрузить());
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();	
	
	ТаблицаЦен.Свернуть("Номенклатура, Цена");
	
	Если НЕ ТаблицаЦен.Количество() = 0 Тогда
		
		НовыйДокумент = Документы.ЦеновоеСоглашение.СоздатьДокумент();
		НовыйДокумент.Дата 					= НачалоДня(НоменклатураОрганизацииДатаАктуальности);
		НовыйДокумент.Комментарий 			= "Загружен автоматически";
		НовыйДокумент.Организация 			= Объект.Организация;
		НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.Поставщик 			= НоменклатураОрганизацииПоставщик;
		НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.УстановитьНовыйНомер();
		НовыйДокумент.Товары.Загрузить(ТаблицаЦен);
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Загрузка цен выполнена!" + Символы.ПС + "Сформирован документ: " + НовыйДокумент.Ссылка;
		Исключение
			НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Загрузка цен не выполнена!" + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
	ЗагрузитьОстаткиНоменклатурыОрганизации();
	
	ПроверитьНоменклатуруОрганизацииВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
		
	НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "*****Загрузка номенклатуры организации завершена*****";
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьНоменклатуруОрганизации(Артикул, КодСинхронизации, НаименованиеНоменклатуры, ЕдиницаИзмерения, СтатусСбыта)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование
	|	И Номенклатура.КодСинхронизации = &КодСинхронизации";
	
	Запрос.УстановитьПараметр("КодСинхронизации",	КодСинхронизации);
	Запрос.УстановитьПараметр("Наименование",		НаименованиеНоменклатуры);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если НЕ ТаблицаЗапроса.Количество() = 0 Тогда
		Возврат ТаблицаЗапроса[0].Номенклатура;		
	КонецЕсли;	
	
	НоваяНоменклатура 						= Справочники.Номенклатура.СоздатьЭлемент();
	НоваяНоменклатура.Артикул 				= Артикул;
	НоваяНоменклатура.КодСинхронизации 		= КодСинхронизации;
	НоваяНоменклатура.ЕдиницаИзмерения 		= ЕдиницаИзмерения;
	НоваяНоменклатура.Наименование 			= НаименованиеНоменклатуры;
	НоваяНоменклатура.НаименованиеПолное 	= НаименованиеНоменклатуры;
	НоваяНоменклатура.Поставщик				= НоменклатураОрганизацииПоставщик;
	НоваяНоменклатура.ВидСИЗ				= ПроцедурыРаботыСНормамиСервер.СоздатьВидСИЗ(НаименованиеНоменклатуры);
	НоваяНоменклатура.Родитель 				= НоменклатураОрганизацииГруппаНоменклатуры;
	НоваяНоменклатура.СтатусСбыта			= СтатусСбыта;
	НоваяНоменклатура.УстановитьНовыйКод();
	
	Попытка
		НоваяНоменклатура.Записать();
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Создана номенклатура организации: " + НаименованиеНоменклатуры;
		ТекущаяНоменклатура = НоваяНоменклатура.Ссылка;
	Исключение
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Не удалось создать номенклатуру организации: " + НаименованиеНоменклатуры + Символы.ПС + ОписаниеОшибки();
		ТекущаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
		
	Возврат ТекущаяНоменклатура;	
	
КонецФункции

&НаСервере
Функция ПолучитьХарактеристикуНоменклатурыОрганизации(Номенклатура,Метрика)
	
	Если НЕ ЗначениеЗаполнено(Метрика) Тогда
		Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Метрика = &Метрика
	|	И ХарактеристикиНоменклатуры.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Метрика",	Метрика);
	Запрос.УстановитьПараметр("Владелец",	Номенклатура);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если НЕ ТаблицаЗапроса.Количество() = 0 Тогда
		Возврат ТаблицаЗапроса[0].ХарактеристикаНоменклатуры;		
	КонецЕсли;
	
	НоваяХарактеристика 				= Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	НоваяХарактеристика.Владелец 		= Номенклатура;
	НоваяХарактеристика.Код 			= Метрика.Код;
	НоваяХарактеристика.Метрика 		= Метрика;
	НоваяХарактеристика.Наименование 	= Метрика.Наименование;
	
	Попытка
		НоваяХарактеристика.Записать();
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + Номенклатура.Наименование + " - ооздана характеристика: " + Метрика.Наименование;
		ТекущаяХарактеристика = НоваяХарактеристика.Ссылка;
	Исключение
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + Номенклатура.Наименование + " - не удалось создать характеристику: " + Метрика.Наименование + Символы.ПС + ОписаниеОшибки();
		ТекущаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецПопытки;
		
	Возврат ТекущаяХарактеристика;	
	
КонецФункции

&НаСервере
Процедура ЗагрузитьОстаткиНоменклатурыОрганизации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДляЗагрузки.Номенклатура КАК Номенклатура,
	|	ТаблицаДляЗагрузки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаДляЗагрузки.Количество КАК Количество,
	|	ТаблицаДляЗагрузки.Остаток КАК Остаток
	|ПОМЕСТИТЬ ВТ_ТаблицаДляЗагрузки
	|ИЗ
	|	&ТаблицаДляЗагрузки КАК ТаблицаДляЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Характеристика
	|ПОМЕСТИТЬ ВТ_Характеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ХарактеристикиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДляЗагрузки.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаДляЗагрузки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ВТ_ТаблицаДляЗагрузки.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДляЗагрузки.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Характеристики.Характеристика ЕСТЬ NULL
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РазмерЗадан
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаДляЗагрузки КАК ВТ_ТаблицаДляЗагрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Характеристики КАК ВТ_Характеристики
	|		ПО ВТ_ТаблицаДляЗагрузки.Номенклатура = ВТ_Характеристики.Номенклатура
	|			И ВТ_ТаблицаДляЗагрузки.ХарактеристикаНоменклатуры = ВТ_Характеристики.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаДляЗагрузки.Номенклатура,
	|	ВТ_ТаблицаДляЗагрузки.ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДляЗагрузки.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Характеристики.Характеристика ЕСТЬ NULL
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&ОрганизацияДляОстатков КАК Организация,
	|	&Склад КАК Склад,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.Количество КАК Количество,
	|	ВТ_Результат.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	ВТ_Результат.РазмерЗадан
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Результат.Количество КАК Количество
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	НЕ ВТ_Результат.РазмерЗадан";
	
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки",		Объект.ТаблицаНоменклатурыОрганизации.Выгрузить());
	Запрос.УстановитьПараметр("Склад",					НоменклатураОрганизацииСклад);
	Запрос.УстановитьПараметр("Период",					НоменклатураОрганизацииДатаАктуальности);
	Запрос.УстановитьПараметр("ОрганизацияДляОстатков",	?(ПолучитьФункциональнуюОпцию("НеВестиУчетОстатковНоменклатурыПоОрганизации"),Справочники.Организации.ПустаяСсылка(),Объект.Организация));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаОстатков = Результат[3].Выгрузить(); 
	ТаблицаОшибок 	= Результат[4].Выгрузить();
	
	Для Каждого СтрокаТаблицыОшибок Из ТаблицаОшибок Цикл
		
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Для номенклатуры: " + СтрокаТаблицыОшибок.Номенклатура + " необходимо указать размер.";
		
	КонецЦикла;	
	
	Если ТаблицаОстатков.Количество() = 0 Тогда
		
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Информация для загрузки остатков номенклатуры организации не найдена.";
		Возврат;
		
	КонецЕсли;
	
	НовыйДокумент = Документы.КорректировкаРегистров.СоздатьДокумент();
	НовыйДокумент.Дата 					= НачалоДня(НоменклатураОрганизацииДатаАктуальности);
	НовыйДокумент.Комментарий 			= "Загружен автоматически";
	НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.УстановитьНовыйНомер();
	
	НоваяСтрока 	= НовыйДокумент.ТаблицаРегистров.Добавить();
	НоваяСтрока.Имя = "ОстаткиНоменклатуры";
	НовыйДокумент.Движения.ОстаткиНоменклатуры.Загрузить(ТаблицаОстатков);
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Загрузка остатков номенклатуры организации выполнена!" + Символы.ПС + "Сформирован документ: " + НовыйДокумент.Ссылка;
	Исключение
		НоменклатураОрганизацииПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Загрузка остатков номенклатуры организации не выполнена!" + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНоменклатуруОрганизации(Команда)
	
	ЗагрузитьНоменклатуруОрганизацииНаСервере();
	
	Элементы.СтраницаНоменклатураОрганизации.ПодчиненныеЭлементы.Группа6.ПодчиненныеЭлементы.Группа7.ПодчиненныеЭлементы.ТаблицаНоменклатурыОрганизацииЗагрузитьНоменклатуруОрганизации.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНоменклатурныхНомеровНаСервере(Адрес)
	
	Объект.ТаблицаНоменклатурныхНомеров.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 6 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиНоменклатурныхНомеров(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
			Иначе
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст);
			КонецЕсли;
			
			Попытка
				Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
					Если ТипЗнч(ТабДок.Область(Сч, 2, Сч, 2).Значение) = ТИП("Число") Тогда
						КодСинхронизации = ТабДок.Область(Сч, 2, Сч, 2).Значение;
					Иначе
						КодСинхронизации = Число(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение));
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст),Символы.НПП,"")) ТОгда
						КодСинхронизации = Число(СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст),Символы.НПП,""));
					Иначе
						КодСинхронизации = 0;						
					КонецЕсли;
				КонецЕсли;
				ДлинаКодаСинхронизации = СтрДлина(Формат(КодСинхронизации,"ЧГ="));
			Исключение
				НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Строка " + Сч + ": " + Символы.ПС + ОписаниеОшибки();
				ЕстьОшибкиВСтроке = Истина;
				ДлинаКодаСинхронизации = 0;
			КонецПопытки;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				НаименованиеХарактеристики = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение);
			Иначе
				НаименованиеХарактеристики = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 4, Сч, 4).Значение) = ТИП("Число") Тогда
					НоменклатурныйНомер = Формат(ТабДок.Область(Сч, 4, Сч, 4).Значение,"ЧГ=");
				Иначе
					НоменклатурныйНомер = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
				КонецЕсли;
			Иначе
				НоменклатурныйНомер = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				НаименованиеОрганизации = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение);
			Иначе
				НаименованиеОрганизации = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст);
			КонецЕсли;
			
			Если ДлинаКодаСинхронизации > 15 Тогда
				НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Строка " + Сч + " - длина кода синхронизации превышает 15 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НаименованиеХарактеристики) > 50 Тогда
				НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Строка " + Сч + " - длина размера превышает 50 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НоменклатурныйНомер) > 14 Тогда
				НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Строка " + Сч + " - длина номенклатурного номера превышает 14 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НаименованиеОрганизации) > 200 Тогда
				НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования номенклатуры организации превышает 200 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
				
			НоваяСтрока 							= Объект.ТаблицаНоменклатурныхНомеров.Добавить();
			НоваяСтрока.НаименованиеНоменклатуры	= НаименованиеНоменклатуры;
			НоваяСтрока.КодСинхронизации			= КодСинхронизации;
			НоваяСтрока.НаименованиеХарактеристики	= НаименованиеХарактеристики;
			НоваяСтрока.НоменклатурныйНомер			= НоменклатурныйНомер;
			НоваяСтрока.НаименованиеОрганизации		= НаименованиеОрганизации;			
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлНоменклатурныхНомеров(Команда)
	
	НоменклатурныеНомераПротокол = "*****Чтение файла загрузки*****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Не выбрана организация!";
		НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Не выбран файл загрузки!";
		НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлНоменклатурныхНомеровНаСервере(ВременноеХранилище);
	
	ПроверитьДублиВФайлеНоменклатурныхНомеров();
	
	Если НоменклатурныеНомераЕстьДубли Тогда
		НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "В файле загрузки существуют дубли! Загрузка не доступна.";
		Элементы.ТаблицаНоменклатурныхНомеровЗагрузитьНоменклатурныеНомера.Доступность = Ложь;
	Иначе
		ПроверитьНоменклатурныеНомераВБазе();
		Если НоменклатурныеНомераЕстьДубли Тогда
			НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
			Элементы.ТаблицаНоменклатурныхНомеровЗагрузитьНоменклатурныеНомера.Доступность = Ложь;
		Конецесли;
	Конецесли;
	
	НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиВФайлеНоменклатурныхНомеров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатурныхНомеров.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаНоменклатурныхНомеров.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаНоменклатурныхНомеров.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ТаблицаНоменклатурныхНомеров.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ТаблицаНоменклатурныхНомеров.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ТаблицаНоменклатурныхНомеров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаНоменклатурныхНомеров
	|ИЗ
	|	&ТаблицаНоменклатурныхНомеров КАК ТаблицаНоменклатурныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНоменклатурныхНомеров.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТаблицаНоменклатурныхНомеров.НомерСтроки) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_ТаблицаНоменклатурныхНомеров КАК ВТ_ТаблицаНоменклатурныхНомеров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаНоменклатурныхНомеров.КодСинхронизации,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеНоменклатуры,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНоменклатурныхНомеров.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_ТаблицаНоменклатурныхНомеров КАК ВТ_ТаблицаНоменклатурныхНомеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_ТаблицаНоменклатурныхНомеров.КодСинхронизации = ВТ_АнализДублей.КодСинхронизации
	|			И ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеНоменклатуры = ВТ_АнализДублей.НаименованиеНоменклатуры
	|			И ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеХарактеристики = ВТ_АнализДублей.НаименованиеХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_АнализДублей.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_АнализДублей.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурныхНомеров",Объект.ТаблицаНоменклатурныхНомеров.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[3].Выгрузить();
	
	НоменклатурныеНомераЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаНоменклатурныхНомеров.Загрузить(Результат[2].Выгрузить());
	
КонецПроцедуры	
	
&НаСервере
Процедура ПроверитьНоменклатурныеНомераВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатурныхНомеров.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаНоменклатурныхНомеров.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаНоменклатурныхНомеров.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ТаблицаНоменклатурныхНомеров.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ТаблицаНоменклатурныхНомеров.НаименованиеОрганизации КАК НаименованиеОрганизации
	|ПОМЕСТИТЬ ВТ_ТаблицаНоменклатурныхНомеров
	|ИЗ
	|	&ТаблицаНоменклатурныхНомеров КАК ТаблицаНоменклатурныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНоменклатурныхНомеров.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_ТаблицаНомеровСНоменклатурой
	|ИЗ
	|	ВТ_ТаблицаНоменклатурныхНомеров КАК ВТ_ТаблицаНоменклатурныхНомеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТ_ТаблицаНоменклатурныхНомеров.КодСинхронизации = Номенклатура.КодСинхронизации
	|			И ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеНоменклатуры = Номенклатура.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНомеровСНоменклатурой.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаНомеровСНоменклатурой.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаНомеровСНоменклатурой.НаименованиеХарактеристики = """"
	|			ТОГДА ВЫБОР
	|					КОГДА &ОдинНоменклатурныйНомерДляВсехРазмеров
	|						ТОГДА ЕСТЬNULL(ХарактеристикиНоменклатуры.Наименование, """")
	|					ИНАЧЕ ВТ_ТаблицаНомеровСНоменклатурой.НаименованиеХарактеристики
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаНомеровСНоменклатурой.НаименованиеХарактеристики
	|	КОНЕЦ КАК НаименованиеХарактеристики,
	|	ВТ_ТаблицаНомеровСНоменклатурой.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_ТаблицаНомеровСНоменклатурой.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаНомеровСНоменклатурой.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ВТ_ТаблицаНомеровСХарактеристиками
	|ИЗ
	|	ВТ_ТаблицаНомеровСНоменклатурой КАК ВТ_ТаблицаНомеровСНоменклатурой
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВТ_ТаблицаНомеровСНоменклатурой.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|			И (ВЫБОР
	|				КОГДА ВТ_ТаблицаНомеровСНоменклатурой.НаименованиеХарактеристики = """"
	|					ТОГДА ВЫБОР
	|							КОГДА &ОдинНоменклатурныйНомерДляВсехРазмеров
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ВТ_ТаблицаНомеровСНоменклатурой.НаименованиеХарактеристики = ХарактеристикиНоменклатуры.Наименование
	|						КОНЕЦ
	|				ИНАЧЕ ВТ_ТаблицаНомеровСНоменклатурой.НаименованиеХарактеристики = ХарактеристикиНоменклатуры.Наименование
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатурныеНомераОрганизаций.Номенклатура КАК Номенклатура,
	|	НоменклатурныеНомераОрганизаций.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	НоменклатурныеНомераОрганизаций.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	НоменклатурныеНомераОрганизаций.НаименованиеОрганизации КАК НаименованиеОрганизации
	|ПОМЕСТИТЬ ВТ_НомераВБазе
	|ИЗ
	|	РегистрСведений.НоменклатурныеНомераОрганизаций КАК НоменклатурныеНомераОрганизаций
	|ГДЕ
	|	НоменклатурныеНомераОрганизаций.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНомеровСХарактеристиками.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаНомеровСХарактеристиками.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаНомеровСХарактеристиками.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_ТаблицаНомеровСХарактеристиками.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_ТаблицаНомеровСХарактеристиками.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаНомеровСХарактеристиками.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ТаблицаНомеровСХарактеристиками.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА ВТ_НомераВБазе.НоменклатурныйНомер ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Существует
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаНомеровСХарактеристиками КАК ВТ_ТаблицаНомеровСХарактеристиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НомераВБазе КАК ВТ_НомераВБазе
	|		ПО ВТ_ТаблицаНомеровСХарактеристиками.Номенклатура = ВТ_НомераВБазе.Номенклатура
	|			И ВТ_ТаблицаНомеровСХарактеристиками.ХарактеристикаНоменклатуры = ВТ_НомераВБазе.ХарактеристикаНоменклатуры
	|			И ВТ_ТаблицаНомеровСХарактеристиками.НоменклатурныйНомер = ВТ_НомераВБазе.НоменклатурныйНомер
	|			И ВТ_ТаблицаНомеровСХарактеристиками.НаименованиеОрганизации = ВТ_НомераВБазе.НаименованиеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Номенклатура) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейНоменклатуры
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.ХарактеристикаНоменклатуры) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейХарактеристик
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры,
	|	ВТ_Результат.НаименованиеХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_Результат.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Результат.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ВТ_Результат.Существует КАК Существует,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейНоменклатуры.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейНоменклатуры.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейХарактеристик.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейХарактеристик.КоличествоДублей
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейНоменклатуры КАК ВТ_АнализДублейНоменклатуры
	|		ПО ВТ_Результат.КодСинхронизации = ВТ_АнализДублейНоменклатуры.КодСинхронизации
	|			И ВТ_Результат.НаименованиеНоменклатуры = ВТ_АнализДублейНоменклатуры.НаименованиеНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейХарактеристик КАК ВТ_АнализДублейХарактеристик
	|		ПО ВТ_Результат.КодСинхронизации = ВТ_АнализДублейХарактеристик.КодСинхронизации
	|			И ВТ_Результат.НаименованиеНоменклатуры = ВТ_АнализДублейХарактеристик.НаименованиеНоменклатуры
	|			И ВТ_Результат.НаименованиеХарактеристики = ВТ_АнализДублейХарактеристик.НаименованиеХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейНоменклатуры.НаименованиеНоменклатуры КАК Наименование,
	|	ВТ_АнализДублейНоменклатуры.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейНоменклатуры КАК ВТ_АнализДублейНоменклатуры
	|ГДЕ
	|	ВТ_АнализДублейНоменклатуры.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейХарактеристик.НаименованиеХарактеристики,
	|	ВТ_АнализДублейХарактеристик.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейХарактеристик КАК ВТ_АнализДублейХарактеристик
	|ГДЕ
	|	ВТ_АнализДублейХарактеристик.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурныхНомеров",			Объект.ТаблицаНоменклатурныхНомеров.Выгрузить());
	Запрос.УстановитьПараметр("Организация",							Объект.Организация);
	Запрос.УстановитьПараметр("ОдинНоменклатурныйНомерДляВсехРазмеров", ОдинНоменклатурныйНомерДляВсехРазмеров);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[8].Выгрузить();
	
	НоменклатурныеНомераЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаНоменклатурныхНомеров.Загрузить(Результат[7].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНоменклатурныеНомераНаСервере()
	
	НоменклатурныеНомераПротокол = "*****Загрузка номенклатурных номеров*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатурныхНомеров.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаНоменклатурныхНомеров.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаНоменклатурныхНомеров.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ТаблицаНоменклатурныхНомеров.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ТаблицаНоменклатурныхНомеров.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатурныхНомеров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаНоменклатурныхНомеров.Существует КАК Существует,
	|	ТаблицаНоменклатурныхНомеров.НаименованиеОрганизации КАК НаименованиеОрганизации
	|ПОМЕСТИТЬ ВТ_ТаблицаНоменклатурныхНомеров
	|ИЗ
	|	&ТаблицаНоменклатурныхНомеров КАК ТаблицаНоменклатурныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаНоменклатурныхНомеров.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НоменклатурныйНомер КАК НоменклатурныйНомер,
	|	ВТ_ТаблицаНоменклатурныхНомеров.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаНоменклатурныхНомеров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ТаблицаНоменклатурныхНомеров.Существует КАК Существует,
	|	ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеОрганизации КАК НаименованиеОрганизации
	|ИЗ
	|	ВТ_ТаблицаНоменклатурныхНомеров КАК ВТ_ТаблицаНоменклатурныхНомеров
	|ГДЕ
	|	НЕ ВТ_ТаблицаНоменклатурныхНомеров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ВТ_ТаблицаНоменклатурныхНомеров.НаименованиеХарактеристики = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ВТ_ТаблицаНоменклатурныхНомеров.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ
	|	И НЕ ВТ_ТаблицаНоменклатурныхНомеров.Существует";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурныхНомеров",	Объект.ТаблицаНоменклатурныхНомеров.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Информация для загрузки номенклатурных номеров не найдена.";
		
	Иначе
		
		ТаблицаЗапроса = Результат.Выгрузить();
		
		Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
			
			РегистрНоменклатурныеНомераОрганизаций 								= РегистрыСведений.НоменклатурныеНомераОрганизаций.СоздатьМенеджерЗаписи();
			РегистрНоменклатурныеНомераОрганизаций.Организация    				= Объект.Организация;
			РегистрНоменклатурныеНомераОрганизаций.Номенклатура      			= СтрокаТаблицыЗапроса.Номенклатура;
			РегистрНоменклатурныеНомераОрганизаций.ХарактеристикаНоменклатуры 	= СтрокаТаблицыЗапроса.ХарактеристикаНоменклатуры;
			РегистрНоменклатурныеНомераОрганизаций.НоменклатурныйНомер			= СтрокаТаблицыЗапроса.НоменклатурныйНомер;
			РегистрНоменклатурныеНомераОрганизаций.НаименованиеОрганизации		= СтрокаТаблицыЗапроса.НаименованиеОрганизации;
			
			Попытка
				РегистрНоменклатурныеНомераОрганизаций.Записать(Истина);
				НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Выполнена запись номенклатурного номера. Номенклатура: " + СтрокаТаблицыЗапроса.НаименованиеНоменклатуры + ?(ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НаименованиеХарактеристики),". Характеристика: " + СтрокаТаблицыЗапроса.НаименованиеХарактеристики,"") + ". Номенклатурный номер: " + СтрокаТаблицыЗапроса.НоменклатурныйНомер + ". Наименование организации: " + СтрокаТаблицыЗапроса.НаименованиеОрганизации;
			Исключение
				НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "Не удалось создать запись номенклатурного номера." + Символы.ПС + ОписаниеОшибки();
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьНоменклатурныеНомераВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	НоменклатурныеНомераПротокол = НоменклатурныеНомераПротокол + Символы.ПС + "*****Загрузка номенклатурных номеров завершена*****";
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ЗагрузитьНоменклатурныеНомера(Команда)
	
	ЗагрузитьНоменклатурныеНомераНаСервере();
	
	Элементы.СтраницаНоменклатурныеНомера.ПодчиненныеЭлементы.Группа8.ПодчиненныеЭлементы.Группа9.ПодчиненныеЭлементы.ТаблицаНоменклатурныхНомеровЗагрузитьНоменклатурныеНомера.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлОстатковНоменклатурыНаСервере(Адрес)
	
	Объект.ТаблицаОстатковНоменклатуры.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 6 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиОстатковНоменклатуры(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 1, Сч, 1).Значение) = ТИП("Число") Тогда
					Артикул = Формат(ТабДок.Область(Сч, 1, Сч, 1).Значение,"ЧГ=");
				Иначе
					Артикул = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
				КонецЕсли;
			Иначе
				Артикул = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
			Иначе
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст);
			КонецЕсли;
			
			Попытка
				Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
					Если ТипЗнч(ТабДок.Область(Сч, 3, Сч, 3).Значение) = ТИП("Число") Тогда
						КодСинхронизации = ТабДок.Область(Сч, 3, Сч, 3).Значение;
					Иначе
						КодСинхронизации = Число(СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение));
					КонецЕсли;
				Иначе
					КодСинхронизации = Число(СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст),Символы.НПП,""));
				КонецЕсли;
				ДлинаКодаСинхронизации = СтрДлина(Формат(КодСинхронизации,"ЧГ="));
			Исключение
				КодСинхронизации		= 0;
				ДлинаКодаСинхронизации 	= 0;
			КонецПопытки;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				НаименованиеХарактеристикиНоменклатуры = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
			Иначе
				НаименованиеХарактеристикиНоменклатуры = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст);
			КонецЕсли;
			
			Попытка
				Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
					Если ТипЗнч(ТабДок.Область(Сч, 5, Сч, 5).Значение) = ТИП("Число") Тогда
						Количество = ТабДок.Область(Сч, 5, Сч, 5).Значение;
					Иначе
						Количество = Число(СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение));
					КонецЕсли;
				Иначе
					Количество = Число(СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст),Символы.НПП,""));
				КонецЕсли;
			Исключение
				ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + ": " + Символы.ПС + ОписаниеОшибки();
				ЕстьОшибкиВСтроке = Истина;
			КонецПопытки;
			
			Если СтрДлина(Артикул) > 25 Тогда
				ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина артикула превышает 25 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
				
			Если ДлинаКодаСинхронизации > 15 Тогда
				ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода синхронизации превышает 15 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НаименованиеХарактеристикиНоменклатуры) > 50 Тогда
				ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина размера превышает 50 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 										= Объект.ТаблицаОстатковНоменклатуры.Добавить();
			НоваяСтрока.Артикул 								= Артикул;
			НоваяСтрока.НаименованиеНоменклатуры 				= НаименованиеНоменклатуры;
			НоваяСтрока.КодСинхронизации 						= КодСинхронизации;
			НоваяСтрока.НаименованиеХарактеристикиНоменклатуры	= НаименованиеХарактеристикиНоменклатуры;
			НоваяСтрока.Количество 								= Количество;			
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлОстатковНоменклатуры(Команда)
	
	ОстаткиНоменклатурыПротокол = "*****Чтение файла загрузки*****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Не выбрана организация!";
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Не выбран файл загрузки!";
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОстаткиНоменклатурыДатаАктуальности) Тогда
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Не задана дата актуальности!";
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОстаткиНоменклатурыСклад) Тогда
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Не задан склад!";
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлОстатковНоменклатурыНаСервере(ВременноеХранилище);
	
	ПроверитьДублиВФайлеОстатковНоменклатуры();
	
	Если ОстаткиНоменклатурыЕстьДубли Тогда
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "В файле загрузки существуют дубли! Загрузка не доступна.";
		Элементы.ТаблицаОстатковНоменклатурыЗагрузитьОстаткиНоменклатуры.Доступность = Ложь;
	Иначе
		ПроверитьОстаткиНоменклатурыВБазе();
		Если ОстаткиНоменклатурыЕстьДубли Тогда
			ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
			Элементы.ТаблицаОстатковНоменклатурыЗагрузитьОстаткиНоменклатуры.Доступность = Ложь;
		Конецесли;
	Конецесли;
	
	ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиВФайлеОстатковНоменклатуры()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Артикул КАК Артикул,
	|	ТаблицаОстатков.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаОстатков.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаОстатков.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ТаблицаОстатков.Количество КАК Количество,
	|	ТаблицаОстатков.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаОстатковНоменклатуры
	|ИЗ
	|	&ТаблицаОстатковНоменклатуры КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОстатковНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаОстатковНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаОстатковНоменклатуры.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТаблицаОстатковНоменклатуры.НомерСтроки) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_ТаблицаОстатковНоменклатуры КАК ВТ_ТаблицаОстатковНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОстатковНоменклатуры.НаименованиеНоменклатуры,
	|	ВТ_ТаблицаОстатковНоменклатуры.КодСинхронизации,
	|	ВТ_ТаблицаОстатковНоменклатуры.НаименованиеХарактеристикиНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОстатковНоменклатуры.Артикул КАК Артикул,
	|	ВТ_ТаблицаОстатковНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаОстатковНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаОстатковНоменклатуры.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_ТаблицаОстатковНоменклатуры.Количество КАК Количество,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_ТаблицаОстатковНоменклатуры КАК ВТ_ТаблицаОстатковНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_ТаблицаОстатковНоменклатуры.НаименованиеНоменклатуры = ВТ_АнализДублей.НаименованиеНоменклатуры
	|			И ВТ_ТаблицаОстатковНоменклатуры.КодСинхронизации = ВТ_АнализДублей.КодСинхронизации
	|			И ВТ_ТаблицаОстатковНоменклатуры.НаименованиеХарактеристикиНоменклатуры = ВТ_АнализДублей.НаименованиеХарактеристикиНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_АнализДублей.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_АнализДублей.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаОстатковНоменклатуры",Объект.ТаблицаОстатковНоменклатуры.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[3].Выгрузить();
	
	ОстаткиНоменклатурыЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаОстатковНоменклатуры.Загрузить(Результат[2].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОстаткиНоменклатурыВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Артикул КАК Артикул,
	|	ТаблицаОстатков.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаОстатков.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаОстатков.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ТаблицаОстатков.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаОстатковНоменклатуры
	|ИЗ
	|	&ТаблицаОстатковНоменклатуры КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.КодСинхронизации КАК КодСинхронизации,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры,
	|	ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	|	ХарактеристикиНоменклатуры.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_ХарактеристикиНоменклатуры
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНоменклатурыОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ОстаткиНоменклатурыОстатки.КоличествоОстаток) КАК КоличествоВБазе
	|ПОМЕСТИТЬ ВТ_ОстаткиНаСкладе
	|ИЗ
	|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(
	|			&ДатаАнализа,
	|			Склад = &Склад
	|				И Организация = &ОрганизацияДляОстатков) КАК ОстаткиНоменклатурыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНоменклатурыОстатки.Номенклатура,
	|	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОстатковНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаОстатковНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаОстатковНоменклатуры.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_ТаблицаОстатковНоменклатуры.Количество КАК Количество,
	|	ЕСТЬNULL(ВТ_Номенклатура.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ВТ_ТаблицаОстатковНоменклатуры.Артикул КАК Артикул
	|ПОМЕСТИТЬ ВТ_НоменклатураБезРазмеров
	|ИЗ
	|	ВТ_ТаблицаОстатковНоменклатуры КАК ВТ_ТаблицаОстатковНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ВТ_ТаблицаОстатковНоменклатуры.НаименованиеНоменклатуры = ВТ_Номенклатура.Наименование
	|			И ВТ_ТаблицаОстатковНоменклатуры.КодСинхронизации = ВТ_Номенклатура.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НоменклатураБезРазмеров.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_НоменклатураБезРазмеров.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_НоменклатураБезРазмеров.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_НоменклатураБезРазмеров.Количество КАК Количество,
	|	ВТ_НоменклатураБезРазмеров.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатуры,
	|	ВТ_НоменклатураБезРазмеров.Артикул КАК Артикул
	|ПОМЕСТИТЬ ВТ_НоменклатураСРазмерами
	|ИЗ
	|	ВТ_НоменклатураБезРазмеров КАК ВТ_НоменклатураБезРазмеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиНоменклатуры КАК ВТ_ХарактеристикиНоменклатуры
	|		ПО ВТ_НоменклатураБезРазмеров.НаименованиеХарактеристикиНоменклатуры = ВТ_ХарактеристикиНоменклатуры.Наименование
	|			И ВТ_НоменклатураБезРазмеров.Номенклатура = ВТ_ХарактеристикиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НоменклатураСРазмерами.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_НоменклатураСРазмерами.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_НоменклатураСРазмерами.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_НоменклатураСРазмерами.Количество КАК Количество,
	|	ЕСТЬNULL(ВТ_ОстаткиНаСкладе.КоличествоВБазе, 0) КАК КоличествоВБазе,
	|	ВТ_НоменклатураСРазмерами.Номенклатура КАК Номенклатура,
	|	ВТ_НоменклатураСРазмерами.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВТ_НоменклатураСРазмерами.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_НоменклатураСРазмерами.НаименованиеХарактеристикиНоменклатуры = """"
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НоменклатураСРазмерами.Количество = ЕСТЬNULL(ВТ_ОстаткиНаСкладе.КоличествоВБазе, 0)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_НоменклатураСРазмерами.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_НоменклатураСРазмерами.Количество = ЕСТЬNULL(ВТ_ОстаткиНаСкладе.КоличествоВБазе, 0)
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Существует,
	|	ВТ_НоменклатураСРазмерами.Артикул КАК Артикул
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_НоменклатураСРазмерами КАК ВТ_НоменклатураСРазмерами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНаСкладе КАК ВТ_ОстаткиНаСкладе
	|		ПО ВТ_НоменклатураСРазмерами.Номенклатура = ВТ_ОстаткиНаСкладе.Номенклатура
	|			И ВТ_НоменклатураСРазмерами.ХарактеристикаНоменклатуры = ВТ_ОстаткиНаСкладе.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Номенклатура) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейНоменклатуры
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.ХарактеристикаНоменклатуры) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейХарактеристик
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации,
	|	ВТ_Результат.НаименованиеХарактеристикиНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_Результат.Количество КАК Количество,
	|	ВТ_Результат.КоличествоВБазе КАК КоличествоВБазе,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Результат.Существует КАК Существует,
	|	ВТ_Результат.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейНоменклатуры.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейНоменклатуры.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейХарактеристик.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейХарактеристик.КоличествоДублей
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейНоменклатуры КАК ВТ_АнализДублейНоменклатуры
	|		ПО ВТ_Результат.НаименованиеНоменклатуры = ВТ_АнализДублейНоменклатуры.НаименованиеНоменклатуры
	|			И ВТ_Результат.КодСинхронизации = ВТ_АнализДублейНоменклатуры.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейХарактеристик КАК ВТ_АнализДублейХарактеристик
	|		ПО ВТ_Результат.НаименованиеНоменклатуры = ВТ_АнализДублейХарактеристик.НаименованиеНоменклатуры
	|			И ВТ_Результат.КодСинхронизации = ВТ_АнализДублейХарактеристик.КодСинхронизации
	|			И ВТ_Результат.НаименованиеХарактеристикиНоменклатуры = ВТ_АнализДублейХарактеристик.НаименованиеХарактеристикиНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейНоменклатуры.НаименованиеНоменклатуры КАК Наименование,
	|	ВТ_АнализДублейНоменклатуры.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейНоменклатуры КАК ВТ_АнализДублейНоменклатуры
	|ГДЕ
	|	ВТ_АнализДублейНоменклатуры.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейХарактеристик.НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_АнализДублейХарактеристик.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейХарактеристик КАК ВТ_АнализДублейХарактеристик
	|ГДЕ
	|	ВТ_АнализДублейХарактеристик.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаОстатковНоменклатуры",Объект.ТаблицаОстатковНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("ДатаАнализа",				КонецДня(ОстаткиНоменклатурыДатаАктуальности));
	Запрос.УстановитьПараметр("Склад",						ОстаткиНоменклатурыСклад);
	Запрос.УстановитьПараметр("ОрганизацияДляОстатков",		?(ПолучитьФункциональнуюОпцию("НеВестиУчетОстатковНоменклатурыПоОрганизации"),Справочники.Организации.ПустаяСсылка(),Объект.Организация));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[10].Выгрузить();
	
	ОстаткиНоменклатурыЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаОстатковНоменклатуры.Загрузить(Результат[9].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОстаткиНоменклатурыНаСервере()
	
	ОстаткиНоменклатурыПротокол = "*****Загрузка остатков номенклатуры*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Артикул КАК Артикул,
	|	ТаблицаОстатков.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаОстатков.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаОстатков.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ТаблицаОстатков.Количество КАК Количество,
	|	ТаблицаОстатков.КоличествоВБазе КАК КоличествоВБазе,
	|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатков.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ВТ_ТаблицаОстатковНаСкладе
	|ИЗ
	|	&ТаблицаОстатковНаСкладе КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Характеристика
	|ПОМЕСТИТЬ ВТ_Характеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ХарактеристикиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&ОрганизацияДляОстатков КАК Организация,
	|	&Склад КАК Склад,
	|	ВТ_ТаблицаОстатковНаСкладе.Количество - ВТ_ТаблицаОстатковНаСкладе.КоличествоВБазе КАК Количество,
	|	ВТ_ТаблицаОстатковНаСкладе.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаОстатковНаСкладе.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	ВТ_ТаблицаОстатковНаСкладе КАК ВТ_ТаблицаОстатковНаСкладе
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Характеристики КАК ВТ_Характеристики
	|		ПО ВТ_ТаблицаОстатковНаСкладе.Номенклатура = ВТ_Характеристики.Номенклатура
	|ГДЕ
	|	НЕ ВТ_ТаблицаОстатковНаСкладе.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ВТ_ТаблицаОстатковНаСкладе.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ВТ_Характеристики.Характеристика ЕСТЬ NULL
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ ВТ_ТаблицаОстатковНаСкладе.Количество = ВТ_ТаблицаОстатковНаСкладе.КоличествоВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОстатковНаСкладе.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаОстатковНаСкладе.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	ВТ_ТаблицаОстатковНаСкладе КАК ВТ_ТаблицаОстатковНаСкладе
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Характеристики КАК ВТ_Характеристики
	|		ПО ВТ_ТаблицаОстатковНаСкладе.Номенклатура = ВТ_Характеристики.Номенклатура
	|ГДЕ
	|	НЕ ВТ_ТаблицаОстатковНаСкладе.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ВТ_ТаблицаОстатковНаСкладе.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА НЕ ВТ_Характеристики.Характеристика ЕСТЬ NULL
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТаблицаОстатковНаСкладе",Объект.ТаблицаОстатковНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("Склад",					ОстаткиНоменклатурыСклад);
	Запрос.УстановитьПараметр("Период",					НачалоДня(ОстаткиНоменклатурыДатаАктуальности));
	Запрос.УстановитьПараметр("ОрганизацияДляОстатков",	?(ПолучитьФункциональнуюОпцию("НеВестиУчетОстатковНоменклатурыПоОрганизации"),Справочники.Организации.ПустаяСсылка(),Объект.Организация));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДвиженийПоОстакамНаСкладе 	= Результат[2].Выгрузить();
	ТаблицаОшибок 						= Результат[3].Выгрузить();
	
	Для Каждого СтрокаТаблицыОшибок Из ТаблицаОшибок Цикл
		
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Для номенклатуры: " + СтрокаТаблицыОшибок.Номенклатура + " не определена характеристика. Остатки не загружены.";
		
	КонецЦикла;	
	
	Если ТаблицаДвиженийПоОстакамНаСкладе.Количество() = 0 Тогда
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Информация для загрузки остатков на складе не найдена.";
		Возврат;
	КонецЕсли;
	
	НовыйДокумент = Документы.КорректировкаРегистров.СоздатьДокумент();
	НовыйДокумент.Дата 					= НачалоДня(ОстаткиНоменклатурыДатаАктуальности);
	НовыйДокумент.Комментарий 			= "Загружен автоматически";
	НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.УстановитьНовыйНомер();
	
	НоваяСтрока 	= НовыйДокумент.ТаблицаРегистров.Добавить();
	НоваяСтрока.Имя = "ОстаткиНоменклатуры";
	НовыйДокумент.Движения.ОстаткиНоменклатуры.Загрузить(ТаблицаДвиженийПоОстакамНаСкладе);
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Загрузка остатков на складе выполнена!" + Символы.ПС + "Сформирован документ: " + НовыйДокумент.Ссылка;
	Исключение
		ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "Загрузка остатков на складе не выполнена!" + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	ПроверитьОстаткиНоменклатурыВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	ОстаткиНоменклатурыПротокол = ОстаткиНоменклатурыПротокол + Символы.ПС + "*****Загрузка остатков номенклатуры завершена*****";
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ЗагрузитьОстаткиНоменклатуры(Команда)
	
	ЗагрузитьОстаткиНоменклатурыНаСервере();
	
	Элементы.СтраницаОстаткиНоменклатуры.ПодчиненныеЭлементы.Группа10.ПодчиненныеЭлементы.Группа11.ПодчиненныеЭлементы.ТаблицаОстатковНоменклатурыЗагрузитьОстаткиНоменклатуры.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлЦенНоменклатурыНаСервере(Адрес)
	
	Объект.ТаблицаЦенНоменклатуры.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 5 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиЦенНоменклатуры(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 1, Сч, 1).Значение) = ТИП("Число") Тогда
					Артикул = Формат(ТабДок.Область(Сч, 1, Сч, 1).Значение,"ЧГ=");
				Иначе
					Артикул = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
				КонецЕсли;
			Иначе
				Артикул = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
			Иначе
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст);
			КонецЕсли;
			
			Попытка
				Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
					Если ТипЗнч(ТабДок.Область(Сч, 3, Сч, 3).Значение) = ТИП("Число") Тогда
						КодСинхронизации = ТабДок.Область(Сч, 3, Сч, 3).Значение;
					Иначе
						КодСинхронизации = Число(СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение));
					КонецЕсли;
				Иначе
					КодСинхронизации = Число(СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст),Символы.НПП,""));
				КонецЕсли;
				ДлинаКодаСинхронизации = СтрДлина(Формат(КодСинхронизации,"ЧГ="));
			Исключение
				КодСинхронизации		= 0;
				ДлинаКодаСинхронизации 	= 0;
			КонецПопытки;
			
		    Попытка
				
				Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
					Если ТипЗнч(ТабДок.Область(Сч, 4, Сч, 4).Значение) = ТИП("Число") Тогда
						Цена = ТабДок.Область(Сч, 4, Сч, 4).Значение;
					Иначе
						Цена = Число(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение));
					КонецЕсли;
				Иначе
					Цена = Число(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст));
				КонецЕсли;
				
			Исключение
				
				ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + ": " + Символы.ПС + ОписаниеОшибки();
				ЕстьОшибкиВСтроке = Истина;
				
			КонецПопытки;
			
			Если СтрДлина(Артикул) > 25 Тогда
				ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина артикула превышает 25 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ДлинаКодаСинхронизации > 15 Тогда
				ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода синхронизации превышает 15 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 							= Объект.ТаблицаЦенНоменклатуры.Добавить();
			НоваяСтрока.Артикул						= Артикул;
			НоваяСтрока.НаименованиеНоменклатуры	= НаименованиеНоменклатуры;
			НоваяСтрока.КодСинхронизации			= КодСинхронизации;
			НоваяСтрока.Цена 						= Цена;			
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлЦенНоменклатуры(Команда)
	
	ЦеныНоменклатурыПротокол = "*****Чтение файла загрузки*****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Не выбрана организация!";
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Не выбран файл загрузки!";
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦеныНоменклатурыДатаАктуальности) Тогда
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Не задана дата актуальности!";
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦеныНоменклатурыПоставщик) Тогда
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Не задан поставщик!";
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлЦенНоменклатурыНаСервере(ВременноеХранилище);
	
	ПроверитьДублиВФайлеЦенНоменклатуры();
	
	Если ЦеныНоменклатурыЕстьДубли Тогда
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "В файле загрузки существуют дубли! Загрузка не доступна.";
		Элементы.ТаблицаЦенНоменклатурыЗагрузитьЦеныНоменклатуры.Доступность = Ложь;
	Иначе
		ПроверитьЦеныНоменклатурыВБазе();
		Если ЦеныНоменклатурыЕстьДубли Тогда
			ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
			Элементы.ТаблицаЦенНоменклатурыЗагрузитьЦеныНоменклатуры.Доступность = Ложь;
		Конецесли;
	Конецесли;
	
	ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиВФайлеЦенНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЦен.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаЦен.Артикул КАК Артикул,
	|	ТаблицаЦен.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаЦен.Цена КАК Цена,
	|	ТаблицаЦен.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаЦен
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЦен.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаЦен.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТаблицаЦен.НомерСтроки) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_ТаблицаЦен КАК ВТ_ТаблицаЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаЦен.КодСинхронизации,
	|	ВТ_ТаблицаЦен.НаименованиеНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЦен.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаЦен.Артикул КАК Артикул,
	|	ВТ_ТаблицаЦен.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаЦен.Цена КАК Цена,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_ТаблицаЦен КАК ВТ_ТаблицаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_ТаблицаЦен.КодСинхронизации = ВТ_АнализДублей.КодСинхронизации
	|			И ВТ_ТаблицаЦен.НаименованиеНоменклатуры = ВТ_АнализДублей.НаименованиеНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_АнализДублей.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаЦен",	Объект.ТаблицаЦенНоменклатуры.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[3].Выгрузить();
	
	ЦеныНоменклатурыЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаЦенНоменклатуры.Загрузить(Результат[2].Выгрузить());
	
КонецПроцедуры	
	
&НаСервере
Процедура ПроверитьЦеныНоменклатурыВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЦен.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаЦен.Артикул КАК Артикул,
	|	ТаблицаЦен.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаЦен.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ТаблицаЦен
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЦен.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаЦен.Артикул КАК Артикул,
	|	ВТ_ТаблицаЦен.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаЦен.Цена КАК Цена,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_ТаблицаЦенСНоменклатурой
	|ИЗ
	|	ВТ_ТаблицаЦен КАК ВТ_ТаблицаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТ_ТаблицаЦен.НаименованиеНоменклатуры = Номенклатура.Наименование
	|			И ВТ_ТаблицаЦен.КодСинхронизации = Номенклатура.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЦенСНоменклатурой.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаЦенСНоменклатурой.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаЦенСНоменклатурой.Цена КАК Цена,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаВБазе,
	|	ЕСТЬNULL(ВТ_ТаблицаЦенСНоменклатурой.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ВТ_ТаблицаЦенСНоменклатурой.Артикул КАК Артикул
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаЦенСНоменклатурой КАК ВТ_ТаблицаЦенСНоменклатурой
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаАнализа,
	|				Организация = &Организация
	|					И Поставщик = &Поставщик) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВТ_ТаблицаЦенСНоменклатурой.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Номенклатура) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.Цена КАК Цена,
	|	ВТ_Результат.ЦенаВБазе КАК ЦенаВБазе,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.Артикул КАК Артикул,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_Результат.КодСинхронизации = ВТ_АнализДублей.КодСинхронизации
	|			И ВТ_Результат.НаименованиеНоменклатуры = ВТ_АнализДублей.НаименованиеНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_АнализДублей.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаЦен",	Объект.ТаблицаЦенНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("ДатаАнализа",КонецДня(ЦеныНоменклатурыДатаАктуальности));
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("Поставщик",	ЦеныНоменклатурыПоставщик);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[5].Выгрузить();
	
	ЦеныНоменклатурыЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаЦенНоменклатуры.Загрузить(Результат[4].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЦеныНоменклатурыНаСервере()
	
	ЦеныНоменклатурыПротокол = "*****Загрузка цен номенклатуры*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаЦен.Цена КАК Цена,
	|	ТаблицаЦен.ЦенаВБазе КАК ЦенаВБазе
	|ПОМЕСТИТЬ ВТ_ТаблицаЦен
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|ГДЕ
	|	НЕ ТаблицаЦен.Цена = ТаблицаЦен.ЦенаВБазе
	|	И НЕ ТаблицаЦен.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаЦен.Цена КАК Цена,
	|	ВТ_ТаблицаЦен.ЦенаВБазе КАК ЦенаВБазе
	|ИЗ
	|	ВТ_ТаблицаЦен КАК ВТ_ТаблицаЦен";
	
	Запрос.УстановитьПараметр("ТаблицаЦен",	Объект.ТаблицаЦенНоменклатуры.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Информация для загрузки цен не найдена.";
		Возврат;
	КонецЕсли;
	
	НовыйДокумент = Документы.ЦеновоеСоглашение.СоздатьДокумент();
	НовыйДокумент.Дата 					= КонецДня(ЦеныНоменклатурыДатаАктуальности);
	НовыйДокумент.Комментарий 			= "Загружен автоматически";
	НовыйДокумент.Организация 			= Объект.Организация;
	НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.Поставщик 			= ЦеныНоменклатурыПоставщик;
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Товары.Загрузить(Результат.Выгрузить());
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Загрузка цен выполнена!" + Символы.ПС + "Сформирован документ: " + НовыйДокумент.Ссылка;
	Исключение
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Загрузка цен не выполнена!" + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	ПроверитьЦеныНоменклатурыВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "*****Загрузка цен номенклатуры завершена*****";
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьЦеныНоменклатуры(Команда)
	
	ЗагрузитьЦеныНоменклатурыНаСервере();
	
	Элементы.СтраницаЦеныНоменклатуры.ПодчиненныеЭлементы.Группа12.ПодчиненныеЭлементы.Группа13.ПодчиненныеЭлементы.ТаблицаЦенНоменклатурыЗагрузитьЦеныНоменклатуры.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыВДокументахНаСервере()
	
	ЦеныНоменклатурыПротокол = "*****Пересчет сумм в документах*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	&Дата КАК ДатаСледующейЦены,
	|	ТаблицаЦен.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_Цены
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыдачаСредствЗащитыСотрудникуТовары.Ссылка КАК Ссылка,
	|	ВыдачаСредствЗащитыСотрудникуТовары.Номенклатура КАК Номенклатура,
	|	ВыдачаСредствЗащитыСотрудникуТовары.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ДокументыДляПересчета
	|ИЗ
	|	Документ.ВыдачаСредствЗащитыСотруднику.Товары КАК ВыдачаСредствЗащитыСотрудникуТовары
	|ГДЕ
	|	ВыдачаСредствЗащитыСотрудникуТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ВыдачаСредствЗащитыСотрудникуТовары.Ссылка.Дата >= &Дата
	|	И ВыдачаСредствЗащитыСотрудникуТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаПроизвольнуюВыдачуСИЗТовары.Ссылка,
	|	ЗаявкаНаПроизвольнуюВыдачуСИЗТовары.Номенклатура,
	|	ЗаявкаНаПроизвольнуюВыдачуСИЗТовары.Цена
	|ИЗ
	|	Документ.ЗаявкаНаПроизвольнуюВыдачуСИЗ.Товары КАК ЗаявкаНаПроизвольнуюВыдачуСИЗТовары
	|ГДЕ
	|	ЗаявкаНаПроизвольнуюВыдачуСИЗТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ЗаявкаНаПроизвольнуюВыдачуСИЗТовары.Ссылка.Дата >= &Дата
	|	И ЗаявкаНаПроизвольнуюВыдачуСИЗТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеНоменклатурыТовары.Ссылка,
	|	ПеремещениеНоменклатурыТовары.Номенклатура,
	|	ПеремещениеНоменклатурыТовары.Цена
	|ИЗ
	|	Документ.ПеремещениеНоменклатуры.Товары КАК ПеремещениеНоменклатурыТовары
	|ГДЕ
	|	ПеремещениеНоменклатурыТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ПеремещениеНоменклатурыТовары.Ссылка.Дата >= &Дата
	|	И ПеремещениеНоменклатурыТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНоменклатурыТовары.Ссылка,
	|	ПоступлениеНоменклатурыТовары.Номенклатура,
	|	ПоступлениеНоменклатурыТовары.Цена
	|ИЗ
	|	Документ.ПоступлениеНоменклатуры.Товары КАК ПоступлениеНоменклатурыТовары
	|ГДЕ
	|	ПоступлениеНоменклатурыТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ПоступлениеНоменклатурыТовары.Ссылка.Дата >= &Дата
	|	И ПоступлениеНоменклатурыТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеНоменклатурыТовары.Ссылка,
	|	СписаниеНоменклатурыТовары.Номенклатура,
	|	СписаниеНоменклатурыТовары.Цена
	|ИЗ
	|	Документ.СписаниеНоменклатуры.Товары КАК СписаниеНоменклатурыТовары
	|ГДЕ
	|	СписаниеНоменклатурыТовары.Номенклатура В(&МассивНоменклатуры)
	|	И СписаниеНоменклатурыТовары.Ссылка.Дата >= &Дата
	|	И СписаниеНоменклатурыТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратНоменклатурыПоставщикуТовары.Ссылка,
	|	ВозвратНоменклатурыПоставщикуТовары.Номенклатура,
	|	ВозвратНоменклатурыПоставщикуТовары.Цена
	|ИЗ
	|	Документ.ВозвратНоменклатурыПоставщику.Товары КАК ВозвратНоменклатурыПоставщикуТовары
	|ГДЕ
	|	ВозвратНоменклатурыПоставщикуТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ВозвратНоменклатурыПоставщикуТовары.Ссылка.Дата >= &Дата
	|	И ВозвратНоменклатурыПоставщикуТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратСредствЗащитыОтСотрудникаТовары.Ссылка,
	|	ВозвратСредствЗащитыОтСотрудникаТовары.Номенклатура,
	|	ВозвратСредствЗащитыОтСотрудникаТовары.Цена
	|ИЗ
	|	Документ.ВозвратСредствЗащитыОтСотрудника.Товары КАК ВозвратСредствЗащитыОтСотрудникаТовары
	|ГДЕ
	|	ВозвратСредствЗащитыОтСотрудникаТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ВозвратСредствЗащитыОтСотрудникаТовары.Ссылка.Дата >= &Дата
	|	И ВозвратСредствЗащитыОтСотрудникаТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратСредствЗащитыСХраненияТовары.Ссылка,
	|	ВозвратСредствЗащитыСХраненияТовары.Номенклатура,
	|	ВозвратСредствЗащитыСХраненияТовары.Цена
	|ИЗ
	|	Документ.ВозвратСредствЗащитыСХранения.Товары КАК ВозвратСредствЗащитыСХраненияТовары
	|ГДЕ
	|	ВозвратСредствЗащитыСХраненияТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ВозвратСредствЗащитыСХраненияТовары.Ссылка.Дата >= &Дата
	|	И ВозвратСредствЗащитыСХраненияТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыдачаСредствЗащитыПоВедомостиТовары.Ссылка,
	|	ВыдачаСредствЗащитыПоВедомостиТовары.Номенклатура,
	|	NULL
	|ИЗ
	|	Документ.ВыдачаСредствЗащитыПоВедомости.Товары КАК ВыдачаСредствЗащитыПоВедомостиТовары
	|ГДЕ
	|	ВыдачаСредствЗащитыПоВедомостиТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ВыдачаСредствЗащитыПоВедомостиТовары.Ссылка.Дата >= &Дата
	|	И ВыдачаСредствЗащитыПоВедомостиТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Ссылка,
	|	ЗаказПоставщикуТовары.Номенклатура,
	|	ЗаказПоставщикуТовары.Цена
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ЗаказПоставщикуТовары.Ссылка.Дата >= &Дата
	|	И ЗаказПоставщикуТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗакрытиеЗаказовПоставщикуТовары.Ссылка,
	|	ЗакрытиеЗаказовПоставщикуТовары.Номенклатура,
	|	ЗакрытиеЗаказовПоставщикуТовары.Цена
	|ИЗ
	|	Документ.ЗакрытиеЗаказовПоставщику.Товары КАК ЗакрытиеЗаказовПоставщикуТовары
	|ГДЕ
	|	ЗакрытиеЗаказовПоставщикуТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ЗакрытиеЗаказовПоставщикуТовары.Ссылка.Дата >= &Дата
	|	И ЗакрытиеЗаказовПоставщикуТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнвентаризацияНоменклатурыТовары.Ссылка,
	|	ИнвентаризацияНоменклатурыТовары.Номенклатура,
	|	ИнвентаризацияНоменклатурыТовары.Цена
	|ИЗ
	|	Документ.ИнвентаризацияНоменклатуры.Товары КАК ИнвентаризацияНоменклатурыТовары
	|ГДЕ
	|	ИнвентаризацияНоменклатурыТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ИнвентаризацияНоменклатурыТовары.Ссылка.Дата >= &Дата
	|	И ИнвентаризацияНоменклатурыТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КомплектацияНоменклатурыТовары.Ссылка,
	|	КомплектацияНоменклатурыТовары.Номенклатура,
	|	КомплектацияНоменклатурыТовары.Цена
	|ИЗ
	|	Документ.КомплектацияНоменклатуры.Товары КАК КомплектацияНоменклатурыТовары
	|ГДЕ
	|	КомплектацияНоменклатурыТовары.Номенклатура В(&МассивНоменклатуры)
	|	И КомплектацияНоменклатурыТовары.Ссылка.Дата >= &Дата
	|	И КомплектацияНоменклатурыТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОприходованиеНоменклатурыТовары.Ссылка,
	|	ОприходованиеНоменклатурыТовары.Номенклатура,
	|	ОприходованиеНоменклатурыТовары.Цена
	|ИЗ
	|	Документ.ОприходованиеНоменклатуры.Товары КАК ОприходованиеНоменклатурыТовары
	|ГДЕ
	|	ОприходованиеНоменклатурыТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ОприходованиеНоменклатурыТовары.Ссылка.Дата >= &Дата
	|	И ОприходованиеНоменклатурыТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеСредствЗащитыНаХраненииТовары.Ссылка,
	|	ПеремещениеСредствЗащитыНаХраненииТовары.Номенклатура,
	|	ПеремещениеСредствЗащитыНаХраненииТовары.Цена
	|ИЗ
	|	Документ.ПеремещениеСредствЗащитыНаХранении.Товары КАК ПеремещениеСредствЗащитыНаХраненииТовары
	|ГДЕ
	|	ПеремещениеСредствЗащитыНаХраненииТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ПеремещениеСредствЗащитыНаХраненииТовары.Ссылка.Дата >= &Дата
	|	И ПеремещениеСредствЗащитыНаХраненииТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриемСредствЗащитыНаХранениеТовары.Ссылка,
	|	ПриемСредствЗащитыНаХранениеТовары.Номенклатура,
	|	ПриемСредствЗащитыНаХранениеТовары.Цена
	|ИЗ
	|	Документ.ПриемСредствЗащитыНаХранение.Товары КАК ПриемСредствЗащитыНаХранениеТовары
	|ГДЕ
	|	ПриемСредствЗащитыНаХранениеТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ПриемСредствЗащитыНаХранениеТовары.Ссылка.Дата >= &Дата
	|	И ПриемСредствЗащитыНаХранениеТовары.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПереходПраваСобственностиТовары.Ссылка,
	|	ПереходПраваСобственностиТовары.Номенклатура,
	|	ПереходПраваСобственностиТовары.Цена
	|ИЗ
	|	Документ.ПереходПраваСобственности.Товары КАК ПереходПраваСобственностиТовары
	|ГДЕ
	|	ПереходПраваСобственностиТовары.Номенклатура В(&МассивНоменклатуры)
	|	И ПереходПраваСобственностиТовары.Ссылка.Дата >= &Дата
	|	И ПереходПраваСобственностиТовары.Ссылка.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыДляПересчета.Ссылка КАК Ссылка,
	|	ВТ_ДокументыДляПересчета.Номенклатура КАК Номенклатура,
	|	ВТ_Цены.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_Цены КАК ВТ_Цены
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыДляПересчета КАК ВТ_ДокументыДляПересчета
	|		ПО ВТ_Цены.Номенклатура = ВТ_ДокументыДляПересчета.Номенклатура
	|			И ВТ_Цены.Цена <> ВТ_ДокументыДляПересчета.Цена
	|			И (ВЫБОР
	|				КОГДА ВТ_Цены.ДатаСледующейЦены = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТ_Цены.ДатаСледующейЦены <= ВТ_ДокументыДляПересчета.Ссылка.Дата
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ ВТ_ДокументыДляПересчета.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Ссылка КАК Ссылка,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.Цена КАК Цена
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат";
	
	Запрос.УстановитьПараметр("ТаблицаЦен",			Объект.ТаблицаЦенНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("МассивНоменклатуры",	Объект.ТаблицаЦенНоменклатуры.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Дата",				НачалоДня(ЦеныНоменклатурыДатаАктуальности));
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДокументов 	= Результат[3].Выгрузить();
	ТаблицаЦен			= Результат[4].Выгрузить();
	
	Для Каждого СтрокаТаблицыДокументов Из ТаблицаДокументов Цикл
		
		ДокументОбъект = СтрокаТаблицыДокументов.Ссылка.ПолучитьОбъект();
		
		СтруктураПоискаДокумента = Новый Структура("Ссылка",СтрокаТаблицыДокументов.Ссылка);
		
		НайденныеСтрокиЦен = ТаблицаЦен.НайтиСтроки(СтруктураПоискаДокумента);
		
		Для Каждого НайденнаяСтрокаЦен Из НайденныеСтрокиЦен Цикл
			
			СтруктураПоиска = Новый Структура("Номенклатура",НайденнаяСтрокаЦен.Номенклатура);
			
			НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				НайденнаяСтрока.Цена 	= НайденнаяСтрокаЦен.Цена;
				НайденнаяСтрока.Сумма 	= НайденнаяСтрокаЦен.Цена * НайденнаяСтрока.Количество;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "Обработан документ: " + СтрокаТаблицыДокументов.Ссылка;
			
	КонецЦикла;		
	
	ЦеныНоменклатурыПротокол = ЦеныНоменклатурыПротокол + Символы.ПС + "*****Пересчет сумм в документах завершен*****";	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыВДокументах(Команда)
	
	ПересчитатьСуммыВДокументахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНоменклатурыНормНаСервере(Адрес) 
	
	Объект.ТаблицаНоменклатурыНорм.Очистить();
	
	Попытка
		
		//+++АСТБ_Горюшин_Алексей_19306
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 1 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;
		
		Если НЕ МассивЗаголовковКолонок[0] = "номенклатура нормы" Тогда
			НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				НаименованиеНоменклатурыНормы = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
			Иначе
				НаименованиеНоменклатурыНормы = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст);
			КонецЕсли;
			
			Если СтрДлина(НаименованиеНоменклатурыНормы) > 150 Тогда
				НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования номенклатуры нормы превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			НоваяСтрока = Объект.ТаблицаНоменклатурыНорм.Добавить();
			НоваяСтрока.НаименованиеНоменклатурыНормы = НаименованиеНоменклатурыНормы;
			
		КонецЦикла;
		
		//---АСТБ_Горюшин_Алексей_19306
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлНоменклатурыНорм(Команда)
	
	НоменклатураНормПротокол = "*****Чтение файла загрузки*****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + "Не выбрана организация!";
		НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + "Не выбран файл загрузки!";
		НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлНоменклатурыНормНаСервере(ВременноеХранилище);
	
	ПроверитьНоменклатуруНормВБазе();
	
	Если НоменклатураНормЕстьДубли Тогда
		НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
		Элементы.ТаблицаНоменклатурыНормЗагрузитьНоменклатуруНорм.Доступность = Ложь;
	Конецесли;
		
	НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНоменклатуруНормВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатурыНорм.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы
	|ПОМЕСТИТЬ ВТ_ТаблицаНоменклатурыНормы
	|ИЗ
	|	&ТаблицаНоменклатурыНорм КАК ТаблицаНоменклатурыНорм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураНормОрганизации.Ссылка КАК НоменклатураНормы,
	|	НоменклатураНормОрганизации.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_НоменклатураНорм
	|ИЗ
	|	Справочник.НоменклатураНормОрганизации КАК НоменклатураНормОрганизации
	|ГДЕ
	|	НоменклатураНормОрганизации.Владелец = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНоменклатурыНормы.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ЕСТЬNULL(ВТ_НоменклатураНорм.НоменклатураНормы, ЗНАЧЕНИЕ(Справочник.НоменклатураНормОрганизации.ПустаяСсылка)) КАК НоменклатураНормы
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаНоменклатурыНормы КАК ВТ_ТаблицаНоменклатурыНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураНорм КАК ВТ_НоменклатураНорм
	|		ПО ВТ_ТаблицаНоменклатурыНормы.НаименованиеНоменклатурыНормы = ВТ_НоменклатураНорм.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.НоменклатураНормы) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеНоменклатурыНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_Результат.НаименованиеНоменклатурыНормы = ВТ_АнализДублей.НаименованиеНоменклатурыНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыНорм",Объект.ТаблицаНоменклатурыНорм.Выгрузить());
	Запрос.УстановитьПараметр("Владелец",				Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[5].Выгрузить();
	
	НоменклатураНормЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаНоменклатурыНорм.Загрузить(Результат[4].Выгрузить());
	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьФайлИсходныхНормНаСервере(Адрес)
	
	Объект.ТаблицаИсходныхНорм.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 23 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиИсходныхНорм(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
			Иначе
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 2, Сч, 2).Значение) = ТИП("Число") Тогда
					КодДолжности = Формат(ТабДок.Область(Сч, 2, Сч, 2).Значение,"ЧГ=");
				Иначе
					КодДолжности = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
				КонецЕсли;
			Иначе
				КодДолжности = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение);
			Иначе
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 4, Сч, 4).Значение) = ТИП("Число") Тогда
					//+++АСТБ_Горюшин_Алексей_20378
					Если СтрНайти(ТабДок.Область(Сч, 4, Сч, 4).Формат,"ЧН=") > 0 Тогда
						КодПодразделения = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст),Символы.НПП,"");
					Иначе
					//---АСТБ_Горюшин_Алексей_20378
					КодПодразделения = Формат(ТабДок.Область(Сч, 4, Сч, 4).Значение,"ЧГ=");
					//+++АСТБ_Горюшин_Алексей_20378
					КонецЕсли;
					//---АСТБ_Горюшин_Алексей_20378
				Иначе
					КодПодразделения = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
				КонецЕсли;
			Иначе
				КодПодразделения = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 5, Сч, 5).Значение) = ТИП("Число") Тогда
					НаименованиеРабочегоМеста = Формат(ТабДок.Область(Сч, 5, Сч, 5).Значение,"ЧГ=");
				Иначе
					НаименованиеРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение);
				КонецЕсли;
			Иначе
				НаименованиеРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 6, Сч, 6).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 6, Сч, 6).Значение) = ТИП("Число") Тогда
					КодРабочегоМеста = Формат(ТабДок.Область(Сч, 6, Сч, 6).Значение,"ЧГ=");
				Иначе
					КодРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Значение);
				КонецЕсли;
			Иначе
				КодРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 7, Сч, 7).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 7, Сч, 7).Значение) = ТИП("Число") Тогда
					НомерТОН = Формат(ТабДок.Область(Сч, 7, Сч, 7).Значение,"ЧГ=");
				Иначе
					НомерТОН = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Значение);
				КонецЕсли;
			Иначе
				НомерТОН = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 8, Сч, 8).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 8, Сч, 8).Значение) = ТИП("Число") Тогда
					НомерПриложенияТОН = Формат(ТабДок.Область(Сч, 8, Сч, 8).Значение,"ЧГ=");
				Иначе
					НомерПриложенияТОН = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Значение);
				КонецЕсли;
			Иначе
				НомерПриложенияТОН = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 9, Сч, 9).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 9, Сч, 9).Значение) = ТИП("Число") Тогда
					НомерПрофессииТОН = Формат(ТабДок.Область(Сч, 9, Сч, 9).Значение,"ЧГ=");
				Иначе
					НомерПрофессииТОН = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Значение);
				КонецЕсли;
			Иначе
				НомерПрофессииТОН = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 10, Сч, 10).СодержитЗначение Тогда
				Основание = СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Значение);
			Иначе
				Основание = СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 11, Сч, 11).СодержитЗначение Тогда
				НаименованиеУсловияНормы = СокрЛП(ТабДок.Область(Сч, 11, Сч, 11).Значение);
			Иначе
				НаименованиеУсловияНормы = СокрЛП(ТабДок.Область(Сч, 11, Сч, 11).Текст);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НаименованиеУсловияНормы) Тогда
				НаименованиеУсловияНормы = "Всегда";
			КонецЕсли;	
			
			Если ТабДок.Область(Сч, 12, Сч, 12).СодержитЗначение Тогда
				ГОСТ = СокрЛП(ТабДок.Область(Сч, 12, Сч, 12).Значение);
			Иначе
				ГОСТ = СокрЛП(ТабДок.Область(Сч, 12, Сч, 12).Текст);
			КонецЕсли;
			
			//+++++временно отключено чтение номера группы
			
			//Попытка
			//	Если ТабДок.Область(Сч, 13, Сч, 13).СодержитЗначение Тогда
			//		Если ТипЗнч(ТабДок.Область(Сч, 13, Сч, 13).Значение) = ТИП("Число") Тогда
			//			НомерГруппы	= ТабДок.Область(Сч, 13, Сч, 13).Значение;
			//		Иначе
			//			Если ЗначениеЗаполнено(ТабДок.Область(Сч, 13, Сч, 13).Значение) Тогда
			//				НомерГруппы	= Число(ТабДок.Область(Сч, 13, Сч, 13).Значение);
			//			Иначе
			//				НомерГруппы	= 0;
			//			КонецЕсли;	
			//		КонецЕсли;
			//	Иначе
			//		Если ЗначениеЗаполнено(ТабДок.Область(Сч, 13, Сч, 13).Текст) Тогда
			//			НомерГруппы	= Число(ТабДок.Область(Сч, 13, Сч, 13).Текст);
			//		Иначе
			//			НомерГруппы	= 0;
			//		КонецЕсли;
			//	КонецЕсли;	
			//	ДлинаНомераГруппы = СтрДлина(Формат(НомерГруппы,"ЧГ="));
			//Исключение
			//	НомерГруппы				= 0;
			//	ЕстьОшибкиВСтроке 		= Истина;
			//	ИсходныеНормыПротокол 	= ИсходныеНормыПротокол + Символы.ПС + ОписаниеОшибки();
			//	ДлинаНомераГруппы 		= 0;
			//КонецПопытки;
			
			НомерГруппы	= 0;
			ДлинаНомераГруппы = СтрДлина(Формат(НомерГруппы,"ЧГ="));
			
			//-----временно отключено чтение номера группы
			
			Если ТабДок.Область(Сч, 14, Сч, 14).СодержитЗначение Тогда
				НаименованиеНоменклатурыНормы = СокрЛП(ТабДок.Область(Сч, 14, Сч, 14).Значение);
			Иначе
				НаименованиеНоменклатурыНормы = СокрЛП(ТабДок.Область(Сч, 14, Сч, 14).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 15, Сч, 15).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 15, Сч, 15).Значение) = ТИП("Число") Тогда
					КодЕдиницыИзмерения = Формат(ТабДок.Область(Сч, 15, Сч, 15).Значение,"ЧГ=");
				Иначе
					КодЕдиницыИзмерения = СокрЛП(ТабДок.Область(Сч, 15, Сч, 15).Значение);
				КонецЕсли;
			Иначе
				КодЕдиницыИзмерения = СокрЛП(ТабДок.Область(Сч, 15, Сч, 15).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 16, Сч, 16).СодержитЗначение Тогда
				ВидРасчета = ПолучитьВидРасчета(СокрЛП(ТабДок.Область(Сч, 16, Сч, 16).Значение));
			Иначе
				ВидРасчета = ПолучитьВидРасчета(СокрЛП(ТабДок.Область(Сч, 16, Сч, 16).Текст));
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 17, Сч, 17).СодержитЗначение Тогда
				ВидВыдачи = СокрЛП(ТабДок.Область(Сч, 17, Сч, 17).Значение);
			Иначе
				ВидВыдачи = СокрЛП(ТабДок.Область(Сч, 17, Сч, 17).Текст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВидВыдачи) Тогда
				Если НРег(ВидВыдачи) = "коллективно" Тогда
					ВидВыдачи = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.КоллективнаяВыдача");
				ИначеЕсли НРег(ВидВыдачи) = "персонально" Тогда
					ВидВыдачи = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПерсональнаяВыдача");
				Иначе
					ВидВыдачи = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПустаяСсылка");
				КонецЕсли;
			Иначе
				ВидВыдачи = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПустаяСсылка");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 18, Сч, 18).СодержитЗначение Тогда
				ТипПериода = СокрЛП(ТабДок.Область(Сч, 18, Сч, 18).Значение);
			Иначе
				ТипПериода = СокрЛП(ТабДок.Область(Сч, 18, Сч, 18).Текст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТипПериода) Тогда
				Если НРег(ТипПериода) = "год" Тогда
					ТипПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год");
				ИначеЕсли НРег(ТипПериода) = "месяц" Тогда
					ТипПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
				Иначе
					ТипПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПустаяСсылка");
				КонецЕсли;
			Иначе
				ТипПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПустаяСсылка");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 19, Сч, 19).СодержитЗначение Тогда
				КоличествоВПериоде = СокрЛП(ТабДок.Область(Сч, 19, Сч, 19).Значение);
			Иначе
				КоличествоВПериоде = СокрЛП(ТабДок.Область(Сч, 19, Сч, 19).Текст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КоличествоВПериоде) Тогда
				Попытка
					Если НЕ ТипЗнч(КоличествоВПериоде) = ТИП("Число") Тогда
						КоличествоВПериоде = Число(КоличествоВПериоде);
					КонецЕсли;
				Исключение
					КоличествоВПериоде = 0;
					ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + ": " + Символы.ПС + ОписаниеОшибки();
					ЕстьОшибкиВСтроке = Истина;
				КонецПопытки;
			Иначе
				КоличествоВПериоде = 0;
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 20, Сч, 20).СодержитЗначение Тогда
				КоличествоПериодов = СокрЛП(ТабДок.Область(Сч, 20, Сч, 20).Значение);
			Иначе
				КоличествоПериодов = СокрЛП(ТабДок.Область(Сч, 20, Сч, 20).Текст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КоличествоПериодов) Тогда
				Попытка
					Если НЕ ТипЗнч(КоличествоПериодов) = ТИП("Число") Тогда
						КоличествоПериодов = Число(КоличествоПериодов);
					КонецЕсли;
				Исключение
					КоличествоПериодов = 0;
					ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + ": " + Символы.ПС + ОписаниеОшибки();
					ЕстьОшибкиВСтроке = Истина;
				КонецПопытки;
			Иначе
				КоличествоПериодов = 0;
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 21, Сч, 21).СодержитЗначение Тогда
				ПериодичностьДляЛичнойКарточки = СокрЛП(ТабДок.Область(Сч, 21, Сч, 21).Значение);
			Иначе
				ПериодичностьДляЛичнойКарточки = СокрЛП(ТабДок.Область(Сч, 21, Сч, 21).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 22, Сч, 22).СодержитЗначение Тогда
				УчитыватьВПотребности = СокрЛП(ТабДок.Область(Сч, 22, Сч, 22).Значение);
			Иначе
				УчитыватьВПотребности = СокрЛП(ТабДок.Область(Сч, 22, Сч, 22).Текст);
			КонецЕсли;
			
			Если ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыРасчетаНорм.Период") Тогда
				УчитыватьВПотребности = Истина;
			Иначе
				Если НРег(УчитыватьВПотребности) = "нет" Тогда
					УчитыватьВПотребности = Ложь;
				Иначе
					УчитыватьВПотребности = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВидВыдачи) Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + ": не определен вид выдачи";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;		
			
			Если ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыРасчетаНорм.Период") Тогда
				
				Если НЕ ЗначениеЗаполнено(ТипПериода) Тогда
					ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + ": не определен тип периода";
					ЕстьОшибкиВСтроке = Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(КоличествоВПериоде) Тогда
					ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + ": не определено количество в периоде";
					ЕстьОшибкиВСтроке = Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(КоличествоПериодов) Тогда
					ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + ": не определено количество периодов";
					ЕстьОшибкиВСтроке = Истина;
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(КоличествоПериодов) и ЗначениеЗаполнено(КоличествоВПериоде) и НЕ ЗначениеЗаполнено(ТипПериода) Тогда
				    ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + ": не определен тип периода";
					ЕстьОшибкиВСтроке = Истина;
				КонецЕсли;
				
				//АсТБ_Alexey_73348_********************************************************************
			    Если ЗначениеЗаполнено(КоличествоПериодов) и НЕ ЗначениеЗаполнено(КоличествоВПериоде) Тогда
				    ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + ": не определено количество в периоде";
					ЕстьОшибкиВСтроке = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КоличествоВПериоде) и НЕ ЗначениеЗаполнено(КоличествоПериодов) Тогда
				    ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + ": не определено количество периодов";
					ЕстьОшибкиВСтроке = Истина;
				КонецЕсли;
				//АсТБ_Alexey_73348_********************************************************************
				
			КонецЕсли;
			
			Если СтрДлина(КодДолжности) > 20 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода должности превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(КодПодразделения) > 20 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода подразделения превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КодРабочегоМеста) И СтрДлина(КодРабочегоМеста) > 9 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода рабочего места превышает 9 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(КодРабочегоМеста) И СтрДлина(НаименованиеРабочегоМеста) > 150 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования рабочего места превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НомерТОН) И СтрДлина(НомерТОН) > 150 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина номера ТОН превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НомерПриложенияТОН) И СтрДлина(НомерПриложенияТОН) > 150 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина номера приложения ТОН превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НомерПрофессииТОН) И СтрДлина(НомерПрофессииТОН) > 150 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина номера профессии ТОН превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(Основание) > 100 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина основания превышает 100 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НаименованиеУсловияНормы) > 150 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина условия нормы превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(ГОСТ) > 200 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина ГОСТ превышает 200 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(ДлинаНомераГруппы) > 3 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина номера группы превышает 3 символа.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НаименованиеНоменклатурыНормы) > 150 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования номенклатуры нормы превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(КодЕдиницыИзмерения) > 3 Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода единицы измерения превышает 3 символа.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.ТаблицаИсходныхНорм.Добавить();
			НоваяСтрока.Использовать 					= Истина;
			НоваяСтрока.НаименованиеДолжности 			= НаименованиеДолжности;
			НоваяСтрока.КодДолжности 					= КодДолжности;
			НоваяСтрока.НаименованиеПодразделения 		= НаименованиеПодразделения;
			НоваяСтрока.КодПодразделения 				= КодПодразделения;
			НоваяСтрока.НаименованиеРабочегоМеста 		= НаименованиеРабочегоМеста;
			НоваяСтрока.КодРабочегоМеста 				= КодРабочегоМеста;
			НоваяСтрока.НомерТОН 						= НомерТОН;
			НоваяСтрока.НомерПриложенияТОН 				= НомерПриложенияТОН;
			НоваяСтрока.НомерПрофессииТОН 				= НомерПрофессииТОН;
			НоваяСтрока.Основание 						= Основание;
			НоваяСтрока.НаименованиеУсловияНормы 		= НаименованиеУсловияНормы;
			НоваяСтрока.ГОСТ 							= ГОСТ;
			НоваяСтрока.НомерГруппы 					= НомерГруппы;
			НоваяСтрока.НаименованиеНоменклатурыНормы 	= НаименованиеНоменклатурыНормы;
			НоваяСтрока.КодЕдиницыИзмерения 			= КодЕдиницыИзмерения;
			НоваяСтрока.ВидРасчета 						= ВидРасчета;
			НоваяСтрока.ВидВыдачи 						= ВидВыдачи;
			НоваяСтрока.ТипПериода 						= ТипПериода;
			НоваяСтрока.КоличествоВПериоде 				= КоличествоВПериоде;
			НоваяСтрока.КоличествоПериодов 				= КоличествоПериодов;
			НоваяСтрока.ПериодичностьДляЛичнойКарточки 	= ПериодичностьДляЛичнойКарточки;
			НоваяСтрока.УчитыватьВПотребности 			= УчитыватьВПотребности;
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлИсходныхНорм(Команда)
	
	ИсходныеНормыПротокол = "*****Чтение файла загрузки*****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не выбрана организация!";
		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не выбран файл загрузки!";
		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлИсходныхНормНаСервере(ВременноеХранилище);
	
	ПроверитьИсходныеНормыВБазе();
	
	Если ИсходныеНормыЕстьДубли Тогда
		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
		Элементы.ТаблицаИсходныхНормЗагрузитьИсходныеНормы.Доступность = Ложь;
	Конецесли;
	
	Если ИсходныеНормыУстановитьНормыНаПодчиненныеПодразделения Тогда
		
		УстановитьНормыНаПодчиненныеПодразделения();
		
		ПроверитьИсходныеНормыВБазе();
		
	ИначеЕсли ИсходныеНормыУстановитьНормыНаПодчиненныеПоЗанятымРабочимМестам Тогда 
		
		УстановитьНормыНаПодчиненныеПодразделенияПоЗанятымРабочимМестам();
		
		ПроверитьИсходныеНормыВБазе();
		
	КонецЕсли;
	
	ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНормыНаПодчиненныеПодразделения()
	
	ТабИсходныхНорм = Объект.ТаблицаИсходныхНорм.Выгрузить();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.Наименование КАК НаименованиеПодразделения,
	|	Подразделения.КодСинхронизации КАК КодПодразделения
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|	И Подразделения.Ссылка В ИЕРАРХИИ (&ГоловноеПодразделение)
	|	И НЕ Подразделения.Ссылка = &ГоловноеПодразделение";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Для Каждого СтрокаТаблицыИсходныхНорм Из ТабИсходныхНорм Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыИсходныхНорм.Подразделение) Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("ГоловноеПодразделение",СтрокаТаблицыИсходныхНорм.Подразделение);
		
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
			
			НоваяСтрока = ТабИсходныхНорм.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыИсходныхНорм);
			
			НоваяСтрока.КодПодразделения 			= СтрокаТаблицыЗапроса.КодПодразделения;
			НоваяСтрока.НаименованиеПодразделения 	= СтрокаТаблицыЗапроса.НаименованиеПодразделения;
			НоваяСтрока.Подразделение 				= СтрокаТаблицыЗапроса.Подразделение;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ТабИсходныхНорм.Свернуть("КодДолжности,НаименованиеДолжности,Должность,
								|КодПодразделения,НаименованиеПодразделения,Подразделение,
								|КодРабочегоМеста,НаименованиеРабочегоМеста,РабочееМесто,
								|НомерТОН,НомерПриложенияТОН,ТОН,
								|НомерПрофессииТОН,ПунктТОН,Основание,ГОСТ,
								|НаименованиеУсловияНормы,УсловиеНормы,
								|НомерГруппы,НормаВыдачи,
								|НаименованиеНоменклатурыНормы,НоменклатураНормы,
								|КодЕдиницыИзмерения,ЕдиницаИзмерения,
								|ВидРасчета,ВидВыдачи,ТипПериода,КоличествоВПериоде,КоличествоПериодов,ПериодичностьВыдачи,
								|УчитыватьВПотребности,ПериодичностьДляЛичнойКарточки,Использовать");
	
	Объект.ТаблицаИсходныхНорм.Загрузить(ТабИсходныхНорм);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНормыНаПодчиненныеПодразделенияПоЗанятымРабочимМестам()
		
	//***НСК Трегубов А.А.*** -- №106028 на скорую руку --  28.07.2021 <<<	
	
	ИспользоватьРабочиеМеста = Объект.Организация.ИспользоватьРабочиеМеста;
	
	ТабИсходныхНорм = Объект.ТаблицаИсходныхНорм.Выгрузить();
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.Наименование КАК НаименованиеПодразделения,
	|	Подразделения.КодСинхронизации КАК КодПодразделения
	|ПОМЕСТИТЬ ВТ_ПодразделенияСИерархией
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|	И Подразделения.Ссылка В ИЕРАРХИИ(&ГоловноеПодразделение)
	|	И НЕ Подразделения.Ссылка = &ГоловноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОбороты.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОбороты.Подразделение.Наименование КАК НаименованиеПодразделения,
	|	ЗанятыеРабочиеМестаОбороты.Подразделение.КодСинхронизации КАК КодПодразделения
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Обороты(
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И РабочееМесто = &РабочееМесто
	|				И Должность = &Должность
	|				И Подразделение В
	|					(ВЫБРАТЬ
	|						ВТ_ПодразделенияСИерархией.Подразделение КАК Подразделение
	|					ИЗ
	|						ВТ_ПодразделенияСИерархией КАК ВТ_ПодразделенияСИерархией)) КАК ЗанятыеРабочиеМестаОбороты";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);

	Для Каждого СтрокаТаблицыИсходныхНорм Из ТабИсходныхНорм Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыИсходныхНорм.Подразделение) 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыИсходныхНорм.Должность) 
			ИЛИ (ИспользоватьРабочиеМеста И НЕ ЗначениеЗаполнено(СтрокаТаблицыИсходныхНорм.РабочееМесто)) Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ГоловноеПодразделение",СтрокаТаблицыИсходныхНорм.Подразделение);
		Запрос.УстановитьПараметр("РабочееМесто",СтрокаТаблицыИсходныхНорм.РабочееМесто);
		Запрос.УстановитьПараметр("Должность",СтрокаТаблицыИсходныхНорм.Должность);

		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
			
			НоваяСтрока = ТабИсходныхНорм.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыИсходныхНорм);
			
			НоваяСтрока.КодПодразделения 			= СтрокаТаблицыЗапроса.КодПодразделения;
			НоваяСтрока.НаименованиеПодразделения 	= СтрокаТаблицыЗапроса.НаименованиеПодразделения;
			НоваяСтрока.Подразделение 				= СтрокаТаблицыЗапроса.Подразделение;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ТабИсходныхНорм.Свернуть("КодДолжности,НаименованиеДолжности,Должность,
								|КодПодразделения,НаименованиеПодразделения,Подразделение,
								|КодРабочегоМеста,НаименованиеРабочегоМеста,РабочееМесто,
								|НомерТОН,НомерПриложенияТОН,ТОН,
								|НомерПрофессииТОН,ПунктТОН,Основание,ГОСТ,
								|НаименованиеУсловияНормы,УсловиеНормы,
								|НомерГруппы,НормаВыдачи,
								|НаименованиеНоменклатурыНормы,НоменклатураНормы,
								|КодЕдиницыИзмерения,ЕдиницаИзмерения,
								|ВидРасчета,ВидВыдачи,ТипПериода,КоличествоВПериоде,КоличествоПериодов,ПериодичностьВыдачи,
								|УчитыватьВПотребности,ПериодичностьДляЛичнойКарточки,Использовать");
	
	Объект.ТаблицаИсходныхНорм.Загрузить(ТабИсходныхНорм);
	
	//***НСК Трегубов А.А.*** -- №106028 на скорую руку --  28.07.2021 >>>
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИсходныеНормыВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхНорм.НомерСтроки КАК НомерСтроки,
	|	ТаблицаИсходныхНорм.Использовать КАК Использовать,
	|	ТаблицаИсходныхНорм.КодДолжности КАК КодДолжности,
	|	ТаблицаИсходныхНорм.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаИсходныхНорм.КодПодразделения КАК КодПодразделения,
	|	ТаблицаИсходныхНорм.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаИсходныхНорм.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ТаблицаИсходныхНорм.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ТаблицаИсходныхНорм.НомерТОН КАК НомерТОН,
	|	ТаблицаИсходныхНорм.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ТаблицаИсходныхНорм.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ТаблицаИсходныхНорм.Основание КАК Основание,
	|	ТаблицаИсходныхНорм.ГОСТ КАК ГОСТ,
	|	ТаблицаИсходныхНорм.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ТаблицаИсходныхНорм.НомерГруппы КАК НомерГруппы,
	|	ТаблицаИсходныхНорм.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ТаблицаИсходныхНорм.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ТаблицаИсходныхНорм.ВидРасчета КАК ВидРасчета,
	|	ТаблицаИсходныхНорм.ВидВыдачи КАК ВидВыдачи,
	|	ТаблицаИсходныхНорм.ТипПериода КАК ТипПериода,
	|	ТаблицаИсходныхНорм.КоличествоВПериоде КАК КоличествоВПериоде,
	|	ТаблицаИсходныхНорм.КоличествоПериодов КАК КоличествоПериодов,
	|	ТаблицаИсходныхНорм.УчитыватьВПотребности КАК УчитыватьВПотребности,
	|	ТаблицаИсходныхНорм.ПериодичностьДляЛичнойКарточки КАК ПериодичностьДляЛичнойКарточки
	|ПОМЕСТИТЬ ВТ_ТаблицаИсходныхНорм
	|ИЗ
	|	&ТаблицаИсходныхНорм КАК ТаблицаИсходныхНорм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолжностиИПрофессии.Ссылка КАК Должность,
	|	ДолжностиИПрофессии.Наименование КАК Наименование,
	|	ДолжностиИПрофессии.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_Должности
	|ИЗ
	|	Справочник.ДолжностиИПрофессии КАК ДолжностиИПрофессии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.КодСинхронизации КАК КодСинхронизации,
	|	Подразделения.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Подразделения
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМестаАСТБ.Ссылка КАК РабочееМесто,
	|	РабочиеМестаАСТБ.КодСинхронизации КАК КодСинхронизации,
	|	РабочиеМестаАСТБ.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_РабочиеМеста
	|ИЗ
	|	Справочник.РабочиеМестаАСТБ КАК РабочиеМестаАСТБ
	|ГДЕ
	|	РабочиеМестаАСТБ.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТиповыеОтраслевыеНормы.Ссылка КАК ТОН,
	|	ТиповыеОтраслевыеНормы.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_ТОН
	|ИЗ
	|	Справочник.ТиповыеОтраслевыеНормы КАК ТиповыеОтраслевыеНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПунктыТОН.Ссылка КАК ПунктТОН,
	|	ПунктыТОН.Наименование КАК Наименование,
	|	ПунктыТОН.Владелец КАК ТОН
	|ПОМЕСТИТЬ ВТ_ПунктыТОН
	|ИЗ
	|	Справочник.ПунктыТОН КАК ПунктыТОН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияНорм.Ссылка КАК УсловиеНормы,
	|	УсловияНорм.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_УсловияНорм
	|ИЗ
	|	Справочник.УсловияНорм КАК УсловияНорм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураНормОрганизации.Ссылка КАК НоменклатураНормы,
	|	НоменклатураНормОрганизации.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_НоменклатураНорм
	|ИЗ
	|	Справочник.НоменклатураНормОрганизации КАК НоменклатураНормОрганизации
	|ГДЕ
	|	НоменклатураНормОрганизации.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
	|	ЕдиницыИзмерения.Код КАК Код
	|ПОМЕСТИТЬ ВТ_ЕдиницыИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодичностьВыдачиСИЗ.Ссылка КАК ПериодичностьВыдачи,
	|	ПериодичностьВыдачиСИЗ.ТипПериода КАК ТипПериода,
	|	ПериодичностьВыдачиСИЗ.КоличествоПериодов КАК КоличествоПериодов,
	|	ПериодичностьВыдачиСИЗ.КоличествоВПериоде КАК КоличествоВПериоде
	|ПОМЕСТИТЬ ВТ_ПериодичностьВыдачи
	|ИЗ
	|	Справочник.ПериодичностьВыдачиСИЗ КАК ПериодичностьВыдачиСИЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИсходныхНорм.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ЕСТЬNULL(ВТ_Должности.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)) КАК Должность,
	|	ВТ_ТаблицаИсходныхНорм.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ЕСТЬNULL(ВТ_Подразделения.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК Подразделение,
	|	ВТ_ТаблицаИсходныхНорм.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ЕСТЬNULL(ВТ_РабочиеМеста.РабочееМесто, ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяССылка)) КАК РабочееМесто,
	|	ВТ_ТаблицаИсходныхНорм.НомерТОН КАК НомерТОН,
	|	ВТ_ТаблицаИсходныхНорм.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ЕСТЬNULL(ВТ_ТОН.ТОН, ЗНАЧЕНИЕ(Справочник.ТиповыеОтраслевыеНормы.ПустаяСсылка)) КАК ТОН,
	|	ВТ_ТаблицаИсходныхНорм.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ВТ_ТаблицаИсходныхНорм.Основание КАК Основание,
	|	ВТ_ТаблицаИсходныхНорм.ГОСТ КАК ГОСТ,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ЕСТЬNULL(ВТ_УсловияНорм.УсловиеНормы, ЗНАЧЕНИЕ(Справочник.УсловияНорм.ПустаяСсылка)) КАК УсловиеНормы,
	|	ВТ_ТаблицаИсходныхНорм.НомерГруппы КАК НомерГруппы,
	|	ЗНАЧЕНИЕ(Справочник.НормыВыдачиСИЗ.ПустаяСсылка) КАК НормаВыдачи,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ЕСТЬNULL(ВТ_НоменклатураНорм.НоменклатураНормы, ЗНАЧЕНИЕ(Справочник.НоменклатураНормОрганизации.ПустаяСсылка)) КАК НоменклатураНормы,
	|	ВТ_ТаблицаИсходныхНорм.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ЕСТЬNULL(ВТ_ЕдиницыИзмерения.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ВТ_ТаблицаИсходныхНорм.ВидРасчета КАК ВидРасчета,
	|	ВТ_ТаблицаИсходныхНорм.ВидВыдачи КАК ВидВыдачи,
	|	ВТ_ТаблицаИсходныхНорм.ТипПериода КАК ТипПериода,
	|	ВТ_ТаблицаИсходныхНорм.КоличествоВПериоде КАК КоличествоВПериоде,
	|	ВТ_ТаблицаИсходныхНорм.КоличествоПериодов КАК КоличествоПериодов,
	|	ЕСТЬNULL(ВТ_ПериодичностьВыдачи.ПериодичностьВыдачи, ЗНАЧЕНИЕ(Справочник.ПериодичностьВыдачиСИЗ.ПустаяСсылка)) КАК ПериодичностьВыдачи,
	|	ВТ_ТаблицаИсходныхНорм.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаИсходныхНорм.Использовать КАК Использовать,
	|	ВТ_ТаблицаИсходныхНорм.УчитыватьВПотребности КАК УчитыватьВПотребности,
	|	ВТ_ТаблицаИсходныхНорм.ПериодичностьДляЛичнойКарточки КАК ПериодичностьДляЛичнойКарточки
	|ПОМЕСТИТЬ ВТ_СборкаБезПунктовТОН
	|ИЗ
	|	ВТ_ТаблицаИсходныхНорм КАК ВТ_ТаблицаИсходныхНорм
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Должности КАК ВТ_Должности
	|		ПО ВТ_ТаблицаИсходныхНорм.НаименованиеДолжности = ВТ_Должности.Наименование
	|			И ВТ_ТаблицаИсходныхНорм.КодДолжности = ВТ_Должности.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения
	|		ПО ВТ_ТаблицаИсходныхНорм.КодПодразделения = ВТ_Подразделения.КодСинхронизации
	|			И ВТ_ТаблицаИсходныхНорм.НаименованиеПодразделения = ВТ_Подразделения.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РабочиеМеста КАК ВТ_РабочиеМеста
	|		ПО ВТ_ТаблицаИсходныхНорм.НаименованиеРабочегоМеста = ВТ_РабочиеМеста.Наименование
	|			И ВТ_ТаблицаИсходныхНорм.КодРабочегоМеста = ВТ_РабочиеМеста.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТОН КАК ВТ_ТОН
	|		ПО (ВЫБОР
	|				КОГДА ВТ_ТаблицаИсходныхНорм.НомерТОН = """"
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_ТаблицаИсходныхНорм.НомерПриложенияТОН = """"
	|							ТОГДА ВТ_ТаблицаИсходныхНорм.НомерТОН
	|						ИНАЧЕ ВТ_ТаблицаИсходныхНорм.НомерТОН + "" "" + ВТ_ТаблицаИсходныхНорм.НомерПриложенияТОН
	|					КОНЕЦ = ВТ_ТОН.Наименование
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УсловияНорм КАК ВТ_УсловияНорм
	|		ПО ВТ_ТаблицаИсходныхНорм.НаименованиеУсловияНормы = ВТ_УсловияНорм.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураНорм КАК ВТ_НоменклатураНорм
	|		ПО ВТ_ТаблицаИсходныхНорм.НаименованиеНоменклатурыНормы = ВТ_НоменклатураНорм.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕдиницыИзмерения КАК ВТ_ЕдиницыИзмерения
	|		ПО ВТ_ТаблицаИсходныхНорм.КодЕдиницыИзмерения = ВТ_ЕдиницыИзмерения.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодичностьВыдачи КАК ВТ_ПериодичностьВыдачи
	|		ПО (ВЫБОР
	|				КОГДА ВТ_ТаблицаИсходныхНорм.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.ПустаяСсылка)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ВТ_ТаблицаИсходныхНорм.ТипПериода = ВТ_ПериодичностьВыдачи.ТипПериода
	|						И ВТ_ТаблицаИсходныхНорм.КоличествоВПериоде = ВТ_ПериодичностьВыдачи.КоличествоВПериоде
	|						И ВТ_ТаблицаИсходныхНорм.КоличествоПериодов = ВТ_ПериодичностьВыдачи.КоличествоПериодов
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СборкаБезПунктовТОН.КодДолжности КАК КодДолжности,
	|	ВТ_СборкаБезПунктовТОН.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_СборкаБезПунктовТОН.Должность КАК Должность,
	|	ВТ_СборкаБезПунктовТОН.КодПодразделения КАК КодПодразделения,
	|	ВТ_СборкаБезПунктовТОН.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_СборкаБезПунктовТОН.Подразделение КАК Подразделение,
	|	ВТ_СборкаБезПунктовТОН.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_СборкаБезПунктовТОН.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_СборкаБезПунктовТОН.РабочееМесто КАК РабочееМесто,
	|	ВТ_СборкаБезПунктовТОН.НомерТОН КАК НомерТОН,
	|	ВТ_СборкаБезПунктовТОН.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ВТ_СборкаБезПунктовТОН.ТОН КАК ТОН,
	|	ВТ_СборкаБезПунктовТОН.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ЕСТЬNULL(ВТ_ПунктыТОН.ПунктТОН, ЗНАЧЕНИЕ(Справочник.ПунктыТОН.ПустаяСсылка)) КАК ПунктТОН,
	|	ВТ_СборкаБезПунктовТОН.Основание КАК Основание,
	|	ВТ_СборкаБезПунктовТОН.ГОСТ КАК ГОСТ,
	|	ВТ_СборкаБезПунктовТОН.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_СборкаБезПунктовТОН.УсловиеНормы КАК УсловиеНормы,
	|	ВТ_СборкаБезПунктовТОН.НомерГруппы КАК НомерГруппы,
	|	ВТ_СборкаБезПунктовТОН.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_СборкаБезПунктовТОН.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_СборкаБезПунктовТОН.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_СборкаБезПунктовТОН.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ВТ_СборкаБезПунктовТОН.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_СборкаБезПунктовТОН.ВидРасчета КАК ВидРасчета,
	|	ВТ_СборкаБезПунктовТОН.ВидВыдачи КАК ВидВыдачи,
	|	ВТ_СборкаБезПунктовТОН.ТипПериода КАК ТипПериода,
	|	ВТ_СборкаБезПунктовТОН.КоличествоВПериоде КАК КоличествоВПериоде,
	|	ВТ_СборкаБезПунктовТОН.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_СборкаБезПунктовТОН.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_СборкаБезПунктовТОН.УчитыватьВПотребности КАК УчитыватьВПотребности,
	|	ВТ_СборкаБезПунктовТОН.ПериодичностьДляЛичнойКарточки КАК ПериодичностьДляЛичнойКарточки,
	|	ЛОЖЬ КАК Существует,
	|	ВТ_СборкаБезПунктовТОН.НомерСтроки КАК НомерСтроки,
	|	ВТ_СборкаБезПунктовТОН.Использовать КАК Использовать
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_СборкаБезПунктовТОН КАК ВТ_СборкаБезПунктовТОН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПунктыТОН КАК ВТ_ПунктыТОН
	|		ПО ВТ_СборкаБезПунктовТОН.ТОН = ВТ_ПунктыТОН.ТОН
	|			И (ВЫБОР
	|				КОГДА ВТ_СборкаБезПунктовТОН.НомерПрофессииТОН = """"
	|					ТОГДА ВТ_ПунктыТОН.Наименование = ""Не задан""
	|				ИНАЧЕ ВТ_СборкаБезПунктовТОН.НомерПрофессииТОН = ВТ_ПунктыТОН.Наименование
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Результат.Должность КАК Должность,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_Результат.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_Результат.РабочееМесто КАК РабочееМесто,
	|	ВТ_Результат.НомерТОН КАК НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ВТ_Результат.ТОН КАК ТОН,
	|	ВТ_Результат.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ВТ_Результат.ПунктТОН КАК ПунктТОН,
	|	ВТ_Результат.Основание КАК Основание,
	|	ВТ_Результат.ГОСТ КАК ГОСТ,
	|	ВТ_Результат.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_Результат.УсловиеНормы КАК УсловиеНормы,
	|	ВТ_Результат.НомерГруппы КАК НомерГруппы,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Результат.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ВТ_Результат.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Результат.ВидРасчета КАК ВидРасчета,
	|	ВТ_Результат.ВидВыдачи КАК ВидВыдачи,
	|	ВТ_Результат.ТипПериода КАК ТипПериода,
	|	ВТ_Результат.КоличествоВПериоде КАК КоличествоВПериоде,
	|	ВТ_Результат.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_Результат.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_Результат.УчитыватьВПотребности КАК УчитыватьВПотребности,
	|	ВТ_Результат.ПериодичностьДляЛичнойКарточки КАК ПериодичностьДляЛичнойКарточки,
	|	ВТ_Результат.Существует КАК Существует,
	|	ВТ_Результат.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА &ВключитьТолькоОсновныеУсловияНорм
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Результат.УсловиеНормы = ЗНАЧЕНИЕ(Справочник.УсловияНорм.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВТ_Результат.УсловиеНормы.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.Всегда)
	|									ИЛИ ВТ_Результат.УсловиеНормы.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.ЗимойДополнительно)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Результат.Использовать
	|	КОНЕЦ КАК Использовать
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	ВТ_Результат.НомерГруппы = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	МАКСИМУМ(ВТ_Результат.Должность) КАК Должность,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_Результат.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_Результат.РабочееМесто КАК РабочееМесто,
	|	ВТ_Результат.НомерТОН КАК НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ВТ_Результат.ТОН КАК ТОН,
	|	ВТ_Результат.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ВТ_Результат.ПунктТОН КАК ПунктТОН,
	|	ВТ_Результат.Основание КАК Основание,
	|	ВТ_Результат.ГОСТ КАК ГОСТ,
	|	ВТ_Результат.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_Результат.УсловиеНормы КАК УсловиеНормы,
	|	ВТ_Результат.НомерГруппы КАК НомерГруппы,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Результат.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ВТ_Результат.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Результат.ВидРасчета КАК ВидРасчета,
	|	ВТ_Результат.ВидВыдачи КАК ВидВыдачи,
	|	ВТ_Результат.ТипПериода КАК ТипПериода,
	|	ВТ_Результат.КоличествоВПериоде КАК КоличествоВПериоде,
	|	ВТ_Результат.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_Результат.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_Результат.УчитыватьВПотребности КАК УчитыватьВПотребности,
	|	ВТ_Результат.ПериодичностьДляЛичнойКарточки КАК ПериодичностьДляЛичнойКарточки,
	|	ВТ_Результат.Существует КАК Существует,
	|	ВТ_Результат.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА &ВключитьТолькоОсновныеУсловияНорм
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Результат.УсловиеНормы = ЗНАЧЕНИЕ(Справочник.УсловияНорм.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВТ_Результат.УсловиеНормы.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.Всегда)
	|									ИЛИ ВТ_Результат.УсловиеНормы.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.ЗимойДополнительно)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Результат.Использовать
	|	КОНЕЦ КАК Использовать
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	НЕ ВТ_Результат.НомерГруппы = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодДолжности,
	|	ВТ_Результат.НаименованиеДолжности,
	|	ВТ_Результат.КодПодразделения,
	|	ВТ_Результат.НаименованиеПодразделения,
	|	ВТ_Результат.Подразделение,
	|	ВТ_Результат.КодРабочегоМеста,
	|	ВТ_Результат.НаименованиеРабочегоМеста,
	|	ВТ_Результат.РабочееМесто,
	|	ВТ_Результат.НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН,
	|	ВТ_Результат.ТОН,
	|	ВТ_Результат.НомерПрофессииТОН,
	|	ВТ_Результат.ПунктТОН,
	|	ВТ_Результат.Основание,
	|	ВТ_Результат.ГОСТ,
	|	ВТ_Результат.НаименованиеУсловияНормы,
	|	ВТ_Результат.УсловиеНормы,
	|	ВТ_Результат.НомерГруппы,
	|	ВТ_Результат.НормаВыдачи,
	|	ВТ_Результат.НаименованиеНоменклатурыНормы,
	|	ВТ_Результат.НоменклатураНормы,
	|	ВТ_Результат.КодЕдиницыИзмерения,
	|	ВТ_Результат.ЕдиницаИзмерения,
	|	ВТ_Результат.ВидРасчета,
	|	ВТ_Результат.ВидВыдачи,
	|	ВТ_Результат.ТипПериода,
	|	ВТ_Результат.КоличествоВПериоде,
	|	ВТ_Результат.КоличествоПериодов,
	|	ВТ_Результат.ПериодичностьВыдачи,
	|	ВТ_Результат.УчитыватьВПотребности,
	|	ВТ_Результат.ПериодичностьДляЛичнойКарточки,
	|	ВТ_Результат.Существует,
	|	ВТ_Результат.НомерСтроки,
	|	ВЫБОР
	|		КОГДА &ВключитьТолькоОсновныеУсловияНорм
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Результат.УсловиеНормы = ЗНАЧЕНИЕ(Справочник.УсловияНорм.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВТ_Результат.УсловиеНормы.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.Всегда)
	|									ИЛИ ВТ_Результат.УсловиеНормы.ТипУсловия = ЗНАЧЕНИЕ(Перечисление.ТипыУсловийНорм.ЗимойДополнительно)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_Результат.Использовать
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Результат.НомерГруппы КАК НомерГруппы,
	|	ВТ_Результат.Должность КАК Должность
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	НЕ ВТ_Результат.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|	И НЕ ВТ_Результат.НомерГруппы = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерГруппы";
	
	Запрос.УстановитьПараметр("ТаблицаИсходныхНорм",				Объект.ТаблицаИсходныхНорм.Выгрузить());
	Запрос.УстановитьПараметр("Организация",						Объект.Организация);
	Запрос.УстановитьПараметр("ВключитьТолькоОсновныеУсловияНорм",	Объект.Организация.ВключитьТолькоОсновныеУсловияНорм);

	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаБезНормВыдачиБезГруппИЛИ		= Результат[12].Выгрузить();
	ТаблицаБезНормВыдачиСГруппамиИЛИ	= Результат[13].Выгрузить();
	ТаблицаГруппИЛИ						= Результат[14].Выгрузить();
	
	ТаблицаСоставаНормы = Новый ТаблицаЗначений;
	ТаблицаСоставаНормы.Колонки.Добавить("НомерСтроки",						Новый ОписаниеТипов("Число"));
	ТаблицаСоставаНормы.Колонки.Добавить("НоменклатураНормы",				Новый ОписаниеТипов("СправочникСсылка.НоменклатураНормОрганизации"));
	ТаблицаСоставаНормы.Колонки.Добавить("ЕдиницаИзмерения",				Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаСоставаНормы.Колонки.Добавить("ПериодичностьВыдачи",				Новый ОписаниеТипов("СправочникСсылка.ПериодичностьВыдачиСИЗ"));
	ТаблицаСоставаНормы.Колонки.Добавить("ГОСТ",							Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(200)));
	ТаблицаСоставаНормы.Колонки.Добавить("УчитыватьВПотребности",			Новый ОписаниеТипов("Булево"));
	ТаблицаСоставаНормы.Колонки.Добавить("ПериодичностьДляЛичнойКарточки",	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
		
	//заполняем нормы выдачи без групп ИЛИ
	Для Каждого СтрокаТаблицыБезНормВыдачиБезГруппИЛИ Из ТаблицаБезНормВыдачиБезГруппИЛИ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.НоменклатураНормы) ИЛИ
		     НЕ ЗначениеЗаполнено(СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ЕдиницаИзмерения) Тогда
			 Продолжить;
		КонецЕсли;	 
		
		Если СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ВидРасчета = Перечисления.ВидыРасчетаНорм.Период И 
			НЕ ЗначениеЗаполнено(СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ПериодичностьВыдачи) ТОгда
		    Продолжить;
		КонецЕсли;
		
		ТаблицаСоставаНормы.Очистить();
		НоваяСтрокаСостава 									= ТаблицаСоставаНормы.Добавить();
		НоваяСтрокаСостава.НоменклатураНормы 				= СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.НоменклатураНормы;
		НоваяСтрокаСостава.ЕдиницаИзмерения 				= СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ЕдиницаИзмерения;
		НоваяСтрокаСостава.ПериодичностьВыдачи 				= СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ПериодичностьВыдачи;
		НоваяСтрокаСостава.ГОСТ				 				= СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ГОСТ;
		НоваяСтрокаСостава.НомерСтроки 						= 1;
		//НоваяСтрокаСостава.УчитыватьВПотребности			= ЗначениеЗаполнено(СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ПериодичностьВыдачи);
		НоваяСтрокаСостава.УчитыватьВПотребности			= СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.УчитыватьВПотребности;
		НоваяСтрокаСостава.ПериодичностьДляЛичнойКарточки	= СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ПериодичностьДляЛичнойКарточки;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.НомерТОН) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ПунктТОН) Тогда
				Продолжить;
			КонецЕсли;	
			ТекущееОснование = СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ПунктТОН;
		Иначе
			ТекущееОснование = СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.Основание;
		КонецЕсли;
		
		Если НЕ ИсходныеНормыЗаписыватьОснованияВНормуВыдачи Тогда
			СтруктураНормы = Новый Структура("Организация, ВидРасчета, ВидВыдачиСИЗ, ОснованиеНормы",Объект.Организация,СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ВидРасчета,СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ВидВыдачи,"");
		Иначе
			СтруктураНормы = Новый Структура("Организация, ВидРасчета, ВидВыдачиСИЗ, ОснованиеНормы",Объект.Организация,СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ВидРасчета,СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.ВидВыдачи,ТекущееОснование);
		КонецЕсли;
					
		СтрокаТаблицыБезНормВыдачиБезГруппИЛИ.НормаВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьНормуВыдачиСИЗ(ТаблицаСоставаНормы,СтруктураНормы,Ложь,Истина);
					
	КонецЦикла;
	
	//заполняем нормы выдачи с группами ИЛИ
	Для Каждого СтрокаТаблицыГруппИЛИ Из ТаблицаГруппИЛИ Цикл
		
		СтруктураПоиска = Новый Структура("НомерГруппы,Должность",СтрокаТаблицыГруппИЛИ.НомерГруппы,СтрокаТаблицыГруппИЛИ.Должность);
		
		НайденныеСтроки = ТаблицаБезНормВыдачиСГруппамиИЛИ.НайтиСтроки(СтруктураПоиска);
		
		НомерСтроки	= 1;
		
		ТаблицаСоставаНормы.Очистить();
		
		ЕстьВсеДанныеДляПоискаНормыВыдачи = Истина;
		
		//первый прогон - определяем наличие всех необходимых данных для поиска нормы выдачи
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.НоменклатураНормы) ИЛИ
				НЕ ЗначениеЗаполнено(НайденнаяСтрока.ЕдиницаИзмерения) Тогда
				ЕстьВсеДанныеДляПоискаНормыВыдачи = Ложь;
				Прервать;
			КонецЕсли;	 
			
			Если НайденнаяСтрока.ВидРасчета = Перечисления.ВидыРасчетаНорм.Период И 
				НЕ ЗначениеЗаполнено(НайденнаяСтрока.ПериодичностьВыдачи) ТОгда
				ЕстьВсеДанныеДляПоискаНормыВыдачи = Ложь;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		Если НЕ ЕстьВсеДанныеДляПоискаНормыВыдачи Тогда
			Продолжить;
		КонецЕсли;	
		
		//второй прогон - определяем состав нормы выдачи
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НоваяСтрокаСостава 									= ТаблицаСоставаНормы.Добавить();
			НоваяСтрокаСостава.НоменклатураНормы 				= НайденнаяСтрока.НоменклатураНормы;
			НоваяСтрокаСостава.ЕдиницаИзмерения 				= НайденнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрокаСостава.ПериодичностьВыдачи 				= НайденнаяСтрока.ПериодичностьВыдачи;
			НоваяСтрокаСостава.ГОСТ				 				= НайденнаяСтрока.ГОСТ;
			НоваяСтрокаСостава.НомерСтроки 						= НомерСтроки;
			НоваяСтрокаСостава.УчитыватьВПотребности			= НайденнаяСтрока.УчитыватьВПотребности;
			НоваяСтрокаСостава.ПериодичностьДляЛичнойКарточки	= НайденнаяСтрока.ПериодичностьДляЛичнойКарточки;
			
			НомерСтроки	= НомерСтроки + 1;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НайденнаяСтрока.НомерТОН) Тогда
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.ПунктТОН) Тогда
				Продолжить;
			КонецЕсли;	
			ТекущееОснование = НайденнаяСтрока.ПунктТОН;
		Иначе
			ТекущееОснование = НайденнаяСтрока.Основание;
		КонецЕсли;
		
		Если НЕ ИсходныеНормыЗаписыватьОснованияВНормуВыдачи Тогда
			СтруктураНормы = Новый Структура("Организация, ВидРасчета, ВидВыдачиСИЗ, ОснованиеНормы",Объект.Организация,НайденнаяСтрока.ВидРасчета,НайденнаяСтрока.ВидВыдачи,"");
		Иначе
			СтруктураНормы = Новый Структура("Организация, ВидРасчета, ВидВыдачиСИЗ, ОснованиеНормы",Объект.Организация,НайденнаяСтрока.ВидРасчета,НайденнаяСтрока.ВидВыдачи,ТекущееОснование);
		КонецЕсли;
		
		НайденнаяСтрока.НормаВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьНормуВыдачиСИЗ(ТаблицаСоставаНормы,СтруктураНормы,Ложь,Истина);
			
	КонецЦикла;	
	
	//собираем таблицы вместе
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаБезНормВыдачиСГруппамиИЛИ, ТаблицаБезНормВыдачиБезГруппИЛИ);
	
	//ищем данные в регистре исходных норм
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхНорм.НомерСтроки КАК НомерСтроки,
	|	ТаблицаИсходныхНорм.Использовать КАК Использовать,
	|	ТаблицаИсходныхНорм.КодДолжности КАК КодДолжности,
	|	ТаблицаИсходныхНорм.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаИсходныхНорм.Должность КАК Должность,
	|	ТаблицаИсходныхНорм.КодПодразделения КАК КодПодразделения,
	|	ТаблицаИсходныхНорм.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаИсходныхНорм.Подразделение КАК Подразделение,
	|	ТаблицаИсходныхНорм.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ТаблицаИсходныхНорм.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ТаблицаИсходныхНорм.РабочееМесто КАК РабочееМесто,
	|	ТаблицаИсходныхНорм.НомерТОН КАК НомерТОН,
	|	ТаблицаИсходныхНорм.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ТаблицаИсходныхНорм.ТОН КАК ТОН,
	|	ТаблицаИсходныхНорм.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ТаблицаИсходныхНорм.ПунктТОН КАК ПунктТОН,
	|	ТаблицаИсходныхНорм.Основание КАК Основание,
	|	ТаблицаИсходныхНорм.ГОСТ КАК ГОСТ,
	|	ТаблицаИсходныхНорм.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ТаблицаИсходныхНорм.УсловиеНормы КАК УсловиеНормы,
	|	ТаблицаИсходныхНорм.НомерГруппы КАК НомерГруппы,
	|	ТаблицаИсходныхНорм.НормаВыдачи КАК НормаВыдачи,
	|	ТаблицаИсходныхНорм.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ТаблицаИсходныхНорм.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаИсходныхНорм.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ТаблицаИсходныхНорм.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаИсходныхНорм.ВидРасчета КАК ВидРасчета,
	|	ТаблицаИсходныхНорм.ВидВыдачи КАК ВидВыдачи,
	|	ТаблицаИсходныхНорм.ТипПериода КАК ТипПериода,
	|	ТаблицаИсходныхНорм.КоличествоВПериоде КАК КоличествоВПериоде,
	|	ТаблицаИсходныхНорм.КоличествоПериодов КАК КоличествоПериодов,
	|	ТаблицаИсходныхНорм.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ТаблицаИсходныхНорм.УчитыватьВПотребности КАК УчитыватьВПотребности,
	|	ТаблицаИсходныхНорм.ПериодичностьДляЛичнойКарточки КАК ПериодичностьДляЛичнойКарточки
	|ПОМЕСТИТЬ ВТ_ТаблицаИсходныхНорм
	|ИЗ
	|	&ТаблицаИсходныхНорм КАК ТаблицаИсходныхНорм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеНормыВыдачиСИЗ.Подразделение КАК Подразделение,
	|	ИсходныеНормыВыдачиСИЗ.Должность КАК Должность,
	|	ИсходныеНормыВыдачиСИЗ.РабочееМесто КАК РабочееМесто,
	|	ИсходныеНормыВыдачиСИЗ.УсловиеНормы КАК УсловиеНормы,
	|	ИсходныеНормыВыдачиСИЗ.НормаВыдачи КАК НормаВыдачи,
	|	ИсходныеНормыВыдачиСИЗ.Использовать КАК Использовать
	|ПОМЕСТИТЬ ВТ_ИсходныеНормы
	|ИЗ
	|	РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК ИсходныеНормыВыдачиСИЗ
	|ГДЕ
	|	ИсходныеНормыВыдачиСИЗ.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИсходныхНорм.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаИсходныхНорм.Должность КАК Должность,
	|	ВТ_ТаблицаИсходныхНорм.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаИсходныхНорм.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаИсходныхНорм.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаИсходныхНорм.РабочееМесто КАК РабочееМесто,
	|	ВТ_ТаблицаИсходныхНорм.НомерТОН КАК НомерТОН,
	|	ВТ_ТаблицаИсходныхНорм.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ВТ_ТаблицаИсходныхНорм.ТОН КАК ТОН,
	|	ВТ_ТаблицаИсходныхНорм.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ВТ_ТаблицаИсходныхНорм.ПунктТОН КАК ПунктТОН,
	|	ВТ_ТаблицаИсходныхНорм.Основание КАК Основание,
	|	ВТ_ТаблицаИсходныхНорм.ГОСТ КАК ГОСТ,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_ТаблицаИсходныхНорм.УсловиеНормы КАК УсловиеНормы,
	|	ВТ_ТаблицаИсходныхНорм.НомерГруппы КАК НомерГруппы,
	|	ВТ_ТаблицаИсходныхНорм.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_ТаблицаИсходныхНорм.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаИсходныхНорм.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ВТ_ТаблицаИсходныхНорм.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТаблицаИсходныхНорм.ВидРасчета КАК ВидРасчета,
	|	ВТ_ТаблицаИсходныхНорм.ВидВыдачи КАК ВидВыдачи,
	|	ВТ_ТаблицаИсходныхНорм.ТипПериода КАК ТипПериода,
	|	ВТ_ТаблицаИсходныхНорм.КоличествоВПериоде КАК КоличествоВПериоде,
	|	ВТ_ТаблицаИсходныхНорм.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_ТаблицаИсходныхНорм.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_ТаблицаИсходныхНорм.УчитыватьВПотребности КАК УчитыватьВПотребности,
	|	ВТ_ТаблицаИсходныхНорм.ПериодичностьДляЛичнойКарточки КАК ПериодичностьДляЛичнойКарточки,
	|	НЕ ВТ_ИсходныеНормы.НормаВыдачи ЕСТЬ NULL КАК Существует,
	|	ВТ_ТаблицаИсходныхНорм.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаИсходныхНорм.Использовать КАК Использовать
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаИсходныхНорм КАК ВТ_ТаблицаИсходныхНорм
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходныеНормы КАК ВТ_ИсходныеНормы
	|		ПО ВТ_ТаблицаИсходныхНорм.Должность = ВТ_ИсходныеНормы.Должность
	|			И ВТ_ТаблицаИсходныхНорм.Подразделение = ВТ_ИсходныеНормы.Подразделение
	|			И ВТ_ТаблицаИсходныхНорм.РабочееМесто = ВТ_ИсходныеНормы.РабочееМесто
	|			И ВТ_ТаблицаИсходныхНорм.УсловиеНормы = ВТ_ИсходныеНормы.УсловиеНормы
	|			И ВТ_ТаблицаИсходныхНорм.НормаВыдачи = ВТ_ИсходныеНормы.НормаВыдачи
	|			И ВТ_ТаблицаИсходныхНорм.Использовать = ВТ_ИсходныеНормы.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Должность) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейДолжностей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодДолжности,
	|	ВТ_Результат.НаименованиеДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Подразделение) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейПодразделений
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодПодразделения,
	|	ВТ_Результат.НаименованиеПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_Результат.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.РабочееМесто) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейРабочихМест
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодРабочегоМеста,
	|	ВТ_Результат.НаименованиеРабочегоМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НомерТОН КАК НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.ТОН) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейТОН
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НомерТОН КАК НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ВТ_Результат.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.ПунктТОН) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейПунктовТОН
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН,
	|	ВТ_Результат.НомерПрофессииТОН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.УсловиеНормы) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейУсловийНорм
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеУсловияНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.НоменклатураНормы) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейНоменклатурыНорм
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеНоменклатурыНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ Различные
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Результат.Должность КАК Должность,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_Результат.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_Результат.РабочееМесто КАК РабочееМесто,
	|	ВТ_Результат.НомерТОН КАК НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ВТ_Результат.ТОН КАК ТОН,
	|	ВТ_Результат.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ВТ_Результат.ПунктТОН КАК ПунктТОН,
	|	ВТ_Результат.Основание КАК Основание,
	|	ВТ_Результат.ГОСТ КАК ГОСТ,
	|	ВТ_Результат.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_Результат.УсловиеНормы КАК УсловиеНормы,
	|	ВТ_Результат.НомерГруппы КАК НомерГруппы,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Результат.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ВТ_Результат.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Результат.ВидРасчета КАК ВидРасчета,
	|	ВТ_Результат.ВидВыдачи КАК ВидВыдачи,
	|	ВТ_Результат.ТипПериода КАК ТипПериода,
	|	ВТ_Результат.КоличествоВПериоде КАК КоличествоВПериоде,
	|	ВТ_Результат.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_Результат.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_Результат.УчитыватьВПотребности КАК УчитыватьВПотребности,
	|	ВТ_Результат.ПериодичностьДляЛичнойКарточки КАК ПериодичностьДляЛичнойКарточки,
	|	ВТ_Результат.Существует КАК Существует,
	|	ВТ_Результат.Использовать КАК Использовать,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейДолжностей.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейДолжностей.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейНоменклатурыНорм.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейНоменклатурыНорм.КоличествоДублей
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|							ТОГДА ВТ_АнализДублейПодразделений.КоличествоДублей
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_АнализДублейПунктовТОН.КоличествоДублей > 1
	|									ТОГДА ВТ_АнализДублейПунктовТОН.КоличествоДублей
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ВТ_АнализДублейРабочихМест.КоличествоДублей > 1
	|											ТОГДА ВТ_АнализДублейРабочихМест.КоличествоДублей
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ВТ_АнализДублейТОН.КоличествоДублей > 1
	|													ТОГДА ВТ_АнализДублейТОН.КоличествоДублей
	|												ИНАЧЕ ВЫБОР
	|														КОГДА ВТ_АнализДублейУсловийНорм.КоличествоДублей > 1
	|															ТОГДА ВТ_АнализДублейУсловийНорм.КоличествоДублей
	|														ИНАЧЕ 1
	|													КОНЕЦ
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|		ПО ВТ_Результат.КодДолжности = ВТ_АнализДублейДолжностей.КодДолжности
	|			И ВТ_Результат.НаименованиеДолжности = ВТ_АнализДублейДолжностей.НаименованиеДолжности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|		ПО ВТ_Результат.КодПодразделения = ВТ_АнализДублейПодразделений.КодПодразделения
	|			И ВТ_Результат.НаименованиеПодразделения = ВТ_АнализДублейПодразделений.НаименованиеПодразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейРабочихМест КАК ВТ_АнализДублейРабочихМест
	|		ПО ВТ_Результат.КодРабочегоМеста = ВТ_АнализДублейРабочихМест.КодРабочегоМеста
	|			И ВТ_Результат.НаименованиеРабочегоМеста = ВТ_АнализДублейРабочихМест.НаименованиеРабочегоМеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейТОН КАК ВТ_АнализДублейТОН
	|		ПО ВТ_Результат.НомерТОН = ВТ_АнализДублейТОН.НомерТОН
	|			И ВТ_Результат.НомерПриложенияТОН = ВТ_АнализДублейТОН.НомерПриложенияТОН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейПунктовТОН КАК ВТ_АнализДублейПунктовТОН
	|		ПО ВТ_Результат.НомерТОН = ВТ_АнализДублейПунктовТОН.НомерТОН
	|			И ВТ_Результат.НомерПриложенияТОН = ВТ_АнализДублейПунктовТОН.НомерПриложенияТОН
	|			И ВТ_Результат.НомерПрофессииТОН = ВТ_АнализДублейПунктовТОН.НомерПрофессииТОН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейНоменклатурыНорм КАК ВТ_АнализДублейНоменклатурыНорм
	|		ПО ВТ_Результат.НаименованиеНоменклатурыНормы = ВТ_АнализДублейНоменклатурыНорм.НаименованиеНоменклатурыНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейУсловийНорм КАК ВТ_АнализДублейУсловийНорм
	|		ПО ВТ_Результат.НаименованиеУсловияНормы = ВТ_АнализДублейУсловийНорм.НаименованиеУсловияНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейДолжностей.НаименованиеДолжности КАК Наименование,
	|	ВТ_АнализДублейДолжностей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|ГДЕ
	|	ВТ_АнализДублейДолжностей.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейПодразделений.НаименованиеПодразделения,
	|	ВТ_АнализДублейПодразделений.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|ГДЕ
	|	ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейРабочихМест.НаименованиеРабочегоМеста,
	|	ВТ_АнализДублейРабочихМест.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейРабочихМест КАК ВТ_АнализДублейРабочихМест
	|ГДЕ
	|	ВТ_АнализДублейРабочихМест.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейТОН.НомерТОН,
	|	ВТ_АнализДублейТОН.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейТОН КАК ВТ_АнализДублейТОН
	|ГДЕ
	|	ВТ_АнализДублейТОН.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейПунктовТОН.НомерПрофессииТОН,
	|	ВТ_АнализДублейПунктовТОН.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейПунктовТОН КАК ВТ_АнализДублейПунктовТОН
	|ГДЕ
	|	ВТ_АнализДублейПунктовТОН.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейУсловийНорм.НаименованиеУсловияНормы,
	|	ВТ_АнализДублейУсловийНорм.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейУсловийНорм КАК ВТ_АнализДублейУсловийНорм
	|ГДЕ
	|	ВТ_АнализДублейУсловийНорм.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейНоменклатурыНорм.НаименованиеНоменклатурыНормы,
	|	ВТ_АнализДублейНоменклатурыНорм.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейНоменклатурыНорм КАК ВТ_АнализДублейНоменклатурыНорм
	|ГДЕ
	|	ВТ_АнализДублейНоменклатурыНорм.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаИсходныхНорм",ТаблицаБезНормВыдачиБезГруппИЛИ);
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[11].Выгрузить();
	
	ИсходныеНормыЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаИсходныхНорм.Загрузить(Результат[10].Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидРасчета(НаименованиеВидаРасчета)
	
	Если НРег(НаименованиеВидаРасчета) = "период" Тогда
		ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыРасчетаНорм.Период");
	ИначеЕсли НРег(НаименованиеВидаРасчета) = "дежурные" Тогда
		ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыРасчетаНорм.Дежурный");
	ИначеЕсли НРег(НаименованиеВидаРасчета) = "до износа" Тогда
		ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыРасчетаНорм.ДоИзноса");
	Иначе
		ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыРасчетаНорм.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ВидРасчета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсходныеНормыНаСервере()
	
	ИсходныеНормыПротокол = "*****Загрузка исходных норм*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИсходныхНорм.НомерСтроки КАК НомерСтроки,
	|	ТаблицаИсходныхНорм.Использовать КАК Использовать,
	|	ТаблицаИсходныхНорм.КодДолжности КАК КодДолжности,
	|	ТаблицаИсходныхНорм.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаИсходныхНорм.Должность КАК Должность,
	|	ТаблицаИсходныхНорм.КодПодразделения КАК КодПодразделения,
	|	ТаблицаИсходныхНорм.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаИсходныхНорм.Подразделение КАК Подразделение,
	|	ТаблицаИсходныхНорм.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ТаблицаИсходныхНорм.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ТаблицаИсходныхНорм.РабочееМесто КАК РабочееМесто,
	|	ТаблицаИсходныхНорм.НомерТОН КАК НомерТОН,
	|	ТаблицаИсходныхНорм.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ТаблицаИсходныхНорм.ТОН КАК ТОН,
	|	ТаблицаИсходныхНорм.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ТаблицаИсходныхНорм.ПунктТОН КАК ПунктТОН,
	|	ТаблицаИсходныхНорм.Основание КАК Основание,
	|	ТаблицаИсходныхНорм.ГОСТ КАК ГОСТ,
	|	ТаблицаИсходныхНорм.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ТаблицаИсходныхНорм.УсловиеНормы КАК УсловиеНормы,
	|	ТаблицаИсходныхНорм.НомерГруппы КАК НомерГруппы,
	|	ТаблицаИсходныхНорм.НормаВыдачи КАК НормаВыдачи,
	|	ТаблицаИсходныхНорм.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ТаблицаИсходныхНорм.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаИсходныхНорм.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ТаблицаИсходныхНорм.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаИсходныхНорм.ВидРасчета КАК ВидРасчета,
	|	ТаблицаИсходныхНорм.ВидВыдачи КАК ВидВыдачи,
	|	ТаблицаИсходныхНорм.ТипПериода КАК ТипПериода,
	|	ТаблицаИсходныхНорм.КоличествоВПериоде КАК КоличествоВПериоде,
	|	ТаблицаИсходныхНорм.КоличествоПериодов КАК КоличествоПериодов,
	|	ТаблицаИсходныхНорм.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ТаблицаИсходныхНорм.УчитыватьВПотребности КАК УчитыватьВПотребности,
	|	ТаблицаИсходныхНорм.ПериодичностьДляЛичнойКарточки КАК ПериодичностьДляЛичнойКарточки,
	|	ТаблицаИсходныхНорм.Существует КАК Существует
	|ПОМЕСТИТЬ ВТ_ТаблицаИсходныхНорм
	|ИЗ
	|	&ТаблицаИсходныхНорм КАК ТаблицаИсходныхНорм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИсходныхНорм.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаИсходныхНорм.Использовать КАК Использовать,
	|	ВТ_ТаблицаИсходныхНорм.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаИсходныхНорм.Должность КАК Должность,
	|	ВТ_ТаблицаИсходныхНорм.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаИсходныхНорм.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаИсходныхНорм.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаИсходныхНорм.РабочееМесто КАК РабочееМесто,
	|	ВТ_ТаблицаИсходныхНорм.НомерТОН КАК НомерТОН,
	|	ВТ_ТаблицаИсходныхНорм.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ВТ_ТаблицаИсходныхНорм.ТОН КАК ТОН,
	|	ВТ_ТаблицаИсходныхНорм.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ВТ_ТаблицаИсходныхНорм.ПунктТОН КАК ПунктТОН,
	|	ВТ_ТаблицаИсходныхНорм.Основание КАК Основание,
	|	ВТ_ТаблицаИсходныхНорм.ГОСТ КАК ГОСТ,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_ТаблицаИсходныхНорм.УсловиеНормы КАК УсловиеНормы,
	|	ВТ_ТаблицаИсходныхНорм.НомерГруппы КАК НомерГруппы,
	|	ВТ_ТаблицаИсходныхНорм.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_ТаблицаИсходныхНорм.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаИсходныхНорм.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ВТ_ТаблицаИсходныхНорм.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТаблицаИсходныхНорм.ВидРасчета КАК ВидРасчета,
	|	ВТ_ТаблицаИсходныхНорм.ВидВыдачи КАК ВидВыдачи,
	|	ВТ_ТаблицаИсходныхНорм.ТипПериода КАК ТипПериода,
	|	ВТ_ТаблицаИсходныхНорм.КоличествоВПериоде КАК КоличествоВПериоде,
	|	ВТ_ТаблицаИсходныхНорм.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_ТаблицаИсходныхНорм.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_ТаблицаИсходныхНорм.УчитыватьВПотребности КАК УчитыватьВПотребности,
	|	ВТ_ТаблицаИсходныхНорм.ПериодичностьДляЛичнойКарточки КАК ПериодичностьДляЛичнойКарточки,
	|	ВТ_ТаблицаИсходныхНорм.Существует КАК Существует
	|ИЗ
	|	ВТ_ТаблицаИсходныхНорм КАК ВТ_ТаблицаИсходныхНорм
	|ГДЕ
	|	НЕ ВТ_ТаблицаИсходныхНорм.Существует
	|	И ВТ_ТаблицаИсходныхНорм.НомерГруппы = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИсходныхНорм.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаИсходныхНорм.Использовать КАК Использовать,
	|	ВТ_ТаблицаИсходныхНорм.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаИсходныхНорм.Должность КАК Должность,
	|	ВТ_ТаблицаИсходныхНорм.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаИсходныхНорм.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаИсходныхНорм.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаИсходныхНорм.РабочееМесто КАК РабочееМесто,
	|	ВТ_ТаблицаИсходныхНорм.НомерТОН КАК НомерТОН,
	|	ВТ_ТаблицаИсходныхНорм.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ВТ_ТаблицаИсходныхНорм.ТОН КАК ТОН,
	|	ВТ_ТаблицаИсходныхНорм.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ВТ_ТаблицаИсходныхНорм.ПунктТОН КАК ПунктТОН,
	|	ВТ_ТаблицаИсходныхНорм.Основание КАК Основание,
	|	ВТ_ТаблицаИсходныхНорм.ГОСТ КАК ГОСТ,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_ТаблицаИсходныхНорм.УсловиеНормы КАК УсловиеНормы,
	|	ВТ_ТаблицаИсходныхНорм.НомерГруппы КАК НомерГруппы,
	|	ВТ_ТаблицаИсходныхНорм.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаИсходныхНорм.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_ТаблицаИсходныхНорм.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаИсходныхНорм.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ВТ_ТаблицаИсходныхНорм.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТаблицаИсходныхНорм.ВидРасчета КАК ВидРасчета,
	|	ВТ_ТаблицаИсходныхНорм.ВидВыдачи КАК ВидВыдачи,
	|	ВТ_ТаблицаИсходныхНорм.ТипПериода КАК ТипПериода,
	|	ВТ_ТаблицаИсходныхНорм.КоличествоВПериоде КАК КоличествоВПериоде,
	|	ВТ_ТаблицаИсходныхНорм.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_ТаблицаИсходныхНорм.ПериодичностьВыдачи КАК ПериодичностьВыдачи,
	|	ВТ_ТаблицаИсходныхНорм.УчитыватьВПотребности КАК УчитыватьВПотребности,
	|	ВТ_ТаблицаИсходныхНорм.ПериодичностьДляЛичнойКарточки КАК ПериодичностьДляЛичнойКарточки,
	|	ВТ_ТаблицаИсходныхНорм.Существует КАК Существует
	|ИЗ
	|	ВТ_ТаблицаИсходныхНорм КАК ВТ_ТаблицаИсходныхНорм
	|ГДЕ
	|	НЕ ВТ_ТаблицаИсходныхНорм.Существует
	|	И НЕ ВТ_ТаблицаИсходныхНорм.НомерГруппы = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаИсходныхНорм.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаИсходныхНорм.Должность КАК Должность,
	|	ВТ_ТаблицаИсходныхНорм.НомерГруппы КАК НомерГруппы
	|ИЗ
	|	ВТ_ТаблицаИсходныхНорм КАК ВТ_ТаблицаИсходныхНорм
	|ГДЕ
	|	НЕ ВТ_ТаблицаИсходныхНорм.Существует
	|	И НЕ ВТ_ТаблицаИсходныхНорм.НомерГруппы = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерГруппы";
	
	Запрос.УстановитьПараметр("ТаблицаИсходныхНорм",Объект.ТаблицаИсходныхНорм.Выгрузить());
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаИсходныхНормБезГруппИЛИ	= Результат[1].Выгрузить();
	ТаблицаИсходныхНормCГруппамиИЛИ = Результат[2].Выгрузить();
	ТаблицаГруппИЛИ 				= Результат[3].Выгрузить();
	
	Если ТаблицаИсходныхНормБезГруппИЛИ.Количество() + ТаблицаИсходныхНормCГруппамиИЛИ.Количество() = 0 Тогда
		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Информация для загрузки исходных норм не найдена.";
		Возврат;
	КонецЕсли;
	
	МассивСозданныхЭлементовСправочников = НОВЫЙ Массив;
	
	ТаблицаСоставаНормы = Новый ТаблицаЗначений;
	ТаблицаСоставаНормы.Колонки.Добавить("НомерСтроки",						Новый ОписаниеТипов("Число"));
	ТаблицаСоставаНормы.Колонки.Добавить("НоменклатураНормы",				Новый ОписаниеТипов("СправочникСсылка.НоменклатураНормОрганизации"));
	ТаблицаСоставаНормы.Колонки.Добавить("ЕдиницаИзмерения",				Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаСоставаНормы.Колонки.Добавить("ПериодичностьВыдачи",				Новый ОписаниеТипов("СправочникСсылка.ПериодичностьВыдачиСИЗ"));
	ТаблицаСоставаНормы.Колонки.Добавить("ГОСТ",							Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(200)));
	ТаблицаСоставаНормы.Колонки.Добавить("УчитыватьВПотребности",			Новый ОписаниеТипов("Булево"));
	ТаблицаСоставаНормы.Колонки.Добавить("ПериодичностьДляЛичнойКарточки",	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	
	ТаблицаДляЗаписиНормВыдачиСИЗ = Новый ТаблицаЗначений;
	ТаблицаДляЗаписиНормВыдачиСИЗ.Колонки.Добавить("Организация",	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДляЗаписиНормВыдачиСИЗ.Колонки.Добавить("Подразделение",	Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТаблицаДляЗаписиНормВыдачиСИЗ.Колонки.Добавить("Должность",		Новый ОписаниеТипов("СправочникСсылка.ДолжностиИПрофессии"));
	ТаблицаДляЗаписиНормВыдачиСИЗ.Колонки.Добавить("РабочееМесто",	Новый ОписаниеТипов("СправочникСсылка.РабочиеМестаАСТБ"));
	ТаблицаДляЗаписиНормВыдачиСИЗ.Колонки.Добавить("УсловиеНормы",	Новый ОписаниеТипов("СправочникСсылка.УсловияНорм"));
	ТаблицаДляЗаписиНормВыдачиСИЗ.Колонки.Добавить("НормаВыдачи",	Новый ОписаниеТипов("СправочникСсылка.НормыВыдачиСИЗ"));
	ТаблицаДляЗаписиНормВыдачиСИЗ.Колонки.Добавить("Использовать",	Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаИсходныхНормБезГруппИЛИ Цикл
	
		МожноЗагружать = Истина;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Подразделение) Тогда
			ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не найдено подразделение: " + СтрокаТаблицыЗапроса.НаименованиеПодразделения;
			МожноЗагружать = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Должность) Тогда
			ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не найдена должность: " + СтрокаТаблицыЗапроса.НаименованиеДолжности;
			МожноЗагружать = Ложь;
		КонецЕсли;
		
		Если Объект.Организация.ИспользоватьРабочиеМеста И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.РабочееМесто) Тогда
			ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не найдено рабочее место: " + СтрокаТаблицыЗапроса.НаименованиеРабочегоМеста;
			МожноЗагружать = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ВидРасчета) Тогда
			ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не задан вид расчета";
			МожноЗагружать = Ложь;
		КонецЕсли;
		
		//***НСК Трегубов А.А.*** -- Единицу обрабатываем до получения разрешения загрузки, т.к. в некоторых случаях ищем в классификаторе.   --  13.11.2019 <<<
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ЕдиницаИзмерения) Тогда 
			
			ЕдиницаИзмерения = ПроцедурыРаботыСНормамиСервер.ПолучитьЕдиницуИзмерения(СтрокаТаблицыЗапроса.КодЕдиницыИзмерения);
			Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда 
				
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не найдена единица измерения в классификаторе с кодом: " + СтрокаТаблицыЗапроса.КодЕдиницыИзмерения;
				МожноЗагружать = Ложь;
				
			Иначе
				
				СтрокаТаблицыЗапроса.ЕдиницаИзмерения = ЕдиницаИзмерения;
				
				Если МассивСозданныхЭлементовСправочников.Найти(СтрокаТаблицыЗапроса.ЕдиницаИзмерения) = Неопределено Тогда
					
					ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана единица измерения с кодом: " + СтрокаТаблицыЗапроса.КодЕдиницыИзмерения;
					МассивСозданныхЭлементовСправочников.Добавить(СтрокаТаблицыЗапроса.ЕдиницаИзмерения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		//***НСК Трегубов А.А.*** -- Единицу обрабатываем до получения разрешения загрузки, т.к. в некоторых случаях ищем в классификаторе.   --  13.11.2019 >>>
		
		
		Если НЕ МожноЗагружать Тогда
			Продолжить;
		КонецЕсли;	
		
		//***НСК Трегубов А.А.*** --  --  13.11.2019 <<<	
		
		//определяем (создаем) единицу измерения
		//Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ЕдиницаИзмерения) Тогда
		//	СтрокаТаблицыЗапроса.ЕдиницаИзмерения = ПроцедурыРаботыСНормамиСервер.ПолучитьЕдиницуИзмерения(СтрокаТаблицыЗапроса.КодЕдиницыИзмерения);
		//	Если МассивСозданныхЭлементовСправочников.Найти(СтрокаТаблицыЗапроса.ЕдиницаИзмерения) = Неопределено Тогда
		//		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана единица измерения с кодом: " + СтрокаТаблицыЗапроса.КодЕдиницыИзмерения;
		//		МассивСозданныхЭлементовСправочников.Добавить(СтрокаТаблицыЗапроса.ЕдиницаИзмерения);
		//	КонецЕсли;
		//КонецЕсли;
		
		//***НСК Трегубов А.А.*** --  --  13.11.2019 >>>

		//определяем (создаем) номенклатуру нормы
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НоменклатураНормы) Тогда
			СтрокаТаблицыЗапроса.НоменклатураНормы = ПроцедурыРаботыСНормамиСервер.ПолучитьНоменклатуруНормыОрганизации(СтрокаТаблицыЗапроса.НаименованиеНоменклатурыНормы,Объект.Организация);
			Если МассивСозданныхЭлементовСправочников.Найти(СтрокаТаблицыЗапроса.НоменклатураНормы) = Неопределено Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана номенклатура нормы: " + СтрокаТаблицыЗапроса.НаименованиеНоменклатурыНормы;
				МассивСозданныхЭлементовСправочников.Добавить(СтрокаТаблицыЗапроса.НоменклатураНормы);
			КонецЕсли;
		КонецЕсли;
			
		//определяем (создаем) периодичность выдачи
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ПериодичностьВыдачи) Тогда
			СтрокаТаблицыЗапроса.ПериодичностьВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьПериодичностьВыдачи(СтрокаТаблицыЗапроса.ТипПериода,СтрокаТаблицыЗапроса.КоличествоПериодов,СтрокаТаблицыЗапроса.КоличествоВПериоде);
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ПериодичностьВыдачи) И МассивСозданныхЭлементовСправочников.Найти(СтрокаТаблицыЗапроса.ПериодичностьВыдачи) = Неопределено Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана периодичность выдачи: " + СтрокаТаблицыЗапроса.ПериодичностьВыдачи.Наименование;
				МассивСозданныхЭлементовСправочников.Добавить(СтрокаТаблицыЗапроса.ПериодичностьВыдачи);
			КонецЕсли;
		КонецЕсли;
		
		//+++++механизм формирования наименований ТОН отключен 30.04.2020
		
		//определяем (создаем) ТОН
		//Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерТОН) И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ТОН) Тогда
		//	СтрокаТаблицыЗапроса.ТОН = ПроцедурыРаботыСНормамиСервер.ПолучитьТОН("ТОН №" + СтрокаТаблицыЗапроса.НомерТОН + ?(ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерПриложенияТОН),", Приложение №" + СтрокаТаблицыЗапроса.НомерПриложенияТОН,""));
		//	Если МассивСозданныхЭлементовСправочников.Найти(СтрокаТаблицыЗапроса.ТОН) = Неопределено Тогда
		//		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана ТОН: " + СтрокаТаблицыЗапроса.ТОН.Наименование;
		//		МассивСозданныхЭлементовСправочников.Добавить(СтрокаТаблицыЗапроса.ТОН);
		//	КонецЕсли;
		//КонецЕсли;
		
		//определяем (создаем) пункт ТОН
		//Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерТОН) И Не ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ПунктТОН) Тогда
		//	СтрокаТаблицыЗапроса.ПунктТОН = ПроцедурыРаботыСНормамиСервер.ПолучитьПунктТОН(СтрокаТаблицыЗапроса.ТОН,?(ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерПрофессииТОН),СтрокаТаблицыЗапроса.НомерПрофессииТОН,"Не задан"));
		//	Если МассивСозданныхЭлементовСправочников.Найти(СтрокаТаблицыЗапроса.ПунктТОН) = Неопределено Тогда
		//		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создан пункт ТОН: " + СтрокаТаблицыЗапроса.ПунктТОН.Наименование;
		//		МассивСозданныхЭлементовСправочников.Добавить(СтрокаТаблицыЗапроса.ПунктТОН);
		//	КонецЕсли;
		//КонецЕсли;	
		
		//определяем (создаем) ТОН
		Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерТОН) И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ТОН) Тогда
			СтрокаТаблицыЗапроса.ТОН = ПроцедурыРаботыСНормамиСервер.ПолучитьТОН(Строка(СтрокаТаблицыЗапроса.НомерТОН) + ?(ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерПриложенияТОН)," " + СтрокаТаблицыЗапроса.НомерПриложенияТОН,""));
			Если МассивСозданныхЭлементовСправочников.Найти(СтрокаТаблицыЗапроса.ТОН) = Неопределено Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана ТОН: " + СтрокаТаблицыЗапроса.ТОН.Наименование;
				МассивСозданныхЭлементовСправочников.Добавить(СтрокаТаблицыЗапроса.ТОН);
			КонецЕсли;
		КонецЕсли;
		
		//определяем (создаем) пункт ТОН
		Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерТОН) И Не ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ПунктТОН) Тогда
			СтрокаТаблицыЗапроса.ПунктТОН = ПолучитьПунктТОН(СтрокаТаблицыЗапроса.ТОН,?(ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерПрофессииТОН),Строка(СтрокаТаблицыЗапроса.НомерПрофессииТОН),"Не задан"));
			Если МассивСозданныхЭлементовСправочников.Найти(СтрокаТаблицыЗапроса.ПунктТОН) = Неопределено Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создан пункт ТОН: " + СтрокаТаблицыЗапроса.ПунктТОН.Наименование;
				МассивСозданныхЭлементовСправочников.Добавить(СтрокаТаблицыЗапроса.ПунктТОН);
			КонецЕсли;
		КонецЕсли;
		
		//-----механизм формирования наименований ТОН отключен 30.04.2020
		
		//определяем (создаем) условие нормы
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.УсловиеНормы) Тогда
			СтрокаТаблицыЗапроса.УсловиеНормы = ПроцедурыРаботыСНормамиСервер.ПолучитьУсловиеНормы(СтрокаТаблицыЗапроса.НаименованиеУсловияНормы);
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.УсловиеНормы) И МассивСозданныхЭлементовСправочников.Найти(СтрокаТаблицыЗапроса.УсловиеНормы) = Неопределено Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создано условие нормы: " + СтрокаТаблицыЗапроса.УсловиеНормы.Наименование;
				МассивСозданныхЭлементовСправочников.Добавить(СтрокаТаблицыЗапроса.УсловиеНормы);
			КонецЕсли;
		КонецЕсли;
		
		//АсТБ_Alexey_67484_********************************************************************
		//проверяем флажок "Включить только основные условия норм"
		Если Объект.Организация.ВключитьТолькоОсновныеУсловияНорм Тогда
			Если СтрокаТаблицыЗапроса.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.Всегда 
				ИЛИ СтрокаТаблицыЗапроса.УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ЗимойДополнительно Тогда
		        СтрокаТаблицыЗапроса.Использовать = ИСТИНА;
			Иначе
				СтрокаТаблицыЗапроса.Использовать = Ложь;   
			КонецЕсли;
		КонецЕсли;
		//АсТБ_Alexey_67484_********************************************************************
			
		Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерТОН) Тогда
			ТекущееОснование = СтрокаТаблицыЗапроса.ПунктТОН;
		Иначе
			ТекущееОснование = СтрокаТаблицыЗапроса.Основание;
		КонецЕсли;
			
		//определяем (создаем) нормы выдачи
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НормаВыдачи) Тогда
			
			ТаблицаСоставаНормы.Очистить();
			НоваяСтрокаСостава 									= ТаблицаСоставаНормы.Добавить();
			НоваяСтрокаСостава.НоменклатураНормы 				= СтрокаТаблицыЗапроса.НоменклатураНормы;
			НоваяСтрокаСостава.ЕдиницаИзмерения 				= СтрокаТаблицыЗапроса.ЕдиницаИзмерения;
			НоваяСтрокаСостава.ПериодичностьВыдачи 				= СтрокаТаблицыЗапроса.ПериодичностьВыдачи;
			НоваяСтрокаСостава.ГОСТ				 				= СтрокаТаблицыЗапроса.ГОСТ;
			НоваяСтрокаСостава.НомерСтроки 						= 1;
			НоваяСтрокаСостава.УчитыватьВПотребности			= СтрокаТаблицыЗапроса.УчитыватьВПотребности;
			НоваяСтрокаСостава.ПериодичностьДляЛичнойКарточки	= СтрокаТаблицыЗапроса.ПериодичностьДляЛичнойКарточки;
			
			Если НЕ ИсходныеНормыЗаписыватьОснованияВНормуВыдачи Тогда
				СтруктураНормы = Новый Структура("Организация, ВидРасчета, ВидВыдачиСИЗ, ОснованиеНормы",Объект.Организация,СтрокаТаблицыЗапроса.ВидРасчета,СтрокаТаблицыЗапроса.ВидВыдачи,"");
			Иначе
				СтруктураНормы = Новый Структура("Организация, ВидРасчета, ВидВыдачиСИЗ, ОснованиеНормы",Объект.Организация,СтрокаТаблицыЗапроса.ВидРасчета,СтрокаТаблицыЗапроса.ВидВыдачи,ТекущееОснование);
			КонецЕсли;	
			
			СтрокаТаблицыЗапроса.НормаВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьНормуВыдачиСИЗ(ТаблицаСоставаНормы,СтруктураНормы,,Истина);
			
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НормаВыдачи) И МассивСозданныхЭлементовСправочников.Найти(СтрокаТаблицыЗапроса.НормаВыдачи) = Неопределено Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана норма выдачи: " + СтрокаТаблицыЗапроса.НормаВыдачи.Наименование;
				МассивСозданныхЭлементовСправочников.Добавить(СтрокаТаблицыЗапроса.НормаВыдачи);
			КонецЕсли;
			
		КонецЕсли;	
		
		//заполняем регистр уточненных оснований норм выдачи
		Если (НЕ ИсходныеНормыЗаписыватьОснованияВНормуВыдачи) И ЗначениеЗаполнено(ТекущееОснование) Тогда
			
			ЗаписатьУточненноеОснование(Объект.Организация,СтрокаТаблицыЗапроса.НормаВыдачи,СтрокаТаблицыЗапроса.Подразделение,СтрокаТаблицыЗапроса.Должность,СтрокаТаблицыЗапроса.РабочееМесто,ТекущееОснование);
			
		КонецЕсли;
			
		НоваяСтрока 				= ТаблицаДляЗаписиНормВыдачиСИЗ.Добавить();
		НоваяСтрока.Организация 	= Объект.Организация;
		НоваяСтрока.Подразделение 	= СтрокаТаблицыЗапроса.Подразделение;
		НоваяСтрока.Должность 		= СтрокаТаблицыЗапроса.Должность;
		НоваяСтрока.РабочееМесто    = СтрокаТаблицыЗапроса.РабочееМесто;
		НоваяСтрока.УсловиеНормы    = СтрокаТаблицыЗапроса.УсловиеНормы;
		НоваяСтрока.НормаВыдачи    	= СтрокаТаблицыЗапроса.НормаВыдачи;
		НоваяСтрока.Использовать    = СтрокаТаблицыЗапроса.Использовать;
			
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыГруппИЛИ Из ТаблицаГруппИЛИ Цикл
		
		СтруктураПоиска = Новый Структура("НомерГруппы,Должность",СтрокаТаблицыГруппИЛИ.НомерГруппы,СтрокаТаблицыГруппИЛИ.Должность);
		
		НайденныеСтроки = ТаблицаИсходныхНормCГруппамиИЛИ.НайтиСтроки(СтруктураПоиска);
		
		МожноЗагружать = Истина;
		
		//первый прогон - определяем возможность загрузки
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Подразделение) Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не найдено подразделение: " + НайденнаяСтрока.НаименованиеПодразделения;
				МожноЗагружать = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Должность) Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не найдена должность: " + НайденнаяСтрока.НаименованиеДолжности;
				МожноЗагружать = Ложь;
			КонецЕсли;
			
			Если Объект.Организация.ИспользоватьРабочиеМеста И НЕ ЗначениеЗаполнено(НайденнаяСтрока.РабочееМесто) Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не найдено рабочее место: " + НайденнаяСтрока.НаименованиеРабочегоМеста;
				МожноЗагружать = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.ВидРасчета) Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не задан вид расчета";
				МожноЗагружать = Ложь;
			КонецЕсли;
		
			//***НСК Трегубов А.А.*** -- Единицу обрабатываем до получения разрешения загрузки, т.к. в некоторых случаях ищем в классификаторе.   --  13.11.2019 <<<
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.ЕдиницаИзмерения) Тогда 
				
				ЕдиницаИзмерения = ПроцедурыРаботыСНормамиСервер.ПолучитьЕдиницуИзмерения(НайденнаяСтрока.КодЕдиницыИзмерения);
				Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда 
					
					ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не найдена единица измерения в классификаторе с кодом: " + НайденнаяСтрока.КодЕдиницыИзмерения;
					МожноЗагружать = Ложь;
					
				Иначе
					
					НайденнаяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
					
					Если МассивСозданныхЭлементовСправочников.Найти(НайденнаяСтрока.ЕдиницаИзмерения) = Неопределено Тогда
						
						ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана единица измерения с кодом: " + НайденнаяСтрока.КодЕдиницыИзмерения;
						МассивСозданныхЭлементовСправочников.Добавить(НайденнаяСтрока.ЕдиницаИзмерения);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			//***НСК Трегубов А.А.*** -- Единицу обрабатываем до получения разрешения загрузки, т.к. в некоторых случаях ищем в классификаторе.   --  13.11.2019 >>>
						
		КонецЦикла;
		
		Если НЕ МожноЗагружать Тогда
			Продолжить;
		КонецЕсли;
			
		ТаблицаСоставаНормы.Очистить();
		
		НомерСтроки	= 1;
		
		//второй прогон - определяем состав нормы выдачи
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			//определяем (создаем) номенклатуру нормы
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.НоменклатураНормы) Тогда
				НайденнаяСтрока.НоменклатураНормы = ПроцедурыРаботыСНормамиСервер.ПолучитьНоменклатуруНормыОрганизации(НайденнаяСтрока.НаименованиеНоменклатурыНормы,Объект.Организация);
				Если МассивСозданныхЭлементовСправочников.Найти(НайденнаяСтрока.НоменклатураНормы) = Неопределено Тогда
					ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана номенклатура нормы: " + НайденнаяСтрока.НаименованиеНоменклатурыНормы;
					МассивСозданныхЭлементовСправочников.Добавить(НайденнаяСтрока.НоменклатураНормы);
				КонецЕсли;
			КонецЕсли;
			
			//***НСК Трегубов А.А.*** --  --  13.11.2019 <<<
			
			//      //определяем (создаем) единицу измерения
			//Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.ЕдиницаИзмерения) Тогда
			//	НайденнаяСтрока.ЕдиницаИзмерения = ПроцедурыРаботыСНормамиСервер.ПолучитьЕдиницуИзмерения(НайденнаяСтрока.КодЕдиницыИзмерения);
			//	Если МассивСозданныхЭлементовСправочников.Найти(НайденнаяСтрока.ЕдиницаИзмерения) = Неопределено Тогда
			//		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана единица измерения с кодом: " + НайденнаяСтрока.КодЕдиницыИзмерения;
			//		МассивСозданныхЭлементовСправочников.Добавить(НайденнаяСтрока.ЕдиницаИзмерения);
			//	КонецЕсли;
			//КонецЕсли;
			
			//***НСК Трегубов А.А.*** --  --  13.11.2019 >>>
			
			//определяем (создаем) периодичность выдачи
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.ПериодичностьВыдачи) Тогда
				НайденнаяСтрока.ПериодичностьВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьПериодичностьВыдачи(НайденнаяСтрока.ТипПериода,НайденнаяСтрока.КоличествоПериодов,СтрокаТаблицыЗапроса.КоличествоВПериоде);
				Если ЗначениеЗаполнено(НайденнаяСтрока.ПериодичностьВыдачи) И МассивСозданныхЭлементовСправочников.Найти(НайденнаяСтрока.ПериодичностьВыдачи) = Неопределено Тогда
					ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана периодичность выдачи: " + НайденнаяСтрока.ПериодичностьВыдачи.Наименование;
					МассивСозданныхЭлементовСправочников.Добавить(НайденнаяСтрока.ПериодичностьВыдачи);
				КонецЕсли;
			КонецЕсли;
		
			НоваяСтрокаСостава 									= ТаблицаСоставаНормы.Добавить();
			НоваяСтрокаСостава.НоменклатураНормы 				= НайденнаяСтрока.НоменклатураНормы;
			НоваяСтрокаСостава.ЕдиницаИзмерения 				= НайденнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрокаСостава.ПериодичностьВыдачи 				= НайденнаяСтрока.ПериодичностьВыдачи;
			НоваяСтрокаСостава.ГОСТ				 				= НайденнаяСтрока.ГОСТ;
			НоваяСтрокаСостава.НомерСтроки 						= НомерСтроки;
			НоваяСтрокаСостава.УчитыватьВПотребности			= НайденнаяСтрока.УчитыватьВПотребности;
			НоваяСтрокаСостава.ПериодичностьДляЛичнойКарточки	= НайденнаяСтрока.ПериодичностьДляЛичнойКарточки;
			
			НомерСтроки	= НомерСтроки + 1;
			
		КонецЦикла;
		
		//-----механизм формирования наименований ТОН отключен 30.04.2020
		
		//определяем (создаем) ТОН
		//Если ЗначениеЗаполнено(НайденнаяСтрока.ТОН) И НЕ ЗначениеЗаполнено(НайденнаяСтрока.ТОН) Тогда
		//	ТОН = ПроцедурыРаботыСНормамиСервер.ПолучитьТОН("ТОН №" + НайденнаяСтрока.НомерТОН + ?(ЗначениеЗаполнено(НайденнаяСтрока.НомерПриложенияТОН),", Приложение №" + СтрокаТаблицыЗапроса.НомерПриложенияТОН,""));
		//	Если МассивСозданныхЭлементовСправочников.Найти(НайденнаяСтрока.ТОН) = Неопределено Тогда
		//		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана ТОН: " + НайденнаяСтрока.ТОН.Наименование;
		//		МассивСозданныхЭлементовСправочников.Добавить(НайденнаяСтрока.ТОН);
		//	КонецЕсли;
		//КонецЕсли;
		
		//определяем (создаем) пункт ТОН
		//Если ЗначениеЗаполнено(НайденнаяСтрока.НомерТОН) И Не ЗначениеЗаполнено(НайденнаяСтрока.ПунктТОН) Тогда
		//	ПунктТОН = ПроцедурыРаботыСНормамиСервер.ПолучитьПунктТОН(НайденнаяСтрока.ТОН,?(ЗначениеЗаполнено(НайденнаяСтрока.НомерПрофессииТОН),НайденнаяСтрока.НомерПрофессииТОН,"Не задан"));
		//	Если МассивСозданныхЭлементовСправочников.Найти(НайденнаяСтрока.ПунктТОН) = Неопределено Тогда
		//		ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создан пункт ТОН: " + НайденнаяСтрока.ПунктТОН.Наименование;
		//		МассивСозданныхЭлементовСправочников.Добавить(НайденнаяСтрока.ПунктТОН);
		//	КонецЕсли;
		//КонецЕсли;	
				
		//определяем (создаем) ТОН
		Если ЗначениеЗаполнено(НайденнаяСтрока.НомерТОН) И НЕ ЗначениеЗаполнено(НайденнаяСтрока.ТОН) Тогда
			ТОН = ПроцедурыРаботыСНормамиСервер.ПолучитьТОН(Строка(НайденнаяСтрока.НомерТОН) + ?(ЗначениеЗаполнено(НайденнаяСтрока.НомерПриложенияТОН)," " + НайденнаяСтрока.НомерПриложенияТОН,""));
			Если МассивСозданныхЭлементовСправочников.Найти(НайденнаяСтрока.ТОН) = Неопределено Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создана ТОН: " + НайденнаяСтрока.ТОН.Наименование;
				МассивСозданныхЭлементовСправочников.Добавить(НайденнаяСтрока.ТОН);
			КонецЕсли;
		КонецЕсли;
		
		//определяем (создаем) пункт ТОН
		Если ЗначениеЗаполнено(НайденнаяСтрока.НомерТОН) И Не ЗначениеЗаполнено(НайденнаяСтрока.ПунктТОН) Тогда
			ПунктТОН = ПолучитьПунктТОН(НайденнаяСтрока.ТОН,?(ЗначениеЗаполнено(НайденнаяСтрока.НомерПрофессииТОН),Строка(НайденнаяСтрока.НомерПрофессииТОН),"Не задан"));
			Если МассивСозданныхЭлементовСправочников.Найти(НайденнаяСтрока.ПунктТОН) = Неопределено Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создан пункт ТОН: " + НайденнаяСтрока.ПунктТОН.Наименование;
				МассивСозданныхЭлементовСправочников.Добавить(НайденнаяСтрока.ПунктТОН);
			КонецЕсли;
		КонецЕсли;
		
		//-----механизм формирования наименований ТОН отключен 30.04.2020
		
		//определяем (создаем) условие нормы
		Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.УсловиеНормы) Тогда
			УсловиеНормы = ПроцедурыРаботыСНормамиСервер.ПолучитьУсловиеНормы(НайденнаяСтрока.НаименованиеУсловияНормы);
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.УсловиеНормы) И МассивСозданныхЭлементовСправочников.Найти(НайденнаяСтрока.УсловиеНормы) = Неопределено Тогда
				ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Создано условие нормы: " + НайденнаяСтрока.УсловиеНормы.Наименование;
				МассивСозданныхЭлементовСправочников.Добавить(НайденнаяСтрока.УсловиеНормы);
			КонецЕсли;
		КонецЕсли;
		
		//АсТБ_Alexey_67484_********************************************************************
		//проверяем флажок "Включить только основные условия норм"
		Если Объект.Организация.ВключитьТолькоОсновныеУсловияНорм Тогда
			Если УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.Всегда 
				ИЛИ УсловиеНормы.ТипУсловия = Перечисления.ТипыУсловийНорм.ЗимойДополнительно Тогда
		        НайденнаяСтрока.Использовать = ИСТИНА;
			Иначе
				НайденнаяСтрока.Использовать = Ложь;   
			КонецЕсли;
		КонецЕсли;
		//АсТБ_Alexey_67484_********************************************************************
		
		Если ЗначениеЗаполнено(НайденнаяСтрока.НомерТОН) Тогда
			ТекущееОснование = ПунктТОН;
		Иначе
			ТекущееОснование = НайденнаяСтрока.Основание;
		КонецЕсли;
		
		Если НЕ ИсходныеНормыЗаписыватьОснованияВНормуВыдачи Тогда
			СтруктураНормы = Новый Структура("Организация, ВидРасчета, ВидВыдачиСИЗ, ОснованиеНормы",Объект.Организация,НайденнаяСтрока.ВидРасчета,НайденнаяСтрока.ВидВыдачи,"");
		Иначе
			СтруктураНормы = Новый Структура("Организация, ВидРасчета, ВидВыдачиСИЗ, ОснованиеНормы",Объект.Организация,НайденнаяСтрока.ВидРасчета,НайденнаяСтрока.ВидВыдачи,ТекущееОснование);
		КонецЕсли;	
		
		НормаВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьНормуВыдачиСИЗ(ТаблицаСоставаНормы,СтруктураНормы,,Истина);
		
		//заполняем регистр уточненных оснований норм выдачи
		Если (НЕ ИсходныеНормыЗаписыватьОснованияВНормуВыдачи) И ЗначениеЗаполнено(ТекущееОснование) Тогда
			
			ЗаписатьУточненноеОснование(Объект.Организация,НормаВыдачи,НайденнаяСтрока.Подразделение,НайденнаяСтрока.Должность,НайденнаяСтрока.РабочееМесто,ТекущееОснование);
			
		КонецЕсли;
			
		НоваяСтрока 				= ТаблицаДляЗаписиНормВыдачиСИЗ.Добавить();
		НоваяСтрока.Организация 	= Объект.Организация;
		НоваяСтрока.Подразделение 	= НайденнаяСтрока.Подразделение;
		НоваяСтрока.Должность 		= НайденнаяСтрока.Должность;
		НоваяСтрока.РабочееМесто    = НайденнаяСтрока.РабочееМесто;
		НоваяСтрока.УсловиеНормы    = УсловиеНормы;
		НоваяСтрока.НормаВыдачи    	= НормаВыдачи;
		НоваяСтрока.Использовать    = НайденнаяСтрока.Использовать;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыДляЗаписиНормВыдачиСИЗ Из ТаблицаДляЗаписиНормВыдачиСИЗ Цикл
		
		НаборЗаписей = РегистрыСведений.ИсходныеНормыВыдачиСИЗ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
		НаборЗаписей.Отбор.Подразделение.Установить(СтрокаТаблицыДляЗаписиНормВыдачиСИЗ.Подразделение);
		НаборЗаписей.Отбор.Должность.Установить(СтрокаТаблицыДляЗаписиНормВыдачиСИЗ.Должность);
		НаборЗаписей.Отбор.РабочееМесто.Установить(СтрокаТаблицыДляЗаписиНормВыдачиСИЗ.РабочееМесто);
		НаборЗаписей.Отбор.УсловиеНормы.Установить(СтрокаТаблицыДляЗаписиНормВыдачиСИЗ.УсловиеНормы);
		НаборЗаписей.Отбор.НормаВыдачи.Установить(СтрокаТаблицыДляЗаписиНормВыдачиСИЗ.НормаВыдачи);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись 				= НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаТаблицыДляЗаписиНормВыдачиСИЗ);
			НоваяЗапись.Организация 	= Объект.Организация;
			
		Иначе
			
			НаборЗаписей[0].Использовать = СтрокаТаблицыДляЗаписиНормВыдачиСИЗ.Использовать;
			
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
			ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Выполнена запись в исходные нормы. Подразделение: " + СтрокаТаблицыДляЗаписиНормВыдачиСИЗ.Подразделение + ". Должность: " + СтрокаТаблицыДляЗаписиНормВыдачиСИЗ.Должность + ". Норма выдачи: " + СтрокаТаблицыДляЗаписиНормВыдачиСИЗ.НормаВыдачи;
		Исключение
			ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не удалось создать запись в исходных нормах." + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
	
	КонецЦикла;
	
	ПроверитьИсходныеНормыВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "*****Загрузка исходных норм завершена*****";
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьУточненноеОснование(Организация,НормаВыдачи,Подразделение,Должность,РабочееМесто,Основание)
	
	НаборЗаписей = РегистрыСведений.УточненныеОснованияНормВыдачи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.НормаВыдачи.Установить(НормаВыдачи);
	НаборЗаписей.Отбор.Подразделение.Установить(Подразделение);
	НаборЗаписей.Отбор.РабочееМесто.Установить(РабочееМесто);
	НаборЗаписей.Отбор.Должность.Установить(Должность);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Организация 	= Организация;
		НоваяЗапись.НормаВыдачи 	= НормаВыдачи;
		НоваяЗапись.Подразделение 	= Подразделение;
		НоваяЗапись.Должность 		= Должность;
		НоваяЗапись.РабочееМесто 	= РабочееМесто;
		НоваяЗапись.Основание 		= Основание;
		
		Попытка
			НаборЗаписей.Записать();
			ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Выполнена запись в уточненные основания нормы выдачи. Подразделение: " + Подразделение + ". Должность: " + Должность + ". Рабочее место: " + РабочееМесто + ". Норма выдачи: " + НормаВыдачи + ". Основание: " + Основание;
		Исключение
			ИсходныеНормыПротокол = ИсходныеНормыПротокол + Символы.ПС + "Не удалось создать запись в уточненные основания нормы выдачи." + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьПунктТОН(ТОН,НомерПрофессииТОН) Экспорт
	
	ИскомоеНаименование = НомерПрофессииТОН;
	
	НайденныйЭлемент = Справочники.ПунктыТОН.НайтиПоНаименованию(ИскомоеНаименование,Истина,,ТОН);
	
	Если НайденныйЭлемент.Пустая() Тогда
		
		НовыйЭлемент 				= Справочники.ПунктыТОН.СоздатьЭлемент();
		НовыйЭлемент.Наименование 	= ИскомоеНаименование;
		НовыйЭлемент.Владелец 		= ТОН;
		НовыйЭлемент.УстановитьНовыйКод();
		НовыйЭлемент.Записать();
		НайденныйЭлемент = НовыйЭлемент.Ссылка;
		
	КонецЕсли;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИсходныеНормы(Команда)
	
	ЗагрузитьИсходныеНормыНаСервере();
	
	Элементы.СтраницаИсходныеНормы.ПодчиненныеЭлементы.ТаблицаИсходныхНорм.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаИсходныхНормЗагрузитьИсходныеНормы.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНоменклатуруНормНаСервере()
	
	НоменклатураНормПротокол = "*****Загрузка номенклатуры норм*****";
	
	ТаблицаНоменклатурыНорм = Объект.ТаблицаНоменклатурыНорм.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыСИЗ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыСИЗ КАК ВидыСИЗ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПервыйВидСИЗ = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + "Не создан ни один вид СИЗ. Загрузка номенклатуры норм невозможна";
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка ИЗ ТаблицаНоменклатурыНорм Цикл
		
		Если ЗначениеЗаполнено(Строка.НоменклатураНормы) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектНоменклатураНорм = Справочники.НоменклатураНормОрганизации.СоздатьЭлемент();
		ОбъектНоменклатураНорм.Наименование = Строка.НаименованиеНоменклатурыНормы;
		ОбъектНоменклатураНорм.Владелец = Объект.Организация;
		ОбъектНоменклатураНорм.ВидСИЗ = ПервыйВидСИЗ;
		Попытка
			ОбъектНоменклатураНорм.Записать();
			Строка.НоменклатураНормы = ОбъектНоменклатураНорм.Ссылка;
			НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + "Создана номенклатура нормы: " + ОбъектНоменклатураНорм.Ссылка;
		Исключение
			НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
			
	КонецЦикла;
	
	Объект.ТаблицаНоменклатурыНорм.Загрузить(ТаблицаНоменклатурыНорм);
	
	ПроверитьНоменклатуруНормВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	НоменклатураНормПротокол = НоменклатураНормПротокол + Символы.ПС + "*****Загрузка номенклатуры норм завершена*****"
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНоменклатуруНорм(Команда)
	
	ЗагрузитьНоменклатуруНормНаСервере();
	
	Элементы.СтраницаНоменклатураНорм.ПодчиненныеЭлементы.ТаблицаНоменклатурыНорм.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаНоменклатурыНормЗагрузитьНоменклатуруНорм.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлСоответствийНоменклатурыНаСервере(Адрес)
	
	Объект.ТаблицаСоответствийНоменклатуры.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 12 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиСоответствийНоменклатуры(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				НаименованиеНоменклатурыНормы = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
			Иначе
				НаименованиеНоменклатурыНормы = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 2, Сч, 2).Значение) = ТИП("Число") Тогда
					Артикул = Формат(ТабДок.Область(Сч, 2, Сч, 2).Значение,"ЧГ=");
				Иначе
					Артикул = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
				КонецЕсли;
			Иначе
				Артикул = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение);
			Иначе
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				КодСинхронизации = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
			Иначе
				КодСинхронизации = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст);
			КонецЕсли;
			
			Попытка
				Если НЕ ТипЗнч(КодСинхронизации) = ТИП("Число") Тогда
					КодСинхронизации = Число(КодСинхронизации);
				КонецЕсли;
				ДлинаКодаСинхронизации = СтрДлина(Формат(КодСинхронизации,"ЧГ="));
			Исключение
				КодСинхронизации		= 0;
				ДлинаКодаСинхронизации 	= 0;
			КонецПопытки;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 5, Сч, 5).Значение) = ТИП("Число") Тогда
					ТабельныйНомер	= Формат(ТабДок.Область(Сч, 5, Сч, 5).Значение,"ЧГ=");
				Иначе
					ТабельныйНомер	= СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение);
				КонецЕсли;
			Иначе
				ТабельныйНомер	= СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 6, Сч, 6).СодержитЗначение Тогда
				ФИО = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Значение);
			Иначе
				ФИО = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 7, Сч, 7).СодержитЗначение Тогда
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Значение);
			Иначе
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 8, Сч, 8).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 8, Сч, 8).Значение) = ТИП("Число") Тогда
					КодПодразделения	= Формат(ТабДок.Область(Сч, 8, Сч, 8).Значение,"ЧГ=");
				Иначе
					КодПодразделения	= СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Значение);
				КонецЕсли;
			Иначе
				КодПодразделения	= СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 9, Сч, 9).СодержитЗначение Тогда
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Значение);
			Иначе
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 10, Сч, 10).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 10, Сч, 10).Значение) = ТИП("Число") Тогда
					КодДолжности	= Формат(ТабДок.Область(Сч, 10, Сч, 10).Значение,"ЧГ=");
				Иначе
					КодДолжности	= СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Значение);
				КонецЕсли;
			Иначе
				КодДолжности	= СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 11, Сч, 11).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 11, Сч, 11).Значение) = ТИП("Число") Тогда
					Приоритет	= Формат(ТабДок.Область(Сч, 11, Сч, 11).Значение,"ЧГ=");
				Иначе
					Приоритет	= СокрЛП(ТабДок.Область(Сч, 11, Сч, 11).Значение);
				КонецЕсли;
			Иначе
				Приоритет	= СокрЛП(ТабДок.Область(Сч, 11, Сч, 11).Текст);
			КонецЕсли;
			
			Если СтрДлина(НаименованиеНоменклатурыНормы) > 150 Тогда
				СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования номенклатуры нормы превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(Артикул) > 25 Тогда
				СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина артикула превышает 25 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НаименованиеНоменклатуры) > 150 Тогда
				СоответствияНоменклатурыПротокол = НоменклатураОрганизацииПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования номенклатуры превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ДлинаКодаСинхронизации > 15 Тогда
				СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода синхронизации превышает 15 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
				
			Если СтрДлина(ТабельныйНомер) > 13 Тогда
				СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина табельного номера превышает 13 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(ФИО) > 100 Тогда
				СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина ФИО превышает 100 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(КодДолжности) > 20 Тогда
				СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода должности превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(КодПодразделения) > 20 Тогда
				СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода подразделения превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 								= Объект.ТаблицаСоответствийНоменклатуры.Добавить();
			НоваяСтрока.НаименованиеНоменклатурыНормы	= НаименованиеНоменклатурыНормы;
			НоваяСтрока.Артикул							= Артикул;
			НоваяСтрока.НаименованиеНоменклатуры		= НаименованиеНоменклатуры;
			НоваяСтрока.КодСинхронизации				= КодСинхронизации;
			НоваяСтрока.ТабельныйНомер					= ТабельныйНомер;
			НоваяСтрока.ФИО								= ФИО;
			НоваяСтрока.НаименованиеПодразделения		= НаименованиеПодразделения;
			НоваяСтрока.КодПодразделения				= КодПодразделения;
			НоваяСтрока.НаименованиеДолжности			= НаименованиеДолжности;
			НоваяСтрока.КодДолжности					= КодДолжности;
			НоваяСтрока.Приоритет						= Приоритет;			
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;	
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПрочитатьФайлСоответствийНоменклатуры(Команда)
	
	СоответствияНоменклатурыПротокол = "*****Чтение файла загрузки*****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Не выбрана организация!";
		СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Не выбран файл загрузки!";
		СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлСоответствийНоменклатурыНаСервере(ВременноеХранилище);
	
	ПроверитьДублиВФайлеСоответствийНоменклатуры();
	
	Если СоответствияНоменклатурыЕстьДубли Тогда
		СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "В файле загрузки существуют дубли! Загрузка не доступна.";
		Элементы.ТаблицаСоответствийНоменклатурыЗагрузитьСоответствияНоменклатуры.Доступность = Ложь;
	Иначе
		ПроверитьСоответствияНоменклатурыВБазе();
		Если СоответствияНоменклатурыЕстьДубли Тогда
			СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
			Элементы.ТаблицаСоответствийНоменклатурыЗагрузитьСоответствияНоменклатуры.Доступность = Ложь;
		Конецесли;
	Конецесли;

	//Танцюра А.Н. -- №144975 Добавление галки в загрузчике маппинга -- 10.11.2021 <<<
	Если СоответствияНоменклатурыУстановитьНаПодчиненныеПодразделения Тогда
		
		УстановитьСоответствияНаПодчиненныеПодразделения();
		
		ПроверитьСоответствияНоменклатурыВБазе();
		
	КонецЕсли; 
	//Танцюра А.Н. -- №144975 Добавление галки в загрузчике маппинга -- 10.11.2021 >>>
	
	СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

//Танцюра А.Н. -- №144975 Добавление галки в загрузчике маппинга -- 10.11.2021 <<<

&НаСервере
Процедура УстановитьСоответствияНаПодчиненныеПодразделения()
	
	ТабСоответствий = Объект.ТаблицаСоответствийНоменклатуры.Выгрузить();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.Наименование КАК НаименованиеПодразделения,
	|	Подразделения.КодСинхронизации КАК КодПодразделения
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|	И Подразделения.Ссылка В ИЕРАРХИИ (&ГоловноеПодразделение)
	|	И НЕ Подразделения.Ссылка = &ГоловноеПодразделение";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Для Каждого СтрокаТаблицыСоответствий Из ТабСоответствий Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСоответствий.Подразделение) Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("ГоловноеПодразделение",СтрокаТаблицыСоответствий.Подразделение);
		
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
			
			НоваяСтрока = ТабСоответствий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыСоответствий);
			
			НоваяСтрока.КодПодразделения 			= СтрокаТаблицыЗапроса.КодПодразделения;
			НоваяСтрока.НаименованиеПодразделения 	= СтрокаТаблицыЗапроса.НаименованиеПодразделения;
			НоваяСтрока.Подразделение 				= СтрокаТаблицыЗапроса.Подразделение;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ТабСоответствий.Свернуть("НаименованиеНоменклатурыНормы,НоменклатураНормы,Артикул,
								|НаименованиеНоменклатуры,КодСинхронизации,Номенклатура,
								|ТабельныйНомер,ФИО,Сотрудник,
								|НаименованиеПодразделения,КодПодразделения,Подразделение,
								|НаименованиеДолжности,КодДолжности,Должность,
								|Приоритет");
	
	Объект.ТаблицаСоответствийНоменклатуры.Загрузить(ТабСоответствий);
	
КонецПроцедуры   

//Танцюра А.Н. -- №144975 Добавление галки в загрузчике маппинга -- 10.11.2021 >>>

&НаСервере
Процедура ПроверитьДублиВФайлеСоответствийНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ТаблицаСоответствияНоменклатуры.Артикул КАК Артикул,
	|	ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаСоответствияНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаСоответствияНоменклатуры.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаСоответствияНоменклатуры.ФИО КАК ФИО,
	|	ТаблицаСоответствияНоменклатуры.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаСоответствияНоменклатуры.КодПодразделения КАК КодПодразделения,
	|	ТаблицаСоответствияНоменклатуры.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаСоответствияНоменклатуры.КодДолжности КАК КодДолжности,
	|	ТаблицаСоответствияНоменклатуры.Приоритет КАК Приоритет,
	|	ТаблицаСоответствияНоменклатуры.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаСоответствияНоменклатуры
	|ИЗ
	|	&ТаблицаСоответствияНоменклатуры КАК ТаблицаСоответствияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаСоответствияНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаСоответствияНоменклатуры.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаСоответствияНоменклатуры.ФИО КАК ФИО,
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаСоответствияНоменклатуры.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаСоответствияНоменклатуры.КодДолжности КАК КодДолжности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТаблицаСоответствияНоменклатуры.НомерСтроки) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_ТаблицаСоответствияНоменклатуры КАК ВТ_ТаблицаСоответствияНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатурыНормы,
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатуры,
	|	ВТ_ТаблицаСоответствияНоменклатуры.КодСинхронизации,
	|	ВТ_ТаблицаСоответствияНоменклатуры.ТабельныйНомер,
	|	ВТ_ТаблицаСоответствияНоменклатуры.ФИО,
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеПодразделения,
	|	ВТ_ТаблицаСоответствияНоменклатуры.КодПодразделения,
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеДолжности,
	|	ВТ_ТаблицаСоответствияНоменклатуры.КодДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_ТаблицаСоответствияНоменклатуры.Артикул КАК Артикул,
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаСоответствияНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаСоответствияНоменклатуры.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаСоответствияНоменклатуры.ФИО КАК ФИО,
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаСоответствияНоменклатуры.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаСоответствияНоменклатуры.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаСоответствияНоменклатуры.Приоритет КАК Приоритет,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_ТаблицаСоответствияНоменклатуры КАК ВТ_ТаблицаСоответствияНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатурыНормы = ВТ_АнализДублей.НаименованиеНоменклатурыНормы
	|			И ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатуры = ВТ_АнализДублей.НаименованиеНоменклатуры
	|			И ВТ_ТаблицаСоответствияНоменклатуры.КодСинхронизации = ВТ_АнализДублей.КодСинхронизации
	|			И ВТ_ТаблицаСоответствияНоменклатуры.ТабельныйНомер = ВТ_АнализДублей.ТабельныйНомер
	|			И ВТ_ТаблицаСоответствияНоменклатуры.ФИО = ВТ_АнализДублей.ФИО
	|			И ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеПодразделения = ВТ_АнализДублей.НаименованиеПодразделения
	|			И ВТ_ТаблицаСоответствияНоменклатуры.КодПодразделения = ВТ_АнализДублей.КодПодразделения
	|			И ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеДолжности = ВТ_АнализДублей.НаименованиеДолжности
	|			И ВТ_ТаблицаСоответствияНоменклатуры.КодДолжности = ВТ_АнализДублей.КодДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_АнализДублей.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_АнализДублей.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_АнализДублей.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_АнализДублей.ФИО КАК ФИО,
	|	ВТ_АнализДублей.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_АнализДублей.КодПодразделения КАК КодПодразделения,
	|	ВТ_АнализДублей.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_АнализДублей.КодДолжности КАК КодДолжности,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаСоответствияНоменклатуры",Объект.ТаблицаСоответствийНоменклатуры.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[3].Выгрузить();
	
	СоответствияНоменклатурыЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаСоответствийНоменклатуры.Загрузить(Результат[2].Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствияНоменклатурыВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ТаблицаСоответствияНоменклатуры.Артикул КАК Артикул,
	|	ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаСоответствияНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаСоответствияНоменклатуры.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаСоответствияНоменклатуры.ФИО КАК ФИО,
	|	ТаблицаСоответствияНоменклатуры.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаСоответствияНоменклатуры.КодПодразделения КАК КодПодразделения,
	|	ТаблицаСоответствияНоменклатуры.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаСоответствияНоменклатуры.КодДолжности КАК КодДолжности,
	|	ТаблицаСоответствияНоменклатуры.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ТаблицаСоответствияНоменклатуры
	|ИЗ
	|	&ТаблицаСоответствияНоменклатуры КАК ТаблицаСоответствияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураНормОрганизации.Ссылка КАК НоменклатураНормы,
	|	НоменклатураНормОрганизации.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_НоменклатураНормы
	|ИЗ
	|	Справочник.НоменклатураНормОрганизации КАК НоменклатураНормОрганизации
	|ГДЕ
	|	НоменклатураНормОрганизации.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.КодСинхронизации КАК КодСинхронизации,
	|	Номенклатура.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ТабельныйНомер КАК ТабельныйНомер,
	|	Сотрудники.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.КодСинхронизации КАК КодСинхронизации,
	|	Подразделения.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Подразделения
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолжностиИПрофессии.Ссылка КАК Должность,
	|	ДолжностиИПрофессии.Наименование КАК Наименование,
	|	ДолжностиИПрофессии.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_Должности
	|ИЗ
	|	Справочник.ДолжностиИПрофессии КАК ДолжностиИПрофессии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияНоменклатурыВыдачиСрезПоследних.НоменклатураНормыОрганизации КАК НоменклатураНормыОрганизации,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Номенклатура КАК Номенклатура,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Сотрудник КАК Сотрудник,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Подразделение КАК Подразделение,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Должность КАК Должность,
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВТ_СоответствияНоменклатуры
	|ИЗ
	|	РегистрСведений.СоответствияНоменклатурыВыдачи.СрезПоследних(&ДатаАнализа, НоменклатураНормыОрганизации.Владелец = &Организация) КАК СоответствияНоменклатурыВыдачиСрезПоследних
	|ГДЕ
	|	СоответствияНоменклатурыВыдачиСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_ТаблицаСоответствияНоменклатуры.Артикул КАК Артикул,
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаСоответствияНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаСоответствияНоменклатуры.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаСоответствияНоменклатуры.ФИО КАК ФИО,
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаСоответствияНоменклатуры.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаСоответствияНоменклатуры.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаСоответствияНоменклатуры.Приоритет КАК Приоритет,
	|	ЕСТЬNULL(ВТ_НоменклатураНормы.НоменклатураНормы, ЗНАЧЕНИЕ(Справочник.НоменклатураНормОрганизации.ПустаяСсылка)) КАК НоменклатураНормы,
	|	ЕСТЬNULL(ВТ_Номенклатура.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_Сотрудники.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	ЕСТЬNULL(ВТ_Подразделения.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(ВТ_Должности.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)) КАК Должность
	|ПОМЕСТИТЬ ВТ_ТаблицаСоответствияСоСправочниками
	|ИЗ
	|	ВТ_ТаблицаСоответствияНоменклатуры КАК ВТ_ТаблицаСоответствияНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураНормы КАК ВТ_НоменклатураНормы
	|		ПО ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатурыНормы = ВТ_НоменклатураНормы.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеНоменклатуры = ВТ_Номенклатура.Наименование
	|			И ВТ_ТаблицаСоответствияНоменклатуры.КодСинхронизации = ВТ_Номенклатура.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ПО ВТ_ТаблицаСоответствияНоменклатуры.ТабельныйНомер = ВТ_Сотрудники.ТабельныйНомер
	|			И ВТ_ТаблицаСоответствияНоменклатуры.ФИО = ВТ_Сотрудники.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения
	|		ПО ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеПодразделения = ВТ_Подразделения.Наименование
	|			И ВТ_ТаблицаСоответствияНоменклатуры.КодПодразделения = ВТ_Подразделения.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Должности КАК ВТ_Должности
	|		ПО ВТ_ТаблицаСоответствияНоменклатуры.НаименованиеДолжности = ВТ_Должности.Наименование
	|			И ВТ_ТаблицаСоответствияНоменклатуры.КодДолжности = ВТ_Должности.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоответствияСоСправочниками.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_ТаблицаСоответствияСоСправочниками.Артикул КАК Артикул,
	|	ВТ_ТаблицаСоответствияСоСправочниками.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаСоответствияСоСправочниками.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаСоответствияСоСправочниками.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаСоответствияСоСправочниками.ФИО КАК ФИО,
	|	ВТ_ТаблицаСоответствияСоСправочниками.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаСоответствияСоСправочниками.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаСоответствияСоСправочниками.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаСоответствияСоСправочниками.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаСоответствияСоСправочниками.Приоритет КАК Приоритет,
	|	ВТ_ТаблицаСоответствияСоСправочниками.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаСоответствияСоСправочниками.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаСоответствияСоСправочниками.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаСоответствияСоСправочниками.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаСоответствияСоСправочниками.Должность КАК Должность,
	|	ВЫБОР
	|		КОГДА ВТ_СоответствияНоменклатуры.НоменклатураНормыОрганизации ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Существует
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаСоответствияСоСправочниками КАК ВТ_ТаблицаСоответствияСоСправочниками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствияНоменклатуры КАК ВТ_СоответствияНоменклатуры
	|		ПО ВТ_ТаблицаСоответствияСоСправочниками.НоменклатураНормы = ВТ_СоответствияНоменклатуры.НоменклатураНормыОрганизации
	|			И ВТ_ТаблицаСоответствияСоСправочниками.Номенклатура = ВТ_СоответствияНоменклатуры.Номенклатура
	|			И ВТ_ТаблицаСоответствияСоСправочниками.Сотрудник = ВТ_СоответствияНоменклатуры.Сотрудник
	|			И ВТ_ТаблицаСоответствияСоСправочниками.Подразделение = ВТ_СоответствияНоменклатуры.Подразделение
	|			И ВТ_ТаблицаСоответствияСоСправочниками.Должность = ВТ_СоответствияНоменклатуры.Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.НоменклатураНормы) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейНоменклатурыНорм
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеНоменклатурыНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Номенклатура) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейНоменклатуры
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Сотрудник) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейСотрудников
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.ТабельныйНомер,
	|	ВТ_Результат.ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Подразделение) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейПодразделений
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Должность) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейДолжностей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодДолжности,
	|	ВТ_Результат.НаименованиеДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_Результат.Артикул КАК Артикул,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	ВТ_Результат.Приоритет КАК Приоритет,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.Должность КАК Должность,
	|	ВТ_Результат.Существует КАК Существует,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейДолжностей.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейДолжностей.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейНоменклатуры.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейНоменклатуры.КоличествоДублей
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_АнализДублейНоменклатурыНорм.КоличествоДублей > 1
	|							ТОГДА ВТ_АнализДублейНоменклатурыНорм.КоличествоДублей
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|									ТОГДА ВТ_АнализДублейПодразделений.КоличествоДублей
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ВТ_АнализДублейСотрудников.КоличествоДублей > 1
	|											ТОГДА ВТ_АнализДублейСотрудников.КоличествоДублей
	|										ИНАЧЕ 1
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейНоменклатурыНорм КАК ВТ_АнализДублейНоменклатурыНорм
	|		ПО ВТ_Результат.НаименованиеНоменклатурыНормы = ВТ_АнализДублейНоменклатурыНорм.НаименованиеНоменклатурыНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейНоменклатуры КАК ВТ_АнализДублейНоменклатуры
	|		ПО ВТ_Результат.КодСинхронизации = ВТ_АнализДублейНоменклатуры.КодСинхронизации
	|			И ВТ_Результат.НаименованиеНоменклатуры = ВТ_АнализДублейНоменклатуры.НаименованиеНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейСотрудников КАК ВТ_АнализДублейСотрудников
	|		ПО ВТ_Результат.ТабельныйНомер = ВТ_АнализДублейСотрудников.ТабельныйНомер
	|			И ВТ_Результат.ФИО = ВТ_АнализДублейСотрудников.ФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|		ПО ВТ_Результат.НаименованиеПодразделения = ВТ_АнализДублейПодразделений.НаименованиеПодразделения
	|			И ВТ_Результат.КодПодразделения = ВТ_АнализДублейПодразделений.КодПодразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|		ПО ВТ_Результат.НаименованиеДолжности = ВТ_АнализДублейДолжностей.НаименованиеДолжности
	|			И ВТ_Результат.КодДолжности = ВТ_АнализДублейДолжностей.КодДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейНоменклатурыНорм.НаименованиеНоменклатурыНормы КАК Наименование,
	|	ВТ_АнализДублейНоменклатурыНорм.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейНоменклатурыНорм КАК ВТ_АнализДублейНоменклатурыНорм
	|ГДЕ
	|	ВТ_АнализДублейНоменклатурыНорм.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейНоменклатуры.НаименованиеНоменклатуры,
	|	ВТ_АнализДублейНоменклатуры.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейНоменклатуры КАК ВТ_АнализДублейНоменклатуры
	|ГДЕ
	|	ВТ_АнализДублейНоменклатуры.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейСотрудников.ФИО,
	|	ВТ_АнализДублейСотрудников.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейСотрудников КАК ВТ_АнализДублейСотрудников
	|ГДЕ
	|	ВТ_АнализДублейСотрудников.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейПодразделений.НаименованиеПодразделения,
	|	ВТ_АнализДублейПодразделений.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|ГДЕ
	|	ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейДолжностей.НаименованиеДолжности,
	|	ВТ_АнализДублейДолжностей.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|ГДЕ
	|	ВТ_АнализДублейДолжностей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаСоответствияНоменклатуры",Объект.ТаблицаСоответствийНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("ДатаАнализа",					КонецДня(СоответствияНоменклатурыДатаАктуальности));
	Запрос.УстановитьПараметр("Организация",					Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[15].Выгрузить();
	
	СоответствияНоменклатурыЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаСоответствийНоменклатуры.Загрузить(Результат[14].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСоответствияНоменклатурыНаСервере()
	
	СоответствияНоменклатурыПротокол = "*****Загрузка соответствия номенклатуры*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСоответствияНоменклатуры.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаСоответствияНоменклатуры.КодПодразделения КАК КодПодразделения,
	|	ТаблицаСоответствияНоменклатуры.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаСоответствияНоменклатуры.Приоритет КАК Приоритет,
	|	ТаблицаСоответствияНоменклатуры.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаСоответствияНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаСоответствияНоменклатуры.Сотрудник КАК Сотрудник,
	|	ТаблицаСоответствияНоменклатуры.Подразделение КАК Подразделение,
	|	ТаблицаСоответствияНоменклатуры.Должность КАК Должность,
	|	ТаблицаСоответствияНоменклатуры.Существует КАК Существует,
	|	ТаблицаСоответствияНоменклатуры.ФИО КАК ФИО,
	|	ТаблицаСоответствияНоменклатуры.КодДолжности КАК КодДолжности
	|ПОМЕСТИТЬ ВТ_ТаблицаСоответствияНоменклатуры
	|ИЗ
	|	&ТаблицаСоответствияНоменклатуры КАК ТаблицаСоответствияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСоответствияНоменклатуры.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаСоответствияНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаСоответствияНоменклатуры.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаСоответствияНоменклатуры.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаСоответствияНоменклатуры.Должность КАК Должность,
	|	НЕОПРЕДЕЛЕНО КАК УсловиеСоответствия,
	|	ИСТИНА КАК Использовать,
	|	ВТ_ТаблицаСоответствияНоменклатуры.Приоритет КАК Приоритет
	|ИЗ
	|	ВТ_ТаблицаСоответствияНоменклатуры КАК ВТ_ТаблицаСоответствияНоменклатуры
	|ГДЕ
	|	НЕ ВТ_ТаблицаСоответствияНоменклатуры.Существует
	|	И НЕ ВТ_ТаблицаСоответствияНоменклатуры.НоменклатураНормы = ЗНАЧЕНИЕ(Справочник.НоменклатураНормОрганизации.ПустаяСсылка)
	|	И НЕ ВТ_ТаблицаСоответствияНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА НЕ ВТ_ТаблицаСоответствияНоменклатуры.ТабельныйНомер = """"
	|					И НЕ ВТ_ТаблицаСоответствияНоменклатуры.ФИО = """"
	|				ТОГДА НЕ ВТ_ТаблицаСоответствияНоменклатуры.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ ВТ_ТаблицаСоответствияНоменклатуры.КодПодразделения = """"
	|				ТОГДА НЕ ВТ_ТаблицаСоответствияНоменклатуры.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ ВТ_ТаблицаСоответствияНоменклатуры.КодДолжности = """"
	|				ТОГДА НЕ ВТ_ТаблицаСоответствияНоменклатуры.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНормы,
	|	Номенклатура,
	|	Приоритет,
	|	Сотрудник,
	|	Подразделение,
	|	Должность,
	|	УсловиеСоответствия";
	
	Запрос.УстановитьПараметр("ТаблицаСоответствияНоменклатуры", Объект.ТаблицаСоответствийНоменклатуры.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Информация для загрузки соответствия номенклатуры не найдена.";
		Возврат;
	КонецЕсли;
	
	НовыйДокумент = Документы.УстановкаСоответствийНоменклатурыВыдачи.СоздатьДокумент();
	НовыйДокумент.Дата 					= НачалоДня(СоответствияНоменклатурыДатаАктуальности);
	НовыйДокумент.Комментарий 			= "Загружен автоматически";
	НовыйДокумент.Организация 			= Объект.Организация;
	НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Соответствия.Загрузить(Результат.Выгрузить());
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Загрузка соответствия номенклатуры выполнена!" + Символы.ПС + "Сформирован документ: " + НовыйДокумент.Ссылка;
	Исключение
		СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "Загрузка соответствия номенклатуры не выполнена!" + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	ПроверитьСоответствияНоменклатурыВБазе();	
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	СоответствияНоменклатурыПротокол = СоответствияНоменклатурыПротокол + Символы.ПС + "*****Загрузка соответствия номенклатуры завершена*****";
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ЗагрузитьСоответствияНоменклатуры(Команда)
	
	ЗагрузитьСоответствияНоменклатурыНаСервере();
	
	Элементы.СтраницаСоответствияНоменклатуры.ПодчиненныеЭлементы.Группа15.ПодчиненныеЭлементы.Группа16.ПодчиненныеЭлементы.ТаблицаСоответствийНоменклатурыЗагрузитьСоответствияНоменклатуры.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлВыданныхСИЗНаСервере(Адрес)
	
	Объект.ТаблицаВыданныхСИЗ.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 11 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиВыданныхСИЗ(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 1, Сч, 1).Значение) = ТИП("Число") Тогда
					ТабельныйНомер = Формат(ТабДок.Область(Сч, 1, Сч, 1).Значение,"ЧГ=");
				Иначе
					ТабельныйНомер = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
				КонецЕсли;
			Иначе
				ТабельныйНомер = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				ФИО = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
			Иначе
				ФИО = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				НаименованиеНоменклатурыНормы = ПроцедурыРаботыСНормамиСервер.НормализоватьНаименование(СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение));
			Иначе
				НаименованиеНоменклатурыНормы = ПроцедурыРаботыСНормамиСервер.НормализоватьНаименование(СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст));
			КонецЕсли;
			
			//+++АсТБ_Alexey_106247_********************************************************************
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				НаименованиеГруппыВзаимозаменяемыхНорм = ПроцедурыРаботыСНормамиСервер.НормализоватьНаименование(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение));
			Иначе
				НаименованиеГруппыВзаимозаменяемыхНорм = ПроцедурыРаботыСНормамиСервер.НормализоватьНаименование(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст));
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 5, Сч, 5).Значение) = ТИП("Число") Тогда
					Артикул = Формат(ТабДок.Область(Сч, 5, Сч, 5).Значение,"ЧГ=");
				Иначе
					Артикул = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение);
				КонецЕсли;
			Иначе
				Артикул = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 6, Сч, 6).СодержитЗначение Тогда
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Значение);
			Иначе
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 7, Сч, 7).СодержитЗначение Тогда
				КодСинхронизации = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Значение);
			Иначе
				КодСинхронизации = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Текст);
			КонецЕсли;
			
			Попытка
				Если НЕ ТипЗнч(КодСинхронизации) = ТИП("Число") Тогда
					КодСинхронизации = Число(КодСинхронизации);
				КонецЕсли;
				ДлинаКодаСинхронизации = СтрДлина(Формат(КодСинхронизации,"ЧГ="));
			Исключение
				КодСинхронизации		= 0;
				ДлинаКодаСинхронизации 	= 0;
			КонецПопытки;
			
			Если ТабДок.Область(Сч, 8, Сч, 8).СодержитЗначение Тогда
				НаименованиеХарактеристикиНоменклатуры = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Значение);
			Иначе
				НаименованиеХарактеристикиНоменклатуры = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 9, Сч, 9).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 9, Сч, 9).Значение) = ТИП("Дата") Тогда
					ДатаВыдачи	= ТабДок.Область(Сч, 9, Сч, 9).Значение;
				Иначе
					ДатаВыдачи	= ПолучитьДату(СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Значение));
				КонецЕсли;
			Иначе
				ДатаВыдачи	= ПолучитьДату(СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Текст));
			КонецЕсли;
			
			Попытка
				Если ТабДок.Область(Сч, 10, Сч, 10).СодержитЗначение Тогда
					Если ТипЗнч(ТабДок.Область(Сч, 10, Сч, 10).Значение) = ТИП("Число") Тогда
						Количество = ТабДок.Область(Сч, 10, Сч, 10).Значение;
					Иначе
						Количество = Число(СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Значение));
					КонецЕсли;
				Иначе
					Количество = Число(СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Текст));
				КонецЕсли;
			Исключение
				Количество = 0;
			КонецПопытки;
			//---АсТБ_Alexey_106247_********************************************************************
			
			Если СтрДлина(ТабельныйНомер) > 13 Тогда
				ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Строка " + Сч + " - длина табельного номера превышает 13 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(ФИО) > 100 Тогда
				ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Строка " + Сч + " - длина ФИО превышает 100 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НаименованиеНоменклатурыНормы) > 150 Тогда
				ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования номенклатуры нормы превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			//+++АсТБ_Alexey_106247_********************************************************************
			Если СтрДлина(НаименованиеГруппыВзаимозаменяемыхНорм) > 150 Тогда
				ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования группы взаимозаменяемых норм превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			//---АсТБ_Alexey_106247_********************************************************************
			
			Если СтрДлина(Артикул) > 25 Тогда
				ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Строка " + Сч + " - длина артикула превышает 25 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НаименованиеНоменклатуры) > 150 Тогда
				ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования номенклатуры превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ДлинаКодаСинхронизации > 15 Тогда
				ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Строка " + Сч + " - длина кода синхронизации превышает 15 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НаименованиеХарактеристикиНоменклатуры) > 50 Тогда
				ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Строка " + Сч + " - длина размера превышает 50 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			//Если Количество > 1 Тогда
			//	ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Строка " + Сч + " - количество больше единицы.";
			//	ЕстьОшибкиВСтроке = Истина;
			//КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			Для Счетчик = 1 По Количество Цикл
				НоваяСтрока 										= Объект.ТаблицаВыданныхСИЗ.Добавить();
				НоваяСтрока.ТабельныйНомер							= ТабельныйНомер;
				НоваяСтрока.ФИО										= ФИО;
				НоваяСтрока.НаименованиеНоменклатурыНормы			= НаименованиеНоменклатурыНормы;
				//+++АсТБ_Alexey_106247_********************************************************************
				НоваяСтрока.НаименованиеГруппыВзаимозаменяемыхНорм	= НаименованиеГруппыВзаимозаменяемыхНорм;
				//---АсТБ_Alexey_106247_********************************************************************
				НоваяСтрока.Артикул									= Артикул;
				НоваяСтрока.НаименованиеНоменклатуры				= НаименованиеНоменклатуры;
				НоваяСтрока.КодСинхронизации						= КодСинхронизации;
				НоваяСтрока.НаименованиеХарактеристикиНоменклатуры 	= НаименованиеХарактеристикиНоменклатуры;
				НоваяСтрока.ДатаВыдачи								= ДатаВыдачи;
				НоваяСтрока.Количество								= 1;
			КонецЦикла;
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПрочитатьФайлВыданныхСИЗ(Команда)
	
	ВыданныеСИЗПротокол = "*****Чтение файла загрузки*****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Не выбрана организация!";
		ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Не выбран файл загрузки!";
		ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлВыданныхСИЗНаСервере(ВременноеХранилище);
	
	ПроверитьВыданныеСИЗВБазе();
	
	Если ВыданныеСИЗЕстьДубли Тогда
		ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
		Элементы.ТаблицаВыданныхСИЗЗагрузитьВыданныеСИЗ.Доступность = Ложь;
	Конецесли;
		
	ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыданныеСИЗВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	//+++АсТБ_Alexey_112621_********************************************************************
	|	ТаблицаОстатков.НомерСтроки КАК НомерСтроки,
	//---АсТБ_Alexey_112621_********************************************************************
	|	ТаблицаОстатков.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаОстатков.ФИО КАК ФИО,
	|	ТаблицаОстатков.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ТаблицаОстатков.Артикул КАК Артикул,
	|	ТаблицаОстатков.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ТаблицаОстатков.НаименованиеГруппыВзаимозаменяемыхНорм КАК НаименованиеГруппыВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************
	|	ТаблицаОстатков.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаОстатков.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ТаблицаОстатков.ДатаВыдачи КАК ДатаВыдачи,
	|	ТаблицаОстатков.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураНормОрганизации.Ссылка КАК НоменклатураНормы,
	|	НоменклатураНормОрганизации.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_НоменклатураНормы
	|ИЗ
	|	Справочник.НоменклатураНормОрганизации КАК НоменклатураНормОрганизации
	|ГДЕ
	|	НоменклатураНормОрганизации.Владелец = &Организация
	|;
	//+++АсТБ_Alexey_106247_********************************************************************
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыВзаимозаменяемыхНорм.Ссылка КАК ГруппаВзаимозаменяемыхНорм,
	|	ГруппыВзаимозаменяемыхНорм.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_ГруппыВзаимозаменяемыхНорм
	|ИЗ
	|	Справочник.ГруппыВзаимозаменяемыхНорм КАК ГруппыВзаимозаменяемыхНорм
	|;
	//---АсТБ_Alexey_106247_********************************************************************
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.КодСинхронизации КАК КодСинхронизации,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Артикул КАК Артикул
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры,
	|	ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	|	ХарактеристикиНоменклатуры.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_ХарактеристикиНоменклатуры
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ТабельныйНомер КАК ТабельныйНомер,
	|	Сотрудники.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//+++АсТБ_Alexey_112621_********************************************************************
	|	ВТ_Остатки.НомерСтроки КАК НомерСтроки,
	//---АсТБ_Alexey_112621_********************************************************************
	|	ВТ_Остатки.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Остатки.ФИО КАК ФИО,
	|	ВТ_Остатки.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_Остатки.НаименованиеГруппыВзаимозаменяемыхНорм КАК НаименованиеГруппыВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************
	|	ВТ_Остатки.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Остатки.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Остатки.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_Остатки.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_Остатки.Количество КАК Количество,
	|	ЕСТЬNULL(ВТ_Сотрудники.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	ЕСТЬNULL(ВТ_НоменклатураНормы.НоменклатураНормы, ЗНАЧЕНИЕ(Справочник.НоменклатураНормОрганизации.ПустаяСсылка)) КАК НоменклатураНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ЕСТЬNULL(ВТ_ГруппыВзаимозаменяемыхНорм.ГруппаВзаимозаменяемыхНорм, ЗНАЧЕНИЕ(Справочник.ГруппыВзаимозаменяемыхНорм.ПустаяСсылка)) КАК ГруппаВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************	
	|	ЕСТЬNULL(ВТ_Номенклатура.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ВТ_Остатки.Артикул КАК Артикул
	|ПОМЕСТИТЬ ВТ_ОстаткиБезРазмеров
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ПО ВТ_Остатки.ТабельныйНомер = ВТ_Сотрудники.ТабельныйНомер
	|			И ВТ_Остатки.ФИО = ВТ_Сотрудники.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураНормы КАК ВТ_НоменклатураНормы
	|		ПО ВТ_Остатки.НаименованиеНоменклатурыНормы = ВТ_НоменклатураНормы.Наименование
	//+++АсТБ_Alexey_106247_********************************************************************
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГруппыВзаимозаменяемыхНорм КАК ВТ_ГруппыВзаимозаменяемыхНорм
	|		ПО ВТ_Остатки.НаименованиеГруппыВзаимозаменяемыхНорм = ВТ_ГруппыВзаимозаменяемыхНорм.Наименование
	//---АсТБ_Alexey_106247_********************************************************************
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ВТ_Остатки.НаименованиеНоменклатуры = ВТ_Номенклатура.Наименование
	|			И ВТ_Остатки.КодСинхронизации = ВТ_Номенклатура.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//+++АсТБ_Alexey_112621_********************************************************************
	|	ВТ_ОстаткиБезРазмеров.НомерСтроки КАК НомерСтроки,
	//---АсТБ_Alexey_112621_********************************************************************
	|	ВТ_ОстаткиБезРазмеров.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ОстаткиБезРазмеров.ФИО КАК ФИО,
	|	ВТ_ОстаткиБезРазмеров.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_ОстаткиБезРазмеров.НаименованиеГруппыВзаимозаменяемыхНорм КАК НаименованиеГруппыВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************
	|	ВТ_ОстаткиБезРазмеров.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ОстаткиБезРазмеров.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ОстаткиБезРазмеров.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_ОстаткиБезРазмеров.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ОстаткиБезРазмеров.Количество КАК Количество,
	|	ВТ_ОстаткиБезРазмеров.Сотрудник КАК Сотрудник,
	|	ВТ_ОстаткиБезРазмеров.НоменклатураНормы КАК НоменклатураНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_ОстаткиБезРазмеров.ГруппаВзаимозаменяемыхНорм КАК ГруппаВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************
	|	ВТ_ОстаткиБезРазмеров.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатуры,
	|	ВТ_ОстаткиБезРазмеров.Артикул КАК Артикул
	|ПОМЕСТИТЬ ВТ_ОстаткиСоСправочниками
	|ИЗ
	|	ВТ_ОстаткиБезРазмеров КАК ВТ_ОстаткиБезРазмеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиНоменклатуры КАК ВТ_ХарактеристикиНоменклатуры
	|		ПО ВТ_ОстаткиБезРазмеров.НаименованиеХарактеристикиНоменклатуры = ВТ_ХарактеристикиНоменклатуры.Наименование
	|			И ВТ_ОстаткиБезРазмеров.Номенклатура = ВТ_ХарактеристикиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ЗанятыеРабочиеМеста
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(&ДатаАнализа, Организация = &Организация) КАК ЗанятыеРабочиеМестаОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеНормыВыдачиСИЗ.Подразделение КАК Подразделение,
	|	ИсходныеНормыВыдачиСИЗ.Должность КАК Должность,
	|	ИсходныеНормыВыдачиСИЗ.НормаВыдачи КАК НормаВыдачи
	|ПОМЕСТИТЬ ВТ_НормыВыдачиПоНормам
	|ИЗ
	|	РегистрСведений.ИсходныеНормыВыдачиСИЗ КАК ИсходныеНормыВыдачиСИЗ
	|ГДЕ
	|	ИсходныеНормыВыдачиСИЗ.Организация = &Организация
	|	И ИсходныеНормыВыдачиСИЗ.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормыВыдачиСИЗСоставНормы.Ссылка КАК Ссылка,
	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы КАК НоменклатураНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы.ГруппаВзаимозаменяемыхНорм КАК ГруппаВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************
	|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.Приоритет КАК ПериодичностьВыдачиПриоритет
	|ПОМЕСТИТЬ ВТ_НоменклатураИзНорм
	|ИЗ
	|	Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|ГДЕ
	|	НормыВыдачиСИЗСоставНормы.Ссылка.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НормыВыдачиПоНормам.Подразделение КАК Подразделение,
	|	ВТ_НормыВыдачиПоНормам.Должность КАК Должность,
	|	ВТ_НормыВыдачиПоНормам.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_НоменклатураИзНорм.НоменклатураНормы КАК НоменклатураНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_НоменклатураИзНорм.ГруппаВзаимозаменяемыхНорм КАК ГруппаВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************
	|	МАКСИМУМ(ВТ_НоменклатураИзНорм.ПериодичностьВыдачиПриоритет) КАК ПериодичностьВыдачиПриоритет
	|ПОМЕСТИТЬ ВТ_НормыВыдачиСПриоритетом
	|ИЗ
	|	ВТ_НормыВыдачиПоНормам КАК ВТ_НормыВыдачиПоНормам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураИзНорм КАК ВТ_НоменклатураИзНорм
	|		ПО ВТ_НормыВыдачиПоНормам.НормаВыдачи = ВТ_НоменклатураИзНорм.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_НормыВыдачиПоНормам.Подразделение,
	|	ВТ_НормыВыдачиПоНормам.Должность,
	|	ВТ_НормыВыдачиПоНормам.НормаВыдачи,
	|	ВТ_НоменклатураИзНорм.НоменклатураНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_НоменклатураИзНорм.ГруппаВзаимозаменяемыхНорм
	//---АсТБ_Alexey_106247_********************************************************************
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗанятыеРабочиеМеста.Сотрудник КАК Сотрудник,
	|	ВТ_ЗанятыеРабочиеМеста.Подразделение КАК Подразделение,
	|	ВТ_ЗанятыеРабочиеМеста.Должность КАК Должность,
	|	ВТ_НормыВыдачиСПриоритетом.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_НормыВыдачиСПриоритетом.НоменклатураНормы КАК НоменклатураНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_НормыВыдачиСПриоритетом.ГруппаВзаимозаменяемыхНорм КАК ГруппаВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************
	|	ВТ_НормыВыдачиСПриоритетом.ПериодичностьВыдачиПриоритет КАК ПериодичностьВыдачиПриоритет
	|ПОМЕСТИТЬ ВТ_НормыВыдачиСотрудникам
	|ИЗ
	|	ВТ_ЗанятыеРабочиеМеста КАК ВТ_ЗанятыеРабочиеМеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормыВыдачиСПриоритетом КАК ВТ_НормыВыдачиСПриоритетом
	|		ПО ВТ_ЗанятыеРабочиеМеста.Подразделение = ВТ_НормыВыдачиСПриоритетом.Подразделение
	|			И ВТ_ЗанятыеРабочиеМеста.Должность = ВТ_НормыВыдачиСПриоритетом.Должность
	|ГДЕ
	|	НЕ ВТ_НормыВыдачиСПриоритетом.НормаВыдачи ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НормыВыдачиСотрудникам.Сотрудник КАК Сотрудник,
	|	ВТ_НормыВыдачиСотрудникам.НоменклатураНормы КАК НоменклатураНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_НормыВыдачиСотрудникам.ГруппаВзаимозаменяемыхНорм КАК ГруппаВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************
	|	МАКСИМУМ(ВТ_НормыВыдачиСотрудникам.ПериодичностьВыдачиПриоритет) КАК ПериодичностьВыдачиПриоритет
	|ПОМЕСТИТЬ ВТ_ГруппировкаПоПриоритету
	|ИЗ
	|	ВТ_НормыВыдачиСотрудникам КАК ВТ_НормыВыдачиСотрудникам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_НормыВыдачиСотрудникам.Сотрудник,
	|	ВТ_НормыВыдачиСотрудникам.НоменклатураНормы,
	//---АсТБ_Alexey_106247_********************************************************************
	|	ВТ_НормыВыдачиСотрудникам.ГруппаВзаимозаменяемыхНорм
	//---АсТБ_Alexey_106247_********************************************************************
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ГруппировкаПоПриоритету.Сотрудник КАК Сотрудник,
	|	ВТ_ГруппировкаПоПриоритету.НоменклатураНормы КАК НоменклатураНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_ГруппировкаПоПриоритету.ГруппаВзаимозаменяемыхНорм КАК ГруппаВзаимозаменяемыхНорм,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_НормыВыдачиСотрудникам.НормаВыдачи КАК НормаВыдачи
	|ПОМЕСТИТЬ ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету
	|ИЗ
	|	ВТ_ГруппировкаПоПриоритету КАК ВТ_ГруппировкаПоПриоритету
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормыВыдачиСотрудникам КАК ВТ_НормыВыдачиСотрудникам
	|		ПО ВТ_ГруппировкаПоПриоритету.Сотрудник = ВТ_НормыВыдачиСотрудникам.Сотрудник
	|			И ВТ_ГруппировкаПоПриоритету.НоменклатураНормы = ВТ_НормыВыдачиСотрудникам.НоменклатураНормы
	|			И ВТ_ГруппировкаПоПриоритету.ПериодичностьВыдачиПриоритет = ВТ_НормыВыдачиСотрудникам.ПериодичностьВыдачиПриоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	//+++АсТБ_Alexey_112621_********************************************************************
	|	ВТ_ОстаткиСоСправочниками.НомерСтроки КАК НомерСтроки,
	//---АсТБ_Alexey_112621_********************************************************************
	|	ВТ_ОстаткиСоСправочниками.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ОстаткиСоСправочниками.ФИО КАК ФИО,
	|	ВТ_ОстаткиСоСправочниками.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_ОстаткиСоСправочниками.НаименованиеГруппыВзаимозаменяемыхНорм КАК НаименованиеГруппыВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************
	|	ВТ_ОстаткиСоСправочниками.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ОстаткиСоСправочниками.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ОстаткиСоСправочниками.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_ОстаткиСоСправочниками.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ОстаткиСоСправочниками.Количество КАК Количество,
	|	ВТ_ОстаткиСоСправочниками.Сотрудник КАК Сотрудник,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ_ОстаткиСоСправочниками.ГруппаВзаимозаменяемыхНорм = ЗНАЧЕНИЕ(Справочник.ГруппыВзаимозаменяемыхНорм.ПустаяСсылка)
	|				ТОГДА ВТ_ОстаткиСоСправочниками.НоменклатураНормы
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету.НормаВыдачи ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету1.НормаВыдачи ЕСТЬ NULL
	|									ТОГДА ВТ_ОстаткиСоСправочниками.НоменклатураНормы
	|								ИНАЧЕ ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету1.НоменклатураНормы
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_ОстаткиСоСправочниками.НоменклатураНормы
	|				КОНЕЦ
	|		КОНЕЦ) КАК НоменклатураНормы,
	|	ВТ_ОстаткиСоСправочниками.ГруппаВзаимозаменяемыхНорм КАК ГруппаВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************
	|	ВТ_ОстаткиСоСправочниками.Номенклатура КАК Номенклатура,
	|	ВТ_ОстаткиСоСправочниками.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ_ОстаткиСоСправочниками.ГруппаВзаимозаменяемыхНорм = ЗНАЧЕНИЕ(Справочник.ГруппыВзаимозаменяемыхНорм.ПустаяСсылка)
	|				ТОГДА ЕСТЬNULL(ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету.НормаВыдачи, ЗНАЧЕНИЕ(Справочник.НормыВыдачиСИЗ.ПустаяСсылка))
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету.НормаВыдачи ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету1.НормаВыдачи ЕСТЬ NULL
	|									ТОГДА ЗНАЧЕНИЕ(Справочник.НормыВыдачиСИЗ.ПустаяСсылка)
	|								ИНАЧЕ ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету1.НормаВыдачи
	|							КОНЕЦ
	|					ИНАЧЕ ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету.НормаВыдачи
	|				КОНЕЦ
	|		КОНЕЦ) КАК НормаВыдачи,
	//---АсТБ_Alexey_106247_********************************************************************
	|	ВТ_ОстаткиСоСправочниками.Артикул КАК Артикул
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ОстаткиСоСправочниками КАК ВТ_ОстаткиСоСправочниками
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету КАК ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету
	|		ПО ВТ_ОстаткиСоСправочниками.Сотрудник = ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету.Сотрудник
	|			И ВТ_ОстаткиСоСправочниками.НоменклатураНормы = ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету.НоменклатураНормы
	//+++АсТБ_Alexey_106247_********************************************************************
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету КАК ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету1
	|		ПО ВТ_ОстаткиСоСправочниками.Сотрудник = ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету1.Сотрудник
	|			И ВТ_ОстаткиСоСправочниками.ГруппаВзаимозаменяемыхНорм = ВТ_НормаВыдачиСотрудниковПоМаксимальномуПриоритету1.ГруппаВзаимозаменяемыхНорм
	|
	|СГРУППИРОВАТЬ ПО
	//+++АсТБ_Alexey_112621_********************************************************************
	|	ВТ_ОстаткиСоСправочниками.НомерСтроки,
	//---АсТБ_Alexey_112621_********************************************************************
	|	ВТ_ОстаткиСоСправочниками.ТабельныйНомер,
	|	ВТ_ОстаткиСоСправочниками.ФИО,
	|	ВТ_ОстаткиСоСправочниками.НаименованиеНоменклатурыНормы,
	|	ВТ_ОстаткиСоСправочниками.НаименованиеГруппыВзаимозаменяемыхНорм,
	|	ВТ_ОстаткиСоСправочниками.НаименованиеНоменклатуры,
	|	ВТ_ОстаткиСоСправочниками.КодСинхронизации,
	|	ВТ_ОстаткиСоСправочниками.НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_ОстаткиСоСправочниками.ДатаВыдачи,
	|	ВТ_ОстаткиСоСправочниками.Количество,
	|	ВТ_ОстаткиСоСправочниками.Сотрудник,
	|	ВТ_ОстаткиСоСправочниками.ГруппаВзаимозаменяемыхНорм,
	|	ВТ_ОстаткиСоСправочниками.Номенклатура,
	|	ВТ_ОстаткиСоСправочниками.ХарактеристикаНоменклатуры,
	|	ВТ_ОстаткиСоСправочниками.Артикул
	//---АсТБ_Alexey_106247_********************************************************************
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Сотрудник) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейСотрудников
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.ТабельныйНомер,
	|	ВТ_Результат.ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	//---АсТБ_Alexey_106247_********************************************************************
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.НоменклатураНормы) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейНоменклатурыНорм
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеНоменклатурыНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_Результат.Сотрудник
	//---АсТБ_Alexey_106247_********************************************************************
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Номенклатура) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейНоменклатуры
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.ХарактеристикаНоменклатуры) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейХарактеристик
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодСинхронизации,
	|	ВТ_Результат.НаименованиеНоменклатуры,
	|	ВТ_Результат.НаименованиеХарактеристикиНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	ВТ_Результат.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_Результат.НаименованиеГруппыВзаимозаменяемыхНорм КАК НаименованиеГруппыВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_Результат.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_Результат.Количество КАК Количество,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	//+++АсТБ_Alexey_106247_********************************************************************
	|	ВТ_Результат.ГруппаВзаимозаменяемыхНорм КАК ГруппаВзаимозаменяемыхНорм,
	//---АсТБ_Alexey_106247_********************************************************************
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Результат.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейНоменклатуры.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейНоменклатуры.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейНоменклатурыНорм.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейНоменклатурыНорм.КоличествоДублей
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_АнализДублейСотрудников.КоличествоДублей > 1
	|							ТОГДА ВТ_АнализДублейСотрудников.КоличествоДублей
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_АнализДублейХарактеристик.КоличествоДублей > 1
	|									ТОГДА ВТ_АнализДублейХарактеристик.КоличествоДублей
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейСотрудников КАК ВТ_АнализДублейСотрудников
	|		ПО ВТ_Результат.ТабельныйНомер = ВТ_АнализДублейСотрудников.ТабельныйНомер
	|			И ВТ_Результат.ФИО = ВТ_АнализДублейСотрудников.ФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейНоменклатурыНорм КАК ВТ_АнализДублейНоменклатурыНорм
	|		ПО ВТ_Результат.НаименованиеНоменклатурыНормы = ВТ_АнализДублейНоменклатурыНорм.НаименованиеНоменклатурыНормы
	//+++АсТБ_Alexey_106247_********************************************************************
	|			И ВТ_Результат.Сотрудник = ВТ_АнализДублейНоменклатурыНорм.Сотрудник
	//---АсТБ_Alexey_106247_********************************************************************
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейНоменклатуры КАК ВТ_АнализДублейНоменклатуры
	|		ПО ВТ_Результат.НаименованиеНоменклатуры = ВТ_АнализДублейНоменклатуры.НаименованиеНоменклатуры
	|			И ВТ_Результат.КодСинхронизации = ВТ_АнализДублейНоменклатуры.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейХарактеристик КАК ВТ_АнализДублейХарактеристик
	|		ПО ВТ_Результат.НаименованиеНоменклатуры = ВТ_АнализДублейХарактеристик.НаименованиеНоменклатуры
	|			И ВТ_Результат.КодСинхронизации = ВТ_АнализДублейХарактеристик.КодСинхронизации
	|			И ВТ_Результат.НаименованиеХарактеристикиНоменклатуры = ВТ_АнализДублейХарактеристик.НаименованиеХарактеристикиНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НоменклатураНормы,
	|	НормаВыдачи,
	|	ДатаВыдачи УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	ВТ_Результат.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО,
	|	НаименованиеНоменклатурыНормы,
	|	ДатаВыдачи УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейСотрудников.ФИО КАК Наименование,
	|	ВТ_АнализДублейСотрудников.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейСотрудников КАК ВТ_АнализДублейСотрудников
	|ГДЕ
	|	ВТ_АнализДублейСотрудников.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейНоменклатурыНорм.НаименованиеНоменклатурыНормы,
	|	ВТ_АнализДублейНоменклатурыНорм.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейНоменклатурыНорм КАК ВТ_АнализДублейНоменклатурыНорм
	|ГДЕ
	|	ВТ_АнализДублейНоменклатурыНорм.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейНоменклатуры.НаименованиеНоменклатуры,
	|	ВТ_АнализДублейНоменклатуры.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейНоменклатуры КАК ВТ_АнализДублейНоменклатуры
	|ГДЕ
	|	ВТ_АнализДублейНоменклатуры.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейХарактеристик.НаименованиеХарактеристикиНоменклатуры,
	|	ВТ_АнализДублейХарактеристик.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейХарактеристик КАК ВТ_АнализДублейХарактеристик
	|ГДЕ
	|	ВТ_АнализДублейХарактеристик.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаОстатков",Объект.ТаблицаВыданныхСИЗ.Выгрузить());
	Запрос.УстановитьПараметр("ДатаАнализа",	КонецДня(ВыданныеСИЗДатаАктуальности));
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	//+++АсТБ_Alexey_106247_********************************************************************
	ТаблицаВыдачи 		= Результат[20].Выгрузить();
	ТаблицаНормВыдачи 	= Результат[21].Выгрузить();
	ТаблицаДублей 		= Результат[22].Выгрузить();
	//+++АсТБ_Alexey_106247_********************************************************************
	
	Для Каждого СтрокаТаблицыНормВыдачи Из ТаблицаНормВыдачи Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицыНормВыдачи.НормаВыдачи) Тогда
		
			КоличествоКЗачету = СтрокаТаблицыНормВыдачи.НормаВыдачи.СоставНормы[0].ПериодичностьВыдачи.КоличествоВПериоде;
			
		Иначе
			
			КоличествоКЗачету = 0;
			
		КонецЕсли;	
			
		СтруктураПоиска = Новый Структура("Сотрудник, НоменклатураНормы, НормаВыдачи", СтрокаТаблицыНормВыдачи.Сотрудник, СтрокаТаблицыНормВыдачи.НоменклатураНормы, СтрокаТаблицыНормВыдачи.НормаВыдачи);
		
		НайденныеСтроки = ТаблицаВыдачи.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если КоличествоКЗачету = 0 Тогда
				
				НайденнаяСтрока.НормаВыдачи = Справочники.НормыВыдачиСИЗ.ПустаяСсылка();
				
			Иначе	
				
				КоличествоКЗачету = КоличествоКЗачету - 1;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
	ВыданныеСИЗЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаВыданныхСИЗ.Загрузить(ТаблицаВыдачи);	
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьВыданныеСИЗНаСервере()
	
	ВыданныеСИЗПротокол = "*****Загрузка остатков по выданным СИЗ*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОстатков.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаОстатков.ФИО КАК ФИО,
	|	ТаблицаОстатков.НаименованиеНоменклатурыНормы КАК НаименованиеНоменклатурыНормы,
	|	ТаблицаОстатков.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаОстатков.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаОстатков.НаименованиеХарактеристикиНоменклатуры КАК НаименованиеХарактеристикиНоменклатуры,
	|	ТаблицаОстатков.ДатаВыдачи КАК ДатаВыдачи,
	|	ТаблицаОстатков.Количество КАК Количество,
	|	ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатков.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатков.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаОстатков.НормаВыдачи КАК НормаВыдачи
	|ПОМЕСТИТЬ ВТ_ТаблицаОстатков
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВТ_ТаблицаОстатков.ДатаВыдачи КАК Период,
	|	&Организация КАК Организация,
	|	ВТ_ТаблицаОстатков.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ТаблицаОстатков.Количество КАК Количество,
	|	ВТ_ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаОстатков.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаОстатков.НормаВыдачи КАК НормаВыдачи,
	|	ВЫБОР
	|		КОГДА НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Год)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ВТ_ТаблицаОстатков.ДатаВыдачи, МЕСЯЦ, НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов * 12)
	|				КОГДА НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Месяц)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ВТ_ТаблицаОстатков.ДатаВыдачи, МЕСЯЦ, НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаПотребности
	|ИЗ
	|	ВТ_ТаблицаОстатков КАК ВТ_ТаблицаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
	|		ПО ВТ_ТаблицаОстатков.НормаВыдачи = НормыВыдачиСИЗСоставНормы.Ссылка
	|			И ВТ_ТаблицаОстатков.НоменклатураНормы = НормыВыдачиСИЗСоставНормы.НоменклатураНормы
	|ГДЕ
	|	НЕ ВТ_ТаблицаОстатков.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВТ_ТаблицаОстатков.НоменклатураНормы = ЗНАЧЕНИЕ(Справочник.НоменклатураНормОрганизации.ПустаяСсылка)
	|	И НЕ ВТ_ТаблицаОстатков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ВТ_ТаблицаОстатков.НаименованиеХарактеристикиНоменклатуры = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ВТ_ТаблицаОстатков.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ
	|	И НормыВыдачиСИЗСоставНормы.Ссылка.Владелец = &Организация
	|	И НЕ ВТ_ТаблицаОстатков.ДатаВыдачи > &ТекущаяДата
	|	И НЕ ВТ_ТаблицаОстатков.Количество = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Активность,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВТ_ТаблицаОстатков.ДатаВыдачи КАК Период,
	|	&Организация КАК Организация,
	|	ВТ_ТаблицаОстатков.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ТаблицаОстатков.Количество КАК Количество,
	|	ВТ_ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаОстатков.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаОстатков.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаОстатков.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ТаблицаОстатков.НормаВыдачи КАК НормаВыдачи
	|ИЗ
	|	ВТ_ТаблицаОстатков КАК ВТ_ТаблицаОстатков
	|ГДЕ
	|	НЕ ВТ_ТаблицаОстатков.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	//АсТБ_Alexey_79207_********************************************************************
	//|	И НЕ ВТ_ТаблицаОстатков.НоменклатураНормы = ЗНАЧЕНИЕ(Справочник.НоменклатураНормОрганизации.ПустаяСсылка)
	//АсТБ_Alexey_79207_********************************************************************
	|	И НЕ ВТ_ТаблицаОстатков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ВТ_ТаблицаОстатков.НаименованиеХарактеристикиНоменклатуры = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ВТ_ТаблицаОстатков.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ
	|	И НЕ ВТ_ТаблицаОстатков.ДатаВыдачи > &ТекущаяДата
	|	И НЕ ВТ_ТаблицаОстатков.Количество = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОстатков.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ТаблицаОстатков.Количество КАК Количество,
	|	ВТ_ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаОстатков.НоменклатураНормы КАК НоменклатураНормы
	|ИЗ
	|	ВТ_ТаблицаОстатков КАК ВТ_ТаблицаОстатков
	|ГДЕ
	|	НЕ ВТ_ТаблицаОстатков.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	//АсТБ_Alexey_79207_********************************************************************
	//|	И НЕ ВТ_ТаблицаОстатков.НоменклатураНормы = ЗНАЧЕНИЕ(Справочник.НоменклатураНормОрганизации.ПустаяСсылка)
	//АсТБ_Alexey_79207_********************************************************************
	|	И НЕ ВТ_ТаблицаОстатков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ВТ_ТаблицаОстатков.НаименованиеХарактеристикиНоменклатуры = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ВТ_ТаблицаОстатков.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ
	|	И ВТ_ТаблицаОстатков.ДатаВыдачи > &ТекущаяДата
	|	ИЛИ ВТ_ТаблицаОстатков.Количество = 0";
	
	Запрос.УстановитьПараметр("ТаблицаОстатков",Объект.ТаблицаВыданныхСИЗ.Выгрузить());
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	Запрос.УстановитьПараметр("ТекущаяДата",	ТекущаяДата());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДвиженийПоВыдачеПоПотребности 	= Результат[1].Выгрузить();
	ТаблицаДвиженийПоВыдаче 				= Результат[2].Выгрузить();
	ТаблицаОшибок 							= Результат[3].Выгрузить();
	
	Для Каждого СтрокаТаблицыОшибок Из ТаблицаОшибок Цикл
		
		Если СтрокаТаблицыОшибок.Количество = 0 Тогда
			
			ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыОшибок.Сотрудник + " по номенклатуре нормы: " + СтрокаТаблицыОшибок.НоменклатураНормы + " не задано количество.";
			
		КонецЕсли;	
		
		Если СтрокаТаблицыОшибок.ДатаВыдачи > ТекущаяДата() Тогда
			
			ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Для сотрудника: " + СтрокаТаблицыОшибок.Сотрудник + " по номенклатуре нормы: " + СтрокаТаблицыОшибок.НоменклатураНормы + " дата выдачи превышает текущую дату.";
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ТаблицаДвиженийПоВыдаче.Количество() = 0 Тогда
		ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Информация для загрузки остатков по выданным СИЗ не найдена.";
		Возврат;
	КонецЕсли;
	
	НовыйДокумент = Документы.КорректировкаРегистров.СоздатьДокумент();
	НовыйДокумент.Дата 					= НачалоДня(ВыданныеСИЗДатаАктуальности);
	НовыйДокумент.Комментарий 			= "Загружен автоматически";
	НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.УстановитьНовыйНомер();
	
	НоваяСтрока 	= НовыйДокумент.ТаблицаРегистров.Добавить();
	НоваяСтрока.Имя = "ВыданныеСредстваЗащиты";
	НовыйДокумент.Движения.ВыданныеСредстваЗащиты.Загрузить(ТаблицаДвиженийПоВыдаче);
	
	Если Объект.Организация.ЧастичнаяВыдача = 3 ИЛИ Объект.Организация.ЧастичнаяВыдача = 4 Тогда
		НоваяСтрока 	= НовыйДокумент.ТаблицаРегистров.Добавить();
		НоваяСтрока.Имя = "ВыдачаПоПотребности";
		НовыйДокумент.Движения.ВыдачаПоПотребности.Загрузить(ТаблицаДвиженийПоВыдачеПоПотребности);
	КонецЕсли;
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		
		ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Загрузка остатков по выданным СИЗ выполнена!" + Символы.ПС + "Сформирован документ: " + НовыйДокумент.Ссылка;
	Исключение
		ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "Загрузка остатков по выданным СИЗ не выполнена!" + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;	
	
	ПроверитьВыданныеСИЗВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	ВыданныеСИЗПротокол = ВыданныеСИЗПротокол + Символы.ПС + "*****Загрузка остатков по выданным СИЗ завершена*****";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыданныеСИЗ(Команда)
	
	ЗагрузитьВыданныеСИЗНаСервере();
	
	Элементы.СтраницаВыданныеСИЗ.ПодчиненныеЭлементы.Группа17.ПодчиненныеЭлементы.Группа18.ПодчиненныеЭлементы.ТаблицаВыданныхСИЗЗагрузитьВыданныеСИЗ.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлДоступныхУсловийРаботыНаСервере(Адрес)
	
	Объект.ТаблицаДоступныхУсловийРаботы.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 11 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиДоступныхУсловийРаботы(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 1, Сч, 1).Значение) = ТИП("Число") Тогда
					ТабельныйНомер = Формат(ТабДок.Область(Сч, 1, Сч, 1).Значение,"ЧГ=");
				Иначе
					ТабельныйНомер = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
				КонецЕсли;
			Иначе
				ТабельныйНомер = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				ФИО = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
			Иначе
				ФИО = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение);
			Иначе
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 4, Сч, 4).Значение) = ТИП("Число") Тогда
					КодПодразделения = Формат(ТабДок.Область(Сч, 4, Сч, 4).Значение,"ЧГ=");
				Иначе
					КодПодразделения = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
				КонецЕсли;
			Иначе
				КодПодразделения = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение);
			Иначе
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 6, Сч, 6).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 6, Сч, 6).Значение) = ТИП("Число") Тогда
					КодДолжности	= Формат(ТабДок.Область(Сч, 6, Сч, 6).Значение,"ЧГ=");
				Иначе
					КодДолжности	= СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Значение);
				КонецЕсли;
			Иначе
				КодДолжности	= СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 7, Сч, 7).СодержитЗначение Тогда
				НаименованиеРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Значение);
			Иначе
				НаименованиеРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 8, Сч, 8).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 8, Сч, 8).Значение) = ТИП("Число") Тогда
					КодРабочегоМеста	= Формат(ТабДок.Область(Сч, 8, Сч, 8).Значение,"ЧГ=");
				Иначе
					КодРабочегоМеста	= СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Значение);
				КонецЕсли;
			Иначе
				КодРабочегоМеста	= СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 9, Сч, 9).СодержитЗначение Тогда
				НаименованиеУсловияНормы = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Значение);
			Иначе
				НаименованиеУсловияНормы = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Текст);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НаименованиеУсловияНормы) Тогда
				НаименованиеУсловияНормы = "Всегда";
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 10, Сч, 10).СодержитЗначение Тогда
				ИспользоватьФайл = СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Значение);
			Иначе
				ИспользоватьФайл = СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Текст);
			КонецЕсли;
			
			ИспользоватьФайл = ?(НРег(ИспользоватьФайл) = "да",Истина,Ложь);
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если СтрДлина(НаименованиеПодразделения) > 150 Тогда
				ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования подразделения превышает 150 символов.";
				ЕстьОшибкиВСтроке = Ложь;
			КонецЕсли;
			Если СтрДлина(КодПодразделения) > 20 Тогда
				ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода подразделения превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(НаименованиеДолжности) > 150 Тогда
				ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования должности превышает 150 символов.";
				ЕстьОшибкиВСтроке = Ложь;
			КонецЕсли;
			Если СтрДлина(КодДолжности) > 20 Тогда
				ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода должности превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(НаименованиеРабочегоМеста) > 150 Тогда
				ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования рабочего места превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(КодРабочегоМеста) > 9 Тогда
				ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода рабочего места превышает 9 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(ТабельныйНомер) > 13 Тогда
				ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Строка " + Сч + " - длина табельного номера превышает 13 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(ФИО) > 100 Тогда
				ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Строка " + Сч + " - длина ФИО превышает 100 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			Если СтрДлина(НаименованиеУсловияНормы) > 150 Тогда
				ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Строка " + Сч + " - длина условия нормы превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 							= Объект.ТаблицаДоступныхУсловийРаботы.Добавить();
			НоваяСтрока.ТабельныйНомер 				= ТабельныйНомер;
			НоваяСтрока.ФИО 						= ФИО;
			НоваяСтрока.НаименованиеПодразделения	= НаименованиеПодразделения;
			НоваяСтрока.КодПодразделения			= КодПодразделения;
			НоваяСтрока.НаименованиеДолжности 		= НаименованиеДолжности;
			НоваяСтрока.КодДолжности				= КодДолжности;
			НоваяСтрока.НаименованиеРабочегоМеста 	= НаименованиеРабочегоМеста;
			НоваяСтрока.КодРабочегоМеста 			= КодРабочегоМеста;
			НоваяСтрока.НаименованиеУсловияНормы 	= НаименованиеУсловияНормы;
			НоваяСтрока.ИспользоватьФайл		    = ИспользоватьФайл;
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлДоступныхУсловийРаботы(Команда)
	
	ДоступныеУсловияРаботыПротокол = "*****Чтение файла загрузки *****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Не выбрана организация!";
		ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Не выбран файл загрузки!";
		ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;		
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлДоступныхУсловийРаботыНаСервере(ВременноеХранилище);
	
	ПроверитьДублиВФайлеДоступныхУсловийРаботы();
	
	Если ДоступныеУсловияРаботыЕстьДубли Тогда
		ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "В файле загрузки существуют дубли! Загрузка не доступна.";
		Элементы.ТаблицаДоступныхУсловийРаботыЗагрузитьДоступныеУсловияРаботы.Доступность = Ложь;
	Иначе
		ПроверитьДоступныеУсловияРаботыВБазе();
		Если ДоступныеУсловияРаботыЕстьДубли Тогда
			ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
			Элементы.ТаблицаДоступныхУсловийРаботыЗагрузитьДоступныеУсловияРаботы.Доступность = Ложь;
		Конецесли;
	Конецесли;
	
	ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиВФайлеДоступныхУсловийРаботы()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДоступныхУсловийРаботы.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаДоступныхУсловийРаботы.ФИО КАК ФИО,
	|	ТаблицаДоступныхУсловийРаботы.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаДоступныхУсловийРаботы.КодПодразделения КАК КодПодразделения,
	|	ТаблицаДоступныхУсловийРаботы.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаДоступныхУсловийРаботы.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ТаблицаДоступныхУсловийРаботы.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ТаблицаДоступныхУсловийРаботы.КодДолжности КАК КодДолжности,
	|	ТаблицаДоступныхУсловийРаботы.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ТаблицаДоступныхУсловийРаботы.ИспользоватьФайл КАК ИспользоватьФайл,
	|	ТаблицаДоступныхУсловийРаботы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаДоступныхУсловийРаботы
	|ИЗ
	|	&ТаблицаДоступныхУсловийРаботы КАК ТаблицаДоступныхУсловийРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ФИО КАК ФИО,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТаблицаДоступныхУсловийРаботы.НомерСтроки) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_ТаблицаДоступныхУсловийРаботы КАК ВТ_ТаблицаДоступныхУсловийРаботы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ТабельныйНомер,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ФИО,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеПодразделения,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодПодразделения,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеДолжности,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодДолжности,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодРабочегоМеста,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеУсловияНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ФИО КАК ФИО,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ИспользоватьФайл КАК ИспользоватьФайл,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_ТаблицаДоступныхУсловийРаботы КАК ВТ_ТаблицаДоступныхУсловийРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_ТаблицаДоступныхУсловийРаботы.ТабельныйНомер = ВТ_АнализДублей.ТабельныйНомер
	|			И ВТ_ТаблицаДоступныхУсловийРаботы.ФИО = ВТ_АнализДублей.ФИО
	|			И ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеПодразделения = ВТ_АнализДублей.НаименованиеПодразделения
	|			И ВТ_ТаблицаДоступныхУсловийРаботы.КодПодразделения = ВТ_АнализДублей.КодПодразделения
	|			И ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеДолжности = ВТ_АнализДублей.НаименованиеДолжности
	|			И ВТ_ТаблицаДоступныхУсловийРаботы.КодДолжности = ВТ_АнализДублей.КодДолжности
	|			И ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеРабочегоМеста = ВТ_АнализДублей.НаименованиеРабочегоМеста
	|			И ВТ_ТаблицаДоступныхУсловийРаботы.КодРабочегоМеста = ВТ_АнализДублей.КодРабочегоМеста
	|			И ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеУсловияНормы = ВТ_АнализДублей.НаименованиеУсловияНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_АнализДублей.ФИО КАК ФИО,
	|	ВТ_АнализДублей.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_АнализДублей.КодПодразделения КАК КодПодразделения,
	|	ВТ_АнализДублей.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_АнализДублей.КодДолжности КАК КодДолжности,
	|	ВТ_АнализДублей.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_АнализДублей.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_АнализДублей.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаДоступныхУсловийРаботы",	Объект.ТаблицаДоступныхУсловийРаботы.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[3].Выгрузить();
	
	ДоступныеУсловияРаботыЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаДоступныхУсловийРаботы.Загрузить(Результат[2].Выгрузить());
	
КонецПроцедуры	
	
&НаСервере
Процедура ПроверитьДоступныеУсловияРаботыВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДоступныхУсловийРаботы.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаДоступныхУсловийРаботы.ФИО КАК ФИО,
	|	ТаблицаДоступныхУсловийРаботы.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаДоступныхУсловийРаботы.КодПодразделения КАК КодПодразделения,
	|	ТаблицаДоступныхУсловийРаботы.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаДоступныхУсловийРаботы.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ТаблицаДоступныхУсловийРаботы.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ТаблицаДоступныхУсловийРаботы.КодДолжности КАК КодДолжности,
	|	ТаблицаДоступныхУсловийРаботы.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ТаблицаДоступныхУсловийРаботы.ИспользоватьФайл КАК ИспользоватьФайл
	|ПОМЕСТИТЬ ВТ_ТаблицаДоступныхУсловийРаботы
	|ИЗ
	|	&ТаблицаДоступныхУсловийРаботы КАК ТаблицаДоступныхУсловийРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ТабельныйНомер КАК ТабельныйНомер,
	|	Сотрудники.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.КодСинхронизации КАК КодСинхронизации,
	|	Подразделения.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Подразделение
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолжностиИПрофессии.Ссылка КАК Должность,
	|	ДолжностиИПрофессии.Наименование КАК Наименование,
	|	ДолжностиИПрофессии.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_Должности
	|ИЗ
	|	Справочник.ДолжностиИПрофессии КАК ДолжностиИПрофессии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМестаАСТБ.Ссылка КАК РабочееМесто,
	|	РабочиеМестаАСТБ.Наименование КАК Наименование,
	|	РабочиеМестаАСТБ.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_РабочиеМеста
	|ИЗ
	|	Справочник.РабочиеМестаАСТБ КАК РабочиеМестаАСТБ
	|ГДЕ
	|	РабочиеМестаАСТБ.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияНорм.Ссылка КАК УсловиеНормы,
	|	УсловияНорм.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_УсловияНорм
	|ИЗ
	|	Справочник.УсловияНорм КАК УсловияНорм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДоступныеУсловияРаботыСотрудникаСрезПоследних.Период) КАК Период,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Подразделение КАК Подразделение,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Должность КАК Должность,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Условие КАК Условие
	|ПОМЕСТИТЬ ВТ_МаксимальнаяДатаДУР
	|ИЗ
	|	РегистрСведений.ДоступныеУсловияРаботыСотрудника.СрезПоследних(&ДатаАнализа, Сотрудник.Владелец = &Организация) КАК ДоступныеУсловияРаботыСотрудникаСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Подразделение,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Должность,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.РабочееМесто,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеУсловияРаботыСотрудника.Сотрудник КАК Сотрудник,
	|	ДоступныеУсловияРаботыСотрудника.Подразделение КАК Подразделение,
	|	ДоступныеУсловияРаботыСотрудника.Должность КАК Должность,
	|	ДоступныеУсловияРаботыСотрудника.РабочееМесто КАК РабочееМесто,
	|	ДоступныеУсловияРаботыСотрудника.Условие КАК Условие,
	|	ДоступныеУсловияРаботыСотрудника.Использовать КАК Использовать
	|ПОМЕСТИТЬ ВТ_ДУРпоБазе
	|ИЗ
	|	ВТ_МаксимальнаяДатаДУР КАК ВТ_МаксимальнаяДатаДУР
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеУсловияРаботыСотрудника КАК ДоступныеУсловияРаботыСотрудника
	|		ПО ВТ_МаксимальнаяДатаДУР.Период = ДоступныеУсловияРаботыСотрудника.Период
	|			И ВТ_МаксимальнаяДатаДУР.Сотрудник = ДоступныеУсловияРаботыСотрудника.Сотрудник
	|			И ВТ_МаксимальнаяДатаДУР.Подразделение = ДоступныеУсловияРаботыСотрудника.Подразделение
	|			И ВТ_МаксимальнаяДатаДУР.Должность = ДоступныеУсловияРаботыСотрудника.Должность
	|			И ВТ_МаксимальнаяДатаДУР.РабочееМесто = ДоступныеУсловияРаботыСотрудника.РабочееМесто
	|			И ВТ_МаксимальнаяДатаДУР.Условие = ДоступныеУсловияРаботыСотрудника.Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник,
	|	СУММА(ЗанятыеРабочиеМестаОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ ВТ_ЗанятыеРабочиеМеста
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(&ДатаАнализа, Организация = &Организация) КАК ЗанятыеРабочиеМестаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗанятыеРабочиеМестаОстатки.Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность,
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ФИО КАК ФИО,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ИспользоватьФайл КАК ИспользоватьФайл,
	|	ЕСТЬNULL(ВТ_Сотрудники.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	ЕСТЬNULL(ВТ_Подразделение.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(ВТ_Должности.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)) КАК Должность,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРабочиеМеста
	|			ТОГДА ЕСТЬNULL(ВТ_РабочиеМеста.РабочееМесто, ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка)
	|	КОНЕЦ КАК РабочееМесто,
	|	ЕСТЬNULL(ВТ_УсловияНорм.УсловиеНормы, ЗНАЧЕНИЕ(Справочник.УсловияНорм.ПустаяСсылка)) КАК УсловиеНормы
	|ПОМЕСТИТЬ ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы
	|ИЗ
	|	ВТ_ТаблицаДоступныхУсловийРаботы КАК ВТ_ТаблицаДоступныхУсловийРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ПО ВТ_ТаблицаДоступныхУсловийРаботы.ТабельныйНомер = ВТ_Сотрудники.ТабельныйНомер
	|			И ВТ_ТаблицаДоступныхУсловийРаботы.ФИО = ВТ_Сотрудники.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделение КАК ВТ_Подразделение
	|		ПО ВТ_ТаблицаДоступныхУсловийРаботы.КодПодразделения = ВТ_Подразделение.КодСинхронизации
	|			И ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеПодразделения = ВТ_Подразделение.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Должности КАК ВТ_Должности
	|		ПО ВТ_ТаблицаДоступныхУсловийРаботы.КодДолжности = ВТ_Должности.КодСинхронизации
	|			И ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеДолжности = ВТ_Должности.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РабочиеМеста КАК ВТ_РабочиеМеста
	|		ПО ВТ_ТаблицаДоступныхУсловийРаботы.КодРабочегоМеста = ВТ_РабочиеМеста.КодСинхронизации
	|			И ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеРабочегоМеста = ВТ_РабочиеМеста.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УсловияНорм КАК ВТ_УсловияНорм
	|		ПО ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеУсловияНормы = ВТ_УсловияНорм.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.ФИО КАК ФИО,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.ИспользоватьФайл КАК ИспользоватьФайл,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.Должность КАК Должность,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.РабочееМесто КАК РабочееМесто,
	|	НЕ ВТ_ЗанятыеРабочиеМеста.КоличествоОстаток ЕСТЬ NULL КАК ЕстьЗРМ,
	|	ВТ_ДУРпоБазе.Использовать КАК ИспользоватьБаза,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.ИспользоватьФайл = ВТ_ДУРпоБазе.Использовать КАК Существует,
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.УсловиеНормы КАК УсловиеНормы,
	|	НЕ ВТ_ДУРпоБазе.Использовать ЕСТЬ NULL КАК ЕстьДУР
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы КАК ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗанятыеРабочиеМеста КАК ВТ_ЗанятыеРабочиеМеста
	|		ПО ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.Сотрудник = ВТ_ЗанятыеРабочиеМеста.Сотрудник
	|			И ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.Подразделение = ВТ_ЗанятыеРабочиеМеста.Подразделение
	|			И ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.Должность = ВТ_ЗанятыеРабочиеМеста.Должность
	|			И ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.РабочееМесто = ВТ_ЗанятыеРабочиеМеста.РабочееМесто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДУРпоБазе КАК ВТ_ДУРпоБазе
	|		ПО ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.Сотрудник = ВТ_ДУРпоБазе.Сотрудник
	|			И ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.Подразделение = ВТ_ДУРпоБазе.Подразделение
	|			И ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.Должность = ВТ_ДУРпоБазе.Должность
	|			И ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.РабочееМесто = ВТ_ДУРпоБазе.РабочееМесто
	|			И ВТ_ТаблицаДоступныхУсловийРаботы_ДанныеБазы.УсловиеНормы = ВТ_ДУРпоБазе.Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Сотрудник) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейСотрудников
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.ТабельныйНомер,
	|	ВТ_Результат.ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Подразделение) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейПодразделений
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Должность) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейДолжностей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_Результат.КодРабочегоМеста КАК КодРабочегоМеста,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.РабочееМесто) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейРабочихМест
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеРабочегоМеста,
	|	ВТ_Результат.КодРабочегоМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.УсловиеНормы) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейУсловийНорм
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеУсловияНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_Результат.ФИО КАК ФИО,
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	ВТ_Результат.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_Результат.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_Результат.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_Результат.ИспользоватьФайл КАК ИспользоватьФайл,
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.Должность КАК Должность,
	|	ВТ_Результат.РабочееМесто КАК РабочееМесто,
	|	ВТ_Результат.ЕстьЗРМ КАК ЕстьЗРМ,
	|	ВТ_Результат.ИспользоватьБаза КАК ИспользоватьБаза,
	|	ВТ_Результат.Существует КАК Существует,
	|	ВТ_Результат.УсловиеНормы КАК УсловиеНормы,
	|	ВТ_Результат.ЕстьДУР КАК ЕстьДУР,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейДолжностей.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейДолжностей.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейПодразделений.КоличествоДублей
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_АнализДублейРабочихМест.КоличествоДублей > 1
	|							ТОГДА ВТ_АнализДублейРабочихМест.КоличествоДублей
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_АнализДублейСотрудников.КоличествоДублей > 1
	|									ТОГДА ВТ_АнализДублейСотрудников.КоличествоДублей
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ВТ_АнализДублейУсловийНорм.КоличествоДублей > 1
	|											ТОГДА ВТ_АнализДублейУсловийНорм.КоличествоДублей
	|										ИНАЧЕ 1
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейСотрудников КАК ВТ_АнализДублейСотрудников
	|		ПО ВТ_Результат.ТабельныйНомер = ВТ_АнализДублейСотрудников.ТабельныйНомер
	|			И ВТ_Результат.ФИО = ВТ_АнализДублейСотрудников.ФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|		ПО ВТ_Результат.НаименованиеПодразделения = ВТ_АнализДублейПодразделений.НаименованиеПодразделения
	|			И ВТ_Результат.КодПодразделения = ВТ_АнализДублейПодразделений.КодПодразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|		ПО ВТ_Результат.НаименованиеДолжности = ВТ_АнализДублейДолжностей.НаименованиеДолжности
	|			И ВТ_Результат.КодДолжности = ВТ_АнализДублейДолжностей.КодДолжности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейРабочихМест КАК ВТ_АнализДублейРабочихМест
	|		ПО ВТ_Результат.НаименованиеРабочегоМеста = ВТ_АнализДублейРабочихМест.НаименованиеРабочегоМеста
	|			И ВТ_Результат.КодРабочегоМеста = ВТ_АнализДублейРабочихМест.КодРабочегоМеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейУсловийНорм КАК ВТ_АнализДублейУсловийНорм
	|		ПО ВТ_Результат.НаименованиеУсловияНормы = ВТ_АнализДублейУсловийНорм.НаименованиеУсловияНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейСотрудников.ФИО КАК Наименование,
	|	ВТ_АнализДублейСотрудников.КоличествоДублей КАК КоличествоДублей,
	|	NULL КАК НаименованиеУсловияНормы
	|ИЗ
	|	ВТ_АнализДублейСотрудников КАК ВТ_АнализДублейСотрудников
	|ГДЕ
	|	ВТ_АнализДублейСотрудников.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейПодразделений.НаименованиеПодразделения,
	|	ВТ_АнализДублейПодразделений.КоличествоДублей,
	|	NULL
	|ИЗ
	|	ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|ГДЕ
	|	ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейДолжностей.НаименованиеДолжности,
	|	ВТ_АнализДублейДолжностей.КоличествоДублей,
	|	NULL
	|ИЗ
	|	ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|ГДЕ
	|	ВТ_АнализДублейДолжностей.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейРабочихМест.НаименованиеРабочегоМеста,
	|	ВТ_АнализДублейРабочихМест.КоличествоДублей,
	|	NULL
	|ИЗ
	|	ВТ_АнализДублейРабочихМест КАК ВТ_АнализДублейРабочихМест
	|ГДЕ
	|	ВТ_АнализДублейРабочихМест.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ВТ_АнализДублейУсловийНорм.КоличествоДублей,
	|	ВТ_АнализДублейУсловийНорм.НаименованиеУсловияНормы
	|ИЗ
	|	ВТ_АнализДублейУсловийНорм КАК ВТ_АнализДублейУсловийНорм
	|ГДЕ
	|	ВТ_АнализДублейУсловийНорм.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаДоступныхУсловийРаботы",	Объект.ТаблицаДоступныхУсловийРаботы.Выгрузить());
	Запрос.УстановитьПараметр("ДатаАнализа",					ТекущаяДата());
	Запрос.УстановитьПараметр("Организация",					Объект.Организация);
	Запрос.УстановитьПараметр("ИспользоватьРабочиеМеста",		Объект.Организация.ИспользоватьРабочиеМеста);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[17].Выгрузить();
	
	ДоступныеУсловияРаботыЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаДоступныхУсловийРаботы.Загрузить(Результат[16].Выгрузить());
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьДоступныеУсловияРаботыНаСервере()
	
	ДоступныеУсловияРаботыПротокол = "*****Загрузка доступных условий работы*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДоступныхУсловийРаботы.ТабельныйНомер КАК ТабельныйНомер,
	|	ТаблицаДоступныхУсловийРаботы.ФИО КАК ФИО,
	|	ТаблицаДоступныхУсловийРаботы.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаДоступныхУсловийРаботы.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ТаблицаДоступныхУсловийРаботы.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ТаблицаДоступныхУсловийРаботы.КодПодразделения КАК КодПодразделения,
	|	ТаблицаДоступныхУсловийРаботы.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаДоступныхУсловийРаботы.КодДолжности КАК КодДолжности,
	|	ТаблицаДоступныхУсловийРаботы.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ТаблицаДоступныхУсловийРаботы.ИспользоватьФайл КАК ИспользоватьФайл,
	|	ТаблицаДоступныхУсловийРаботы.УсловиеНормы КАК УсловиеНормы,
	|	ТаблицаДоступныхУсловийРаботы.ИспользоватьБаза КАК ИспользоватьБаза,
	|	ТаблицаДоступныхУсловийРаботы.Сотрудник КАК Сотрудник,
	|	ТаблицаДоступныхУсловийРаботы.Подразделение КАК Подразделение,
	|	ТаблицаДоступныхУсловийРаботы.Должность КАК Должность,
	|	ТаблицаДоступныхУсловийРаботы.РабочееМесто КАК РабочееМесто,
	|	ТаблицаДоступныхУсловийРаботы.ЕстьЗРМ КАК ЕстьЗРМ,
	|	ТаблицаДоступныхУсловийРаботы.ЕстьДУР КАК ЕстьДУР,
	|	ТаблицаДоступныхУсловийРаботы.Существует КАК Существует
	|ПОМЕСТИТЬ ВТ_ТаблицаДоступныхУсловийРаботы
	|ИЗ
	|	&ТаблицаДоступныхУсловийРаботы КАК ТаблицаДоступныхУсловийРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ФИО КАК ФИО,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.НаименованиеУсловияНормы КАК НаименованиеУсловияНормы,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ИспользоватьФайл КАК ИспользоватьФайл,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ИспользоватьБаза КАК ИспользоватьБаза,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.УсловиеНормы КАК УсловиеНормы,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.Должность КАК Должность,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.РабочееМесто КАК РабочееМесто,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.Существует КАК Существует,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ЕстьЗРМ КАК ЕстьЗРМ,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ЕстьДУР КАК ЕстьДУР
	|ИЗ
	|	ВТ_ТаблицаДоступныхУсловийРаботы КАК ВТ_ТаблицаДоступныхУсловийРаботы
	|ГДЕ
	|	НЕ ВТ_ТаблицаДоступныхУсловийРаботы.Существует
	|	И ВТ_ТаблицаДоступныхУсловийРаботы.ЕстьЗРМ
	|	И ВТ_ТаблицаДоступныхУсловийРаботы.ЕстьДУР
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаДоступныхУсловийРаботы.Сотрудник КАК Сотрудник,
	|	ВТ_ТаблицаДоступныхУсловийРаботы.ФИО КАК ФИО
	|ИЗ
	|	ВТ_ТаблицаДоступныхУсловийРаботы КАК ВТ_ТаблицаДоступныхУсловийРаботы
	|ГДЕ
	|	НЕ ВТ_ТаблицаДоступныхУсловийРаботы.Существует
	|	И ВТ_ТаблицаДоступныхУсловийРаботы.ЕстьЗРМ
	|	И ВТ_ТаблицаДоступныхУсловийРаботы.ЕстьДУР
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО";
	
	Запрос.УстановитьПараметр("ТаблицаДоступныхУсловийРаботы",	Объект.ТаблицаДоступныхУсловийРаботы.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДоступныхУсловийРаботы 	= Результат[1].Выгрузить();
	ТаблицаСотрудников 				= Результат[2].Выгрузить();
	
	Если ТаблицаДоступныхУсловийРаботы.Количество() = 0 Тогда
		
		ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Информация для загрузки доступных условий работы не найдена.";
		
	Иначе
		
		Для Каждого СтрокаТаблицыСотрудников Из ТаблицаСотрудников Цикл
			
			НайденныеСтроки = ТаблицаДоступныхУсловийРаботы.НайтиСтроки(НОВЫЙ Структура("Сотрудник",СтрокаТаблицыСотрудников.Сотрудник));
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСотрудников.Сотрудник) Тогда
				ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Не найден сотрудник: " + СтрокаТаблицыСотрудников.ФИО;
				Продолжить;
			КонецЕсли;
				
			НовыйДокумент = Документы.УстановкаУсловийРаботыСотрудника.СоздатьДокумент();
			НовыйДокумент.Дата 					= НачалоДня(ДоступныеУсловияРаботыДатаАктуальности);
			НовыйДокумент.Комментарий 			= "Загружен автоматически";
			НовыйДокумент.Организация 			= Объект.Организация;
			НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
			НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
			НовыйДокумент.Сотрудник 			= СтрокаТаблицыСотрудников.Сотрудник;
			НовыйДокумент.УстановитьНовыйНомер();
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ОшибкокНет = Истина;
				
				Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Подразделение) Тогда
					ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Не найдено подразделение: " + НайденнаяСтрока.НаименованиеПодразделения;
					ОшибкокНет = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Должность) Тогда
					ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Не найдена должность: " + НайденнаяСтрока.НаименованиеДолжности;
					ОшибкокНет = Ложь;
				КонецЕсли;
				
				Если Объект.Организация.ИспользоватьРабочиеМеста И НЕ ЗначениеЗаполнено(НайденнаяСтрока.РабочееМесто) Тогда
					ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Не найдено рабочее место: " + НайденнаяСтрока.НаименованиеРабочегоМеста;
					ОшибкокНет = Ложь;
				КонецЕсли;
				
				Если ОшибкокНет Тогда
					
					НоваяСтрока 				= НовыйДокумент.УсловияРаботы.Добавить();
					НоваяСтрока.Подразделение 	= НайденнаяСтрока.Подразделение;
					НоваяСтрока.Должность 		= НайденнаяСтрока.Должность;
					НоваяСтрока.РабочееМесто 	= НайденнаяСтрока.РабочееМесто;
					НоваяСтрока.Условие 		= НайденнаяСтрока.УсловиеНормы;
					НоваяСтрока.Использовать 	= НайденнаяСтрока.ИспользоватьФайл;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ НовыйДокумент.УсловияРаботы.Количество() = 0 Тогда
				
				Попытка
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
					ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Сформирован документ: " + НовыйДокумент.Ссылка;
				Исключение
					ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "Документ установки условий работы сотрудника не сформирован." + Символы.ПС + ОписаниеОшибки();
				КонецПопытки;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьДоступныеУсловияРаботыВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	ДоступныеУсловияРаботыПротокол = ДоступныеУсловияРаботыПротокол + Символы.ПС + "*****Загрузка доступных условий работы завершена*****";
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьДоступныеУсловияРаботы(Команда)
	
	ЗагрузитьДоступныеУсловияРаботыНаСервере();
	
	Элементы.СтраницаДоступныеУсловияРаботы.ПодчиненныеЭлементы.Группа19.ПодчиненныеЭлементы.Группа20.ПодчиненныеЭлементы.ТаблицаДоступныхУсловийРаботыЗагрузитьДоступныеУсловияРаботы.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлПараметровНоменклатурыНаСервере(Адрес)
	
	Объект.ТаблицаШтатногоРасписания.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 7 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиПараметровНоменклатуры(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
			Иначе
				НаименованиеНоменклатуры = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				КодСинхронизации = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
			Иначе
				КодСинхронизации = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст);
			КонецЕсли;
			
			Попытка
				Если НЕ ТипЗнч(КодСинхронизации) = ТИП("Число") Тогда
					КодСинхронизации = Число(КодСинхронизации);
				КонецЕсли;
				ДлинаКодаСинхронизации = СтрДлина(Формат(КодСинхронизации,"ЧГ="));
			Исключение
				КодСинхронизации		= 0;
				ДлинаКодаСинхронизации 	= 0;
			КонецПопытки;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				НаименованиеХарактеристики = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение);
			Иначе
				НаименованиеХарактеристики = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				СтраховойЗапас = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
			Иначе
				СтраховойЗапас = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст);
			КонецЕсли;
			
			Попытка
				Если НЕ ТипЗнч(СтраховойЗапас) = ТИП("Число") Тогда
					СтраховойЗапас	= Число(СтраховойЗапас);
				КонецЕсли;
			Исключение
				ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + ": " + Символы.ПС + ОписаниеОшибки();
				ЕстьОшибкиВСтроке = Истина;
			КонецПопытки;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				ТипПериода = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение);
			Иначе
				ТипПериода = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТипПериода) Тогда
				Если НРег(ТипПериода) = "день" Тогда
					ТипПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День");
				ИначеЕсли НРег(ТипПериода) = "месяц" Тогда
					ТипПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
				Иначе
					ТипПериода = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПустаяСсылка");
				КонецЕсли;
			Иначе
				ТипПериода = ПредопределенноеЗначение("Перечисление.ВидыВыдачиСИЗ.ПустаяСсылка");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 6, Сч, 6).СодержитЗначение Тогда
				КоличествоПериодов = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Значение);
			Иначе
				КоличествоПериодов = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КоличествоПериодов) Тогда
				Попытка
					Если НЕ ТипЗнч(КоличествоПериодов) = ТИП("Число") Тогда
						КоличествоПериодов = Число(КоличествоПериодов);
					КонецЕсли;
				Исключение
					КоличествоПериодов = 0;
					ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + ": " + Символы.ПС + ОписаниеОшибки();
					ЕстьОшибкиВСтроке = Истина;
				КонецПопытки;
			Иначе
				КоличествоПериодов = 0;
			КонецЕсли;
			
			Если ДлинаКодаСинхронизации > 15 Тогда
				ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина кода синхронизации превышает 15 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НаименованиеХарактеристики) > 50 Тогда
				ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " - длина размера превышает 50 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТипПериода) Тогда
				ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + ": не определен тип периода";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(КоличествоПериодов) Тогда
				ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + ": не определено количество периодов";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
				
			Если ЕстьОшибкиВСтроке Тогда
				ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 							= Объект.ТаблицаПараметровНоменклатуры.Добавить();
			НоваяСтрока.НаименованиеНоменклатуры 	= НаименованиеНоменклатуры;
			НоваяСтрока.КодСинхронизации 			= КодСинхронизации;
			НоваяСтрока.НаименованиеХарактеристики	= НаименованиеХарактеристики;
			НоваяСтрока.СтраховойЗапас				= СтраховойЗапас;
			НоваяСтрока.ТипПериода 					= ТипПериода;
			НоваяСтрока.КоличествоПериодов			= КоличествоПериодов;
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлПараметровНоменклатуры(Команда)
	
	ПараметрыНоменклатурыПротокол = "*****Чтение файла загрузки *****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Не выбрана организация!";
		ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Не выбран файл загрузки!";
		ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;		
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлПараметровНоменклатурыНаСервере(ВременноеХранилище);
	
	ПроверитьДублиВФайлеПараметровНоменклатуры();
	
	Если ПараметрыНоменклатурыЕстьДубли Тогда
		ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "В файле загрузки существуют дубли! Загрузка не доступна.";
		Элементы.ЗагрузитьПараметрыНоменклатуры.Доступность = Ложь;
	Иначе
		ПроверитьПараметрыНоменклатурыВБазе();
		Если ПараметрыНоменклатурыЕстьДубли Тогда
			ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
			Элементы.ЗагрузитьПараметрыНоменклатуры.Доступность = Ложь;
		Конецесли;
	Конецесли;
	
	ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиВФайлеПараметровНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПараметровНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаПараметровНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаПараметровНоменклатуры.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ТаблицаПараметровНоменклатуры.СтраховойЗапас КАК СтраховойЗапас,
	|	ТаблицаПараметровНоменклатуры.ТипПериода КАК ТипПериода,
	|	ТаблицаПараметровНоменклатуры.КоличествоПериодов КАК КоличествоПериодов,
	|	ТаблицаПараметровНоменклатуры.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаПараметровНоменклатуры
	|ИЗ
	|	&ТаблицаПараметровНоменклатуры КАК ТаблицаПараметровНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПараметровНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаПараметровНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаПараметровНоменклатуры.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ТаблицаПараметровНоменклатуры.НомерСтроки) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублей
	|ИЗ
	|	ВТ_ТаблицаПараметровНоменклатуры КАК ВТ_ТаблицаПараметровНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаПараметровНоменклатуры.НаименованиеНоменклатуры,
	|	ВТ_ТаблицаПараметровНоменклатуры.КодСинхронизации,
	|	ВТ_ТаблицаПараметровНоменклатуры.НаименованиеХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПараметровНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаПараметровНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаПараметровНоменклатуры.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_ТаблицаПараметровНоменклатуры.СтраховойЗапас КАК СтраховойЗапас,
	|	ВТ_ТаблицаПараметровНоменклатуры.ТипПериода КАК ТипПериода,
	|	ВТ_ТаблицаПараметровНоменклатуры.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_ТаблицаПараметровНоменклатуры КАК ВТ_ТаблицаПараметровНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублей КАК ВТ_АнализДублей
	|		ПО ВТ_ТаблицаПараметровНоменклатуры.НаименованиеНоменклатуры = ВТ_АнализДублей.НаименованиеНоменклатуры
	|			И ВТ_ТаблицаПараметровНоменклатуры.КодСинхронизации = ВТ_АнализДублей.КодСинхронизации
	|			И ВТ_ТаблицаПараметровНоменклатуры.НаименованиеХарактеристики = ВТ_АнализДублей.НаименованиеХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублей.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_АнализДублей.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_АнализДублей.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_АнализДублей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублей КАК ВТ_АнализДублей
	|ГДЕ
	|	ВТ_АнализДублей.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаПараметровНоменклатуры",Объект.ТаблицаПараметровНоменклатуры.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[3].Выгрузить();
	
	ПараметрыНоменклатурыЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаПараметровНоменклатуры.Загрузить(Результат[2].Выгрузить());	
	
КонецПроцедуры	
	
&НаСервере
Процедура ПроверитьПараметрыНоменклатурыВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПараметровНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаПараметровНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаПараметровНоменклатуры.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ТаблицаПараметровНоменклатуры.СтраховойЗапас КАК СтраховойЗапас,
	|	ТаблицаПараметровНоменклатуры.ТипПериода КАК ТипПериода,
	|	ТаблицаПараметровНоменклатуры.КоличествоПериодов КАК КоличествоПериодов
	|ПОМЕСТИТЬ ВТ_ТаблицаПараметровНоменклатуры
	|ИЗ
	|	&ТаблицаПараметровНоменклатуры КАК ТаблицаПараметровНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПараметровНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаПараметровНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаПараметровНоменклатуры.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_ТаблицаПараметровНоменклатуры.СтраховойЗапас КАК СтраховойЗапас,
	|	ВТ_ТаблицаПараметровНоменклатуры.ТипПериода КАК ТипПериода,
	|	ВТ_ТаблицаПараметровНоменклатуры.КоличествоПериодов КАК КоличествоПериодов,
	|	ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_ТаблицаПараметровСНоменклатурой
	|ИЗ
	|	ВТ_ТаблицаПараметровНоменклатуры КАК ВТ_ТаблицаПараметровНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТ_ТаблицаПараметровНоменклатуры.КодСинхронизации = Номенклатура.КодСинхронизации
	|			И ВТ_ТаблицаПараметровНоменклатуры.НаименованиеНоменклатуры = Номенклатура.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПараметровСНоменклатурой.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаПараметровСНоменклатурой.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаПараметровСНоменклатурой.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_ТаблицаПараметровСНоменклатурой.СтраховойЗапас КАК СтраховойЗапас,
	|	ВТ_ТаблицаПараметровСНоменклатурой.ТипПериода КАК ТипПериода,
	|	ВТ_ТаблицаПараметровСНоменклатурой.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_ТаблицаПараметровСНоменклатурой.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ВТ_ТаблицаПараметровСРазмерами
	|ИЗ
	|	ВТ_ТаблицаПараметровСНоменклатурой КАК ВТ_ТаблицаПараметровСНоменклатурой
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВТ_ТаблицаПараметровСНоменклатурой.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|			И (ВЫБОР
	|				КОГДА ВТ_ТаблицаПараметровСНоменклатурой.НаименованиеХарактеристики = """"
	|					ТОГДА ВЫБОР
	|							КОГДА &ПараметрыНоменклатурыДляВсехРазмеров
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ВТ_ТаблицаПараметровСНоменклатурой.НаименованиеХарактеристики = ХарактеристикиНоменклатуры.Наименование
	|						КОНЕЦ
	|				ИНАЧЕ ВТ_ТаблицаПараметровСНоменклатурой.НаименованиеХарактеристики = ХарактеристикиНоменклатуры.Наименование
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КраснаяЛиния.Номенклатура КАК Номенклатура,
	|	КраснаяЛиния.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КраснаяЛиния.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_СтраховыеЗапасы
	|ИЗ
	|	РегистрСведений.КраснаяЛиния КАК КраснаяЛиния
	|ГДЕ
	|	КраснаяЛиния.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрокиДоставкиСИЗ.Номенклатура КАК Номенклатура,
	|	СрокиДоставкиСИЗ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СрокиДоставкиСИЗ.КоличествоПериодов КАК КоличествоПериодов,
	|	СрокиДоставкиСИЗ.Дискретность КАК Дискретность
	|ПОМЕСТИТЬ ВТ_СрокиДоставки
	|ИЗ
	|	РегистрСведений.СрокиДоставкиСИЗ КАК СрокиДоставкиСИЗ
	|ГДЕ
	|	СрокиДоставкиСИЗ.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПараметровСРазмерами.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаПараметровСРазмерами.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаПараметровСРазмерами.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_ТаблицаПараметровСРазмерами.СтраховойЗапас КАК СтраховойЗапас,
	|	ЕСТЬNULL(ВТ_СтраховыеЗапасы.Количество, 0) КАК СтраховойЗапасВБазе,
	|	ВТ_ТаблицаПараметровСРазмерами.ТипПериода КАК ТипПериода,
	|	ЕСТЬNULL(ВТ_СрокиДоставки.Дискретность, ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.ПустаяСсылка)) КАК ТипПериодаВБазе,
	|	ВТ_ТаблицаПараметровСРазмерами.КоличествоПериодов КАК КоличествоПериодов,
	|	ЕСТЬNULL(ВТ_СрокиДоставки.КоличествоПериодов, 0) КАК КоличествоПериодовВБазе,
	|	ВТ_ТаблицаПараметровСРазмерами.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаПараметровСРазмерами.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаПараметровСРазмерами КАК ВТ_ТаблицаПараметровСРазмерами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтраховыеЗапасы КАК ВТ_СтраховыеЗапасы
	|		ПО ВТ_ТаблицаПараметровСРазмерами.Номенклатура = ВТ_СтраховыеЗапасы.Номенклатура
	|			И ВТ_ТаблицаПараметровСРазмерами.ХарактеристикаНоменклатуры = ВТ_СтраховыеЗапасы.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СрокиДоставки КАК ВТ_СрокиДоставки
	|		ПО ВТ_ТаблицаПараметровСРазмерами.Номенклатура = ВТ_СрокиДоставки.Номенклатура
	|			И ВТ_ТаблицаПараметровСРазмерами.ХарактеристикаНоменклатуры = ВТ_СрокиДоставки.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Номенклатура) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейНоменклатуры
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.ХарактеристикаНоменклатуры) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейХарактеристик
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации,
	|	ВТ_Результат.НаименованиеХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_Результат.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_Результат.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_Результат.СтраховойЗапас КАК СтраховойЗапас,
	|	ВТ_Результат.СтраховойЗапасВБазе КАК СтраховойЗапасВБазе,
	|	ВТ_Результат.ТипПериода КАК ТипПериода,
	|	ВТ_Результат.ТипПериодаВБазе КАК ТипПериодаВБазе,
	|	ВТ_Результат.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_Результат.КоличествоПериодовВБазе КАК КоличествоПериодовВБазе,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейНоменклатуры.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейНоменклатуры.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейХарактеристик.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейХарактеристик.КоличествоДублей
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейНоменклатуры КАК ВТ_АнализДублейНоменклатуры
	|		ПО ВТ_Результат.НаименованиеНоменклатуры = ВТ_АнализДублейНоменклатуры.НаименованиеНоменклатуры
	|			И ВТ_Результат.КодСинхронизации = ВТ_АнализДублейНоменклатуры.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейХарактеристик КАК ВТ_АнализДублейХарактеристик
	|		ПО ВТ_Результат.НаименованиеНоменклатуры = ВТ_АнализДублейХарактеристик.НаименованиеНоменклатуры
	|			И ВТ_Результат.КодСинхронизации = ВТ_АнализДублейХарактеристик.КодСинхронизации
	|			И ВТ_Результат.НаименованиеХарактеристики = ВТ_АнализДублейХарактеристик.НаименованиеХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейНоменклатуры.НаименованиеНоменклатуры КАК Наименование,
	|	ВТ_АнализДублейНоменклатуры.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейНоменклатуры КАК ВТ_АнализДублейНоменклатуры
	|ГДЕ
	|	ВТ_АнализДублейНоменклатуры.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейХарактеристик.НаименованиеХарактеристики,
	|	ВТ_АнализДублейХарактеристик.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейХарактеристик КАК ВТ_АнализДублейХарактеристик
	|ГДЕ
	|	ВТ_АнализДублейХарактеристик.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаПараметровНоменклатуры",			Объект.ТаблицаПараметровНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("Организация",							Объект.Организация);
	Запрос.УстановитьПараметр("ПараметрыНоменклатурыДляВсехРазмеров",	ПараметрыНоменклатурыДляВсехРазмеров);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[9].Выгрузить();
	
	ПараметрыНоменклатурыЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаПараметровНоменклатуры.Загрузить(Результат[8].Выгрузить());
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузитьПараметрыНоменклатуры(Команда)
	
	ЗагрузитьПараметрыНоменклатурыНаСервере();
	
	Элементы.СтраницаПараметрыНоменклатуры.ПодчиненныеЭлементы.Группа22.ПодчиненныеЭлементы.Группа23.ПодчиненныеЭлементы.ЗагрузитьПараметрыНоменклатуры.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПараметрыНоменклатурыНаСервере()
	
	ПараметрыНоменклатурыПротокол = "*****Загрузка параметров номенклатуры*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПараметровНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТаблицаПараметровНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ТаблицаПараметровНоменклатуры.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ТаблицаПараметровНоменклатуры.СтраховойЗапас КАК СтраховойЗапас,
	|	ТаблицаПараметровНоменклатуры.СтраховойЗапасВБазе КАК СтраховойЗапасВБазе,
	|	ТаблицаПараметровНоменклатуры.ТипПериода КАК ТипПериода,
	|	ТаблицаПараметровНоменклатуры.ТипПериодаВБазе КАК ТипПериодаВБазе,
	|	ТаблицаПараметровНоменклатуры.КоличествоПериодов КАК КоличествоПериодов,
	|	ТаблицаПараметровНоменклатуры.КоличествоПериодовВБазе КАК КоличествоПериодовВБазе,
	|	ТаблицаПараметровНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаПараметровНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ВТ_ТаблицаПараметровНоменклатуры
	|ИЗ
	|	&ТаблицаПараметровНоменклатуры КАК ТаблицаПараметровНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
	|	МАКСИМУМ(ХарактеристикиНоменклатуры.Ссылка) КАК Характеристика
	|ПОМЕСТИТЬ ВТ_Характеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ХарактеристикиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПараметровНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаПараметровНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаПараметровНоменклатуры.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_ТаблицаПараметровНоменклатуры.СтраховойЗапас КАК Количество,
	|	ВТ_ТаблицаПараметровНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаПараметровНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВТ_Характеристики.Характеристика ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРазмеры
	|ИЗ
	|	ВТ_ТаблицаПараметровНоменклатуры КАК ВТ_ТаблицаПараметровНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Характеристики КАК ВТ_Характеристики
	|		ПО ВТ_ТаблицаПараметровНоменклатуры.Номенклатура = ВТ_Характеристики.Номенклатура
	|ГДЕ
	|	НЕ ВТ_ТаблицаПараметровНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ВТ_ТаблицаПараметровНоменклатуры.НаименованиеХарактеристики = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ВТ_ТаблицаПараметровНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ
	|	И НЕ ВТ_ТаблицаПараметровНоменклатуры.СтраховойЗапас = ВТ_ТаблицаПараметровНоменклатуры.СтраховойЗапасВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПараметровНоменклатуры.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТ_ТаблицаПараметровНоменклатуры.КодСинхронизации КАК КодСинхронизации,
	|	ВТ_ТаблицаПараметровНоменклатуры.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ВТ_ТаблицаПараметровНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаПараметровНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ТаблицаПараметровНоменклатуры.КоличествоПериодов КАК КоличествоПериодов,
	|	ВТ_ТаблицаПараметровНоменклатуры.ТипПериода КАК Дискретность,
	|	ВЫБОР
	|		КОГДА ВТ_Характеристики.Характеристика ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРазмеры
	|ИЗ
	|	ВТ_ТаблицаПараметровНоменклатуры КАК ВТ_ТаблицаПараметровНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Характеристики КАК ВТ_Характеристики
	|		ПО ВТ_ТаблицаПараметровНоменклатуры.Номенклатура = ВТ_Характеристики.Номенклатура
	|ГДЕ
	|	НЕ ВТ_ТаблицаПараметровНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ВТ_ТаблицаПараметровНоменклатуры.НаименованиеХарактеристики = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ВТ_ТаблицаПараметровНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ
	|	И НЕ ВТ_ТаблицаПараметровНоменклатуры.ТипПериода = ВТ_ТаблицаПараметровНоменклатуры.ТипПериодаВБазе
	|	И НЕ ВТ_ТаблицаПараметровНоменклатуры.КоличествоПериодов = ВТ_ТаблицаПараметровНоменклатуры.КоличествоПериодовВБазе";
	
	Запрос.УстановитьПараметр("ТаблицаПараметровНоменклатуры",	Объект.ТаблицаПараметровНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("Организация",					Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаСтраховыхЗапасовДляЗагрузки 	= Результат[1].Выгрузить();
	ТаблицаСроковДоставкиДляЗагрузки 	= Результат[2].Выгрузить();
	
	//загрузка страховых запасов
	Если ТаблицаСтраховыхЗапасовДляЗагрузки.Количество() = 0 Тогда
		
		ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Информация для загрузки страховых запасов номенклатуры не найдена.";
		
	Иначе
		
		Для Каждого СтрокаТаблицыСтраховыхЗапасовДляЗагрузки Из ТаблицаСтраховыхЗапасовДляЗагрузки Цикл
			
			Если СтрокаТаблицыСтраховыхЗапасовДляЗагрузки.ЕстьРазмеры И НЕ ЗначениеЗаполнено(СтрокаТаблицыСтраховыхЗапасовДляЗагрузки.ХарактеристикаНоменклатуры) Тогда
				ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Для номенклатуры: " + СтрокаТаблицыСтраховыхЗапасовДляЗагрузки.Номенклатура + " не определена характеристика. Данные загружены не будут!";
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.КраснаяЛиния.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
			НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицыСтраховыхЗапасовДляЗагрузки.Номенклатура);
			НаборЗаписей.Отбор.ХарактеристикаНоменклатуры.Установить(СтрокаТаблицыСтраховыхЗапасовДляЗагрузки.ХарактеристикаНоменклатуры);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				
				НоваяЗапись 			= НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаТаблицыСтраховыхЗапасовДляЗагрузки);
				НоваяЗапись.Организация	= Объект.Организация;
				
			Иначе
				
				НаборЗаписей[0].Количество = СтрокаТаблицыСтраховыхЗапасовДляЗагрузки.Количество;
				
			КонецЕсли;
			
			Попытка
				НаборЗаписей.Записать();
				ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Выполнена запись страхового запаса. Номенклатура: " + СтрокаТаблицыСтраховыхЗапасовДляЗагрузки.Номенклатура + ". Размер: " + ?(ЗначениеЗаполнено(СтрокаТаблицыСтраховыхЗапасовДляЗагрузки.ХарактеристикаНоменклатуры),СтрокаТаблицыСтраховыхЗапасовДляЗагрузки.ХарактеристикаНоменклатуры,"<Не задан>. Страховой запас: " + Формат(СтрокаТаблицыСтраховыхЗапасовДляЗагрузки.Количество,"ЧЦ=15; ЧДЦ=3; ЧГ=0"));
			Исключение
				ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Не удалось создать запись страхового запаса." + Символы.ПС + ОписаниеОшибки();
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//загрузка сроков доставки
	Если ТаблицаСроковДоставкиДляЗагрузки.Количество() = 0 Тогда
		
		ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Информация для загрузки сроков доставки номенклатуры не найдена.";
		
	Иначе
		
		Для Каждого СтрокаТаблицыСроковДоставкиДляЗагрузки Из ТаблицаСроковДоставкиДляЗагрузки Цикл
			
			Если СтрокаТаблицыСроковДоставкиДляЗагрузки.ЕстьРазмеры И НЕ ЗначениеЗаполнено(СтрокаТаблицыСроковДоставкиДляЗагрузки.ХарактеристикаНоменклатуры) Тогда
				ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Для номенклатуры: " + СтрокаТаблицыСроковДоставкиДляЗагрузки.Номенклатура + " не определена характеристика. Данные загружены не будут!";
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.СрокиДоставкиСИЗ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
			НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицыСроковДоставкиДляЗагрузки.Номенклатура);
			НаборЗаписей.Отбор.ХарактеристикаНоменклатуры.Установить(СтрокаТаблицыСроковДоставкиДляЗагрузки.ХарактеристикаНоменклатуры);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				
				НоваяЗапись 			= НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаТаблицыСроковДоставкиДляЗагрузки);
				НоваяЗапись.Организация	= Объект.Организация;
				
			Иначе
				
				НаборЗаписей[0].КоличествоПериодов 	= СтрокаТаблицыСроковДоставкиДляЗагрузки.КоличествоПериодов;
				НаборЗаписей[0].Дискретность 		= СтрокаТаблицыСроковДоставкиДляЗагрузки.Дискретность;
				
			КонецЕсли;
			
			Попытка
				НаборЗаписей.Записать();
				ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Выполнена запись срока доставки. Номенклатура: " + СтрокаТаблицыСроковДоставкиДляЗагрузки.Номенклатура + ". Размер: " + ?(ЗначениеЗаполнено(СтрокаТаблицыСроковДоставкиДляЗагрузки.ХарактеристикаНоменклатуры),СтрокаТаблицыСроковДоставкиДляЗагрузки.ХарактеристикаНоменклатуры,"<Не задан>. Срок доставки: " + Формат(СтрокаТаблицыСроковДоставкиДляЗагрузки.КоличествоПериодов,"ЧЦ=2; ЧДЦ=0") + " (" + СтрокаТаблицыСроковДоставкиДляЗагрузки.Дискретность + ").");
			Исключение
				ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "Не удалось создать запись срока доставки." + Символы.ПС + ОписаниеОшибки();
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;		
	
	ПроверитьПараметрыНоменклатурыВБазе();
	
	ЗаполнитьРеквизитыФормы();
	ОбновитьИнтерфейсФормы();
	
	ПараметрыНоменклатурыПротокол = ПараметрыНоменклатурыПротокол + Символы.ПС + "*****Загрузка параметров номенклатуры завершена*****";
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог 								= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок 					= "Выберите файл для загрузки";
	//+++АСТБ_Горюшин_Алексей_20378
	Диалог.Фильтр 						= НСтр("ru = 'Документ MS EXCEL (*.xls;*.xlsx)|*.xls;*.xlsx'");
	//было
	//Диалог.Фильтр 						= НСтр("ru = 'Документ MS EXCEL (*.xlsx)|*.xlsx|Документ MS EXCEL 97-2003 (*.xls)|*.xls'");
	//---АСТБ_Горюшин_Алексей_20378
	Диалог.ПроверятьСуществованиеФайла 	= Истина;
	
	Оповещение = Новый ОписаниеОповещения("ОбработчикВыбораФайлаЗавершение", ЭтотОбъект, Диалог);
	
	НачатьПомещениеФайла(Оповещение, , Диалог, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораФайлаЗавершение(Результат, Адрес, ИмяФайла, Диалог) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;	
	
	ПозицияРасширения 	= СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
	РасширениеФайла 	= Сред(ИмяФайла, ПозицияРасширения + 1, СтрДлина(ИмяФайла) - ПозицияРасширения + 1);
	Объект.ФайлЗагрузки	= ИмяФайла;
	ВременноеХранилище 	= Адрес;
	
	Если ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		НастроитьИнтерфейсСтраницы();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьИнтерфейсСтраницы()
	
	Если ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаВыданныеСИЗ Тогда
		ОчиститьТаблицу("ТаблицаВыданныхСИЗ");
		Элементы.ТаблицаВыданныхСИЗЗагрузитьВыданныеСИЗ.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаДанныеПоСотрудникам Тогда
		ОчиститьТаблицу("ТаблицаДанныхПоСотрудникам");
		Элементы.ТаблицаДанныхПоСотрудникамЗагрузитьДанныеПоСотрудникам.Доступность = Истина;	
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаДоступныеУсловияРаботы Тогда
		ОчиститьТаблицу("ТаблицаДоступныхУсловийРаботы");
		Элементы.ТаблицаДоступныхУсловийРаботыЗагрузитьДоступныеУсловияРаботы.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаЗанятыеРабочиеМеста Тогда
		ОчиститьТаблицу("ТаблицаЗанятыхРабочихМест");
		Элементы.ТаблицаЗанятыхРабочихМестЗагрузитьЗанятыеРабочиеМеста.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаИсходныеНормы Тогда
		ОчиститьТаблицу("ТаблицаИсходныхНорм");
		Элементы.ТаблицаИсходныхНормЗагрузитьИсходныеНормы.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаМВЗ Тогда
		ОчиститьТаблицу("ТаблицаМВЗ");
		Элементы.ТаблицаМВЗЗагрузитьМВЗ.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаМестаХранения Тогда
		ОчиститьТаблицу("ТаблицаМестХраненияСИЗ");
		Элементы.ТаблицаМестХраненияСИЗЗагрузитьМестаХранения.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаНоменклатураНорм Тогда
		ОчиститьТаблицу("ТаблицаНоменклатурыНорм");
		Элементы.ТаблицаНоменклатурыНормЗагрузитьНоменклатуруНорм.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаНоменклатураОрганизации Тогда
		ОчиститьТаблицу("ТаблицаНоменклатурыОрганизации");
		Элементы.ТаблицаНоменклатурыОрганизацииЗагрузитьНоменклатуруОрганизации.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаНоменклатурныеНомера Тогда
		ОчиститьТаблицу("ТаблицаНоменклатурныхНомеров");
		Элементы.ТаблицаНоменклатурныхНомеровЗагрузитьНоменклатурныеНомера.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаОстаткиНоменклатуры Тогда
		ОчиститьТаблицу("ТаблицаОстатковНоменклатуры");
		Элементы.ТаблицаОстатковНоменклатурыЗагрузитьОстаткиНоменклатуры.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаПараметрыНоменклатуры Тогда
		ОчиститьТаблицу("ТаблицаПараметровНоменклатуры");
		Элементы.ЗагрузитьПараметрыНоменклатуры.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаРабочиеМеста Тогда
		ОчиститьТаблицу("ТаблицаРабочихМест");
		Элементы.ТаблицаРабочихМестЗагрузитьРабочиеМеста.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаСкладыВыдачи Тогда
		ОчиститьТаблицу("ТаблицаСкладовВыдачи");
		Элементы.ТаблицаСкладовВыдачиЗагрузитьСкладыВыдачи.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаСоответствияНоменклатуры Тогда
		ОчиститьТаблицу("ТаблицаСоответствийНоменклатуры");
		Элементы.ТаблицаСоответствийНоменклатурыЗагрузитьСоответствияНоменклатуры.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаЦеныНоменклатуры Тогда
		ОчиститьТаблицу("ТаблицаЦенНоменклатуры");
		Элементы.ТаблицаЦенНоменклатурыЗагрузитьЦеныНоменклатуры.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаШтатноеРасписание Тогда
		ОчиститьТаблицу("ТаблицаШтатногоРасписания");
		Элементы.ТаблицаШтатногоРасписанияЗагрузитьШтатноеРасписание.Доступность = Истина;
	ИначеЕсли ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаУточненныеОснованияНорм Тогда
		ОчиститьТаблицу("ТаблицаУточненныхОснованийНорм");
		Элементы.ТаблицаУточненныхОснованийНормЗагрузитьУточненныеОснованияНорм.Доступность = Истина;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикОткрытияФайлаИлиКаталога(Объект, "ФайлЗагрузки", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьНормы(Команда)
	
	ИзменитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьНормы(Команда)
	
	ИзменитьФлажки(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФлажки(ЗначениеФлажка) 
	
	ТабНорм = Объект.ТаблицаИсходныхНорм.Выгрузить();
	ТабНорм.ЗаполнитьЗначения(ЗначениеФлажка,"Использовать");
	Объект.ТаблицаИсходныхНорм.Загрузить(ТабНорм);
	
	ПроверитьИсходныеНормыВБазе();
	
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаИсходныхНормИспользоватьПриИзменении(Элемент)
	
	ПроверитьИсходныеНормыВБазе();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаВидовЗагружаемыхДанныхПоСотрудникам Цикл
		
		СтрокаТаблицы.Использовать = Истина;
		
	КонецЦикла;
	
	ОчиститьТаблицу("ТаблицаДанныхПоСотрудникам");
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из ТаблицаВидовЗагружаемыхДанныхПоСотрудникам Цикл
		
		СтрокаТаблицы.Использовать = Ложь;
		
	КонецЦикла;
	
	ОчиститьТаблицу("ТаблицаДанныхПоСотрудникам");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВидовЗагружаемыхДанныхПоСотрудникам()
	
	//1. Рост
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Рост";
	
	//2. Размер одежды
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Размер одежды";
	
	//3. Размер обуви
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Размер обуви";
	
	//4. Размер головного убора
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Размер головного убора";
	
	//5. Размер противогаза
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Размер противогаза";
	
	//6. Размер респиратора
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Размер респиратора";
	
	//7. Размер рукавиц
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Размер рукавиц";
	
	//8. Размер перчаток
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Размер перчаток";
	
	//9. Размер рубашки
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Размер рубашки";
	
	//10. Идентификатор
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Идентификатор";
	
	//11. Телефон
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Телефон";
	
	//12. Электронная почта
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Электронная почта";
	
	//13. Дата приема для личной карточки
	НоваяСтрока = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.Добавить();
	НоваяСтрока.Использовать = Истина;
	НоваяСтрока.ВидЗагружаемыхДанных = "Дата приема для личной карточки";
	
КонецПроцедуры	

&НаСервере
Функция ЗагружатьДанныеПоСотрудникам(ВидДанных)
	
	НайденныеСтроки = ТаблицаВидовЗагружаемыхДанныхПоСотрудникам.НайтиСтроки(Новый Структура("ВидЗагружаемыхДанных",ВидДанных));
	
	Если НайденныеСтроки.Количество() = 0 Тогда //что-то пошло не так. такого быть не должно.
		Возврат Ложь;
	Иначе
		Возврат НайденныеСтроки[0].Использовать;
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ШтатноеРасписаниеДатаАктуальностиПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаШтатногоРасписания");
	
КонецПроцедуры

&НаКлиенте
Процедура МВЗДатаАктуальностиПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаМВЗ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВидовЗагружаемыхДанныхПоСотрудникамПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаДанныхПоСотрудникам");
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОрганизацииДатаАктуальностиПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаНоменклатурыОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОрганизацииСкладПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаНоменклатурыОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОрганизацииГруппаНоменклатурыПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаНоменклатурыОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОрганизацииПоставщикПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаНоменклатурыОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинНоменклатурныйНомерДляВсехРазмеровПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаНоменклатурныхНомеров");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНоменклатурыДатаАктуальностиПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаЦенНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНоменклатурыПоставщикПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаЦенНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияНоменклатурыДатаАктуальностиПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаСоответствийНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыданныеСИЗДатаАктуальностиПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаВыданныхСИЗ");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеУсловияРаботыДатаАктуальностиПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаДоступныхУсловийРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНоменклатурыДляВсехРазмеровПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаПараметровНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиНоменклатурыДатаАктуальностиПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаОстатковНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиНоменклатурыСкладПриИзменении(Элемент)
	
	ОчиститьТаблицу("ТаблицаОстатковНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФорматЗагрузкиУточненныхоснованийНорм(Команда)
	
	ПараметрыНовойФормы =  Новый Структура;
	ПараметрыНовойФормы.Вставить("ИмяМакета", "ФорматЗагрузкиУточненныхОснованийНорм");
	
 	ЭтоВнешняяОбработка = ?(СтрНайти(ЭтаФорма.ИмяФормы,"ВнешняяОбработка") = 0,Ложь,Истина);
	
	Если ЭтоВнешняяОбработка Тогда
 		ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	Иначе
		ОткрытьФорму("Обработка.ЗагрузкаИнформации.Форма.ФормаДляОтображенияФормата",ПараметрыНовойФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлУточненныхОснованийНорм(Команда)
	
	УточненныеОснованияНормПротокол = "*****Чтение файла загрузки*****";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Не выбрана организация!";
		УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Не выбран файл загрузки!";
		УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
		Возврат;
	КонецЕсли;
	
	Состояние("Выполняется чтение файла...");
	
	ПрочитатьФайлУточненныхОснованийНормНаСервере(ВременноеХранилище);
	
	ПроверитьУточненныеОснованияНормВБазе();
	
	Если УточненныеОснованияНормЕстьДубли Тогда
		УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "В базе данных существуют дубли в справочниках! Загрузка не доступна.";
		Элементы.ТаблицаУточненныхОснованийНормЗагрузитьУточненныеОснованияНорм.Доступность = Ложь;
	Конецесли;
	
	УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "*****Чтение файла загрузки завершено*****";
	
	Объект.ФайлЗагрузки = "";
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУточненныеОснованияНормВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУточненныхОснованийНорм.КодДолжности КАК КодДолжности,
	|	ТаблицаУточненныхОснованийНорм.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаУточненныхОснованийНорм.КодПодразделения КАК КодПодразделения,
	|	ТаблицаУточненныхОснованийНорм.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаУточненныхОснованийНорм.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ТаблицаУточненныхОснованийНорм.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ТаблицаУточненныхОснованийНорм.НомерТОН КАК НомерТОН,
	|	ТаблицаУточненныхОснованийНорм.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ТаблицаУточненныхОснованийНорм.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ТаблицаУточненныхОснованийНорм.НаименованиеНормыВыдачи КАК НаименованиеНормыВыдачи,
	|	ТаблицаУточненныхОснованийНорм.КодНормыВыдачи КАК КодНормыВыдачи
	|ПОМЕСТИТЬ ВТ_ТаблицаУточненныхОснованийНорм
	|ИЗ
	|	&ТаблицаУточненныхОснованийНорм КАК ТаблицаУточненныхОснованийНорм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолжностиИПрофессии.Ссылка КАК Должность,
	|	ДолжностиИПрофессии.Наименование КАК Наименование,
	|	ДолжностиИПрофессии.КодСинхронизации КАК КодСинхронизации
	|ПОМЕСТИТЬ ВТ_Должности
	|ИЗ
	|	Справочник.ДолжностиИПрофессии КАК ДолжностиИПрофессии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.КодСинхронизации КАК КодСинхронизации,
	|	Подразделения.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Подразделения
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМестаАСТБ.Ссылка КАК РабочееМесто,
	|	РабочиеМестаАСТБ.КодСинхронизации КАК КодСинхронизации,
	|	РабочиеМестаАСТБ.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_РабочиеМеста
	|ИЗ
	|	Справочник.РабочиеМестаАСТБ КАК РабочиеМестаАСТБ
	|ГДЕ
	|	РабочиеМестаАСТБ.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТиповыеОтраслевыеНормы.Ссылка КАК ТОН,
	|	ТиповыеОтраслевыеНормы.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_ТОН
	|ИЗ
	|	Справочник.ТиповыеОтраслевыеНормы КАК ТиповыеОтраслевыеНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПунктыТОН.Ссылка КАК ПунктТОН,
	|	ПунктыТОН.Наименование КАК Наименование,
	|	ПунктыТОН.Владелец КАК ТОН
	|ПОМЕСТИТЬ ВТ_ПунктыТОН
	|ИЗ
	|	Справочник.ПунктыТОН КАК ПунктыТОН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормыВыдачиСИЗ.Ссылка КАК Ссылка,
	|	НормыВыдачиСИЗ.Код КАК Код,
	|	НормыВыдачиСИЗ.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_НормыВыдачи
	|ИЗ
	|	Справочник.НормыВыдачиСИЗ КАК НормыВыдачиСИЗ
	|ГДЕ
	|	НормыВыдачиСИЗ.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаУточненныхОснованийНорм.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ЕСТЬNULL(ВТ_Должности.Должность, ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)) КАК Должность,
	|	ВТ_ТаблицаУточненныхОснованийНорм.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ЕСТЬNULL(ВТ_Подразделения.Подразделение, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК Подразделение,
	|	ВТ_ТаблицаУточненныхОснованийНорм.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ЕСТЬNULL(ВТ_РабочиеМеста.РабочееМесто, ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяССылка)) КАК РабочееМесто,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НомерТОН КАК НомерТОН,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ЕСТЬNULL(ВТ_ТОН.ТОН, ЗНАЧЕНИЕ(Справочник.ТиповыеОтраслевыеНормы.ПустаяСсылка)) КАК ТОН,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НаименованиеНормыВыдачи КАК НаименованиеНормыВыдачи,
	|	ВТ_ТаблицаУточненныхОснованийНорм.КодНормыВыдачи КАК КодНормыВыдачи,
	|	ЕСТЬNULL(ВТ_НормыВыдачи.Ссылка, ЗНАЧЕНИЕ(Справочник.НормыВыдачиСИЗ.ПустаяСсылка)) КАК НормаВыдачи
	|ПОМЕСТИТЬ ВТ_СборкаБезПунктовТОН
	|ИЗ
	|	ВТ_ТаблицаУточненныхОснованийНорм КАК ВТ_ТаблицаУточненныхОснованийНорм
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Должности КАК ВТ_Должности
	|		ПО ВТ_ТаблицаУточненныхОснованийНорм.НаименованиеДолжности = ВТ_Должности.Наименование
	|			И ВТ_ТаблицаУточненныхОснованийНорм.КодДолжности = ВТ_Должности.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подразделения КАК ВТ_Подразделения
	|		ПО ВТ_ТаблицаУточненныхОснованийНорм.КодПодразделения = ВТ_Подразделения.КодСинхронизации
	|			И ВТ_ТаблицаУточненныхОснованийНорм.НаименованиеПодразделения = ВТ_Подразделения.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РабочиеМеста КАК ВТ_РабочиеМеста
	|		ПО ВТ_ТаблицаУточненныхОснованийНорм.НаименованиеРабочегоМеста = ВТ_РабочиеМеста.Наименование
	|			И ВТ_ТаблицаУточненныхОснованийНорм.КодРабочегоМеста = ВТ_РабочиеМеста.КодСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТОН КАК ВТ_ТОН
	|		ПО (ВЫБОР
	|				КОГДА ВТ_ТаблицаУточненныхОснованийНорм.НомерТОН = """"
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_ТаблицаУточненныхОснованийНорм.НомерПриложенияТОН = """"
	|							ТОГДА ВТ_ТаблицаУточненныхОснованийНорм.НомерТОН
	|						ИНАЧЕ ВТ_ТаблицаУточненныхОснованийНорм.НомерТОН + "" "" + ВТ_ТаблицаУточненныхОснованийНорм.НомерПриложенияТОН
	|					КОНЕЦ = ВТ_ТОН.Наименование
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормыВыдачи КАК ВТ_НормыВыдачи
	|		ПО (ВЫБОР
	|				КОГДА ВТ_ТаблицаУточненныхОснованийНорм.КодНормыВыдачи = """"
	|					ТОГДА ВТ_ТаблицаУточненныхОснованийНорм.НаименованиеНормыВыдачи = ВТ_НормыВыдачи.Наименование
	|				ИНАЧЕ ВТ_ТаблицаУточненныхОснованийНорм.КодНормыВыдачи = ВТ_НормыВыдачи.Код
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СборкаБезПунктовТОН.КодДолжности КАК КодДолжности,
	|	ВТ_СборкаБезПунктовТОН.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_СборкаБезПунктовТОН.Должность КАК Должность,
	|	ВТ_СборкаБезПунктовТОН.КодПодразделения КАК КодПодразделения,
	|	ВТ_СборкаБезПунктовТОН.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_СборкаБезПунктовТОН.Подразделение КАК Подразделение,
	|	ВТ_СборкаБезПунктовТОН.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_СборкаБезПунктовТОН.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_СборкаБезПунктовТОН.РабочееМесто КАК РабочееМесто,
	|	ВТ_СборкаБезПунктовТОН.НомерТОН КАК НомерТОН,
	|	ВТ_СборкаБезПунктовТОН.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ВТ_СборкаБезПунктовТОН.ТОН КАК ТОН,
	|	ВТ_СборкаБезПунктовТОН.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ЕСТЬNULL(ВТ_ПунктыТОН.ПунктТОН, ЗНАЧЕНИЕ(Справочник.ПунктыТОН.ПустаяСсылка)) КАК ПунктТОН,
	|	ВТ_СборкаБезПунктовТОН.НаименованиеНормыВыдачи КАК НаименованиеНормыВыдачи,
	|	ВТ_СборкаБезПунктовТОН.КодНормыВыдачи КАК КодНормыВыдачи,
	|	ВТ_СборкаБезПунктовТОН.НормаВыдачи КАК НормаВыдачи
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_СборкаБезПунктовТОН КАК ВТ_СборкаБезПунктовТОН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПунктыТОН КАК ВТ_ПунктыТОН
	|		ПО ВТ_СборкаБезПунктовТОН.ТОН = ВТ_ПунктыТОН.ТОН
	|			И (ВЫБОР
	|				КОГДА ВТ_СборкаБезПунктовТОН.НомерПрофессииТОН = """"
	|					ТОГДА ВТ_ПунктыТОН.Наименование = ""Не задан""
	|				ИНАЧЕ ВТ_СборкаБезПунктовТОН.НомерПрофессииТОН = ВТ_ПунктыТОН.Наименование
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Должность) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейДолжностей
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодДолжности,
	|	ВТ_Результат.НаименованиеДолжности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.Подразделение) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейПодразделений
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодПодразделения,
	|	ВТ_Результат.НаименованиеПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_Результат.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.РабочееМесто) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейРабочихМест
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.КодРабочегоМеста,
	|	ВТ_Результат.НаименованиеРабочегоМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НомерТОН КАК НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.ТОН) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейТОН
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НомерТОН КАК НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ВТ_Результат.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.ПунктТОН) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейПунктовТОН
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН,
	|	ВТ_Результат.НомерПрофессииТОН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НаименованиеНормыВыдачи КАК НаименованиеНормыВыдачи,
	|	ВТ_Результат.КодНормыВыдачи КАК КодНормыВыдачи,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Результат.НормаВыдачи) КАК КоличествоДублей
	|ПОМЕСТИТЬ ВТ_АнализДублейНормВыдачи
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Результат.НаименованиеНормыВыдачи,
	|	ВТ_Результат.КодНормыВыдачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УточненныеОснованияНормВыдачи.НормаВыдачи КАК НормаВыдачи,
	|	УточненныеОснованияНормВыдачи.Подразделение КАК Подразделение,
	|	УточненныеОснованияНормВыдачи.Должность КАК Должность,
	|	УточненныеОснованияНормВыдачи.РабочееМесто КАК РабочееМесто,
	|	УточненныеОснованияНормВыдачи.Основание КАК Основание
	|ПОМЕСТИТЬ ВТ_УточненныеОснованияНорм
	|ИЗ
	|	РегистрСведений.УточненныеОснованияНормВыдачи КАК УточненныеОснованияНормВыдачи
	|ГДЕ
	|	УточненныеОснованияНормВыдачи.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Результат.КодДолжности КАК КодДолжности,
	|	ВТ_Результат.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_Результат.Должность КАК Должность,
	|	ВТ_Результат.КодПодразделения КАК КодПодразделения,
	|	ВТ_Результат.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_Результат.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_Результат.РабочееМесто КАК РабочееМесто,
	|	ВТ_Результат.НомерТОН КАК НомерТОН,
	|	ВТ_Результат.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ВТ_Результат.ТОН КАК ТОН,
	|	ВТ_Результат.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ВТ_Результат.ПунктТОН КАК ПунктТОН,
	|	ВТ_Результат.НаименованиеНормыВыдачи КАК НаименованиеНормыВыдачи,
	|	ВТ_Результат.КодНормыВыдачи КАК КодНормыВыдачи,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи,
	|	ВЫБОР
	|		КОГДА ВТ_АнализДублейДолжностей.КоличествоДублей > 1
	|			ТОГДА ВТ_АнализДублейДолжностей.КоличествоДублей
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|					ТОГДА ВТ_АнализДублейПодразделений.КоличествоДублей
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_АнализДублейПунктовТОН.КоличествоДублей > 1
	|							ТОГДА ВТ_АнализДублейПунктовТОН.КоличествоДублей
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВТ_АнализДублейРабочихМест.КоличествоДублей > 1
	|									ТОГДА ВТ_АнализДублейРабочихМест.КоличествоДублей
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ВТ_АнализДублейТОН.КоличествоДублей > 1
	|											ТОГДА ВТ_АнализДублейТОН.КоличествоДублей
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ВТ_АнализДублейНормВыдачи.КоличествоДублей > 1
	|													ТОГДА ВТ_АнализДублейНормВыдачи.КоличествоДублей
	|												ИНАЧЕ 1
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДублей,
	|	НЕ ВТ_УточненныеОснованияНорм.Основание ЕСТЬ NULL КАК Существует
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УточненныеОснованияНорм КАК ВТ_УточненныеОснованияНорм
	|		ПО ВТ_Результат.Должность = ВТ_УточненныеОснованияНорм.Должность
	|			И ВТ_Результат.Подразделение = ВТ_УточненныеОснованияНорм.Подразделение
	|			И ВТ_Результат.РабочееМесто = ВТ_УточненныеОснованияНорм.РабочееМесто
	|			И ВТ_Результат.НормаВыдачи = ВТ_УточненныеОснованияНорм.НормаВыдачи
	|			И ВТ_Результат.ПунктТОН = ВТ_УточненныеОснованияНорм.Основание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|		ПО ВТ_Результат.КодДолжности = ВТ_АнализДублейДолжностей.КодДолжности
	|			И ВТ_Результат.НаименованиеДолжности = ВТ_АнализДублейДолжностей.НаименованиеДолжности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|		ПО ВТ_Результат.КодПодразделения = ВТ_АнализДублейПодразделений.КодПодразделения
	|			И ВТ_Результат.НаименованиеПодразделения = ВТ_АнализДублейПодразделений.НаименованиеПодразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейРабочихМест КАК ВТ_АнализДублейРабочихМест
	|		ПО ВТ_Результат.КодРабочегоМеста = ВТ_АнализДублейРабочихМест.КодРабочегоМеста
	|			И ВТ_Результат.НаименованиеРабочегоМеста = ВТ_АнализДублейРабочихМест.НаименованиеРабочегоМеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейНормВыдачи КАК ВТ_АнализДублейНормВыдачи
	|		ПО ВТ_Результат.НаименованиеНормыВыдачи = ВТ_АнализДублейНормВыдачи.НаименованиеНормыВыдачи
	|			И ВТ_Результат.КодНормыВыдачи = ВТ_АнализДублейНормВыдачи.КодНормыВыдачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейТОН КАК ВТ_АнализДублейТОН
	|		ПО ВТ_Результат.НомерТОН = ВТ_АнализДублейТОН.НомерТОН
	|			И ВТ_Результат.НомерПриложенияТОН = ВТ_АнализДублейТОН.НомерПриложенияТОН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АнализДублейПунктовТОН КАК ВТ_АнализДублейПунктовТОН
	|		ПО ВТ_Результат.НомерТОН = ВТ_АнализДублейПунктовТОН.НомерТОН
	|			И ВТ_Результат.НомерПриложенияТОН = ВТ_АнализДублейПунктовТОН.НомерПриложенияТОН
	|			И ВТ_Результат.НомерПрофессииТОН = ВТ_АнализДублейПунктовТОН.НомерПрофессииТОН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АнализДублейДолжностей.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейДолжностей КАК ВТ_АнализДублейДолжностей
	|ГДЕ
	|	ВТ_АнализДублейДолжностей.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейПодразделений.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейПодразделений КАК ВТ_АнализДублейПодразделений
	|ГДЕ
	|	ВТ_АнализДублейПодразделений.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейРабочихМест.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейРабочихМест КАК ВТ_АнализДублейРабочихМест
	|ГДЕ
	|	ВТ_АнализДублейРабочихМест.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейТОН.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейТОН КАК ВТ_АнализДублейТОН
	|ГДЕ
	|	ВТ_АнализДублейТОН.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейПунктовТОН.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейПунктовТОН КАК ВТ_АнализДублейПунктовТОН
	|ГДЕ
	|	ВТ_АнализДублейПунктовТОН.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_АнализДублейНормВыдачи.КоличествоДублей
	|ИЗ
	|	ВТ_АнализДублейНормВыдачи КАК ВТ_АнализДублейНормВыдачи
	|ГДЕ
	|	ВТ_АнализДублейНормВыдачи.КоличествоДублей > 1";
	
	Запрос.УстановитьПараметр("ТаблицаУточненныхОснованийНорм",	Объект.ТаблицаУточненныхОснованийНорм.Выгрузить());
	Запрос.УстановитьПараметр("Организация",					Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[17].Выгрузить();
	
	УточненныеОснованияНормЕстьДубли = (НЕ ТаблицаДублей.Количество() = 0);
	
	Объект.ТаблицаУточненныхОснованийНорм.Загрузить(Результат[16].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлУточненныхОснованийНормНаСервере(Адрес)
	
	Объект.ТаблицаУточненныхОснованийНорм.Очистить();
	
	Попытка
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ВременныйФайл 		= ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		КоличествоСтрок = ТабДок.ВысотаТаблицы;
		
		МассивЗаголовковКолонок = Новый Массив;
		Для Сч = 1 По 12 Цикл
			МассивЗаголовковКолонок.Добавить(НРег(СокрЛП(ТабДок.Область(1, Сч, 1, Сч).Текст)));
		КонецЦикла;	
		
		ВерныйФорматФайлаЗагрузки = ПроверитьФорматЗагрузкиУточненныхОснованийНорм(МассивЗаголовковКолонок);
		
		Если НЕ ВерныйФорматФайлаЗагрузки Тогда
			УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Неверный формат файла загрузки!";
			Возврат;
		КонецЕсли;	
		
		Для Сч = 2 По КоличествоСтрок Цикл
			
			//проверка данных строки
			ЕстьОшибкиВСтроке = Ложь;
			
			Если ТабДок.Область(Сч, 1, Сч, 1).СодержитЗначение Тогда
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Значение);
			Иначе
				НаименованиеДолжности = СокрЛП(ТабДок.Область(Сч, 1, Сч, 1).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 2, Сч, 2).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 2, Сч, 2).Значение) = ТИП("Число") Тогда
					КодДолжности = Формат(ТабДок.Область(Сч, 2, Сч, 2).Значение,"ЧГ=");
				Иначе
					КодДолжности = СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Значение);
				КонецЕсли;
			Иначе
				КодДолжности = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 2, Сч, 2).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 3, Сч, 3).СодержитЗначение Тогда
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Значение);
			Иначе
				НаименованиеПодразделения = СокрЛП(ТабДок.Область(Сч, 3, Сч, 3).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 4, Сч, 4).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 4, Сч, 4).Значение) = ТИП("Число") Тогда
					Если СтрНайти(ТабДок.Область(Сч, 4, Сч, 4).Формат,"ЧН=") > 0 Тогда
						КодПодразделения = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст),Символы.НПП,"");
					Иначе
						КодПодразделения = Формат(ТабДок.Область(Сч, 4, Сч, 4).Значение,"ЧГ=");
					КонецЕсли;
				Иначе
					КодПодразделения = СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Значение);
				КонецЕсли;
			Иначе
				КодПодразделения = СтрЗаменить(СокрЛП(ТабДок.Область(Сч, 4, Сч, 4).Текст),Символы.НПП,"");
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 5, Сч, 5).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 5, Сч, 5).Значение) = ТИП("Число") Тогда
					НаименованиеРабочегоМеста = Формат(ТабДок.Область(Сч, 5, Сч, 5).Значение,"ЧГ=");
				Иначе
					НаименованиеРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Значение);
				КонецЕсли;
			Иначе
				НаименованиеРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 5, Сч, 5).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 6, Сч, 6).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 6, Сч, 6).Значение) = ТИП("Число") Тогда
					КодРабочегоМеста = Формат(ТабДок.Область(Сч, 6, Сч, 6).Значение,"ЧГ=");
				Иначе
					КодРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Значение);
				КонецЕсли;
			Иначе
				КодРабочегоМеста = СокрЛП(ТабДок.Область(Сч, 6, Сч, 6).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 7, Сч, 7).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 7, Сч, 7).Значение) = ТИП("Число") Тогда
					НомерТОН = Формат(ТабДок.Область(Сч, 7, Сч, 7).Значение,"ЧГ=");
				Иначе
					НомерТОН = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Значение);
				КонецЕсли;
			Иначе
				НомерТОН = СокрЛП(ТабДок.Область(Сч, 7, Сч, 7).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 8, Сч, 8).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 8, Сч, 8).Значение) = ТИП("Число") Тогда
					НомерПриложенияТОН = Формат(ТабДок.Область(Сч, 8, Сч, 8).Значение,"ЧГ=");
				Иначе
					НомерПриложенияТОН = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Значение);
				КонецЕсли;
			Иначе
				НомерПриложенияТОН = СокрЛП(ТабДок.Область(Сч, 8, Сч, 8).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 9, Сч, 9).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 9, Сч, 9).Значение) = ТИП("Число") Тогда
					НомерПрофессииТОН = Формат(ТабДок.Область(Сч, 9, Сч, 9).Значение,"ЧГ=");
				Иначе
					НомерПрофессииТОН = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Значение);
				КонецЕсли;
			Иначе
				НомерПрофессииТОН = СокрЛП(ТабДок.Область(Сч, 9, Сч, 9).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 10, Сч, 10).СодержитЗначение Тогда
				НаименованиеНормыВыдачи = СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Значение);
			Иначе
				НаименованиеНормыВыдачи = СокрЛП(ТабДок.Область(Сч, 10, Сч, 10).Текст);
			КонецЕсли;
			
			Если ТабДок.Область(Сч, 11, Сч, 11).СодержитЗначение Тогда
				Если ТипЗнч(ТабДок.Область(Сч, 11, Сч, 11).Значение) = ТИП("Число") Тогда
					КодНормыВыдачи = Формат(ТабДок.Область(Сч, 11, Сч, 11).Значение,"ЧГ=");
				Иначе
					КодНормыВыдачи = СокрЛП(ТабДок.Область(Сч, 11, Сч, 11).Значение);
				КонецЕсли;
			Иначе
				КодНормыВыдачи = СокрЛП(ТабДок.Область(Сч, 11, Сч, 11).Текст);
			КонецЕсли;
			
			Если СтрДлина(КодДолжности) > 20 Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " - длина кода должности превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(КодПодразделения) > 20 Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " - длина кода подразделения превышает 20 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КодРабочегоМеста) И СтрДлина(КодРабочегоМеста) > 9 Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " - длина кода рабочего места превышает 9 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(КодРабочегоМеста) И СтрДлина(НаименованиеРабочегоМеста) > 150 Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования рабочего места превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НомерТОН) > 150 Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " - длина номера ТОН превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НомерТОН) Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " - не заполнен номер ТОН.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НомерПриложенияТОН) > 150 Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " - длина номера приложения ТОН превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НомерПрофессииТОН) > 150 Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " - длина номера профессии ТОН превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НомерПрофессииТОН) Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " - не заполнен номера профессии в ТОН.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(НаименованиеНормыВыдачи) > 150 Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " - длина наименования нормы выдачи превышает 150 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НаименованиеНормыВыдачи) Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " - не заполнена норма выдачи СИЗ.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если СтрДлина(КодНормыВыдачи) > 12 Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " - длина кода нормы выдачи превышает 12 символов.";
				ЕстьОшибкиВСтроке = Истина;
			КонецЕсли;
			
			Если ЕстьОшибкиВСтроке Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Строка " + Сч + " не загружена.";
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.ТаблицаУточненныхОснованийНорм.Добавить();
			НоваяСтрока.НаименованиеДолжности 			= НаименованиеДолжности;
			НоваяСтрока.КодДолжности 					= КодДолжности;
			НоваяСтрока.НаименованиеПодразделения 		= НаименованиеПодразделения;
			НоваяСтрока.КодПодразделения 				= КодПодразделения;
			НоваяСтрока.НаименованиеРабочегоМеста 		= НаименованиеРабочегоМеста;
			НоваяСтрока.КодРабочегоМеста 				= КодРабочегоМеста;
			НоваяСтрока.НомерТОН 						= НомерТОН;
			НоваяСтрока.НомерПриложенияТОН 				= НомерПриложенияТОН;
			НоваяСтрока.НомерПрофессииТОН 				= НомерПрофессииТОН;
			НоваяСтрока.НаименованиеНормыВыдачи 		= НаименованиеНормыВыдачи;
			НоваяСтрока.КодНормыВыдачи 					= КодНормыВыдачи;
			
		КонецЦикла;	
		
		УдалитьФайлы(ВременныйФайл);
		
	Исключение
		
		УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Ошибка чтения файла загрузки!" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьУточненныеОснованияНормНаСервере()
	
	УточненныеОснованияНормПротокол = "*****Загрузка уточненных оснований норм*****";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУточненныхОснованийНорм.КодДолжности КАК КодДолжности,
	|	ТаблицаУточненныхОснованийНорм.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ТаблицаУточненныхОснованийНорм.Должность КАК Должность,
	|	ТаблицаУточненныхОснованийНорм.КодПодразделения КАК КодПодразделения,
	|	ТаблицаУточненныхОснованийНорм.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ТаблицаУточненныхОснованийНорм.Подразделение КАК Подразделение,
	|	ТаблицаУточненныхОснованийНорм.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ТаблицаУточненныхОснованийНорм.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ТаблицаУточненныхОснованийНорм.РабочееМесто КАК РабочееМесто,
	|	ТаблицаУточненныхОснованийНорм.НомерТОН КАК НомерТОН,
	|	ТаблицаУточненныхОснованийНорм.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ТаблицаУточненныхОснованийНорм.ТОН КАК ТОН,
	|	ТаблицаУточненныхОснованийНорм.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ТаблицаУточненныхОснованийНорм.ПунктТОН КАК ПунктТОН,
	|	ТаблицаУточненныхОснованийНорм.НаименованиеНормыВыдачи КАК НаименованиеНормыВыдачи,
	|	ТаблицаУточненныхОснованийНорм.КодНормыВыдачи КАК КодНормыВыдачи,
	|	ТаблицаУточненныхОснованийНорм.НормаВыдачи КАК НормаВыдачи,
	|	ТаблицаУточненныхОснованийНорм.КоличествоДублей КАК КоличествоДублей,
	|	ТаблицаУточненныхОснованийНорм.Существует КАК Существует
	|ПОМЕСТИТЬ ВТ_ТаблицаУточненныхОснованийНорм
	|ИЗ
	|	&ТаблицаУточненныхОснованийНорм КАК ТаблицаУточненныхОснованийНорм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаУточненныхОснованийНорм.КодДолжности КАК КодДолжности,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НаименованиеДолжности КАК НаименованиеДолжности,
	|	ВТ_ТаблицаУточненныхОснованийНорм.Должность КАК Должность,
	|	ВТ_ТаблицаУточненныхОснованийНорм.КодПодразделения КАК КодПодразделения,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	ВТ_ТаблицаУточненныхОснованийНорм.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаУточненныхОснованийНорм.КодРабочегоМеста КАК КодРабочегоМеста,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НаименованиеРабочегоМеста КАК НаименованиеРабочегоМеста,
	|	ВТ_ТаблицаУточненныхОснованийНорм.РабочееМесто КАК РабочееМесто,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НомерТОН КАК НомерТОН,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НомерПриложенияТОН КАК НомерПриложенияТОН,
	|	ВТ_ТаблицаУточненныхОснованийНорм.ТОН КАК ТОН,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НомерПрофессииТОН КАК НомерПрофессииТОН,
	|	ВТ_ТаблицаУточненныхОснованийНорм.ПунктТОН КАК ПунктТОН,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НаименованиеНормыВыдачи КАК НаименованиеНормыВыдачи,
	|	ВТ_ТаблицаУточненныхОснованийНорм.КодНормыВыдачи КАК КодНормыВыдачи,
	|	ВТ_ТаблицаУточненныхОснованийНорм.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаУточненныхОснованийНорм.КоличествоДублей КАК КоличествоДублей,
	|	ВТ_ТаблицаУточненныхОснованийНорм.Существует КАК Существует
	|ИЗ
	|	ВТ_ТаблицаУточненныхОснованийНорм КАК ВТ_ТаблицаУточненныхОснованийНорм
	|ГДЕ
	|	НЕ ВТ_ТаблицаУточненныхОснованийНорм.Существует";
	
	Запрос.УстановитьПараметр("ТаблицаУточненныхОснованийНорм",Объект.ТаблицаУточненныхОснованийНорм.Выгрузить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		
		УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Информация для загрузки уточненных оснований норм не найдена.";
		
	Иначе
		
		МассивСозданныхЭлементовСправочников = НОВЫЙ Массив;
		
		Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
			
			МожноЗагружать = Истина;
			
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НаименованиеПодразделения) И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Подразделение) Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Не найдено подразделение: " + СтрокаТаблицыЗапроса.НаименованиеПодразделения;
				МожноЗагружать = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НаименованиеДолжности) И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.Должность) Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Не найдена должность: " + СтрокаТаблицыЗапроса.НаименованиеДолжности;
				МожноЗагружать = Ложь;
			КонецЕсли;
			
			Если Объект.Организация.ИспользоватьРабочиеМеста И ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НаименованиеРабочегоМеста) И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.РабочееМесто) Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Не найдено рабочее место: " + СтрокаТаблицыЗапроса.НаименованиеРабочегоМеста;
				МожноЗагружать = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НормаВыдачи) Тогда
				УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Не найдена норма выдачи: " + СтрокаТаблицыЗапроса.НаименованиеНормыВыдачи;
				МожноЗагружать = Ложь;
			КонецЕсли;
			
			Если НЕ МожноЗагружать Тогда
				Продолжить;
			КонецЕсли;
		
			//определяем (создаем) ТОН
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерТОН) И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ТОН) Тогда
				СтрокаТаблицыЗапроса.ТОН = ПроцедурыРаботыСНормамиСервер.ПолучитьТОН(Строка(СтрокаТаблицыЗапроса.НомерТОН) + ?(ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерПриложенияТОН)," " + СтрокаТаблицыЗапроса.НомерПриложенияТОН,""));
				Если МассивСозданныхЭлементовСправочников.Найти(СтрокаТаблицыЗапроса.ТОН) = Неопределено Тогда
					УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Создана ТОН: " + СтрокаТаблицыЗапроса.ТОН.Наименование;
					МассивСозданныхЭлементовСправочников.Добавить(СтрокаТаблицыЗапроса.ТОН);
				КонецЕсли;
			КонецЕсли;
			
			//определяем (создаем) пункт ТОН
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерТОН) И Не ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ПунктТОН) Тогда
				СтрокаТаблицыЗапроса.ПунктТОН = ПолучитьПунктТОН(СтрокаТаблицыЗапроса.ТОН,?(ЗначениеЗаполнено(СтрокаТаблицыЗапроса.НомерПрофессииТОН),Строка(СтрокаТаблицыЗапроса.НомерПрофессииТОН),"Не задан"));
				Если МассивСозданныхЭлементовСправочников.Найти(СтрокаТаблицыЗапроса.ПунктТОН) = Неопределено Тогда
					УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Создан пункт ТОН: " + СтрокаТаблицыЗапроса.ПунктТОН.Наименование;
					МассивСозданныхЭлементовСправочников.Добавить(СтрокаТаблицыЗапроса.ПунктТОН);
				КонецЕсли;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.УточненныеОснованияНормВыдачи.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
			НаборЗаписей.Отбор.НормаВыдачи.Установить(СтрокаТаблицыЗапроса.НормаВыдачи);
			НаборЗаписей.Отбор.Подразделение.Установить(СтрокаТаблицыЗапроса.Подразделение);
			НаборЗаписей.Отбор.РабочееМесто.Установить(СтрокаТаблицыЗапроса.РабочееМесто);
			НаборЗаписей.Отбор.Должность.Установить(СтрокаТаблицыЗапроса.Должность);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				
				НоваяЗапись = НаборЗаписей.Добавить();
				
				НоваяЗапись.Организация 	= Объект.Организация;
				НоваяЗапись.НормаВыдачи 	= СтрокаТаблицыЗапроса.НормаВыдачи;
				НоваяЗапись.Подразделение 	= СтрокаТаблицыЗапроса.Подразделение;
				НоваяЗапись.Должность 		= СтрокаТаблицыЗапроса.Должность;
				НоваяЗапись.РабочееМесто 	= СтрокаТаблицыЗапроса.РабочееМесто;
				НоваяЗапись.Основание 		= СтрокаТаблицыЗапроса.ПунктТОН;
				
				Попытка
					НаборЗаписей.Записать();
					УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Выполнена запись в уточненные основания нормы выдачи. Подразделение: " + СтрокаТаблицыЗапроса.Подразделение + ". Должность: " + СтрокаТаблицыЗапроса.Должность + ". Рабочее место: " + СтрокаТаблицыЗапроса.РабочееМесто + ". Норма выдачи: " + СтрокаТаблицыЗапроса.НормаВыдачи + ". Основание: " + СтрокаТаблицыЗапроса.ПунктТОН;
				Исключение
					УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "Не удалось создать запись в уточненные основания нормы выдачи." + Символы.ПС + ОписаниеОшибки();
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьУточненныеОснованияНормВБазе();
	
	УточненныеОснованияНормПротокол = УточненныеОснованияНормПротокол + Символы.ПС + "*****Загрузка уточненных оснований норм завершена*****";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУточненныеОснованияНорм(Команда)
	
	ЗагрузитьУточненныеОснованияНормНаСервере();
	
	Элементы.ТаблицаУточненныхОснованийНормЗагрузитьУточненныеОснованияНорм.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеНормыУстановитьНормыНаПодчиненныеПодразделенияПриИзменении(Элемент)
		
	Если ИсходныеНормыУстановитьНормыНаПодчиненныеПодразделения Тогда 		
		ИсходныеНормыУстановитьНормыНаПодчиненныеПоЗанятымРабочимМестам = НЕ ИсходныеНормыУстановитьНормыНаПодчиненныеПодразделения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеНормыУстановитьНормыНаПодчиненныеПоЗанятымРабочимМестамПриИзменении(Элемент)
	
	Если ИсходныеНормыУстановитьНормыНаПодчиненныеПоЗанятымРабочимМестам Тогда 		
		ИсходныеНормыУстановитьНормыНаПодчиненныеПодразделения = НЕ ИсходныеНормыУстановитьНормыНаПодчиненныеПоЗанятымРабочимМестам;
	КонецЕсли;

КонецПроцедуры
