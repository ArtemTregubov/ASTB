&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Параметры.ИмяФайла) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПутьКФайлам = Справочники.СертификатыНоменклатуры.ПолучитьПараметрыФТПСоединения();
	Если ПутьКФайлам = Неопределено Тогда
		Элементы.ГруппаОшибка.Видимость = Истина;
		Элементы.Декорация2.Заголовок = "Параметры FTP-соединения не определены!";
		Возврат;
	КонецЕсли;
	
	Соединение = Справочники.СертификатыНоменклатуры.УстановитьFTPСоединение(ПутьКФайлам);
	
	Если Соединение = Неопределено Тогда
		Элементы.ГруппаОшибка.Видимость = Истина;
		//АсТБ_Alexey_91598_********************************************************************
		Элементы.Печать.Видимость 		= Ложь;
		//АсТБ_Alexey_91598_********************************************************************
		Элементы.Декорация2.Заголовок = "Ошибка подключения к FTP-серверу!";
		Возврат;
	КонецЕсли;
	
	Найдено = Соединение.НайтиФайлы(Параметры.ИмяФайла);
	Если Найдено.Количество()= 0 Тогда
		Элементы.ГруппаОшибка.Видимость = Истина;
		//АсТБ_Alexey_91598_********************************************************************
		Элементы.Печать.Видимость 		= Ложь;
		//АсТБ_Alexey_91598_********************************************************************
		Элементы.Декорация2.Заголовок = "Не найден файл: " + Параметры.ИмяФайла;
		Возврат;
	Иначе
		ВременныйФайл = ПолучитьИмяВременногоФайла();
		Соединение.Получить(Параметры.ИмяФайла, ВременныйФайл);
	КонецЕсли;
	
	ЭтаФорма.Заголовок = Параметры.ИмяФайла;
	
	Параметры.АдресХранилища = ПоместитьВоВременноеХранилище(НОВЫЙ ДвоичныеДанные(ВременныйФайл),ЭтаФорма.УникальныйИдентификатор);
	
	УдалитьФайлы(ВременныйФайл);
	
КонецПроцедуры

//АсТБ_Alexey_90996_********************************************************************

&НаКлиенте
Процедура ПрочитатьДанныеФайла(АдресХранилища)
	
	Если ЗначениеЗаполнено(Параметры.АдресХранилища) Тогда
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
		
		ВременныйФайл = ПолучитьИмяВременногоФайла();
		
		ДвоичныеДанныеФайла.Записать(ВременныйФайл);
		
		Файло = Новый Картинка(ВременныйФайл);
		Если Не Файло.Формат() = ФорматКартинки.НеизвестныйФормат Тогда
			Объект.Результат = "<HTML><img src=""file:\\"+ВременныйФайл+""" width=""100%""></img></BODY></HTML>";
		Иначе //если не картинка, тогда должен быть PDF
			ВременныйФайл = ПолучитьИмяВременногоФайла("pdf");
			ДвоичныеДанныеФайла.Записать(ВременныйФайл);
			ТекстHTMLДляPDF(ВременныйФайл);
			//ТекстHTMLДляPDF2(ВременныйФайл);
		КонецЕсли;
	
	Иначе
		
		Объект.Результат = "";
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТекстHTMLДляPDF(ВременныйФайл)

	Двоичное = Новый ДвоичныеДанные(ВременныйФайл);
	FileStringBase64 = ПолучитьBase64СтрокуИзДвоичныхДанных(Двоичное);
	ТекстHTML =
	"<!DOCTYPE html>
	|<html>
	|	<head>
	|		<meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" />
	|		<meta name=""viewport"" content=""width=device-width, initial-scale = 1.0, maximum-scale = 1.0, user-scalable=no"">
	|		<script src=""https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.4.456/pdf.min.js""></script>
	|		<script src=""https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.4.456/pdf.worker.min.js""></script>
	|		<canvas id=""the-canvas""></canvas>
	|		<script>
	|			var currPage = 1; //Pages are 1-based not 0-based
	|			var numPages = 0;
	|			var thePDF = null;
	|			
	|			var loadingTask = pdfjsLib.getDocument({data: atob(`" + FileStringBase64 + "`)});
	|			loadingTask.promise.then(function(pdf) {
	|			       
	|			     thePDF = pdf;
	|			     numPages = pdf.numPages;
	|			
	|			     pdf.getPage(1).then(handlePages);                      
	|			
	|			     function handlePages(page) { 
	|			        var scale = 1.0;
	|			
	|			        var viewport = page.getViewport({scale: scale});
	|			
	|			        var canvas = document.createElement( ""canvas"" );
	|			        canvas.style.display = ""block"";
	|			        var context = canvas.getContext('2d');
	|			        canvas.height = viewport.height;
	|			        canvas.width = viewport.width;
	|			
	|			        var renderContext = {
	|			              canvasContext: context,
	|			              viewport: viewport
	|			        };
	|			        var renderTask = page.render(renderContext);
	|			
	|			         document.body.appendChild( canvas );
	|			
	|			        currPage++;
	|			        if ( thePDF !== null && currPage <= numPages )
	|			        {
	|			            thePDF.getPage( currPage ).then( handlePages );
	|			        }
	|			       };
	|			
	|			});
	|		</script>
	|	</body>
	|</html>";
	
	Объект.Результат = ТекстHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLДляPDF2(ВременныйФайл)
	
	Файл = Новый Файл(ВременныйФайл);
	Если Не Файл.Существует() Тогда
		Объект.Результат = "";
		Возврат;	
	КонецЕсли;
	
	СтруктураДанныхМакетов = ПолучитьДанныеМакетов();
	
	МакетPDF 			= СтруктураДанныхМакетов.МакетPDF;
	СкриптБиблиотека 	= СтруктураДанныхМакетов.СкриптБиблиотека;
	СкриптWorker 		= СтруктураДанныхМакетов.СкриптWorker;
	
	ТекстHTML = СтрЗаменить(МакетPDF,"<TextScript111>", СкриптБиблиотека);
  	ТекстHTML = СтрЗаменить(ТекстHTML,"<TextScript112>", СкриптWorker);
	
	Если СтрНайти(ВременныйФайл,"\\", НаправлениеПоиска.СНачала, 1, 1) > 0 Тогда
		Двоичное = Новый ДвоичныеДанные(ВременныйФайл);
		FileStringBase64 = ПолучитьBase64СтрокуИзДвоичныхДанных(Двоичное);
		ТекстHTML = СтрЗаменить(ТекстHTML,"<ReplacementText>", "pdfjsLib.getDocument({data: atob(`<FileStringBase64>`)}).promise.then(function(pdfDoc_)");
		ТекстHTML = СтрЗаменить(ТекстHTML,"<FileStringBase64>", FileStringBase64);
		
	Иначе
		ТекстHTML = СтрЗаменить(ТекстHTML,"<ReplacementText>", "pdfjsLib.getDocument('<url1S>').promise.then(function(pdfDoc_)");
		ТекстHTML = СтрЗаменить(ТекстHTML,"<url1S>","file:///"+СтрЗаменить(ВременныйФайл, "\", "//"));
	КонецЕсли;	
	
	Объект.Результат = ТекстHTML;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеМакетов()
	
	МакетPDF  			= Обработки.ПечатьСертификатов.ПолучитьМакет("МакетPDF").ПолучитьТекст();
	СкриптБиблиотека 	= Обработки.ПечатьСертификатов.ПолучитьМакет("СкриптБиблиотека").ПолучитьТекст();
	СкриптWorker 		= Обработки.ПечатьСертификатов.ПолучитьМакет("СкриптWorker").ПолучитьТекст();
	
	Возврат НОВЫЙ Структура("МакетPDF, СкриптБиблиотека, СкриптWorker",МакетPDF, СкриптБиблиотека, СкриптWorker);
	
КонецФункции	

//АсТБ_Alexey_90996_********************************************************************

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПрочитатьДанныеФайла(Параметры.АдресХранилища);
	
КонецПроцедуры

//АсТБ_Alexey_91598_********************************************************************

&НаКлиенте
Процедура Печать(Команда)
	
	Элементы.Результат.Документ.execCommand("Print");
	
КонецПроцедуры

//АсТБ_Alexey_91598_********************************************************************