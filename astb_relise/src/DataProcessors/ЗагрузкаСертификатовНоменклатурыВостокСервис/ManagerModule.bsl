#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
&НаСервере
Функция УстановитьFTPСоединение(ПараметрыЗагрузки) Экспорт
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
	Если НастройкаПроксиСервера <> Неопределено Тогда
		
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		
		Если ИспользоватьПрокси Тогда
			
			Если ИспользоватьСистемныеНастройки Тогда
			// Системные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
			// Ручные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				Прокси.Пользователь 							= НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       							= НастройкаПроксиСервера["Пароль"];
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов 	= НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			КонецЕсли;
			
		Иначе
			
			// Не использовать прокси-сервер	
			Прокси = Новый ИнтернетПрокси(Ложь);
			
		КонецЕсли;
		
	Иначе
		
		Прокси = Неопределено;
		
	КонецЕсли;

	Если ПараметрыЗагрузки.FTPСоединениеЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено);
	Иначе
		ssl = Неопределено;
	КонецЕсли;	
	
	Попытка
		FTPСоединение = Новый FTPСоединение(ПараметрыЗагрузки.FTPСоединениеАдрес,
										ПараметрыЗагрузки.FTPСоединениеПорт,
										ПараметрыЗагрузки.FTPСоединениеПользователь,
										ПараметрыЗагрузки.FTPСоединениеПароль,
										Прокси,
										ПараметрыЗагрузки.FTPСоединениеПассивноеСоединение,
										10,
										ssl,
										?(ПараметрыЗагрузки.FTPСоединениеЗащищенноеСоединение,УровеньИспользованияЗащищенногоСоединенияFTP.ИспользоватьЕслиВозможно,УровеньИспользованияЗащищенногоСоединенияFTP.Авто));
		FTPСоединение.УстановитьТекущийКаталог(СокрЛП(ПараметрыЗагрузки.FTPСоединениеПуть));
	Исключение
		FTPСоединение = Неопределено;
	КонецПопытки;
	
	Возврат FTPСоединение;

КонецФункции

&НаСервере
Функция ПолучитьНаименованиеСертификата(КодВидаСерт) Экспорт
	 //Определение вида сертификата-------------
	 Перем ПеречислениеВидов;
	 
	 // настроечная таблица, чтобы не ломать дальнейшую логику (МОЖЕТ ТРЕБОВАТЬ ПЕРИОДИЧЕСКОЙ АКТУАЛИЗАЦИИ!)
	 ПеречислениеВидов = Новый Соответствие;
	 ПеречислениеВидов.Вставить(1, "Сертификат соответствия");
	 ПеречислениеВидов.Вставить(2, "Протокол испытаний");
	 ПеречислениеВидов.Вставить(3, "Гигиеническое заключение");
	 ПеречислениеВидов.Вставить(4, "Декларация");
	 ПеречислениеВидов.Вставить(5, "Добровольный сертификат");
	 ПеречислениеВидов.Вставить(6, Неопределено);
	 ПеречислениеВидов.Вставить(7, "Письмо: товар на сертификации");
	 ПеречислениеВидов.Вставить(8, Неопределено);
	 ПеречислениеВидов.Вставить(9, Неопределено);
	 ПеречислениеВидов.Вставить(10,"Свидетельство");
	 ПеречислениеВидов.Вставить(11, Неопределено);
	 ПеречислениеВидов.Вставить(12, Неопределено);
	 ПеречислениеВидов.Вставить(13, "Таможенный сертификат");
	 ПеречислениеВидов.Вставить(14, Неопределено);
	 ПеречислениеВидов.Вставить(15, "Таможенная декларация");
	 ПеречислениеВидов.Вставить(19, "Письмо: товар не подлежит обязательной сертификации");
	 ПеречислениеВидов.Вставить(25, "Европейский сертификат");
	 ПеречислениеВидов.Вставить(26, "Экспертное заключение");
	 ПеречислениеВидов.Вставить(31, "Регистрационное удостоверение");
	 ПеречислениеВидов.Вставить(33, "Сертификат ЕАЭС");
	 ПеречислениеВидов.Вставить(34, "Декларация ЕАЭС");
	 
	 НаименованиеВида = ПеречислениеВидов.Получить(Число(КодВидаСерт));
	 Возврат НаименованиеВида;
	 
КонецФункции	

&НаСервере
Процедура ВыполнитьЧтениеФайлаСертификатовНоменклатуры(ПараметрыЗагрузки,АдресХранилища) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗагрузки.ФайлСертификатовНоменклатуры) Тогда
	
		ПоместитьВоВременноеХранилище("Не выбран файл номенклатуры.",АдресХранилища);
		Возврат;
	
	КонецЕсли;
	
	ТаблицаСертификатов = Новый ТаблицаЗначений;
	ТаблицаСертификатов.Колонки.Добавить("КодОракл", 					Новый ОписаниеТипов("Число"));
	ТаблицаСертификатов.Колонки.Добавить("ОбобщенноеНаименование",		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(60, ДопустимаяДлина.Переменная)));
	ТаблицаСертификатов.Колонки.Добавить("КодВидаСертификата",			Новый ОписаниеТипов("Число"));
	ТаблицаСертификатов.Колонки.Добавить("НомерСертификата", 			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(30, ДопустимаяДлина.Переменная)));
	ТаблицаСертификатов.Колонки.Добавить("ДатаНачалаДействия",			Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаСертификатов.Колонки.Добавить("ДатаОкончанияДействия",		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаСертификатов.Колонки.Добавить("ИмяФайла", 					Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(80, ДопустимаяДлина.Переменная)));
	ТаблицаСертификатов.Колонки.Добавить("ОписаниеФайла", 				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаСертификатов.Колонки.Добавить("НаименованиеВидаСертификата", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	
	Если ПараметрыЗагрузки.ТипИсточника = Перечисления.ТипыИсточниковДляЗагрузки.ЛокальныйРесурс Тогда
		
		ФайлАрхива = ПараметрыЗагрузки.КаталогОбменаИнформацией + "\" + ПараметрыЗагрузки.ФайлСертификатовНоменклатуры;
		
		Файл = Новый Файл(ФайлАрхива);
		Если НЕ Файл.Существует() Тогда
			ПоместитьВоВременноеХранилище("Не найден файл: " + ФайлАрхива,АдресХранилища);
			Возврат;
		КонецЕсли;
		
		Попытка 
			Архив = Новый ЧтениеZipФайла(ФайлАрхива);
			Для Каждого ВходящийФайл Из Архив.Элементы Цикл
				Архив.Извлечь(ВходящийФайл, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			КонецЦикла;
			Архив.Закрыть();
		Исключение
			ПоместитьВоВременноеХранилище(ОписаниеОшибки(),АдресХранилища);
			Возврат;
		КонецПопытки;
	Иначе
		Соединение = УстановитьFTPСоединение(ПараметрыЗагрузки);
		Если Соединение = Неопределено Тогда
			ПоместитьВоВременноеХранилище("Ошибка подключения к FTP.",АдресХранилища);
			Возврат;
		КонецЕсли;
		
		Найдено = Соединение.НайтиФайлы(ПараметрыЗагрузки.ФайлСертификатовНоменклатуры);
		
		Если Найдено.Количество() = 0 Тогда
			ПоместитьВоВременноеХранилище("Не найден файл: "  + ПараметрыЗагрузки.ФайлСертификатовНоменклатуры,АдресХранилища);
			Возврат;
		КонецЕсли;
		Попытка
			ФайлАрхива = КаталогВременныхФайлов() + ПараметрыЗагрузки.ФайлСертификатовНоменклатуры;
			Соединение.Получить(ПараметрыЗагрузки.ФайлСертификатовНоменклатуры,ФайлАрхива);
			Архив = Новый ЧтениеZipФайла(ФайлАрхива);
			Для Каждого ВходящийФайл Из Архив.Элементы Цикл
				Архив.Извлечь(ВходящийФайл, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			КонецЦикла;
			Архив.Закрыть();
			УдалитьФайлы(ФайлАрхива);
		Исключение
			ПоместитьВоВременноеХранилище(ОписаниеОшибки(),АдресХранилища);
			Возврат;
		КонецПопытки;
	КонецЕсли;
		
	ВременныйФайлСертификатов = ПолучитьИмяВременногоФайла();
	//ПереместитьФайл(КаталогВременныхФайлов() + СтрЗаменить(ПараметрыЗагрузки.ФайлСертификатовНоменклатуры,".zip",".txt"), ВременныйФайлСертификатов);      //старый формат
	ПереместитьФайл(КаталогВременныхФайлов() + СтрЗаменить(ПараметрыЗагрузки.ФайлСертификатовНоменклатуры,"2.zip",".txt"), ВременныйФайлСертификатов);
	
	Попытка
		Текст 			= Новый ЧтениеТекста(ВременныйФайлСертификатов, КодировкаТекста.ANSI);
		ПерваяСтрока 	= Текст.ПрочитатьСтроку();
		СтрокаТекста 	= Текст.ПрочитатьСтроку();
	Исключение
		ПоместитьВоВременноеХранилище(ОписаниеОшибки(),АдресХранилища);
		Возврат;
	КонецПопытки;
	
	Пока НЕ СтрокаТекста = Неопределено Цикл	
		
		МассивЗначений = ИзСтрокиСРазделителями(СтрокаТекста, Символы.Таб);
		
		ИмяФайлаСертификата = МассивЗначений[15]; //старый 13
		
		Если ЗначениеЗаполнено(ИмяФайлаСертификата) Тогда
			
			НоваяСтрока 							= ТаблицаСертификатов.Добавить();
			НоваяСтрока.КодОракл 					= Число(МассивЗначений[0]); //не менялся
			НоваяСтрока.ОбобщенноеНаименование 		= МассивЗначений[3];        //не менялся
			НоваяСтрока.КодВидаСертификата 			= Число(МассивЗначений[4]); //не менялся
			НоваяСтрока.НомерСертификата 			= МассивЗначений[5];        //не менялся
			НоваяСтрока.ДатаНачалаДействия 			= ?(ЗначениеЗаполнено(МассивЗначений[11]),Дата(Сред(МассивЗначений[11],7,4) + Сред(МассивЗначений[11],4,2) + Лев(МассивЗначений[11],2)),Дата("00010101")); //старый 8
			НоваяСтрока.ДатаОкончанияДействия 		= ?(ЗначениеЗаполнено(МассивЗначений[12]),Дата(Сред(МассивЗначений[12],7,4) + Сред(МассивЗначений[12],4,2) + Лев(МассивЗначений[12],2)),Дата("00010101")); //старый 9
			НоваяСтрока.ИмяФайла 					= ИмяФайлаСертификата;
			НоваяСтрока.ОписаниеФайла 				= МассивЗначений[16]; //старый 14
			//НоваяСтрока.НаименованиеВидаСертификата	= МассивЗначений[15]; //старый. в новом формате этого поля нет!
			//- Ovsyannikov -------------------------
			НоваяСтрока.НаименованиеВидаСертификата = ПолучитьНаименованиеСертификата(НоваяСтрока.КодВидаСертификата);
			Если НоваяСтрока.НаименованиеВидаСертификата = Неопределено Тогда
				ПоместитьВоВременноеХранилище("Не найден вид сертификата по коду: " + СокрЛП(НоваяСтрока.КодВидаСертификата), АдресХранилища);
				ТаблицаСертификатов.Удалить(НоваяСтрока);
				Продолжить;
			КонецЕсли;
			//- Ovsyannikov -------------------------
			
		КонецЕсли;
		
		СтрокаТекста = Текст.ПрочитатьСтроку();
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСертификатов.КодОракл,
	|	ТаблицаСертификатов.ОбобщенноеНаименование,
	|	ТаблицаСертификатов.КодВидаСертификата,
	|	ТаблицаСертификатов.НаименованиеВидаСертификата,
	|	ТаблицаСертификатов.НомерСертификата,
	|	ТаблицаСертификатов.ДатаНачалаДействия,
	|	ТаблицаСертификатов.ДатаОкончанияДействия,
	|	ТаблицаСертификатов.ИмяФайла,
	|	ТаблицаСертификатов.ОписаниеФайла
	|ПОМЕСТИТЬ ТаблицаСертификатов
	|ИЗ
	|	&ТаблицаСертификатов КАК ТаблицаСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ТаблицаСертификатов.КодОракл КАК КодОракл,
	|	ТаблицаСертификатов.ОбобщенноеНаименование,
	|	ТаблицаСертификатов.КодВидаСертификата,
	|	ТаблицаСертификатов.НаименованиеВидаСертификата,
	|	ТаблицаСертификатов.НомерСертификата КАК НомерСертификата,
	|	ТаблицаСертификатов.ДатаНачалаДействия,
	|	ТаблицаСертификатов.ДатаОкончанияДействия,
	|	ТаблицаСертификатов.ИмяФайла КАК ИмяФайла,
	|	ТаблицаСертификатов.ОписаниеФайла,
	|	0 КАК Использовать,
	|	ВЫБОР
	|		КОГДА СертификатыНоменклатурыФайлыСертификата.Ссылка ЕСТЬ NULL 
	|			ТОГДА ""Не загружен""
	|		ИНАЧЕ ""Загружен""
	|	КОНЕЦ КАК Примечание,
	|	ЕСТЬNULL(СертификатыНоменклатурыФайлыСертификата.Ссылка, ЗНАЧЕНИЕ(Справочник.СертификатыНоменклатуры.ПустаяСсылка)) КАК Сертификат
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры.ФайлыСертификата КАК СертификатыНоменклатурыФайлыСертификата
	|			ПО ТаблицаСертификатов.НомерСертификата = СертификатыНоменклатурыФайлыСертификата.Ссылка.НомерСертификата
	|				И ТаблицаСертификатов.ИмяФайла = СертификатыНоменклатурыФайлыСертификата.ИмяФайла
	|		ПО Номенклатура.КодСинхронизации = ТаблицаСертификатов.КодОракл
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И НЕ ТаблицаСертификатов.НомерСертификата ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодОракл,
	|	НомерСертификата,
	|	ИмяФайла";
	
	Запрос.УстановитьПараметр("ТаблицаСертификатов",ТаблицаСертификатов);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДеревоДляЗагрузки = Новый ДеревоЗначений;
	ДеревоДляЗагрузки.Колонки.Добавить("Использовать", 					Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("Представление", 				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	ДеревоДляЗагрузки.Колонки.Добавить("Примечание", 					Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ДеревоДляЗагрузки.Колонки.Добавить("КодОракл", 						Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("ОбобщенноеНаименование",		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(60, ДопустимаяДлина.Переменная)));
	ДеревоДляЗагрузки.Колонки.Добавить("КодВидаСертификата",			Новый ОписаниеТипов("Число"));
	ДеревоДляЗагрузки.Колонки.Добавить("НомерСертификата", 				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(30, ДопустимаяДлина.Переменная)));
	ДеревоДляЗагрузки.Колонки.Добавить("ДатаНачалаДействия",			Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДеревоДляЗагрузки.Колонки.Добавить("ДатаОкончанияДействия",			Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДеревоДляЗагрузки.Колонки.Добавить("ИмяФайла", 						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(80, ДопустимаяДлина.Переменная)));
	ДеревоДляЗагрузки.Колонки.Добавить("ОписаниеФайла", 				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ДеревоДляЗагрузки.Колонки.Добавить("НаименованиеВидаСертификата", 	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ДеревоДляЗагрузки.Колонки.Добавить("Сертификат", 					Новый ОписаниеТипов("СправочникСсылка.СертификатыНоменклатуры"));	
	ДеревоДляЗагрузки.Колонки.Добавить("Номенклатура", 					Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	ТекущаяНоменклатура = "";
	ТекущийСертификат 	= "";
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если НЕ ТекущаяНоменклатура = СтрокаТаблицыЗапроса.Номенклатура Тогда
			
			ВеткаНоменклатуры = ДеревоДляЗагрузки.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(ВеткаНоменклатуры,СтрокаТаблицыЗапроса,"Использовать,Номенклатура,КодОракл");
			
			ВеткаНоменклатуры.Представление = "(" + СтрокаТаблицыЗапроса.КодОракл + ") " + СокрЛП(СтрокаТаблицыЗапроса.Номенклатура.Наименование);
			
			ТекущаяНоменклатура 		= СтрокаТаблицыЗапроса.Номенклатура;
			ТекущийСертификат 			= "";
			ПримечаниеДляНоменклатуры 	= "";
			
		КонецЕсли;
		
		Если НЕ ТекущийСертификат = СтрокаТаблицыЗапроса.НомерСертификата Тогда
			
			ВеткаСертификат = ВеткаНоменклатуры.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(ВеткаСертификат,СтрокаТаблицыЗапроса,,"Номенклатура,ИмяФайла,ОписаниеФайла");
			
			Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ДатаНачалаДействия) Тогда
				ПредставлениеПериодаСертификата = " Действует с " + Формат(СтрокаТаблицыЗапроса.ДатаНачалаДействия,"ДФ=dd.MM.yyyy");
				Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ДатаОкончанияДействия) Тогда
					ПредставлениеПериодаСертификата = ПредставлениеПериодаСертификата + " по " + Формат(СтрокаТаблицыЗапроса.ДатаОкончанияДействия,"ДФ=dd.MM.yyyy");
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаТаблицыЗапроса.ДатаОкончанияДействия) Тогда
					ПредставлениеПериодаСертификата = " Действует по " + Формат(СтрокаТаблицыЗапроса.ДатаОкончанияДействия,"ДФ=dd.MM.yyyy");
				Иначе
					ПредставлениеПериодаСертификата = "";
				КонецЕсли;
			КонецЕсли;
			
			ВеткаСертификат.Представление = СтрокаТаблицыЗапроса.НаименованиеВидаСертификата + " №" + СтрокаТаблицыЗапроса.НомерСертификата + "." + ПредставлениеПериодаСертификата;
			
			ТекущийСертификат 	= СтрокаТаблицыЗапроса.НомерСертификата;
			
			Если СокрЛП(ВеткаСертификат.Примечание) = "Загружен" Тогда
				
				Если ПримечаниеДляНоменклатуры = "" Тогда
					ПримечаниеДляНоменклатуры = "Загружен";
				ИначеЕсли ПримечаниеДляНоменклатуры = "Не загружен" Тогда
					ПримечаниеДляНоменклатуры = "Загружен частично";
				КонецЕсли;
				
			Иначе
				
				Если ПримечаниеДляНоменклатуры = "" Тогда
					ПримечаниеДляНоменклатуры = "Не загружен";
				ИначеЕсли ПримечаниеДляНоменклатуры = "Загружен" Тогда
					ПримечаниеДляНоменклатуры = "Загружен частично";
				КонецЕсли;
				
			КонецЕсли;
			
			ПримечаниеДляСертификата = "";
			
		КонецЕсли;
		
				
		ВеткаФайл 				= ВеткаСертификат.Строки.Добавить();
		ВеткаФайл.Представление = СтрокаТаблицыЗапроса.ИмяФайла;
		ЗаполнитьЗначенияСвойств(ВеткаФайл,СтрокаТаблицыЗапроса,"ИмяФайла,ОписаниеФайла,Сертификат,Примечание");
		
		Если СокрЛП(ВеткаФайл.Примечание) = "Загружен" Тогда
			Если ПримечаниеДляСертификата = "" Тогда
				ПримечаниеДляСертификата = "Загружен";
			ИначеЕсли ПримечаниеДляСертификата = "Не загружен" Тогда
				ПримечаниеДляСертификата = "Загружен частично";
			КонецЕсли;
		Иначе
			Если ПримечаниеДляСертификата = "" Тогда
				ПримечаниеДляСертификата = "Не загружен";
			ИначеЕсли ПримечаниеДляСертификата = "Загружен" Тогда
				ПримечаниеДляСертификата = "Загружен частично";
			КонецЕсли;
		КонецЕсли;
		
		ВеткаНоменклатуры.Примечание 	= ПримечаниеДляНоменклатуры;
        ВеткаСертификат.Примечание 		= ПримечаниеДляСертификата;
		
	КонецЦикла;
	
	Результат = Новый Структура("ДеревоДляЗагрузки", ДеревоДляЗагрузки);
	
	ПоместитьВоВременноеХранилище(Результат,АдресХранилища);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСертификатНоменклатуры(СтрокаДерева) Экспорт
	
	Сертификат = Справочники.СертификатыНоменклатуры.НайтиПоРеквизиту("НомерСертификата",СтрокаДерева.НомерСертификата);
	
	Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
		
		ВидСертификата = ПолучитьВидСертификата(СтрокаДерева.КодВидаСертификата,СтрокаДерева.НаименованиеВидаСертификата);
		
		НовыйСертификат 						= Справочники.СертификатыНоменклатуры.СоздатьЭлемент();
		НовыйСертификат.ВидСертификата 			= ВидСертификата;
		НовыйСертификат.Наименование 			= СокрЛП(ВидСертификата.Наименование) + " №" + СтрокаДерева.НомерСертификата;
		НовыйСертификат.НачалоСрокаДействия 	= СтрокаДерева.ДатаНачалаДействия;
		НовыйСертификат.НомерСертификата 		= СтрокаДерева.НомерСертификата;
		НовыйСертификат.ОкончаниеСрокаДействия 	= СтрокаДерева.ДатаОкончанияДействия;
		НовыйСертификат.УстановитьНовыйКод();
		НовыйСертификат.Записать();
		
		Сертификат = НовыйСертификат.Ссылка;
		
	КонецЕсли;
	
	Возврат Сертификат;
	
КонецФункции

&НаСервере
Процедура ЗаписатьФайлСертификата(ТекущийСертификат,ИмяФайла,ОписаниеФайла) Экспорт
	
	Если ТекущийСертификат.ФайлыСертификата.Найти(ИмяФайла,"ИмяФайла") = Неопределено Тогда
		
		СертификатОбъект 		= ТекущийСертификат.ПолучитьОбъект();
		НоваяСтрока 			= СертификатОбъект.ФайлыСертификата.Добавить();
		НоваяСтрока.ИмяФайла 	= ИмяФайла;
		НоваяСтрока.Описание 	= ОписаниеФайла;
		СертификатОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСертификатНоменклатуры(ТекущаяНоменклатура,Сертификат) Экспорт
	
	Если ТекущаяНоменклатура.Сертификаты.Найти(Сертификат,"Сертификат") = Неопределено Тогда
		
		НоменклатураОбъект 		= ТекущаяНоменклатура.ПолучитьОбъект();
		НоваяСтрока 			= НоменклатураОбъект.Сертификаты.Добавить();
		НоваяСтрока.Сертификат 	= Сертификат;
		НоменклатураОбъект.Записать();
		
	КонецЕсли;
	
	НоменклатураОбъект = ТекущаяНоменклатура.ПолучитьОбъект();
	НоменклатураОбъект.Сертификаты.Загрузить(ПроцедурыРаботыСНормамиСервер.ПолучитьОтсортированнуюТаблицуСертификатов(ТекущаяНоменклатура));
	НоменклатураОбъект.Записать();
		
КонецПроцедуры

&НаСервере
Функция ПолучитьВидСертификата(КодВидаСертификата,НаименованиеВидаСертификата)
	
	ВидСертификата = Справочники.ВидыСертификатовНоменклатуры.НайтиПоКоду(КодВидаСертификата);
	
	Если Не ЗначениеЗаполнено(ВидСертификата) Тогда
		
		НовыйВидСертификата = Справочники.ВидыСертификатовНоменклатуры.СоздатьЭлемент();
		НовыйВидСертификата.Код = КодВидаСертификата;
		НовыйВидСертификата.Наименование = НаименованиеВидаСертификата;
		НовыйВидСертификата.Приоритет = ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(КодВидаСертификата);
		НовыйВидСертификата.Записать();
		ВидСертификата = НовыйВидСертификата.Ссылка;
		
	Иначе
		
		Если НЕ СокрЛП(ВидСертификата.Наименование) = СокрЛП(НаименованиеВидаСертификата) Тогда
			НовыйВидСертификата = ВидСертификата.ПолучитьОбъект();
			НовыйВидСертификата.Наименование = НаименованиеВидаСертификата;
			НовыйВидСертификата.Приоритет = ПроцедурыРаботыСНормамиСервер.ПолучитьПриоритетВидаСертификата(КодВидаСертификата);
			НовыйВидСертификата.Записать();
		КонецЕсли;			
		
	КонецЕсли;
	
	Возврат ВидСертификата;
	
КонецФункции

&НаСервере
Процедура ВыполнитьЗагрузкуСертификатовНоменклатуры(ПараметрыЗагрузки,АдресХранилища) Экспорт
 
	УспешнаяЗагрузка = Истина;
	
	Для Каждого СтрокаНоменклатуры Из ПараметрыЗагрузки.ДеревоДляЗагрузки.Строки Цикл
		
		Если СтрокаНоменклатуры.Использовать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНоменклатуры.Примечание = "";
		
		Для Каждого СтрокаСертификата Из СтрокаНоменклатуры.Строки Цикл
			
			Если НЕ СтрокаСертификата.Использовать = 0 Тогда
				
				СтрокаСертификата.Сертификат = ПолучитьСертификатНоменклатуры(СтрокаСертификата);
				СтрокаСертификата.Примечание = "";
				
				ЗаписатьСертификатНоменклатуры(СтрокаНоменклатуры.Номенклатура,СтрокаСертификата.Сертификат);
				
				Для Каждого СтрокаФайла Из СтрокаСертификата.Строки Цикл
					
					Если Не СтрокаФайла.Использовать = 0 Тогда
						
						ЗаписатьФайлСертификата(СтрокаСертификата.Сертификат,СтрокаФайла.ИмяФайла,СтрокаФайла.ОписаниеФайла);
						СтрокаФайла.Сертификат = СтрокаСертификата.Сертификат;
						СтрокаФайла.Примечание = "Загружен";
						
					КонецЕсли;
					
					Если СокрЛП(СтрокаФайла.Примечание) = "Загружен" Тогда
						Если СтрокаСертификата.Примечание = "" Тогда
							СтрокаСертификата.Примечание = "Загружен";
						ИначеЕсли СокрЛП(СтрокаСертификата.Примечание) = "Не загружен" Тогда
							СтрокаСертификата.Примечание = "Загружен частично";
						КонецЕсли;
					Иначе
						Если СтрокаСертификата.Примечание = "" Тогда
							СтрокаСертификата.Примечание = "Не загружен";
						ИначеЕсли СокрЛП(СтрокаСертификата.Примечание) = "Загружен" Тогда
							СтрокаСертификата.Примечание = "Загружен частично";
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если СокрЛП(СтрокаСертификата.Примечание) = "Загружен" Тогда
				Если СтрокаНоменклатуры.Примечание = "" Тогда
					СтрокаНоменклатуры.Примечание = "Загружен";
				ИначеЕсли СокрЛП(СтрокаНоменклатуры.Примечание) = "Не загружен" Тогда
					СтрокаНоменклатуры.Примечание = "Загружен частично";
				КонецЕсли;
			ИначеЕсли СокрЛП(СтрокаСертификата.Примечание) = "Не загружен" Тогда
				Если СтрокаНоменклатуры.Примечание = "" Тогда
					СтрокаНоменклатуры.Примечание = "Не загружен";
				ИначеЕсли СокрЛП(СтрокаНоменклатуры.Примечание) = "Загружен" Тогда
					СтрокаНоменклатуры.Примечание = "Загружен частично";
				КонецЕсли;
			Иначе
				СтрокаНоменклатуры.Примечание = "Загружен частично";
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	РезультатЗагрузки = Новый Структура("ДеревоДляЗагрузки, УспешнаяЗагрузка", ПараметрыЗагрузки.ДеревоДляЗагрузки, УспешнаяЗагрузка);
	
	ПоместитьВоВременноеХранилище(РезультатЗагрузки,АдресХранилища);	
	
КонецПроцедуры

&НаСервере
Функция ИзСтрокиСРазделителями(Значение,Разделитель = ";")
	
	Рез = Новый Массив();
	Стр = СокрЛП(Значение);
	
	Если Стр = "" Тогда
		Возврат Рез; 
	КонецЕсли; 
	
	Поз = Найти(Стр,Разделитель);
	
	Пока Поз > 0 Цикл
		
		ТекстПоле = СокрЛП(Лев(Стр,Поз-1));
		ТекстПоле = ?(Лев(ТекстПоле,1) = """", Прав(ТекстПоле, СтрДлина(ТекстПоле)-1), ТекстПоле);
		ТекстПоле = ?(Прав(ТекстПоле,1) = """", Лев(ТекстПоле, СтрДлина(ТекстПоле)-1), ТекстПоле);
		Рез.Добавить(ТекстПоле);
		Стр = Прав(Стр,СтрДлина(Стр) - Поз);
		Поз = Найти(Стр,Разделитель);
		
	КонецЦикла;
	
	Стр = ?(Лев(Стр,1) = """", Прав(Стр, СтрДлина(Стр)-1), Стр);
	Стр = ?(Прав(Стр,1) = """", Лев(Стр, СтрДлина(Стр)-1), Стр);
	
	Рез.Добавить(СокрЛП(Стр));
	
	Возврат Рез;
	
КонецФункции

#КонецЕсли