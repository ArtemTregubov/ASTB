
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	ПолучитьОборудованиеРМНаСервере();
	ТекущийПЛУ = 1;
	
	ШтрихкодEAN8 = "46120441";
	ШтрихкодEAN13 = "2900001462105";
	ШтрихкодCODE39 = "2PMP-468-PJM";
	ШтрихкодQR = "http://www.1c.ru";
	
	ПечатьШтрихкодаEAN8 = Истина;
	ПечатьШтрихкодаEAN13 = Истина;
	ПечатьШтрихкодаCODE39 = Истина;
	ПечатьШтрихкодаQR = Истина;
	
	Отправляет1СEmail = Ложь;
	Отправляет1СSMS   = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Источник = "ПодключаемоеОборудование" Тогда
		// Отладочное
		Лог = "Получено внешнее событие
		      |Источник = " + Источник + "
		      |Событие = "  + ИмяСобытия;
		ОбновитьОтображениеДанных();
	
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1));
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1));
			КонецЕсли;
			ПолученыШтрихкоды(Данные);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				ПолученКодКарты(Параметр[0], Параметр[0]);
			Иначе
				ПолученКодКарты(Параметр[0], Параметр[1][1]);
			КонецЕсли;
			
		ИначеЕсли ИмяСобытия = "RFID" Тогда
			
			Для Каждого Элемент Из Параметр Цикл
				МеткаRFID = МеткиRFID.Добавить();
				ЗаполнитьЗначенияСвойств(МеткаRFID, Элемент);
			КонецЦикла;
				
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолученыШтрихкоды(МассивДанных)

	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: ПолученыШтрихкоды" + Символы.ПС;
	Сч = 0;

	ТаблицаЗагрузкиИзТСД.Очистить();
	ЧислоКодов = МассивДанных.Количество();
	Для каждого СтрокаЗагрузки Из МассивДанных Цикл
		Сч = Сч + 1;
		НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
		НоваяСтрока.Штрихкод   = СтрокаЗагрузки.Штрихкод;
		НоваяСтрока.Количество = СтрокаЗагрузки.Количество;
		Лог = Лог + "Штрихкод" + ?(ЧислоКодов > 1,"(" + Сч + ")", "") + ": " + СтрокаЗагрузки.Штрихкод;
		Лог = Лог + " Количество: " + СтрокаЗагрузки.Количество + Символы.ПС;
	КонецЦикла;
	Лог = Лог + "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;

	ДанныеСканера = МассивДанных[0].Штрихкод; // Выводим считанные данные
	ТипШтрихкода  = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(МассивДанных[0].Штрихкод);
	
	ОбновитьОтображениеДанных();

	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ПолученКодКарты(КодКарты, ДанныеДорожек)

	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(), "ДЛФ=T") + " Имя команды: ПолученКодКарты" + Символы.ПС;
	Лог = Лог + "Код карты: " + КодКарты + Символы.ПС;
	Если ТипЗнч(ДанныеДорожек) = Тип("Массив") Тогда
		Для НомерДорожки = 1 По ДанныеДорожек.Количество() Цикл
			НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
			Лог = Лог + "ДанныеДорожки(" + НомерДорожки + "): " + ДанныеДорожек[НомерДорожки - 1] + Символы.ПС;
		КонецЦикла;
		// Выводим считанные данные
		Дорожка1 = ?(ДанныеДорожек.Количество() > 0, ДанныеДорожек[0], "");
		Дорожка2 = ?(ДанныеДорожек.Количество() > 1, ДанныеДорожек[1], "");
		Дорожка3 = ?(ДанныеДорожек.Количество() > 2, ДанныеДорожек[2], "");
		
	ИначеЕсли ТипЗнч(ДанныеДорожек) = Тип("Строка") Тогда
		Дорожка1 = ДанныеДорожек;
		Лог = Лог + "ДанныеДорожек: " + ДанныеДорожек + Символы.ПС;
	КонецЕсли;
	
	Лог = Лог + "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
	ОбновитьОтображениеДанных();

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ДанныеСканераПриИзменении(Элемент)
	
	ТипШтрихкода  = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(ДанныеСканера);
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.НачатьОтключениеВсегоОборудования();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииНаСервере

&НаСервере
Процедура ПолучитьОборудованиеРМНаСервере()

	Отбор = Новый Структура("РабочееМесто", РабочееМесто);
	ОборудованиеРМ = Справочники.ПодключаемоеОборудование.Выбрать(,, Отбор);
	Пока ОборудованиеРМ.Следующий() Цикл
		Если НЕ ОборудованиеРМ.УстройствоИспользуется Или ОборудованиеРМ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		_ТипОборудования = ОборудованиеРМ.ТипОборудования;
		Если _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода Тогда
			СканерШК = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных Тогда
			ТСД = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт Тогда
			СчитывательМК = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID Тогда
			СчитывательRFID = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток Тогда
			ПринтерЭтикеток = ОборудованиеРМ.Ссылка;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОчиститьКэш()
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьТекущееТО(ИмяТипа)
	Если ИмяТипа = "ТСД" Тогда
		Оборудование = ТСД;
	ИначеЕсли ИмяТипа = "Сканер" Тогда
		Оборудование = СканерШК;
	ИначеЕсли ИмяТипа = "RFID" Тогда
		Оборудование = СчитывательRFID;
	ИначеЕсли ИмяТипа = "СМК" Тогда
		Оборудование = СчитывательМК;
	ИначеЕсли ИмяТипа = "ПЭ" Тогда
		Оборудование = ПринтерЭтикеток;
	КонецЕсли;
	Возврат Оборудование;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура РабочееМестоПриИзменении(Элемент)

	// Заполняем оборудование рабочего места.
	ПолучитьОборудованиеРМНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьУстройствоВыполнить_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: Подключить - Завершение" + Символы.ПС;
	ОписаниеОшибки = ?(РезультатВыполнения.Результат, "Команда выполнена успешно!", РезультатВыполнения.ОписаниеОшибки);
	
	// Пишем лог
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьУстройствоВыполнить(Команда)

	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ТекущийЭлемент.Имя, "Подключить", "");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьУстройствоВыполнить_Завершение", ЭтотОбъект);                                 
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(ОповещенияПриПодключении, УникальныйИдентификатор, Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьУстройствоВыполнить_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: Отключить - Завершение" + Символы.ПС;
	ОписаниеОшибки = ?(РезультатВыполнения.Результат, "Команда выполнена успешно!", РезультатВыполнения.ОписаниеОшибки);
	
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьУстройствоВыполнить(Команда)
	
	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ТекущийЭлемент.Имя,"Отключить","");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ОтключитьУстройствоВыполнить_Завершение", ЭтотОбъект);                                 
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(ОповещенияПриПодключении, УникальныйИдентификатор, Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУстройствоВыполнить(Команда)
	
	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ТекущийЭлемент.Имя,"Настроить","");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования(Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКэшВыполнить()
	
	ОчиститьКэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестВыполнить_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: ТестУстройства - Завершение" + Символы.ПС;
	ОписаниеОшибки = ?(РезультатВыполнения.Результат, "Команда выполнена успешно!", РезультатВыполнения.ОписаниеОшибки);
	
	Если РезультатВыполнения.ВыходныеПараметры.Количество() > 1 Тогда
		ОписаниеОшибки = РезультатВыполнения.ВыходныеПараметры[1];
	Иначе
		ОписаниеОшибки = "";
	КонецЕсли;

	Если РезультатВыполнения.Результат Тогда
		ОписаниеОшибки = "Команда выполнена успешно." + Символы.ПС + ОписаниеОшибки;
	Иначе
		ОписаниеОшибки = "Тест не был пройден." + + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;
	
	// Пишем лог
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестВыполнить(Команда)
	
	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ТекущийЭлемент.Имя,"Тест","");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Оборудование);
	Если НЕ ПараметрыУстройства.Количество() > 0  Тогда
		ОписаниеОшибки = НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	Иначе
		ВходныеПараметры = Неопределено;
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ТестВыполнить_Завершение", ЭтотОбъект);       
		МенеджерОборудованияКлиент.НачатьВыполнениеДополнительнойКоманды(ОповещениеПриЗавершении, "CheckHealth", ВходныеПараметры, Оборудование, ПараметрыУстройства)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеПодключенноеОборудованиеВыполнить()
	
	МенеджерОборудованияКлиент.НачатьОтключениеВсегоОборудования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоставляемыеДрайвера(Команда)
	
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновлениеБиблиотеки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыRFID

&НаКлиенте
Процедура RFID_ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Операция выполнена успешно:'") + РезультатВыполнения.ИдентификаторУстройства);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ОткрытьСессию(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОткрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗакрытьСессию(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗакрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);

КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗаписатьВМеткуEPC(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		ПараметрыЗаписи = МенеджерОборудованияКлиент.ПараметрыЗаписиМеткиRFID();
		ПараметрыЗаписи.TID = ТекущаяСрока.TID;
		ПараметрыЗаписи.EPC = ТекущаяСрока.EPC;
		ПараметрыЗаписи.БанкПамяти = "EPC";
		ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(ТекущаяСрока.GTIN, ТекущаяСрока.СерийныйНомер);
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗаписатьВМеткуGTINSerial(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		ПараметрыЗаписи = МенеджерОборудованияКлиент.ПараметрыЗаписиМеткиRFID();
		ПараметрыЗаписи.TID = ТекущаяСрока.TID;
		ПараметрыЗаписи.EPC = ТекущаяСрока.EPC;
		ПараметрыЗаписи.БанкПамяти = "EPC";
		ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(ТекущаяСрока.GTIN, ТекущаяСрока.СерийныйНомер);
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗаписатьВМеткуUserMemory(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		ПараметрыЗаписи = МенеджерОборудованияКлиент.ПараметрыЗаписиМеткиRFID();
		ПараметрыЗаписи.TID = ТекущаяСрока.TID;
		ПараметрыЗаписи.EPC = ТекущаяСрока.EPC;
		ПараметрыЗаписи.БанкПамяти = "USER";
		ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.ПреобразоватьСтрокуВHEX(ТекущаяСрока.UserMemory);
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура RFID_ГенерироватьСерийныйНомер(Команда)
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		TID = ТекущаяСрока.TID;
		EPC = ТекущаяСрока.EPC;
		
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПолучитьСерийныйНомерПоTID(TID, EPC);
		Если РезультатВыполнения.Результат Тогда
			ТекущаяСрока.СерийныйНомер = Формат(РезультатВыполнения.СерийныйНомер, "ЧВН=; ЧГ=");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыТСД

&НаКлиенте
Процедура ТСД_ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат И РезультатВыполнения.Свойство("ТаблицаТоваров") Тогда
		ТаблицаЗагрузкиИзТСД.Очистить();
		Для Каждого Позиция Из РезультатВыполнения.ТаблицаТоваров Цикл
			НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
			НоваяСтрока.Штрихкод   = Позиция.Штрихкод;
			НоваяСтрока.Количество = Позиция.Количество;
			НоваяСтрока.ШтрихкодУпаковки = Позиция.ШтрихкодУпаковки;
			НоваяСтрока.МаркаАлкогольнойПродукции = ?(Позиция.Свойство("ШтрихкодМаркиАлкогольнойПродукции"), Позиция.ШтрихкодМаркиАлкогольнойПродукции, "");
			НоваяСтрока.СерийныйНомерАлкогольнойПродукции = ?(Позиция.Свойство("СерийныйНомерАлкогольнойПродукции"), Позиция.СерийныйНомерАлкогольнойПродукции, "");
		КонецЦикла;
	КонецЕсли;
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция выполнена успешна.'"), РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Элементы.РаботаСТСД.Доступность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТСД_ОчиститьТаблицу(Команда)
	
	ТаблицаЗагрузкиИзТСД.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗагрузитьБезПодключения(Команда)
	
	Элементы.РаботаСТСД.Доступность = Ложь;
	
	ТаблицаЗагрузкиИзТСД.Очистить();
	ОповещенияПриЗагрузкеИзТСД = Новый ОписаниеОповещения("ТСД_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗагрузкеИзТСД, УникальныйИдентификатор, ТСДСворачиватьДанныеПриЗагрузке);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ВыгрузитьБезПодключенияВыполнить(Команда)
	
	Элементы.РаботаСТСД.Доступность = Ложь;
	
	ТаблицаТСД = Новый Массив;
	
	Для Каждого текСтрока Из ТаблицаЗагрузкиИзТСД Цикл
		
		ТоварнаяПозиция = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиВыгрузкиВТСД();
		ТоварнаяПозиция.Штрихкод                   = текСтрока.Штрихкод;
		ТоварнаяПозиция.Номенклатура               = текСтрока.Номенклатура;
		ТоварнаяПозиция.ЕдиницаИзмерения           = текСтрока.ЕдиницаИзмерения;
		ТоварнаяПозиция.ХарактеристикаНоменклатуры = текСтрока.ХарактеристикаНоменклатуры;
		ТоварнаяПозиция.СерияНоменклатуры          = текСтрока.СерияНоменклатуры;
		ТоварнаяПозиция.Качество                   = текСтрока.Качество;
		ТоварнаяПозиция.Цена                       = текСтрока.Цена;
		ТоварнаяПозиция.Количество                 = текСтрока.Количество;
		ТоварнаяПозиция.ШтрихкодУпаковки           = текСтрока.ШтрихкодУпаковки;
		
		ТаблицаТСД.Добавить(ТоварнаяПозиция);
	КонецЦикла;
	
	ОповещенияПриВыгрузкеВТСД = Новый ОписаниеОповещения("ТСД_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыгрузкуДанныеВТСД(ОповещенияПриВыгрузкеВТСД, УникальныйИдентификатор, ТаблицаТСД, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ОчиститьТовары(Команда)
	
	Элементы.РаботаСТСД.Доступность = Ложь;
	
	ОповещенияПриЗавершении = Новый ОписаниеОповещения("ТСД_ОперацияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОчисткуДанныеВТСД(ОповещенияПриЗавершении, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗаполнитьБазуДемоДанными(Команда)
	
	ТСД_ЗаполнитьДемоДанные(50);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗаполнитьБазуДемоДанными1000(Команда)
	
	ТСД_ЗаполнитьДемоДанные(1000);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗаполнитьДемоДанные(Количество)
	
	// Формирование тестовых данных.
	Для Итератор = 1 По Количество Цикл
		Строка = ТаблицаЗагрузкиИзТСД.Добавить();
		Строка.Штрихкод = ТекущийПЛУ;
		Строка.ШтрихкодУпаковки = "100000000";
		Строка.Номенклатура = "Наименование товара " + Строка(ТекущийПЛУ);	
		Строка.ЕдиницаИзмерения = "Штука";
		Строка.ХарактеристикаНоменклатуры = "Цвет" + Строка(ТекущийПЛУ);
		Строка.СерияНоменклатуры  = "Серия" + Строка(ТекущийПЛУ); 
		Строка.Качество  = "Качество"; 
		Строка.Цена = ТекущийПЛУ + 11.20;
		Строка.Количество = ТекущийПЛУ;
		ТекущийПЛУ = ТекущийПЛУ + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыПринтерЭтикеток

&НаСервере
Функция ПолучитьРезультатВыполненияЗапроса(СКД)
	
	МассивНоменклатуры = Новый Массив;
	МассивНоменклатуры.Добавить(НоменклатураДляПечатиЭтикетки);
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	Настройки = Компоновщик.Настройки;
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МассивНоменклатуры"));
	Параметр.Значение = МассивНоменклатуры;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПКД = Новый ПроцессорКомпоновкиДанных;
    ПКД.Инициализировать(КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")));
	
	ТЗ = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТЗ);
    ПроцессорВывода.Вывести(ПКД);

    Возврат ТЗ;
	
КонецФункции

&НаКлиенте
Процедура ПЭ_ПечатьЗавершение(РезультатПечати, ДополнительныеПараметры) Экспорт
	
	Если РезультатПечати.Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Печать завершена.'"));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПечати.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПЭ_Печать(Команда)
	
	//ДанныеЗаполнены = Истина;
	//
	//Если Не ЗначениеЗаполнено(Этикетка) Тогда
	//	ТекстСообщения = НСтр("ru='Не выбрана этикетка для печати.'");
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	ДанныеЗаполнены = Ложь;
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(НоменклатураДляПечатиЭтикетки) Тогда
	//	ТекстСообщения = НСтр("ru='Не выбрана номенклатура для печати этикетки.'");
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	ДанныеЗаполнены = Ложь;
	//КонецЕсли;
	//
	//Если ДанныеЗаполнены Тогда
	//	ДанныеДляПечати = СформироватьДанныеДляПечати();
	//	ОписаниеОповещениеПриЗавершенииПечати = Новый ОписаниеОповещения("ПЭ_ПечатьЗавершение", ЭтотОбъект);
	//	МенеджерОборудованияКлиент.НачатьПечатьЭтикеток(ОписаниеОповещениеПриЗавершенииПечати, УникальныйИдентификатор, ДанныеДляПечати.XMLОписаниеМакета, ДанныеДляПечати.МассивЭтикеток, ПринтерЭтикеток);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПЭ_Инициализация(Команда)
	
	Если ПринтерЭтикеток.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Принтер печати этикеток не выбран.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершенииПечати = Новый ОписаниеОповещения("ПЭ_ПечатьЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьИнициализацияПринтераЭтикеток(ОписаниеОповещениеПриЗавершенииПечати, УникальныйИдентификатор, ПринтерЭтикеток);
	
КонецПроцедуры

#КонецОбласти
