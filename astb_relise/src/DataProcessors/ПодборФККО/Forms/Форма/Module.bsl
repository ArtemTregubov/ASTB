
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДеревоДляПодбора();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДляПодбора()
	
	//чтение данных из макета
	ВременныйФайлФККО 	= ПолучитьИмяВременногоФайла("xml");
	МакетДанных 		= Справочники.ФККО.ПолучитьМакет(Параметры.ИмяМакета);
	МакетДанных.Записать(ВременныйФайлФККО);
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ВременныйФайлФККО);
	
	ДеревоДанных = РеквизитФормыВЗначение("ДеревоДляПодбора");
	ДеревоДанных.Строки.Очистить();
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если Чтение.ЛокальноеИмя = "fkko_item" Тогда
				
				Код          		= СокрЛП(Чтение.ЗначениеАтрибута("fkko_code"));
				Описание 			= СокрЛП(Чтение.ЗначениеАтрибута("fkko_name"));
				КодРодителя 		= СокрЛП(Чтение.ЗначениеАтрибута("fkko_group_code"));
				АгрегатноеСостояние	= СокрЛП(Чтение.ЗначениеАтрибута("fkko_aggregate_state"));
				КлассОпасности 		= СокрЛП(Чтение.ЗначениеАтрибута("fkko_danger_class"));
				
				Если НЕ ЗначениеЗаполнено(КодРодителя) Тогда //это основная ветка дерева
					
					КорневаяВетка = ДеревоДанных.Строки.Добавить();
					КорневаяВетка.Использовать 	= 0;
					КорневаяВетка.Код 			= Код;
					КорневаяВетка.Описание 		= Описание;
					
				Иначе
					
					Если СтрДлина(АгрегатноеСостояние) = 1 Тогда //это подгруппагруппа
						НайденнаяСтрока = ДеревоДанных.Строки.Найти(КодРодителя,"Код",Истина);
						Если НайденнаяСтрока = Неопределено Тогда
							НоваяСтрока = КорневаяВетка.Строки.Добавить();
						Иначе
							НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
						КонецЕсли;	
						НоваяСтрока.Использовать 	= 0;
						НоваяСтрока.Код 			= Код;
						НоваяСтрока.Описание 		= Описание;
					Иначе //это элемент ФККО
						НайденнаяСтрока = ДеревоДанных.Строки.Найти(КодРодителя,"Код",Истина); 
						Если НайденнаяСтрока = Неопределено Тогда
							НоваяСтрока = КорневаяВетка.Строки.Добавить();
						Иначе
							НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
						КонецЕсли;
						НоваяСтрока.Использовать 		= 0;
						НоваяСтрока.Код 				= Код;
						НоваяСтрока.Описание 			= Описание;
						НоваяСтрока.АгрегатноеСостояние = АгрегатноеСостояние;
						НоваяСтрока.КлассОпасности 		= ПолучитьКлассОпасности(КлассОпасности);
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	УдалитьФайлы(ВременныйФайлФККО);
	
	ЗначениеВРеквизитФормы(ДеревоДанных,"ДеревоДляПодбора");
	
КонецПроцедуры	

Функция ПолучитьКлассОпасности(КлассОпасности)
	
	СоответствияКлассовОпасности = Новый Соответствие;
	СоответствияКлассовОпасности.Вставить("I", 		Перечисления.КлассыОпасности.I);
	СоответствияКлассовОпасности.Вставить("II", 	Перечисления.КлассыОпасности.II);
	СоответствияКлассовОпасности.Вставить("III", 	Перечисления.КлассыОпасности.III);
	СоответствияКлассовОпасности.Вставить("IV", 	Перечисления.КлассыОпасности.IV);
	СоответствияКлассовОпасности.Вставить("V", 		Перечисления.КлассыОпасности.V);
	
	Возврат СоответствияКлассовОпасности.Получить(КлассОпасности);
	
КонецФункции	

&НаКлиенте
Процедура ОК(Команда)
	
	ЗаписатьДанныеВСправочник();
	
	Закрыть(КодВозвратаДиалога.ОК);
	
	ОповеститьОВыборе(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВСправочник()
	
	ДеревоДанных = РеквизитФормыВЗначение("ДеревоДляПодбора");
	
	Для Каждого КорневаяСтрока Из ДеревоДанных.Строки Цикл
		
		ФККО = Справочники.ФККО.НайтиПоКоду(КорневаяСтрока.Код);
		
		Если ФККО.Пустая() Тогда //создаем новый
			
			ФККО = Справочники.ФККО.СоздатьГруппу();
			ФККО.Код 		= КорневаяСтрока.Код;
			ФККО.Описание 	= КорневаяСтрока.Описание;
			ФККО.Записать();
			ФККО = ФККО.Ссылка;
			
		КонецЕсли;	
		
		ОбойтиДеревоРекурсивно(ФККО,КорневаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбойтиДеревоРекурсивно(ГруппаФККО,ГоловнаяСтрока)
	
	Для Каждого ТекущаяСтрока Из ГоловнаяСтрока.Строки Цикл
		
		Если ТекущаяСтрока.Использовать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ФККО = Справочники.ФККО.НайтиПоКоду(ТекущаяСтрока.Код);
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.АгрегатноеСостояние) Тогда // это группа
			
			Если ФККО.Пустая() Тогда //создаем новый
				
				ФККО = Справочники.ФККО.СоздатьГруппу();
				ФККО.Код 		= ТекущаяСтрока.Код;
				ФККО.Описание 	= ТекущаяСтрока.Описание;
				ФККО.Родитель 	= ГруппаФККО;
				ФККО.Записать();
				ФККО = ФККО.Ссылка;
				
			КонецЕсли;	
			
			ОбойтиДеревоРекурсивно(ФККО,ТекущаяСтрока);
			
		Иначе
			
			Если ФККО.Пустая() Тогда //создаем новый
				
				ФККО = Справочники.ФККО.СоздатьЭлемент();
				ФККО.Код 					= ТекущаяСтрока.Код;
				ФККО.Описание 				= ТекущаяСтрока.Описание;
				ФККО.Родитель 				= ГруппаФККО;
				ФККО.КлассОпасности 		= ТекущаяСтрока.КлассОпасности;
				ФККО.АгрегатноеСостояние 	= ПолучитьАгрегатноеСостояние(ТекущаяСтрока.АгрегатноеСостояние);
				ФККО.Записать();
				ФККО = ФККО.Ссылка;
				
			КонецЕсли;			
			
		КонецЕсли;	
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАгрегатноеСостояние(АгрегатноеСостояние)
	
	АгрегатноеСостояниеСправочник = Справочники.АгрегатныеСостояния.НайтиПоНаименованию(АгрегатноеСостояние);
	
	Если АгрегатноеСостояниеСправочник.Пустая() ТОгда
		
		АгрегатноеСостояниеСправочник = Справочники.АгрегатныеСостояния.СоздатьЭлемент();
		АгрегатноеСостояниеСправочник.Наименование = АгрегатноеСостояние;
		АгрегатноеСостояниеСправочник.УстановитьНовыйКод();
		АгрегатноеСостояниеСправочник.Записать();
		АгрегатноеСостояниеСправочник = АгрегатноеСостояниеСправочник.Ссылка;
		
	КонецЕсли;
	
	Возврат АгрегатноеСостояниеСправочник;
	
КонецФункции	

&НаКлиенте
Процедура ДеревоДляПодбораИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоДляПодбора.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ПроцедурыРаботыСНормамиКлиент.ОбходДереваВверх(ТекущиеДанные);
		ПроцедурыРаботыСНормамиКлиент.ОбходДереваВниз(ТекущиеДанные);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДеревоДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоДанных()
	
	ЭлементыДерева = ЭтаФорма.ДеревоДляПодбора.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ЭтаФорма.Элементы.ДеревоДляПодбора.Развернуть(ЭлементДерева.ПолучитьИдентификатор(),Ложь);
	КонецЦикла;
	
КонецПроцедуры

