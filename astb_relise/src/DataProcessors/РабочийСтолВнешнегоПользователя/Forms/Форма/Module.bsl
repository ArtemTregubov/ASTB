
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
	
		ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
	
		Объект.ФизическоеЛицо = ВнешнийПользователь.ОбъектАвторизации;
		
		ЭтаФорма.Элементы.ФизическоеЛицо.Видимость = Ложь;
		
	Иначе
		
		ЭтаФорма.Элементы.ФизическоеЛицо.Видимость = Истина;
		
	КонецЕсли;
	
	//по-умолчанию
	КатегорияОбращения = Справочники.КатегорииОбращенияНаСклад.ИзменениеКонтактнойИнформации;
	
	ПредставлениеСотрудника = СформироватьПредставлениеСотрудника();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопок()
	
	ИспользоватьОТиТБ = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуОТиТБ");
	
	Элементы.Инструктажи.Доступность 				= ИспользоватьОТиТБ;
	Элементы.ПроверкаЗнаний.Доступность 			= ИспользоватьОТиТБ;
	Элементы.МедицинскиеОбследования.Доступность 	= ИспользоватьОТиТБ;
	
КонецПроцедуры	

&НаСервере
Функция СформироватьПредставлениеСотрудника()
	
	Если НЕ ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		Возврат "";
	КонецЕсли;
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		ПредставлениеВнешнегоПользователя = Сотрудник.Владелец.ПредставлениеВнешнегоПользователя;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(, ФизическоеЛицо = &ФизическоеЛицо) КАК ФИОФизическихЛицСрезПоследних";
		
		Запрос.УстановитьПараметр("ФизическоеЛицо",Объект.ФизическоеЛицо);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Фамилия 	= "";
			Имя 		= "";
			Отчество 	= "";
		Иначе
			ТаблицаЗапроса = Результат.Выгрузить();
			Фамилия 	= ТаблицаЗапроса[0].Фамилия;
			Имя 		= ТаблицаЗапроса[0].Имя;
			Отчество 	= ТаблицаЗапроса[0].Отчество;
		КонецЕсли;
		
		Если ПредставлениеВнешнегоПользователя = Перечисления.ПредставлениеВнешнегоПользователя.ТабельныйНомер Тогда
			
			Возврат "Табельный №: " + СокрЛП(Сотрудник.ТабельныйНомер);
			
		Иначе
			
			Возврат Фамилия + " " + Имя + " " + Отчество + " (табельный №: " + СокрЛП(Сотрудник.ТабельныйНомер) + ")";
			
		КонецЕсли;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура Выход(Команда)
	
	ЗавершитьРаботуСистемы(ЛОЖЬ);
	
КонецПроцедуры

&НаСервере
Процедура ЗапонитьЛичныеДанные()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;	
	
	НайденныеСтрокиСТелефоном = Объект.ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонФизическиеЛица));
	Если НайденныеСтрокиСТелефоном.Количество() = 0 Тогда
		ПредставлениеТелефона = "не задан";
	Иначе
		ПредставлениеТелефона = НайденныеСтрокиСТелефоном[0].Представление;
	КонецЕсли;	
	
	НайденныеСтрокиСТелефоном = Объект.ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица));
	Если НайденныеСтрокиСТелефоном.Количество() = 0 Тогда
		ПредставлениеПочты = "не задан";
	Иначе
		ПредставлениеПочты = НайденныеСтрокиСТелефоном[0].Представление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сотрудник.МестоХраненияСИЗ) Тогда
	    ПредставлениеЯчейки = Сотрудник.МестоХраненияСИЗ.Код;
	Иначе
		ПредставлениеЯчейки = "не задан";
	КонецЕсли;
	
	ЭтаФорма.Элементы.НадписьТелефон.Заголовок 	= ПредставлениеТелефона;
	ЭтаФорма.Элементы.НадписьПочта.Заголовок   	= ПредставлениеПочты;
	ЭтаФорма.Элементы.НадписьЯчейка.Заголовок 	= ПредставлениеЯчейки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Подразделение,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.Должность,
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.РабочееМесто
	|ИЗ
	|	РегистрСведений.ОсновноеМестоРаботыСотрудника.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК ОсновноеМестоРаботыСотрудникаСрезПоследних
	|ГДЕ
	|	ОсновноеМестоРаботыСотрудникаСрезПоследних.ОсновноеМестоРаботы";
	
	Запрос.УстановитьПараметр("Период",		ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник",	Сотрудник);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ЭтаФорма.Элементы.НадписьОрганизация.Заголовок 		= "";
		ЭтаФорма.Элементы.НадписьДолжность.Заголовок 		= "";
		ЭтаФорма.Элементы.НадписьПодразделение.Заголовок 	= "";
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЭтаФорма.Элементы.НадписьОрганизация.Заголовок 		= Сотрудник.Владелец.Наименование;
		ЭтаФорма.Элементы.НадписьДолжность.Заголовок 		= Выборка.Должность.Наименование;
		ЭтаФорма.Элементы.НадписьПодразделение.Заголовок 	= Выборка.Подразделение.Наименование;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияАнтропометрическихСвойств.ВидСвойства КАК ВидСвойства,
	|	ЗначенияАнтропометрическихСвойств.ЗначениеСвойства КАК ЗначениеСвойства
	|ПОМЕСТИТЬ ВТ_Антропометрия
	|ИЗ
	|	РегистрСведений.ЗначенияАнтропометрическихСвойств КАК ЗначенияАнтропометрическихСвойств
	|ГДЕ
	|	ЗначенияАнтропометрическихСвойств.Сотрудник = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыАнтропометрическихСвойств.Ссылка КАК ВидСвойства,
	|	ЕСТЬNULL(ВТ_Антропометрия.ЗначениеСвойства, ""не задан"") КАК ЗначениеСвойства
	|ИЗ
	|	Справочник.ВидыАнтропометрическихСвойств КАК ВидыАнтропометрическихСвойств
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Антропометрия КАК ВТ_Антропометрия
	|		ПО ВидыАнтропометрическихСвойств.Ссылка = ВТ_Антропометрия.ВидСвойства";
	
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРазмеров = РеквизитФормыВЗначение("ТаблицаАнтропометрии");
	ТаблицаРазмеров.Очистить();
	
	НоваяСтрока = ТаблицаРазмеров.Добавить();
	НоваяСтрока.РазмерГоловногоУбора 	= ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.РазмерГоловногоУбора))[0].ЗначениеСвойства;
	НоваяСтрока.РазмерОбуви 			= ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.РазмерОбуви))[0].ЗначениеСвойства;
	НоваяСтрока.РазмерОдежды 			= ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.РазмерОдежды))[0].ЗначениеСвойства;
	НоваяСтрока.РазмерПерчаток 			= ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.РазмерПерчаток))[0].ЗначениеСвойства;
	НоваяСтрока.Рост 					= ТаблицаЗапроса.НайтиСтроки(Новый Структура("ВидСвойства",Справочники.ВидыАнтропометрическихСвойств.Рост))[0].ЗначениеСвойства;
	
	ЗначениеВРеквизитФормы(ТаблицаРазмеров,"ТаблицаАнтропометрии");	
	
	ТабСкладовВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьТаблицуСкладовВыдачи(Сотрудник);
	
	ТаблицаСкладов = РеквизитФормыВЗначение("ТаблицаСкладовВыдачи");
	ТаблицаСкладов.Очистить();
	
	Для Каждого СтрокаТабСкладовВыдачи Из ТабСкладовВыдачи Цикл
		
		НоваяСтрока 				= ТаблицаСкладов.Добавить();
		НоваяСтрока.Склад 			= СтрокаТабСкладовВыдачи.Склад.Наименование;
		НоваяСтрока.ВидВыдачиСИЗ 	= СтрокаТабСкладовВыдачи.ВидВыдачиСИЗ;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаСкладов,"ТаблицаСкладовВыдачи");
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЛичныеДанные(Команда)
	
	ЗапонитьЛичныеДанные();
	
	ПерейтиВРаздел("ГруппаЛичныеДанные");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоЧистке()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	СпецодеждаВЧистке.Очистить();
	
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("СредстваЗащитыВЧистке");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.СпецодеждаВЧистке);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СредстваЗащитыВЧистке(Команда)
	
	ЗаполнитьДанныеПоЧистке();
	
	ПерейтиВРаздел("ГруппаСредстваЗащитыВЧистке");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбратнаяСвязь(Команда)
	
	ЗаполнитьОбращенияСотрудника();
	
	ПерейтиВРаздел("ГруппаОбратнаяСвязь");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыданныеСредстваЗащиты()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ВыданныеСредстваЗащиты.Очистить();
	
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("ВыданныеСредстваЗащиты");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",ТекущийОбъект.ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.ВыданныеСредстваЗащиты);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыданныеСредстваЗащиты(Команда)
	
	ЗаполнитьВыданныеСредстваЗащиты();
	
	ПерейтиВРаздел("ГруппаВыданныеСредстваЗащиты");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикВыдачи()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГрафикВыдачиСотруднику.Очистить();
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	Если НЕ ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;	
		
	ТабСкладовВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьТаблицуСкладовВыдачи(Сотрудник);
	
	Для Каждого СтрокаТаблицыСкладовВыдачи Из ТабСкладовВыдачи Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицыСкладовВыдачи.Получатель) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыСкладовВыдачи.Получатель = Сотрудник;
		
	КонецЦикла;	
	
	НаборыВнешнихДанных = Новый Структура;
	НаборыВнешнихДанных.Вставить("СкладыВыдачи",ТабСкладовВыдачи);
		
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("ГрафикВыдачиСотруднику");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",ТекущийОбъект.ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,НаборыВнешнихДанных,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.ГрафикВыдачиСотруднику);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВыдачи(Команда)
	
	ЗаполнитьГрафикВыдачи();
	
	ПерейтиВРаздел("ГруппаГрафикВыдачи");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбеспеченностьСотрудника()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбеспеченностьСотрудника.Очистить();
	
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("ОбеспеченностьСотрудника");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",ТекущийОбъект.ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.ОбеспеченностьСотрудника);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспеченность(Команда)
	
	ЗаполнитьОбеспеченностьСотрудника();
	
	ПерейтиВРаздел("ГруппаОбеспеченность");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнструктажи()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//график
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ГрафикПрохожденияИнструктажей.Очистить();
	
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("ГрафикПрохожденияИнструктажей");
	
	ТаблицаДляВывода = ПолучитьГрафикПрохожденияИнструктажей();
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	НаборыВнешнихДанных = Новый Структура;
	НаборыВнешнихДанных.Вставить("ТаблицаДляВывода",ТаблицаДляВывода);
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,НаборыВнешнихДанных,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.ГрафикПрохожденияИнструктажей);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	//результаты
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ПройденныеИнструктажи.Очистить();
	
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("ПройденныеИнструктажи");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",ТекущийОбъект.ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.ПройденныеИнструктажи);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьГрафикПрохожденияИнструктажей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник,
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ ВТ_ЗРМ
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(, Сотрудник = &Сотрудник) КАК ЗанятыеРабочиеМестаОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнструктажиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ИнструктажиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	ИнструктажиСотрудниковСрезПоследних.Должность КАК Должность,
	|	ИнструктажиСотрудниковСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	ИнструктажиСотрудниковСрезПоследних.Инструктаж КАК Инструктаж,
	|	ИнструктажиСотрудниковСрезПоследних.ДатаИнструктажа КАК ДатаИнструктажа,
	|	ИнструктажиСотрудниковСрезПоследних.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТ_ПервичныеИнструктажи
	|ИЗ
	|	РегистрСведений.ИнструктажиСотрудников.СрезПоследних(, ) КАК ИнструктажиСотрудниковСрезПоследних
	|ГДЕ
	|	ИнструктажиСотрудниковСрезПоследних.Инструктаж.ВидИнструктажа = ЗНАЧЕНИЕ(Перечисление.ВидыИнструктажей.Первичный)
	|	И ИнструктажиСотрудниковСрезПоследних.Сотрудник = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнструктажиСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ИнструктажиСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	ИнструктажиСотрудниковСрезПоследних.Должность КАК Должность,
	|	ИнструктажиСотрудниковСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	ИнструктажиСотрудниковСрезПоследних.Инструктаж КАК Инструктаж,
	|	ИнструктажиСотрудниковСрезПоследних.ДатаИнструктажа КАК ДатаИнструктажа,
	|	ИнструктажиСотрудниковСрезПоследних.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТ_ПовторныеИнструктажи
	|ИЗ
	|	РегистрСведений.ИнструктажиСотрудников.СрезПоследних(, ) КАК ИнструктажиСотрудниковСрезПоследних
	|ГДЕ
	|	ИнструктажиСотрудниковСрезПоследних.Инструктаж.ВидИнструктажа = ЗНАЧЕНИЕ(Перечисление.ВидыИнструктажей.Повторный)
	|	И ИнструктажиСотрудниковСрезПоследних.Сотрудник = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриказыНаИнструктажиСрезПоследних.Подразделение КАК Подразделение,
	|	ПриказыНаИнструктажиСрезПоследних.Должность КАК Должность,
	|	ПриказыНаИнструктажиСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	ПриказыНаИнструктажиСрезПоследних.Инструктаж КАК Инструктаж,
	|	ПриказыНаИнструктажиСрезПоследних.Периодичность КАК Периодичность,
	|	ПриказыНаИнструктажиСрезПоследних.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТ_ПриказыНаИнструктажи
	|ИЗ
	|	РегистрСведений.ПриказыНаИнструктажи.СрезПоследних(, ) КАК ПриказыНаИнструктажиСрезПоследних
	|ГДЕ
	|	ПриказыНаИнструктажиСрезПоследних.Проводить
	|	И ПриказыНаИнструктажиСрезПоследних.Инструктаж.ВидИнструктажа = ЗНАЧЕНИЕ(Перечисление.ВидыИнструктажей.Повторный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗРМ.Сотрудник КАК Сотрудник,
	|	ВТ_ЗРМ.Подразделение КАК Подразделение,
	|	ВТ_ЗРМ.Должность КАК Должность,
	|	ВТ_ЗРМ.РабочееМесто КАК РабочееМесто,
	|	ВТ_ПриказыНаИнструктажи.Инструктаж КАК Инструктаж,
	|	ВТ_ПриказыНаИнструктажи.Периодичность КАК Периодичность,
	|	ВТ_ПриказыНаИнструктажи.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТ_ДействующиеИнструктажи
	|ИЗ
	|	ВТ_ЗРМ КАК ВТ_ЗРМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПриказыНаИнструктажи КАК ВТ_ПриказыНаИнструктажи
	|		ПО (ВТ_ЗРМ.Подразделение = ВТ_ПриказыНаИнструктажи.Подразделение
	|				ИЛИ ВТ_ПриказыНаИнструктажи.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|			И (ВТ_ЗРМ.Должность = ВТ_ПриказыНаИнструктажи.Должность
	|				ИЛИ ВТ_ПриказыНаИнструктажи.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка))
	|			И (ВТ_ЗРМ.РабочееМесто = ВТ_ПриказыНаИнструктажи.РабочееМесто
	|				ИЛИ ВТ_ПриказыНаИнструктажи.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка))
	|ГДЕ
	|	НЕ ВТ_ПриказыНаИнструктажи.Инструктаж ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДействующиеИнструктажи.Сотрудник КАК Сотрудник,
	|	ВТ_ДействующиеИнструктажи.Подразделение КАК Подразделение,
	|	ВТ_ДействующиеИнструктажи.Должность КАК Должность,
	|	ВТ_ДействующиеИнструктажи.РабочееМесто КАК РабочееМесто,
	|	ВТ_ДействующиеИнструктажи.Инструктаж КАК Инструктаж,
	|	ВТ_ДействующиеИнструктажи.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА ВТ_ПовторныеИнструктажи.ДатаИнструктажа ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ПервичныеИнструктажи.ДатаИнструктажа ЕСТЬ NULL
	|						ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|					ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПервичныеИнструктажи.ДатаИнструктажа, МЕСЯЦ)
	|				КОНЕЦ
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПовторныеИнструктажи.ДатаИнструктажа, МЕСЯЦ)
	|	КОНЕЦ КАК ДатаИнструктажа,
	|	ВЫБОР
	|		КОГДА ВТ_ДействующиеИнструктажи.Периодичность = ЗНАЧЕНИЕ(Справочник.ПериодичностьВыдачиСИЗ.ПустаяСсылка)
	|			ТОГДА 6
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ДействующиеИнструктажи.Периодичность.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Год)
	|					ТОГДА ВТ_ДействующиеИнструктажи.Периодичность.КоличествоПериодов * 12 / ВТ_ДействующиеИнструктажи.Периодичность.КоличествоВПериоде
	|				ИНАЧЕ ВТ_ДействующиеИнструктажи.Периодичность.КоличествоПериодов / ВТ_ДействующиеИнструктажи.Периодичность.КоличествоВПериоде
	|			КОНЕЦ
	|	КОНЕЦ КАК ИнтервалВМесяцах,
	|	1 КАК Количество
	|ИЗ
	|	ВТ_ДействующиеИнструктажи КАК ВТ_ДействующиеИнструктажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПовторныеИнструктажи КАК ВТ_ПовторныеИнструктажи
	|		ПО ВТ_ДействующиеИнструктажи.Подразделение = ВТ_ПовторныеИнструктажи.Подразделение
	|			И ВТ_ДействующиеИнструктажи.Должность = ВТ_ПовторныеИнструктажи.Должность
	|			И ВТ_ДействующиеИнструктажи.РабочееМесто = ВТ_ПовторныеИнструктажи.РабочееМесто
	|			И ВТ_ДействующиеИнструктажи.Инструктаж = ВТ_ПовторныеИнструктажи.Инструктаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервичныеИнструктажи КАК ВТ_ПервичныеИнструктажи
	|		ПО ВТ_ДействующиеИнструктажи.Подразделение = ВТ_ПервичныеИнструктажи.Подразделение
	|			И ВТ_ДействующиеИнструктажи.Должность = ВТ_ПервичныеИнструктажи.Должность
	|			И ВТ_ДействующиеИнструктажи.РабочееМесто = ВТ_ПервичныеИнструктажи.РабочееМесто
	|			И ВТ_ДействующиеИнструктажи.Инструктаж.ПервичныйИнструктаж = ВТ_ПервичныеИнструктажи.Инструктаж
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИнструктажа";
	
	Запрос.УстановитьПараметр("Сотрудник",Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",Объект.ФизическоеЛицо));
	
	//предварительная таблица
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	//результат для передачи в СКД
	ТаблицаДляВывода = ТаблицаЗапроса.Скопировать();
	ТаблицаДляВывода.Очистить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если НачалоМесяца(ТекущаяДата()) < СтрокаТаблицыЗапроса.ДатаИнструктажа Тогда
		    ЗаполнитьЗначенияСвойств(ТаблицаДляВывода.Добавить(),СтрокаТаблицыЗапроса);
			Продолжить;
		КонецЕсли;
		
		СледующаяДатаИнструктажа = ДобавитьМесяц(СтрокаТаблицыЗапроса.ДатаИнструктажа,СтрокаТаблицыЗапроса.ИнтервалВМесяцах);
		
		СледующаяДатаИнструктажаОпределена = Ложь;
		
		Пока НЕ СледующаяДатаИнструктажаОпределена Цикл
			
			Если НачалоМесяца(ТекущаяДата()) < НачалоМесяца(СледующаяДатаИнструктажа) Тогда
				НоваяСтрока = ТаблицаДляВывода.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗапроса);
				НоваяСтрока.ДатаИнструктажа = НачалоМесяца(СледующаяДатаИнструктажа);
				СледующаяДатаИнструктажаОпределена = Истина;
			КонецЕсли;
			
			СледующаяДатаИнструктажа = ДобавитьМесяц(НачалоМесяца(СледующаяДатаИнструктажа),СтрокаТаблицыЗапроса.ИнтервалВМесяцах);
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат ТаблицаДляВывода;	
	
КонецФункции	

&НаКлиенте
Процедура Инструктажи(Команда)

	ЗаполнитьИнструктажи();
	
	ПерейтиВРаздел("ГруппаИнструктажи");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьНаСклад(Команда)
	
	ЗаполнитьЗаписьНаСклад();
	
	ПерейтиВРаздел("ГруппаЗаписьНаСклад");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаписьНаСклад()
	
	ЗаполнитьДанныеДляЗаписиНаСклад();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПроверкуЗнаний()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//приказы
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ПриказыНаПроведениеПроверки.Очистить();
	
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("ПриказыНаПроверкуЗнаний");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",ТекущийОбъект.ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.ПриказыНаПроведениеПроверки);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	//результаты
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	РезультатыПроверкиЗнаний.Очистить();
	
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("РезультатыПроверкиЗнаний");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",ТекущийОбъект.ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.РезультатыПроверкиЗнаний);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗнаний(Команда)
	
	ЗаполнитьПроверкуЗнаний();
	
	ПерейтиВРаздел("ГруппаПроверкаЗнаний");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМедицинскиеОбследования()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//график
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ГрафикПрохожденияМедицинскогоОбследования.Очистить();
	
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("ГрафикПрохожденияМедосмотров");
	
	ТаблицаДляВывода = ПолучитьГрафикПрохожденияМедосмотров();
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	НаборыВнешнихДанных = Новый Структура;
	НаборыВнешнихДанных.Вставить("ТаблицаДляВывода",ТаблицаДляВывода);
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,НаборыВнешнихДанных,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.ГрафикПрохожденияМедицинскогоОбследования);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	//результаты
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	РезультатыПрохожденияМедицинскогоОбследования.Очистить();
	
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("ПройденныеМедосмотры");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",ТекущийОбъект.ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.РезультатыПрохожденияМедицинскогоОбследования);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьГрафикПрохожденияМедосмотров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВредныеИОпасныеПроизводственныеРаботыВрачи.Ссылка КАК ФакторРабота,
	|	ВредныеИОпасныеПроизводственныеРаботыВрачи.Периодичность.Приоритет КАК ПериодичностьПриоритет
	|ПОМЕСТИТЬ ВТ_ПриоритетПериодичностиФакторовРабот
	|ИЗ
	|	Справочник.ВредныеИОпасныеПроизводственныеРаботы.Врачи КАК ВредныеИОпасныеПроизводственныеРаботыВрачи
	|ГДЕ
	|	НЕ ВредныеИОпасныеПроизводственныеРаботыВрачи.Периодичность ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВредныеИОпасныеПроизводственныеФакторыВрачи.Ссылка,
	|	МАКСИМУМ(ВредныеИОпасныеПроизводственныеФакторыВрачи.Периодичность.Приоритет)
	|ИЗ
	|	Справочник.ВредныеИОпасныеПроизводственныеФакторы.Врачи КАК ВредныеИОпасныеПроизводственныеФакторыВрачи
	|ГДЕ
	|	НЕ ВредныеИОпасныеПроизводственныеФакторыВрачи.Периодичность ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВредныеИОпасныеПроизводственныеФакторыВрачи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПриоритетПериодичностиФакторовРабот.ФакторРабота КАК ФакторРабота,
	|	ПериодичностьВыдачиСИЗ.Ссылка КАК Периодичность
	|ПОМЕСТИТЬ ВТ_ПериодичностьФакторовРабот
	|ИЗ
	|	ВТ_ПриоритетПериодичностиФакторовРабот КАК ВТ_ПриоритетПериодичностиФакторовРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПериодичностьВыдачиСИЗ КАК ПериодичностьВыдачиСИЗ
	|		ПО ВТ_ПриоритетПериодичностиФакторовРабот.ПериодичностьПриоритет = ПериодичностьВыдачиСИЗ.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриказыНаПроведениеМедицинскихОсмотровСрезПоследних.Подразделение КАК Подразделение,
	|	ПриказыНаПроведениеМедицинскихОсмотровСрезПоследних.Должность КАК Должность,
	|	ПриказыНаПроведениеМедицинскихОсмотровСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	ПриказыНаПроведениеМедицинскихОсмотровСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПриказыНаМедосмотры
	|ИЗ
	|	РегистрСведений.ПриказыНаПроведениеМедицинскихОсмотров.СрезПоследних(, Организация = &Организация) КАК ПриказыНаПроведениеМедицинскихОсмотровСрезПоследних
	|ГДЕ
	|	ПриказыНаПроведениеМедицинскихОсмотровСрезПоследних.Проводить
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗанятыеРабочиеМестаОбороты.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОбороты.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОбороты.РабочееМесто КАК РабочееМесто,
	|	ЗанятыеРабочиеМестаОбороты.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(ЗанятыеРабочиеМестаОбороты.Период, МЕСЯЦ) КАК МесяцПриемаНаРаботу,
	|	СУММА(ЗанятыеРабочиеМестаОбороты.КоличествоПриход) КАК КоличествоПриход
	|ПОМЕСТИТЬ ВТ_ПриемНаРаботу
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК ЗанятыеРабочиеМестаОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗанятыеРабочиеМестаОбороты.Подразделение,
	|	ЗанятыеРабочиеМестаОбороты.Должность,
	|	ЗанятыеРабочиеМестаОбороты.РабочееМесто,
	|	ЗанятыеРабочиеМестаОбороты.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ЗанятыеРабочиеМестаОбороты.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто,
	|	ЗанятыеРабочиеМестаОстатки.Сотрудник КАК Сотрудник,
	|	ВТ_ПриемНаРаботу.МесяцПриемаНаРаботу КАК МесяцПриемаНаРаботу
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(
	|			,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК ЗанятыеРабочиеМестаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПриемНаРаботу КАК ВТ_ПриемНаРаботу
	|		ПО ЗанятыеРабочиеМестаОстатки.Подразделение = ВТ_ПриемНаРаботу.Подразделение
	|			И ЗанятыеРабочиеМестаОстатки.Должность = ВТ_ПриемНаРаботу.Должность
	|			И ЗанятыеРабочиеМестаОстатки.РабочееМесто = ВТ_ПриемНаРаботу.РабочееМесто
	|			И ЗанятыеРабочиеМестаОстатки.Сотрудник = ВТ_ПриемНаРаботу.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.ФакторРабота КАК ФакторРабота,
	|	ВТ_Сотрудники.МесяцПриемаНаРаботу КАК ДатаМедосмотра,
	|	ВЫБОР
	|		КОГДА ВТ_ПериодичностьФакторовРабот.Периодичность.ТипПериода = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Год)
	|			ТОГДА 12 * ВТ_ПериодичностьФакторовРабот.Периодичность.КоличествоПериодов / ВТ_ПериодичностьФакторовРабот.Периодичность.КоличествоВПериоде
	|		ИНАЧЕ ВТ_ПериодичностьФакторовРабот.Периодичность.КоличествоПериодов / ВТ_ПериодичностьФакторовРабот.Периодичность.КоличествоВПериоде
	|	КОНЕЦ КАК ИнтервалВМесяцах,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыМедосмотров.Периодический) КАК ВидМедосмотра
	|ИЗ
	|	РегистрСведений.ВредныеИОпасныеФакторыИРаботыНаРабочихМестах.СрезПоследних(, Организация = &Организация) КАК ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПриказыНаМедосмотры КАК ВТ_ПриказыНаМедосмотры
	|		ПО (ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|				ИЛИ ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.Подразделение = ВТ_ПриказыНаМедосмотры.Подразделение)
	|			И (ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|				ИЛИ ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.Должность = ВТ_ПриказыНаМедосмотры.Должность)
	|			И (ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка)
	|				ИЛИ ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.РабочееМесто = ВТ_ПриказыНаМедосмотры.РабочееМесто)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодичностьФакторовРабот КАК ВТ_ПериодичностьФакторовРабот
	|		ПО ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.ФакторРабота = ВТ_ПериодичностьФакторовРабот.ФакторРабота
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ПО (ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|				ИЛИ ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.Подразделение = ВТ_Сотрудники.Подразделение)
	|			И (ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка)
	|				ИЛИ ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.Должность = ВТ_Сотрудники.Должность)
	|			И (ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка)
	|				ИЛИ ВредныеИОпасныеФакторыИРаботыНаРабочихМестахСрезПоследних.РабочееМесто = ВТ_Сотрудники.РабочееМесто)
	|ГДЕ
	|	НЕ ВТ_ПриказыНаМедосмотры.Организация ЕСТЬ NULL
	|	И НЕ ВТ_Сотрудники.МесяцПриемаНаРаботу ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаМедосмотра";
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	Запрос.УстановитьПараметр("Организация",Сотрудник.Владелец);
	Запрос.УстановитьПараметр("Сотрудник",	Сотрудник);
	
	//предварительная таблица
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	//результат для передачи в СКД
	ТаблицаДляВывода = ТаблицаЗапроса.Скопировать();
	ТаблицаДляВывода.Очистить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если НачалоМесяца(ТекущаяДата()) <= СтрокаТаблицыЗапроса.ДатаМедосмотра Тогда
			НоваяСтрока 				= ТаблицаДляВывода.Добавить();
		    ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗапроса);
			НоваяСтрока.ВидМедосмотра 	= Перечисления.ВидыМедосмотров.Предварительный;
			Продолжить;
		КонецЕсли;
		
		СледующаяДатаМедосмотра = ДобавитьМесяц(СтрокаТаблицыЗапроса.ДатаМедосмотра,СтрокаТаблицыЗапроса.ИнтервалВМесяцах);
		
		СледующаяДатаМедосмотраОпределена = Ложь;
		
		Пока НЕ СледующаяДатаМедосмотраОпределена Цикл
			
			Если НачалоМесяца(ТекущаяДата()) <= НачалоМесяца(СледующаяДатаМедосмотра) Тогда
				НоваяСтрока 						= ТаблицаДляВывода.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыЗапроса);
				НоваяСтрока.ДатаМедосмотра 			= НачалоМесяца(СледующаяДатаМедосмотра);
				СледующаяДатаМедосмотраОпределена 	= Истина;
			КонецЕсли;
			
			СледующаяДатаМедосмотра = ДобавитьМесяц(НачалоМесяца(СледующаяДатаМедосмотра),СтрокаТаблицыЗапроса.ИнтервалВМесяцах);
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат ТаблицаДляВывода;
	
КонецФункции	

&НаКлиенте
Процедура МедицинскиеОбследования(Команда)
	
	ЗаполнитьМедицинскиеОбследования();
	
	ПерейтиВРаздел("ГруппаМедицинскиеОбследования");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормыВыдачиСпецодежды()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	НормыВыдачиСпецодежды.Очистить();
	
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("НормыВыдачиСпецодежды");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.НормыВыдачиСпецодежды);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НормыВыдачи(Команда)
	
	ЗаполнитьНормыВыдачиСпецодежды();
	
	ПерейтиВРаздел("ГруппаНормыВыдачи");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУведомления()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	УведомленияСотруднику.Очистить();
	
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("Уведомления");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Контакт",Объект.ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.УведомленияСотруднику);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Уведомления(Команда)
	
	ЗаполнитьУведомления();
	
	ПерейтиВРаздел("ГруппаУведомления");
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ПерейтиВРаздел("ГруппаНачало");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРаздел(ИмяРаздела)
	
	//выключаем все
	Элементы.ГруппаНачало.Видимость 					= Ложь;
	Элементы.ГруппаУведомления.Видимость 				= Ложь;
	Элементы.ГруппаЛичныеДанные.Видимость 				= Ложь;
	Элементы.ГруппаСредстваЗащитыВЧистке.Видимость 		= Ложь;
	Элементы.ГруппаОбратнаяСвязь.Видимость 				= Ложь;
	Элементы.ГруппаВыданныеСредстваЗащиты.Видимость 	= Ложь;
	Элементы.ГруппаГрафикВыдачи.Видимость 				= Ложь;
	Элементы.ГруппаОбеспеченность.Видимость 			= Ложь;
	Элементы.ГруппаИнструктажи.Видимость 				= Ложь;
	Элементы.ГруппаПроверкаЗнаний.Видимость 			= Ложь;
	Элементы.ГруппаМедицинскиеОбследования.Видимость 	= Ложь;
	Элементы.ГруппаНормыВыдачи.Видимость 				= Ложь;
	Элементы.ГруппаПрохождениеПроверкиЗнаний.Видимость 	= Ложь;
	Элементы.ГруппаЗаписьНаСклад.Видимость 				= Ложь;	
	
	//включаем одну
	Элементы[ИмяРаздела].Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПерейтиВРаздел("ГруппаНачало");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОбращение(Команда)
	
	Если НЕ ЗначениеЗаполнено(СодержаниеОбращения) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "СодержаниеОбращения";
		Сообщение.Текст = "Пожалуйста, заполните содержание обращения.";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;	
	
	ОтправитьОбращениеНаСервере();
	
	СодержаниеОбращения = "";
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьОбращениеНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",Объект.ФизическоеЛицо);
	                        
	НовыйДокумент = Документы.ОбращениеНаСклад.СоздатьДокумент();
	НовыйДокумент.Дата 					= ТекущаяДата();
	НовыйДокумент.КатегорияОбращения 	= КатегорияОбращения;
	НовыйДокумент.Организация 			= Сотрудник.Владелец;
	НовыйДокумент.СодержаниеОбращения 	= СодержаниеОбращения;
	НовыйДокумент.СоздательДокумента 	= ВнешниеПользователи.ТекущийВнешнийПользователь();
	НовыйДокумент.Сотрудник 			= Сотрудник;
	НовыйДокумент.СтатусОбращения 		= Перечисления.СтатусыОбращенийНаСклад.Открыто;
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаполнитьОбращенияСотрудника();	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбращенияСотрудника()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбращенияСотрудника.Очистить();
	
	СхемаКомпоновкиДанных = ТекущийОбъект.ПолучитьМакет("ОбращенияСотрудника");
	
	Настройка = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	Настройка.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройка.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭтаФорма.ОбращенияСотрудника);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросНаИзменениеКонтактнойИнформации(Команда)
	
	КатегорияОбращения = ПредопределенноеЗначение("Справочник.КатегорииОбращенияНаСклад.ИзменениеКонтактнойИнформации");
	
	ПерейтиВРаздел("ГруппаОбратнаяСвязь");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросНаИзменениеАнтропометрии(Команда)
	
	КатегорияОбращения = ПредопределенноеЗначение("Справочник.КатегорииОбращенияНаСклад.ИзменениеАнтропометрии");
	
	ПерейтиВРаздел("ГруппаОбратнаяСвязь");	
	
КонецПроцедуры

&НаСервере
Процедура ФизическоеЛицоПриИзмененииНаСервере()
	
	ПредставлениеСотрудника = СформироватьПредставлениеСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	
	ФизическоеЛицоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗнания(Команда)
	
	ПодготовитьИнтерфейсДляТестирования();
	
	УстановитьВидимостьЭлементовТестирования();
	
	ПерейтиВРаздел("ГруппаПрохождениеПроверкиЗнаний");
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьИнтерфейсДляТестирования()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОпределитьДоступныеТесты();
	
	ОчиститьИнтерфейсТеста();
	
	ЗаполнитьИнтерфейсТеста();	
	
КонецПроцедуры	

&НаСервере
Процедура ОчиститьИнтерфейсТеста()
	
	Объект.ВыбранныйТест = Справочники.Тесты.ПустаяСсылка();
	ЭтаФорма.Элементы.Тест.Подсказка = "";
	
	МассивЭлементовДляУдаления = Новый Массив;
	
	Для Каждого ТекущийЭлементГруппы Из ЭтаФорма.Элементы.ГруппаДоступныеТесты.ПодчиненныеЭлементы Цикл
		
		Если СтрНайти(ТекущийЭлементГруппы.Имя,"Тест") = 0 Тогда //удаляем только программно добавленные элементы
			Продолжить;
		КонецЕсли;
		
		МассивЭлементовДляУдаления.Добавить(ТекущийЭлементГруппы);
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивЭлементовДляУдаления Цикл
		
		ЭтаФорма.Элементы.Удалить(ЭлементМассива);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнтерфейсТеста()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого СтрокаДоступныеТесты Из Объект.ДоступныеТесты Цикл
		
		Элемент = ЭтаФорма.Элементы.Добавить("Тест" + СтрЗаменить(СтрокаДоступныеТесты.Тест.Код,"-","_"),Тип("ДекорацияФормы"),Элементы.ГруппаДоступныеТесты);
		Элемент.Заголовок 				= СтрокаДоступныеТесты.Тест.Наименование;
		Элемент.Подсказка 				= СтрокаДоступныеТесты.Тест.Описание;
		Элемент.Вид 					= ВидДекорацииФормы.Надпись;
		Элемент.Гиперссылка 			= Истина;
		Элемент.Ширина					= 78;
		Элемент.Шрифт					= ШрифтыСтиля.КрупныйШрифтТекста;
		Элемент.ОтображениеПодсказки 	= ОтображениеПодсказки.ОтображатьСнизу;
		Элемент.АвтоМаксимальнаяШирина 	= Истина;
		Элемент.УстановитьДействие("Нажатие","ТестНажатие");
		
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНажатие(Элемент)
	
	ЗаполнитьВыбранныйТест(Элемент.Имя);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВыбранныйТест(ИмяЭлемента)
	
	Для Каждого СтрокаДоступныеТесты Из Объект.ДоступныеТесты Цикл
		
		Если "Тест" + СтрЗаменить(СтрокаДоступныеТесты.Тест.Код,"-","_") = ИмяЭлемента Тогда
		    Объект.ВыбранныйТест = СтрокаДоступныеТесты.Тест;
			Элементы.Тест.Подсказка = СтрокаДоступныеТесты.Тест.Описание;
			Элементы.ГруппаВыбранныйТест.Видимость = Истина;
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ОпределитьВопросыТеста()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТестыВопросы.Вопрос КАК Вопрос
	|ИЗ
	|	Справочник.Тесты.Вопросы КАК ТестыВопросы
	|ГДЕ
	|	ТестыВопросы.Ссылка = &Тест
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТестыВопросы.НомерСтроки";
	
	Запрос.УстановитьПараметр("Тест",Объект.ВыбранныйТест);
	
	Объект.ВопросыВыбранногоТеста.Загрузить(Запрос.Выполнить().Выгрузить());
	Объект.Результаты.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступныеТесты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриказыНаПроведениеПроверкиЗнанийСрезПоследних.Тест КАК Тест
	|ИЗ
	|	РегистрСведений.ПриказыНаПроведениеПроверкиЗнаний.СрезПоследних(, Сотрудник.ФизическоеЛицо = &ФизическоеЛицо) КАК ПриказыНаПроведениеПроверкиЗнанийСрезПоследних
	|ГДЕ
	|	ПриказыНаПроведениеПроверкиЗнанийСрезПоследних.Проводить
	|	И НЕ ПриказыНаПроведениеПроверкиЗнанийСрезПоследних.Выполнено";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	Объект.ДоступныеТесты.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьТестирование(Команда)
	
	ОпределитьВопросыТеста();
	
	НомерТекущегоВопроса = 1;
	
	ОчиститьИнтерфейсВопроса();
	
	ЗаполнитьИнтерфейсВопроса();
	
	УстановитьВидимостьЭлементовТестирования();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовТестирования() 
	
	Если НомерТекущегоВопроса = 0 Тогда
		Элементы.ГруппаВыборТеста.Видимость 	= Истина;
		Элементы.ГруппаТестирование.Видимость 	= Ложь;
		Элементы.ГруппаОкончание.Видимость 		= Ложь;
	Иначе
		Элементы.ГруппаВыборТеста.Видимость 	= Ложь;
		Элементы.ГруппаТестирование.Видимость 	= Истина;
		Элементы.ГруппаОкончание.Видимость 		= Истина;
	КонецЕсли;
	
	Если НомерТекущегоВопроса = 1 Тогда
		Элементы.ГруппаНазад.Доступность = Ложь;
	Иначе
		Элементы.ГруппаНазад.Доступность = Истина;
	КонецЕсли;	
	
	Если НомерТекущегоВопроса = Объект.ВопросыВыбранногоТеста.Количество() Тогда
		Элементы.ГруппаВперед.Доступность = Ложь;
	Иначе 
		Элементы.ГруппаВперед.Доступность = Истина;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ВыбранныйТест) Тогда
		Элементы.ГруппаВыбранныйТест.Видимость = Истина;
	Иначе
		Элементы.ГруппаВыбранныйТест.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьИнтерфейсВопроса()
	
	МассивЭлементовДляУдаления = Новый Массив;
	
	Для Каждого ТекущийЭлементГруппы Из Элементы.ГруппаВопрос.ПодчиненныеЭлементы Цикл
		
		Если СтрНайти(ТекущийЭлементГруппы.Имя,"Ответ") = 0 Тогда //удаляем только программно добавленные элементы
			Продолжить;
		КонецЕсли;
		
		МассивЭлементовДляУдаления.Добавить(ТекущийЭлементГруппы);
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивЭлементовДляУдаления Цикл
		
		ЭтаФорма.Элементы.Удалить(ЭлементМассива);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнтерфейсВопроса()
	
	ТекущийВопрос 	= Объект.ВопросыВыбранногоТеста[НомерТекущегоВопроса - 1].Вопрос;
	ТекущийОтвет 	= ПолучитьОтветНаВопрос(ТекущийВопрос);
	
	УстановитьЗаголовокГруппыВопроса(ТекущийОтвет);
	
	Элементы.ДекорацияВопрос.Заголовок = СокрЛП(ТекущийВопрос.Наименование);
	Элементы.ДекорацияВопрос.Подсказка = СокрЛП(ТекущийВопрос.Описание);
	
	Для Каждого ВариантОтвета Из ТекущийВопрос.ВариантыОтветов Цикл
		
		Элемент = ЭтаФорма.Элементы.Добавить("Ответ" + СтрЗаменить(ВариантОтвета.Ответ.Код,"-","_"),Тип("ДекорацияФормы"),Элементы.ГруппаВопрос);
		Элемент.Заголовок 				= ВариантОтвета.Ответ.Наименование;
		Элемент.Подсказка 				= ВариантОтвета.Ответ.Описание;
		Элемент.Вид 					= ВидДекорацииФормы.Надпись;
		Элемент.Гиперссылка 			= Истина;
		Элемент.ОтображениеПодсказки 	= ОтображениеПодсказки.ОтображатьСнизу;
		Элемент.АвтоМаксимальнаяШирина 	= Истина;
		Элемент.Ширина					= 54;
		Элемент.ГоризонтальноеПоложение	= ГоризонтальноеПоложениеЭлемента.Центр;
		
		Элемент.УстановитьДействие("Нажатие","ОтветНажатие");
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущийОтвет) Тогда
		ИмяВыбранногоОтвета = "Ответ" + СтрЗаменить(ТекущийОтвет.Код,"-","_");
	Иначе
		ИмяВыбранногоОтвета = "";
	КонецЕсли;	
	
	УстановитьРамкиДляОтветов(ИмяВыбранногоОтвета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийВопрос(Команда)
	
	НомерТекущегоВопроса = НомерТекущегоВопроса - 1;
	
	ОчиститьИнтерфейсВопроса();
	
	ЗаполнитьИнтерфейсВопроса();
	
	УстановитьВидимостьЭлементовТестирования();
	
КонецПроцедуры

&НаКлиенте
Процедура КПервомуВопросу(Команда)
	
	НомерТекущегоВопроса = 1;
	
	ОчиститьИнтерфейсВопроса();
	
	ЗаполнитьИнтерфейсВопроса();
	
	УстановитьВидимостьЭлементовТестирования();	
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийВопрос(Команда)
	
	НомерТекущегоВопроса = НомерТекущегоВопроса + 1;
	
	ОчиститьИнтерфейсВопроса();
	
	ЗаполнитьИнтерфейсВопроса();
	
	УстановитьВидимостьЭлементовТестирования();
	
КонецПроцедуры

&НаКлиенте
Процедура КПоследнемуВопросу(Команда)
	
	НомерТекущегоВопроса = Объект.ВопросыВыбранногоТеста.Количество();
	
	ОчиститьИнтерфейсВопроса();
	
	ЗаполнитьИнтерфейсВопроса();
	
	УстановитьВидимостьЭлементовТестирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьТест(Команда)
	
	Текст = "Ответы на вопросы теста сохранены не будут. Продолжить?";
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса_ПрерватьТест", ЭтаФорма, Параметры);
	
	ПоказатьВопрос(Оповещение,Текст,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса_ПрерватьТест(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        
		НомерТекущегоВопроса = 0;
		
		Объект.ВыбранныйТест = ПредопределенноеЗначение("Справочник.Тесты.ПустаяСсылка");
		Объект.ВопросыВыбранногоТеста.Очистить();
		Объект.Результаты.Очистить();
		
		ПодготовитьИнтерфейсДляТестирования();
	
		УстановитьВидимостьЭлементовТестирования();
		
		ЗаполнитьПроверкуЗнаний();
	
		ПерейтиВРаздел("ГруппаПроверкаЗнаний");
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьОтветНаВопрос(ТекущийВопрос)
	
	НайденныеСтроки = Объект.Результаты.НайтиСтроки(НОВЫЙ Структура("Вопрос",ТекущийВопрос));
	
	Возврат НайденныеСтроки[0].Ответ;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокГруппыВопроса(ТекущийОтвет)
	
	Если ЗначениеЗаполнено(ТекущийОтвет) Тогда
		ПредставлениеОтвета = "(Ваш ответ: " + СокрЛП(ТекущийОтвет.Наименование) + ")";
	Иначе
		ПредставлениеОтвета = "(ответ не выбран)";
	КонецЕсли;
	
	Элементы.ГруппаВопрос.Заголовок = "Вопрос " + НомерТекущегоВопроса + " из " + Объект.ВопросыВыбранногоТеста.Количество() + " " + ПредставлениеОтвета;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРамкиДляОтветов(ИмяВыбранногоОтвета)
	
	Для Каждого ТекущийЭлементГруппы Из Элементы.ГруппаВопрос.ПодчиненныеЭлементы Цикл
		
		Если СтрНайти(ТекущийЭлементГруппы.Имя,"Ответ") = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ТекущийЭлементГруппы.Имя = ИмяВыбранногоОтвета Тогда
			ТекущийЭлементГруппы.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Двойная,1);
		Иначе
			ТекущийЭлементГруппы.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки,1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНажатие(Элемент)
	
	ЗаписатьОтвет(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОтвет(ИмяЭлемента)
	
	ТекущийВопрос 	= Объект.ВопросыВыбранногоТеста[НомерТекущегоВопроса - 1].Вопрос;
	ТекущийОтвет 	= Справочники.Ответы.ПустаяСсылка();
	Правильный 		= Ложь;
	
	Для Каждого ВариантОтвета Из ТекущийВопрос.ВариантыОтветов Цикл 
	
		Если "Ответ" + СтрЗаменить(ВариантОтвета.Ответ.Код,"-","_") = ИмяЭлемента Тогда
		    ТекущийОтвет 	= ВариантОтвета.Ответ;
			Правильный		= ВариантОтвета.Правильный;
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;
	
	НайденныеСтроки = Объект.Результаты.НайтиСтроки(НОВЫЙ Структура("Вопрос",ТекущийВопрос));
	
	НайденныеСтроки[0].Ответ 		= ТекущийОтвет;
	НайденныеСтроки[0].Правильный 	= Правильный;
	
	УстановитьЗаголовокГруппыВопроса(ТекущийОтвет);
	
	УстановитьРамкиДляОтветов(ИмяЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТест(Команда)
	
	//РезультатТеста = ПолучитьРезультатТеста();
	//
	//Текст = РезультатТеста + "Сохранить результаты теста?";
	
	Текст = "Сохранить результаты теста?";
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса_СохранитьТест", ЭтаФорма, Параметры);
	
	ПоказатьВопрос(Оповещение,Текст,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатТеста()
	
	КоличествоПравильных 	= 0;
	КоличествоНеПравильных 	= 0;
	
	Для Каждого СтрокаРезультата Из Объект.Результаты Цикл
		Если СтрокаРезультата.Правильный Тогда
			КоличествоПравильных 	= КоличествоПравильных + 1;
		Иначе
			КоличествоНеПравильных 	= КоличествоНеПравильных + 1;
		КонецЕсли;
	КонецЦикла;
	
	РезультатТеста = СокрЛП(Объект.ВыбранныйТест.Наименование) + Символы.ПС;
	РезультатТеста = РезультатТеста + "Всего вопросов - " + Объект.Результаты.Количество() + Символы.ПС;
	РезультатТеста = РезультатТеста + "Правильных ответов - " + КоличествоПравильных + Символы.ПС;
	РезультатТеста = РезультатТеста + "Неправильных ответов - " + КоличествоНеПравильных + Символы.ПС;
	
	Возврат РезультатТеста;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса_СохранитьТест(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СохранитьРезультатыТестирования();
		
		НомерТекущегоВопроса = 0;
		
		Объект.ВыбранныйТест = ПредопределенноеЗначение("Справочник.Тесты.ПустаяСсылка");
		Объект.ВопросыВыбранногоТеста.Очистить();
		Объект.Результаты.Очистить();
		
		ПодготовитьИнтерфейсДляТестирования();
	
		УстановитьВидимостьЭлементовТестирования();
		
		ЗаполнитьПроверкуЗнаний();
	
		ПерейтиВРаздел("ГруппаПроверкаЗнаний");
	
    КонецЕсли;
	
КонецПроцедуры	
	
&НаСервере
Процедура СохранитьРезультатыТестирования()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	НовыйДокумент = Документы.ПроверкаЗнанийСотрудника.СоздатьДокумент();
	НовыйДокумент.ВведенВручную = Ложь;
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.Организация = Сотрудник.Владелец;
	НовыйДокумент.Тест = Объект.ВыбранныйТест;
	Для Каждого СтрокаРезультата Из Объект.Результаты Цикл
		НоваяСтрока = НовыйДокумент.Ответы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРезультата);
		НоваяСтрока.Сотрудник  = Сотрудник;
	КонецЦикла;
	Документы.ПроверкаЗнанийСотрудника.ЗаполнитьТаблицуРезультатов(НовыйДокумент);
	НовыйДокумент.УстановитьНовыйНомер();
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Результат теста в документе: " + НовыйДокумент.Ссылка;
		Сообщение.Сообщить();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаПолучение(Команда)
	
	ПараметрыФормы = Новый Структура("", );
	ОткрытьФорму("Обработка.РабочийСтолВнешнегоПользователя.Форма.ФормаВводаЗаявки");
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗаписьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	НовыйДокумент = Документы.ЗаписьНаСклад.СоздатьДокумент();
	НовыйДокумент.Организация 	= Сотрудник.Владелец;
	НовыйДокумент.Дата 			= ТекущаяДата();
	Попытка	
		НовыйДокумент.СоздательДокумента = ВнешниеПользователи.ТекущийВнешнийПользователь();
	Исключение	
	КонецПопытки;	
	НовыйДокумент.Сотрудник 	= Сотрудник;
	НовыйДокумент.Склад 		= СкладДляЗаписи;
	НовыйДокумент.Комментарий	= "Сформирован из личного кабинета";
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	ТекущаяЗаписьДень	= Дата(1,1,1,0,0,0);
	ТекущаяЗаписьВремя	= Дата(1,1,1,0,0,0);
		
	ЗаполнитьИнформациюОТекущейЗаписи();	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗапись(Команда)
	
	ТекстТекущейЗаписи 	= "Вы записаны на склад на " + Формат(ТекущаяЗаписьДень,"ДЛФ=DD") + " в " + Формат(ТекущаяЗаписьВремя,"ДФ=ЧЧ:мм");
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаНаОтменуЗаписи",ЭтотОбъект,Параметры);
	ПоказатьВопрос(Оповещение, ТекстТекущейЗаписи + Символы.ПС + НСтр("ru = 'Отменить запись?'"), Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаНаОтменуЗаписи(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОтменитьЗаписьНаСервере();
		
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьсяНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	НовыйДокумент = Документы.ЗаписьНаСклад.СоздатьДокумент();
	НовыйДокумент.Организация 	= Сотрудник.Владелец;
	НовыйДокумент.Дата 			= ТекущаяДата();
	Попытка	
		НовыйДокумент.СоздательДокумента = ВнешниеПользователи.ТекущийВнешнийПользователь();
	Исключение	
	КонецПопытки;	
	НовыйДокумент.Сотрудник 	= Сотрудник;
	НовыйДокумент.Склад 		= СкладДляЗаписи;
	НовыйДокумент.День			= НоваяЗаписьДень;
	НовыйДокумент.Время			= НоваяЗаписьВремя;
	НовыйДокумент.Комментарий	= "Сформирован из личного кабинета";
	НовыйДокумент.УстановитьНовыйНомер();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаполнитьИнформациюОТекущейЗаписи();	
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура Записаться(Команда)
	
	Если НоваяЗаписьДень = ТекущаяЗаписьДень И НоваяЗаписьВремя = ТекущаяЗаписьВремя Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Такая запись уже существует!";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаНаЗапись",ЭтотОбъект,Параметры);
	
	Если ЗначениеЗаполнено(ТекущаяЗаписьДень) Тогда
		ТекстТекущейЗаписи 	= "Вы записаны на склад на " + Формат(ТекущаяЗаписьДень,"ДЛФ=DD") + " в " + Формат(ТекущаяЗаписьВремя,"ДФ=ЧЧ:мм");
		ТекстВопроса 		= ТекстТекущейЗаписи + Символы.ПС + НСтр("ru = 'Создать запись на склад? Текущая запись будет отменена.'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Создать запись на склад?'");
	КонецЕсли;	
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаНаЗапись(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьсяНаСервере();
		
		ОбновитьИнтерфейс();
		
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДляЗаписиНаСклад()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСкладовВыдачи = ПолучитьМассивСкладовВыдачи();
	
	Если МассивСкладовВыдачи.Количество() = 0 Тогда
		
		Элементы.НадписьСкладДляЗаписи.Видимость 	= Истина;
		Элементы.СкладДляЗаписи.Видимость 			= Ложь;
		Элементы.ГруппаТекущаяЗапись.Видимость		= Ложь;
		Элементы.ГруппаНоваяЗапись.Видимость		= Ложь;
		
		Возврат;
		
	Иначе
		
		Элементы.НадписьСкладДляЗаписи.Видимость 	= Ложь;
		Элементы.СкладДляЗаписи.Видимость 			= Истина;
		Элементы.ГруппаТекущаяЗапись.Видимость		= Истина;
		Элементы.ГруппаНоваяЗапись.Видимость		= Истина;
		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		
		Элементы.ГруппаТекущаяЗапись.Видимость	= Ложь;
		Элементы.ГруппаНоваяЗапись.Видимость	= Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		
		Элементы.ГруппаТекущаяЗапись.Видимость	= Ложь;
		Элементы.ГруппаНоваяЗапись.Видимость	= Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	СкладВыдачи = ПроцедурыРаботыСНормамиСервер.ПолучитьСкладВыдачи(Справочники.Подразделения.ПустаяСсылка(),Сотрудник,Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача);
	
	Элементы.СкладДляЗаписи.СписокВыбора.ЗагрузитьЗначения(МассивСкладовВыдачи);
	
	Если МассивСкладовВыдачи.Найти(СкладВыдачи) = Неопределено Тогда
		СкладДляЗаписи = МассивСкладовВыдачи[0];
	Иначе
		СкладДляЗаписи = СкладВыдачи;
	КонецЕсли;	
	
	ЗаполнитьИнформациюОТекущейЗаписи();
	ЗаполнитьСписокДней();
	ЗаполнитьСписокВремени();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокДней()
	
	МассивДней = ПолучитьМассивДнейДляЗаписи();
	
	Элементы.НоваяЗаписьДень.СписокВыбора.ЗагрузитьЗначения(МассивДней);
	
	Для Каждого ЭлементСписка Из Элементы.НоваяЗаписьДень.СписокВыбора Цикл
		
		ЭлементСписка.Представление = Формат(ЭлементСписка.Значение,"ДФ=dd.MM.yyyy");
		
	КонецЦикла;
	
	Если МассивДней.Количество() > 0 Тогда
		НоваяЗаписьДень = МассивДней[0];
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокВремени()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВремени = ПолучитьМассивВремениДляЗаписи();
	
	Элементы.НоваяЗаписьВремя.СписокВыбора.ЗагрузитьЗначения(МассивВремени);
	
	Для Каждого ЭлементСписка Из Элементы.НоваяЗаписьВремя.СписокВыбора Цикл
		
		ЭлементСписка.Представление = Формат(ЭлементСписка.Значение,"ДФ=ЧЧ:мм");
		
	КонецЦикла;	
	
	Если МассивВремени.Количество() > 0 Тогда
		НоваяЗаписьВремя = МассивВремени[0];
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивДнейДляЗаписи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикРаботыСклада.День КАК День
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСклада КАК ГрафикРаботыСклада
	|ГДЕ
	|	ГрафикРаботыСклада.Склад = &Склад
	|	И ГрафикРаботыСклада.День МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	День";
	
	Запрос.УстановитьПараметр("Склад",			СкладДляЗаписи);
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецПериода",	НачалоДня(ТекущаяДата()) + СкладДляЗаписи.ГоризонтПланирования * 24 * 3600);
	
	ТаблицаГрафикаРаботыСклада = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаГрафикаРаботыСклада.ВыгрузитьКолонку("День");
	
КонецФункции	

&НаСервере
Функция ПолучитьМассивВремениДляЗаписи()
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	Организация = Сотрудник.Владелец;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикРаботыСклада.День КАК День,
	|	ГрафикРаботыСклада.КоличествоОкон КАК КоличествоОкон,
	|	ГрафикРаботыСклада.ВремяОбслуживания КАК ВремяОбслуживания,
	|	ГрафикРаботыСклада.НачалоРаботы КАК НачалоРаботы,
	|	ГрафикРаботыСклада.ОкончаниеРаботы КАК ОкончаниеРаботы,
	|	ГрафикРаботыСклада.НачалоПерерыва КАК НачалоПерерыва,
	|	ГрафикРаботыСклада.ОкончаниеПерерыва КАК ОкончаниеПерерыва
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСклада КАК ГрафикРаботыСклада
	|ГДЕ
	|	ГрафикРаботыСклада.Склад = &Склад
	|	И ГрафикРаботыСклада.День = &День";
	
	Запрос.УстановитьПараметр("Склад",	СкладДляЗаписи);
	Запрос.УстановитьПараметр("День",	НачалоДня(НоваяЗаписьДень));
	
	ТаблицаГрафикаРаботыСклада = Запрос.Выполнить().Выгрузить();
	
	СеткаРаботыСклада = Новый ТаблицаЗначений;
	СеткаРаботыСклада.Колонки.Добавить("КоличествоОкон", 	ОбщегоНазначения.ОписаниеТипаЧисло(3,0,ДопустимыйЗнак.Неотрицательный));
	СеткаРаботыСклада.Колонки.Добавить("Время", 			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Время));
	
	Для Каждого СтрокаТаблицыГрафикаРаботыСклада Из ТаблицаГрафикаРаботыСклада Цикл
		
		НачалоОбслуживания = Дата(Год(СтрокаТаблицыГрафикаРаботыСклада.День),Месяц(СтрокаТаблицыГрафикаРаботыСклада.День),День(СтрокаТаблицыГрафикаРаботыСклада.День),Час(СтрокаТаблицыГрафикаРаботыСклада.НачалоРаботы),Минута(СтрокаТаблицыГрафикаРаботыСклада.НачалоРаботы),0);
		ОкончаниеОбслуживания = НачалоОбслуживания + СтрокаТаблицыГрафикаРаботыСклада.ВремяОбслуживания * 60;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыГрафикаРаботыСклада.НачалоПерерыва) Тогда
			НачалоПерерыва = Дата(Год(СтрокаТаблицыГрафикаРаботыСклада.День),Месяц(СтрокаТаблицыГрафикаРаботыСклада.День),День(СтрокаТаблицыГрафикаРаботыСклада.День),Час(СтрокаТаблицыГрафикаРаботыСклада.НачалоПерерыва),Минута(СтрокаТаблицыГрафикаРаботыСклада.НачалоПерерыва),0);
		Иначе
			НачалоПерерыва = СтрокаТаблицыГрафикаРаботыСклада.НачалоПерерыва;
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеПерерыва) Тогда
			ОкончаниеПерерыва = Дата(Год(СтрокаТаблицыГрафикаРаботыСклада.День),Месяц(СтрокаТаблицыГрафикаРаботыСклада.День),День(СтрокаТаблицыГрафикаРаботыСклада.День),Час(СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеПерерыва),Минута(СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеПерерыва),0);
		Иначе
			ОкончаниеПерерыва = СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеПерерыва;
		КонецЕсли;
		
		КонецРабочегоДня = Дата(Год(СтрокаТаблицыГрафикаРаботыСклада.День),Месяц(СтрокаТаблицыГрафикаРаботыСклада.День),День(СтрокаТаблицыГрафикаРаботыСклада.День),Час(СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеРаботы),Минута(СтрокаТаблицыГрафикаРаботыСклада.ОкончаниеРаботы),0);
		
		Если ЗначениеЗаполнено(НачалоПерерыва) И ЗначениеЗаполнено(ОкончаниеПерерыва) Тогда
			
			Пока НачалоОбслуживания < НачалоПерерыва Цикл
				
				НоваяСтрока 				= СеткаРаботыСклада.Добавить();
				НоваяСтрока.КоличествоОкон 	= СтрокаТаблицыГрафикаРаботыСклада.КоличествоОкон;
				НоваяСтрока.Время 			= Дата(1,1,1,Час(НачалоОбслуживания),Минута(НачалоОбслуживания),0);
				
				НачалоОбслуживания = НачалоОбслуживания + СтрокаТаблицыГрафикаРаботыСклада.ВремяОбслуживания * 60; 
				
			КонецЦикла;
			
			Пока ОкончаниеПерерыва < КонецРабочегоДня Цикл
				
				НоваяСтрока 				= СеткаРаботыСклада.Добавить();
				НоваяСтрока.КоличествоОкон 	= СтрокаТаблицыГрафикаРаботыСклада.КоличествоОкон;
				НоваяСтрока.Время 			= Дата(1,1,1,Час(ОкончаниеПерерыва),Минута(ОкончаниеПерерыва),0);
				
				ОкончаниеПерерыва = ОкончаниеПерерыва + СтрокаТаблицыГрафикаРаботыСклада.ВремяОбслуживания * 60; 
				
			КонецЦикла;			
			
		Иначе	
			
			Пока НачалоОбслуживания < КонецРабочегоДня Цикл
				
				НоваяСтрока 				= СеткаРаботыСклада.Добавить();
				НоваяСтрока.КоличествоОкон 	= СтрокаТаблицыГрафикаРаботыСклада.КоличествоОкон;
				НоваяСтрока.Время 			= Дата(1,1,1,Час(НачалоОбслуживания),Минута(НачалоОбслуживания),0);
				
				НачалоОбслуживания = НачалоОбслуживания + СтрокаТаблицыГрафикаРаботыСклада.ВремяОбслуживания * 60; 
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСетки.КоличествоОкон КАК КоличествоОкон,
	|	ТаблицаСетки.Время КАК Время
	|ПОМЕСТИТЬ ВТ_СеткаРаботыСклада
	|ИЗ
	|	&ТаблицаСетки КАК ТаблицаСетки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиНаСкладСрезПоследних.Время КАК Время,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиНаСкладСрезПоследних.Сотрудник) КАК ЗанятоОкон
	|ПОМЕСТИТЬ ВТ_Занятые
	|ИЗ
	|	РегистрСведений.ЗаписиНаСклад.СрезПоследних(
	|			&ПериодАнализа,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И День = &День) КАК ЗаписиНаСкладСрезПоследних
	|ГДЕ
	|	ЗаписиНаСкладСрезПоследних.Организация = &Организация
	|	И ЗаписиНаСкладСрезПоследних.Склад = &Склад
	|	И ЗаписиНаСкладСрезПоследних.Использовать
	|	И ЗаписиНаСкладСрезПоследних.День = &День
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиНаСкладСрезПоследних.Время
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СеткаРаботыСклада.Время КАК Время,
	|	ВТ_СеткаРаботыСклада.КоличествоОкон КАК КоличествоОкон,
	|	ЕСТЬNULL(ВТ_Занятые.ЗанятоОкон, 0) КАК ЗанятоОкон
	|ИЗ
	|	ВТ_СеткаРаботыСклада КАК ВТ_СеткаРаботыСклада
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Занятые КАК ВТ_Занятые
	|		ПО ВТ_СеткаРаботыСклада.Время = ВТ_Занятые.Время
	|
	|УПОРЯДОЧИТЬ ПО
	|	Время";
	
	Запрос.УстановитьПараметр("ПериодАнализа", 	ТекущаяДата());
	Запрос.УстановитьПараметр("ТаблицаСетки", 	СеткаРаботыСклада);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Склад", 			СкладДляЗаписи);
	Запрос.УстановитьПараметр("День", 			НоваяЗаписьДень);
		
	МассивВремени = Новый Массив;
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		Если СтрокаТаблицыЗапроса.КоличествоОкон > СтрокаТаблицыЗапроса.ЗанятоОкон Тогда
			МассивВремени.Добавить(СтрокаТаблицыЗапроса.Время);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат МассивВремени;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИнформациюОТекущейЗаписи()
	
	Сотрудник = Справочники.Сотрудники.НайтиПоРеквизиту("ФизическоеЛицо",Объект.ФизическоеЛицо);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЗаписиНаСкладСрезПоследних.День) КАК День,
	|	МАКСИМУМ(ЗаписиНаСкладСрезПоследних.Время) КАК Время
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	РегистрСведений.ЗаписиНаСклад.СрезПоследних(
	|			&ПериодАнализа,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И Сотрудник = &Сотрудник
	|				И День >= &День) КАК ЗаписиНаСкладСрезПоследних
	|ГДЕ
	|	ЗаписиНаСкладСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.День КАК День,
	|	ВТ_Результат.Время КАК Время
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	НЕ ВТ_Результат.День ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ПериодАнализа", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Организация",	Сотрудник.Владелец);
	Запрос.УстановитьПараметр("Склад",			СкладДляЗаписи);
	Запрос.УстановитьПараметр("Сотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("День",			НачалоДня(ТекущаяДата()));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ТекстТекущейЗаписи  = "";
	Иначе
		ТаблицаЗапроса 		= Результат.Выгрузить();
		ТекущаяЗаписьДень	= ТаблицаЗапроса[0].День;
		ТекущаяЗаписьВремя	= ТаблицаЗапроса[0].Время;
		ТекстТекущейЗаписи 	= "Вы записаны на склад на " + Формат(ТекущаяЗаписьДень,"ДЛФ=DD") + " в " + Формат(ТекущаяЗаписьВремя,"ДФ=ЧЧ:мм");
	КонецЕсли;
	
	Элементы.НадписьТекущаяЗапись.Заголовок = ТекстТекущейЗаписи;
	
	Если ЗначениеЗаполнено(ТекстТекущейЗаписи) Тогда
		Элементы.ГруппаТекущаяЗапись.Видимость = Истина;
	Иначе
		Элементы.ГруппаТекущаяЗапись.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСкладовВыдачи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикРаботыСклада.Склад КАК Склад
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСклада КАК ГрафикРаботыСклада
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрафикРаботыСклада.Склад.Наименование";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции	

&НаСервере
Процедура СкладДляЗаписиПриИзмененииНаСервере()
	
	ТекущаяЗаписьДень	= Дата(1,1,1,0,0,0);
	ТекущаяЗаписьВремя	= Дата(1,1,1,0,0,0);
	
	ЗаполнитьИнформациюОТекущейЗаписи();
	ЗаполнитьСписокДней();
	ЗаполнитьСписокВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладДляЗаписиПриИзменении(Элемент)
	
	СкладДляЗаписиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НоваяЗаписьДеньПриИзмененииНаСервере()
	
	ЗаполнитьСписокВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаписьДеньПриИзменении(Элемент)
	
	НоваяЗаписьДеньПриИзмененииНаСервере();
	
КонецПроцедуры
