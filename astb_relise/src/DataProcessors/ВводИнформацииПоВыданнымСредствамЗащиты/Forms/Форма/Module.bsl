
&НаСервере
Процедура ЗаполнитьТаблицуНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятыеРабочиеМестаОстатки.Подразделение КАК Подразделение,
	|	ЗанятыеРабочиеМестаОстатки.Должность КАК Должность,
	|	ЗанятыеРабочиеМестаОстатки.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(
	|			,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК ЗанятыеРабочиеМестаОстатки";
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник",	Объект.Сотрудник);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивПодразделений = ТаблицаЗапроса.ВыгрузитьКолонку("Подразделение");
	МассивДолжностей 	= ТаблицаЗапроса.ВыгрузитьКолонку("Должность");
	МассивРабочихМест 	= ТаблицаЗапроса.ВыгрузитьКолонку("РабочееМесто");
	
	МассивВидовВыдачи = Новый Массив;
	
	Для Каждого СтрокаТаблицыВидовВыдачи Из Объект.ВидыВыдачи Цикл
		
		Если НЕ СтрокаТаблицыВидовВыдачи.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		МассивВидовВыдачи.Добавить(СтрокаТаблицыВидовВыдачи.ВидВыдачи);
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи КАК НормаВыдачи,
	|	ПотребностьВыдачиСИЗОстатки.НоменклатураНормы КАК НоменклатураНормы,
	|	ПотребностьВыдачиСИЗОстатки.ДатаПотребности КАК ДатаПотребности,
	|	СУММА(ПотребностьВыдачиСИЗОстатки.КоличествоОстаток) КАК Требуется
	|ПОМЕСТИТЬ ВТ_Потребность
	|ИЗ
	|	РегистрНакопления.ПотребностьВыдачиСИЗ.Остатки(
	|			,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник
	|				И НормаВыдачи.ВидВыдачиСИЗ В (&МассивВидовВыдачи)) КАК ПотребностьВыдачиСИЗОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьВыдачиСИЗОстатки.НормаВыдачи,
	|	ПотребностьВыдачиСИЗОстатки.НоменклатураНормы,
	|	ПотребностьВыдачиСИЗОстатки.ДатаПотребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Сотрудник КАК Сотрудник,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Подразделение КАК Подразделение,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Должность КАК Должность,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Условие КАК Условие
	|ПОМЕСТИТЬ ВТ_ДоступныеУсловияРаботы
	|ИЗ
	|	РегистрСведений.ДоступныеУсловияРаботыСотрудника.СрезПоследних(, Сотрудник = &Сотрудник) КАК ДоступныеУсловияРаботыСотрудникаСрезПоследних
	|ГДЕ
	|	ДоступныеУсловияРаботыСотрудникаСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Подразделение КАК Подразделение,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Должность КАК Должность,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.РабочееМесто КАК РабочееМесто,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.УсловиеНормы КАК УсловиеНормы,
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.НормаВыдачи КАК НормаВыдачи
	|ПОМЕСТИТЬ ВТ_УН
	|ИЗ
	|	РегистрСведений.УстановленныеНормыВыдачиСИЗ.СрезПоследних(
	|			,
	|			Организация = &Организация
	|				И (Подразделение В (&МассивПодразделений)
	|					ИЛИ Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|				И (Должность В (&МассивДолжностей)
	|					ИЛИ Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка))
	|				И (РабочееМесто В (&МассивРабочихМест)
	|					ИЛИ РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка))) КАК УстановленныеНормыВыдачиСИЗСрезПоследних
	|ГДЕ
	|	УстановленныеНормыВыдачиСИЗСрезПоследних.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Потребность.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Потребность.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Потребность.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_Потребность.Требуется КАК Требуется,
	|	ВТ_ДоступныеУсловияРаботы.Подразделение КАК Подразделение,
	|	ВТ_ДоступныеУсловияРаботы.Должность КАК Должность,
	|	ВТ_ДоступныеУсловияРаботы.РабочееМесто КАК РабочееМесто,
	|	ВТ_ДоступныеУсловияРаботы.Условие КАК Условие
	|ПОМЕСТИТЬ ВТ_Потребность_ДУР
	|ИЗ
	|	ВТ_Потребность КАК ВТ_Потребность,
	|	ВТ_ДоступныеУсловияРаботы КАК ВТ_ДоступныеУсловияРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыдачаПоПотребностиОстатки.НормаВыдачи КАК НормаВыдачи,
	|	ВыдачаПоПотребностиОстатки.НоменклатураНормы КАК НоменклатураНормы,
	|	ВыдачаПоПотребностиОстатки.ДатаПотребности КАК ДатаПотребности,
	|	ВыдачаПоПотребностиОстатки.ДатаВыдачи КАК ВПП_ДатаВыдачи,
	|	ВыдачаПоПотребностиОстатки.ПроцентИзноса КАК ВПП_ПроцентИзноса,
	|	СУММА(ВыдачаПоПотребностиОстатки.КоличествоОстаток) КАК ВПП_Остаток
	|ПОМЕСТИТЬ ВТ_ВПП
	|ИЗ
	|	РегистрНакопления.ВыдачаПоПотребности.Остатки(
	|			,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК ВыдачаПоПотребностиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыдачаПоПотребностиОстатки.НормаВыдачи,
	|	ВыдачаПоПотребностиОстатки.НоменклатураНормы,
	|	ВыдачаПоПотребностиОстатки.ДатаПотребности,
	|	ВыдачаПоПотребностиОстатки.ДатаВыдачи,
	|	ВыдачаПоПотребностиОстатки.ПроцентИзноса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК Корректировать,
	|	ВТ_Потребность_ДУР.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Потребность_ДУР.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Потребность_ДУР.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_Потребность_ДУР.Требуется КАК Требуется,
	|	ВТ_УН.УсловиеНормы КАК Условие,
	|	ВТ_ВПП.ВПП_ДатаВыдачи КАК ВПП_ДатаВыдачи,
	|	ВТ_ВПП.ВПП_ПроцентИзноса КАК ВПП_ПроцентИзноса,
	|	ВТ_ВПП.ВПП_Остаток КАК ВПП_Остаток
	|ИЗ
	|	ВТ_Потребность_ДУР КАК ВТ_Потребность_ДУР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УН КАК ВТ_УН
	|		ПО ВТ_Потребность_ДУР.НормаВыдачи = ВТ_УН.НормаВыдачи
	|			И (ВТ_Потребность_ДУР.Подразделение = ВТ_УН.Подразделение
	|				ИЛИ ВТ_УН.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|			И (ВТ_Потребность_ДУР.Должность = ВТ_УН.Должность
	|				ИЛИ ВТ_УН.Должность = ЗНАЧЕНИЕ(Справочник.ДолжностиИПрофессии.ПустаяСсылка))
	|			И (ВТ_Потребность_ДУР.РабочееМесто = ВТ_УН.РабочееМесто
	|				ИЛИ ВТ_УН.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаАСТБ.ПустаяСсылка))
	|			И ВТ_Потребность_ДУР.Условие = ВТ_УН.УсловиеНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВПП КАК ВТ_ВПП
	|		ПО ВТ_Потребность_ДУР.НормаВыдачи = ВТ_ВПП.НормаВыдачи
	|			И ВТ_Потребность_ДУР.НоменклатураНормы = ВТ_ВПП.НоменклатураНормы
	|			И ВТ_Потребность_ДУР.ДатаПотребности = ВТ_ВПП.ДатаПотребности
	|ГДЕ
	|	НЕ ВТ_УН.УсловиеНормы ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПотребности,
	|	ВТ_Потребность_ДУР.НормаВыдачи.Наименование,
	|	ВТ_Потребность_ДУР.НоменклатураНормы.Наименование,
	|	ВТ_Потребность_ДУР.Условие.Наименование";
	
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник",			Объект.Сотрудник);
	Запрос.УстановитьПараметр("МассивПодразделений",МассивПодразделений);
	Запрос.УстановитьПараметр("МассивДолжностей",	МассивДолжностей);
	Запрос.УстановитьПараметр("МассивРабочихМест",	МассивРабочихМест);
	Запрос.УстановитьПараметр("МассивВидовВыдачи",	МассивВидовВыдачи);
	
	Объект.ТаблицаВыдачи.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеХарактеристик(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДляПроверки.Корректировать КАК Корректировать,
	|	ТаблицаДляПроверки.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДляПроверки.Номенклатура КАК Номенклатура,
	|	ТаблицаДляПроверки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ВТ_ТаблицаДляКорректировки
	|ИЗ
	|	&ТаблицаДляПроверки КАК ТаблицаДляПроверки
	|ГДЕ
	|	ТаблицаДляПроверки.Корректировать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРазмеры
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДляКорректировки.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаДляКорректировки.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаДляКорректировки.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Номенклатура.ЕстьРазмеры
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Ошибка
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаДляКорректировки КАК ВТ_ТаблицаДляКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ВТ_ТаблицаДляКорректировки.Номенклатура = ВТ_Номенклатура.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.НомерСтроки КАК НомерСтроки,
	|	ВТ_Результат.Номенклатура КАК Номенклатура,
	|	ВТ_Результат.Ошибка КАК Ошибка
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|ГДЕ
	|	ВТ_Результат.Ошибка";
	
	Запрос.УстановитьПараметр("ТаблицаДляПроверки",Объект.ТаблицаВыдачи.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Отказ = Ложь;
		Возврат;
	Иначе
		Отказ = Истина;
	КонецЕсли;	
	
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Для Каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "В строке: " + СтрокаТаблицыЗапроса.НомерСтроки + "для номенклатуры: " + СтрокаТаблицыЗапроса.Номенклатура.Наименование + " не указана характеристика!";
		СообщениеПользователю.Сообщить();		
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ВыполнитьКорректировкуНаСервере()
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеХарактеристик(Отказ);
	
	Если Отказ Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Корректировка не выполнена!";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Организация.ИспользоватьАлгоритм_0_0_0_3 ИЛИ Объект.Организация.ИспользоватьАлгоритм_0_0_0_4 Тогда
		ВыполнятьДвиженияВыдачиПоПотребности = Истина;
	Иначе
		ВыполнятьДвиженияВыдачиПоПотребности = Ложь;
	КонецЕсли;
	
	ДатаДокумента = ТекущаяДата();
	
	НовыйДокумент = Документы.КорректировкаРегистров.СоздатьДокумент();
	НовыйДокумент.Дата 					= ДатаДокумента;
	НовыйДокумент.Комментарий 			= "Сформирован обработкой ввода информации по выданным средствам защиты";
	НовыйДокумент.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.СоздательДокумента 	= ПараметрыСеанса.ТекущийПользователь;
	НовыйДокумент.УстановитьНовыйНомер();
	
	НоваяСтрока 	= НовыйДокумент.ТаблицаРегистров.Добавить();
	НоваяСтрока.Имя = "ВыданныеСредстваЗащиты";
	НоваяСтрока 	= НовыйДокумент.ТаблицаРегистров.Добавить();
	НоваяСтрока.Имя = "ПотребностьВыдачиСИЗ";
	Если ВыполнятьДвиженияВыдачиПоПотребности Тогда
		НоваяСтрока 	= НовыйДокумент.ТаблицаРегистров.Добавить();
		НоваяСтрока.Имя = "ВыдачаПоПотребности";
		ТаблицаДвиженийВыдачаПоПотребности 	= НовыйДокумент.Движения.ВыдачаПоПотребности.Выгрузить();
	КонецЕсли;

	ТаблицаДвиженийПоВыдаче 		= НовыйДокумент.Движения.ВыданныеСредстваЗащиты.Выгрузить();
	ТаблицаДвиженийПоПотребности	= НовыйДокумент.Движения.ПотребностьВыдачиСИЗ.Выгрузить();
	
	НетДанныхДляКорректировки = Истина;
	
	Для Каждого СтрокаТаблицыДанныхПоСотруднику Из Объект.ТаблицаВыдачи Цикл
		
		Если НЕ СтрокаТаблицыДанныхПоСотруднику.Корректировать Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхПоСотруднику.Номенклатура) 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхПоСотруднику.ДатаВыдачи)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхПоСотруднику.Выдано) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхПоСотруднику.НормаВыдачи) 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхПоСотруднику.ПроизвольнаяНоменклатураНормы) Тогда
			Продолжить;
		КонецЕсли;
		
		НетДанныхДляКорректировки = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыДанныхПоСотруднику.НормаВыдачи) Тогда
			
			//приход по выданным СИЗ
			НоваяСтрока = ТаблицаДвиженийПоВыдаче.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыДанныхПоСотруднику);
			НоваяСтрока.Активность 	= Истина;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.Период      = ДатаДокумента;
			НоваяСтрока.Организация = Объект.Организация;
			НоваяСтрока.Сотрудник 	= Объект.Сотрудник;
			НоваяСтрока.Количество 	= СтрокаТаблицыДанныхПоСотруднику.Выдано;
			
			Если СтрокаТаблицыДанныхПоСотруднику.ДатаВыдачи < СтрокаТаблицыДанныхПоСотруднику.ВПП_ДатаВыдачи ТОгда
				//приход по выдаче по потребности
				НоваяСтрока 						= ТаблицаДвиженийВыдачаПоПотребности.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыДанныхПоСотруднику);
				НоваяСтрока.Активность 				= Истина;
				НоваяСтрока.ВидДвижения 			= ВидДвиженияНакопления.Приход;
				НоваяСтрока.Период      			= ДатаДокумента;
				НоваяСтрока.Организация 			= Объект.Организация;
				НоваяСтрока.Сотрудник 				= Объект.Сотрудник;
				НоваяСтрока.ДатаПотребности			= Дата('00010101');
				НоваяСтрока.ПроцентИзноса			= 0;
				НоваяСтрока.Количество				= СтрокаТаблицыДанныхПоСотруднику.Выдано;
				//АсТБ_Alexey_55992_********************************************************************
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Дата потребности по норме: " + СтрокаТаблицыДанныхПоСотруднику.НормаВыдачи.Наименование + " не изменена. Есть выдача от более поздней даты.";
				СообщениеПользователю.Сообщить();
				//АсТБ_Alexey_55992_********************************************************************
				Продолжить;
			КонецЕсли;
			
			//расход по потребности
			НоваяСтрока 						= ТаблицаДвиженийПоПотребности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыДанныхПоСотруднику);
			НоваяСтрока.Активность 				= Истина;
			НоваяСтрока.ВидДвижения 			= ВидДвиженияНакопления.Расход;
			НоваяСтрока.Период      			= ДатаДокумента;
			НоваяСтрока.Организация 			= Объект.Организация;
			НоваяСтрока.Сотрудник 				= Объект.Сотрудник;
			Если ВыполнятьДвиженияВыдачиПоПотребности Тогда
				НоваяСтрока.Количество			= СтрокаТаблицыДанныхПоСотруднику.Выдано;
			Иначе
				НоваяСтрока.Количество			= СтрокаТаблицыДанныхПоСотруднику.Требуется;
			КонецЕсли;
			
			//приход по потребности
			НоваяСтрока 						= ТаблицаДвиженийПоПотребности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыДанныхПоСотруднику);
			НоваяСтрока.Активность 				= Истина;
			НоваяСтрока.ВидДвижения 			= ВидДвиженияНакопления.Приход;
			НоваяСтрока.Период      			= ДатаДокумента;
			НоваяСтрока.Организация 			= Объект.Организация;
			НоваяСтрока.Сотрудник 				= Объект.Сотрудник;
			НоваяСтрока.ДатаПотребности			= СтрокаТаблицыДанныхПоСотруднику.НоваяДатаПотребности;
			Если ВыполнятьДвиженияВыдачиПоПотребности Тогда
				НоваяСтрока.Количество			= СтрокаТаблицыДанныхПоСотруднику.Выдано;
			Иначе
				НоваяСтрока.Количество			= СтрокаТаблицыДанныхПоСотруднику.Требуется;
			КонецЕсли;
			
			Если ВыполнятьДвиженияВыдачиПоПотребности Тогда
				
				//расход по выдаче по потребности
				Если НЕ СтрокаТаблицыДанныхПоСотруднику.ВПП_Остаток = 0 Тогда
					НоваяСтрока 						= ТаблицаДвиженийВыдачаПоПотребности.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыДанныхПоСотруднику);
					НоваяСтрока.Активность 				= Истина;
					НоваяСтрока.ВидДвижения 			= ВидДвиженияНакопления.Расход;
					НоваяСтрока.Период      			= ДатаДокумента;
					НоваяСтрока.Организация 			= Объект.Организация;
					НоваяСтрока.Сотрудник 				= Объект.Сотрудник;
					НоваяСтрока.ДатаВыдачи				= СтрокаТаблицыДанныхПоСотруднику.ВПП_ДатаВыдачи;
					НоваяСтрока.ПроцентИзноса			= СтрокаТаблицыДанныхПоСотруднику.ВПП_ПроцентИзноса;
					НоваяСтрока.Количество				= СтрокаТаблицыДанныхПоСотруднику.Выдано;
				КонецЕсли;
				
				//приход по выдаче по потребности
				НоваяСтрока 						= ТаблицаДвиженийВыдачаПоПотребности.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыДанныхПоСотруднику);
				НоваяСтрока.Активность 				= Истина;
				НоваяСтрока.ВидДвижения 			= ВидДвиженияНакопления.Приход;
				НоваяСтрока.Период      			= ДатаДокумента;
				НоваяСтрока.Организация 			= Объект.Организация;
				НоваяСтрока.Сотрудник 				= Объект.Сотрудник;
				НоваяСтрока.ДатаПотребности			= СтрокаТаблицыДанныхПоСотруднику.НоваяДатаПотребности;
				НоваяСтрока.ПроцентИзноса			= СтрокаТаблицыДанныхПоСотруднику.ВПП_ПроцентИзносаДляНовойДатыПотребности;
				НоваяСтрока.Количество				= СтрокаТаблицыДанныхПоСотруднику.Выдано;				
				
			КонецЕсли;	
			
		Иначе
			
			//приход по выданным СИЗ
			НоваяСтрока = ТаблицаДвиженийПоВыдаче.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыДанныхПоСотруднику);
			НоваяСтрока.Активность 			= Истина;
			НоваяСтрока.ВидДвижения 		= ВидДвиженияНакопления.Приход;
			НоваяСтрока.Период      		= ДатаДокумента;
			НоваяСтрока.Организация 		= Объект.Организация;
			НоваяСтрока.Сотрудник 			= Объект.Сотрудник;
			НоваяСтрока.НоменклатураНормы 	= СтрокаТаблицыДанныхПоСотруднику.ПроизвольнаяНоменклатураНормы;
			НоваяСтрока.Количество 			= СтрокаТаблицыДанныхПоСотруднику.Выдано;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если НетДанныхДляКорректировки Тогда
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Нет данных для корректировки.";
		СообщениеПользователю.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	РассчитатьДатыНовойПотребности();
	
	НовыйДокумент.Движения.ВыданныеСредстваЗащиты.Загрузить(ТаблицаДвиженийПоВыдаче);
	НовыйДокумент.Движения.ПотребностьВыдачиСИЗ.Загрузить(ТаблицаДвиженийПоПотребности);
	Если ВыполнятьДвиженияВыдачиПоПотребности Тогда
		НовыйДокумент.Движения.ВыдачаПоПотребности.Загрузить(ТаблицаДвиженийВыдачаПоПотребности);
	КонецЕсли;
	
	Попытка
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		
		ЗаполнитьТаблицуНаСервере();
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Обработка завершена. Сформирован документ: " + НовыйДокумент.Ссылка + Символы.ПС + "Данные в таблице для корректировки обновлены.";
		СообщениеПользователю.Сообщить();
		
	Исключение
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Корректировка не выполнена!" + Символы.ПС + ОписаниеОшибки();
		СообщениеПользователю.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКорректировку(Команда)
	
	ВыполнитьКорректировкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	Объект.ТаблицаВыдачи.Очистить();
	
	ЗаполнитьТаблицуНаСервере();
	
	УстановитьОтборДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.ТаблицаВыдачи.Очистить();
	
	УстановитьОтборДинамическогоСписка();
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если Объект.Организация.ИспользоватьАлгоритм_0_0_0_3 ИЛИ Объект.Организация.ИспользоватьАлгоритм_0_0_0_4 Тогда
			Элементы.ТаблицаВыдачи.ПодчиненныеЭлементы.ТаблицаВыдачиГруппаВПП.Видимость = Истина;
		Иначе
			Элементы.ТаблицаВыдачи.ПодчиненныеЭлементы.ТаблицаВыдачиГруппаВПП.Видимость = Ложь;
		КонецЕсли;	
		
	Иначе
		
		Элементы.ТаблицаВыдачи.ПодчиненныеЭлементы.ТаблицаВыдачиГруппаВПП.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТаблицуВидовВыдачи();
	
	УстановитьОтборДинамическогоСписка();
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическогоСписка()
	
	МассивВидовВыдачи = Новый Массив;
	
	Для Каждого СтрокаТаблицыВидовВыдачи Из Объект.ВидыВыдачи Цикл
		
		Если НЕ СтрокаТаблицыВидовВыдачи.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		МассивВидовВыдачи.Добавить(СтрокаТаблицыВидовВыдачи.ВидВыдачи);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ОстаткиПоВыданнымСИЗ.Отбор, "Организация", 	Объект.Организация,ВидСравненияКомпоновкиДанных.Равно, "Организация", 	Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ОстаткиПоВыданнымСИЗ.Отбор, "Сотрудник", 		Объект.Сотрудник,ВидСравненияКомпоновкиДанных.Равно, 	"Сотрудник", 	Истина);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭтаФорма.ОстаткиПоВыданнымСИЗ.Отбор, "ВидВыдачи", 		МассивВидовВыдачи,ВидСравненияКомпоновкиДанных.ВСписке, "ВидВыдачи", 	Истина);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицуВидовВыдачи()
	
	НоваяСтрока = Объект.ВидыВыдачи.Добавить();
	НоваяСтрока.ВидВыдачи = Перечисления.ВидыВыдачиСИЗ.ПерсональнаяВыдача;
	НоваяСтрока.Использовать = Истина;
	
	НоваяСтрока = Объект.ВидыВыдачи.Добавить();
	НоваяСтрока.ВидВыдачи = Перечисления.ВидыВыдачиСИЗ.КоллективнаяВыдача;
	НоваяСтрока.Использовать = Истина;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВидыВыдачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВидыВыдачиПриИзмененииНаСервере()
	
	Объект.ТаблицаВыдачи.Очистить();
	
	ЗаполнитьТаблицуНаСервере();
	
	УстановитьОтборДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыВыдачиПриИзменении(Элемент)
	
	ВидыВыдачиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыдачиДатаВыдачиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаВыдачи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		Если ТекущиеДанные.ДатаВыдачи > ТекущаяДата() Тогда
			ТекущиеДанные.ДатаВыдачи = ТекущаяДата();
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.Выдано) Тогда
			РассчитатьДатыНовойПотребности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыдачиВыданоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаВыдачи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		Если ТекущиеДанные.Выдано > ТекущиеДанные.Требуется И ЗначениеЗаполнено(ТекущиеДанные.НормаВыдачи) Тогда
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Количество выданных превышает количество по потребности и преведено к количеству по потребности!";
			СообщениеПользователю.Сообщить();
			ТекущиеДанные.Выдано = ТекущиеДанные.Требуется;
			Возврат;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаВыдачи) Тогда
			РассчитатьДатыНовойПотребности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДатыНовойПотребности()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Организация.ИспользоватьАлгоритм_0_0_1_2 Тогда //формула: ДНП = ДВ + MAX(СН)
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.НормаВыдачи КАК НормаВыдачи,
		|	ТаблицаДанных.НоменклатураНормы КАК НоменклатураНормы,
		|	ТаблицаДанных.Требуется КАК Требуется,
		|	ТаблицаДанных.Выдано КАК Выдано
		|ПОМЕСТИТЬ ВТ_ИсходнаяТаблица
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|ГДЕ
		|	НЕ ТаблицаДанных.Требуется = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НормыВыдачиСИЗСоставНормы.Ссылка КАК НормаВыдачи,
		|	НормыВыдачиСИЗСоставНормы.НоменклатураНормы КАК НоменклатураНормы,
		|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.ТипПериода КАК ПериодичностьВыдачиТипПериода,
		|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.КоличествоПериодов КАК ПериодичностьВыдачиКоличествоПериодов,
		|	НормыВыдачиСИЗСоставНормы.ПериодичностьВыдачи.Приоритет КАК ПериодичностьВыдачиПриоритет
		|ПОМЕСТИТЬ ВТ_СоставНормы
		|ИЗ
		|	Справочник.НормыВыдачиСИЗ.СоставНормы КАК НормыВыдачиСИЗСоставНормы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ИсходнаяТаблица.НоменклатураНормы КАК НоменклатураНормы,
		|	МАКСИМУМ(ВТ_СоставНормы.ПериодичностьВыдачиПриоритет) КАК ПериодичностьВыдачиПриоритет
		|ПОМЕСТИТЬ ВТ_МаксимальныйПриоритетПериодичности
		|ИЗ
		|	ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоставНормы КАК ВТ_СоставНормы
		|		ПО ВТ_ИсходнаяТаблица.НоменклатураНормы = ВТ_СоставНормы.НоменклатураНормы
		|			И ВТ_ИсходнаяТаблица.НормаВыдачи = ВТ_СоставНормы.НормаВыдачи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ИсходнаяТаблица.НоменклатураНормы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_МаксимальныйПриоритетПериодичности.НоменклатураНормы КАК НоменклатураНормы,
		|	ВТ_СоставНормы.ПериодичностьВыдачиТипПериода КАК ПериодичностьВыдачиТипПериода,
		|	ВТ_СоставНормы.ПериодичностьВыдачиКоличествоПериодов КАК ПериодичностьВыдачиКоличествоПериодов
		|ПОМЕСТИТЬ ВТ_МаксимальнаяПериодичность
		|ИЗ
		|	ВТ_МаксимальныйПриоритетПериодичности КАК ВТ_МаксимальныйПриоритетПериодичности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоставНормы КАК ВТ_СоставНормы
		|		ПО ВТ_МаксимальныйПриоритетПериодичности.НоменклатураНормы = ВТ_СоставНормы.НоменклатураНормы
		|			И ВТ_МаксимальныйПриоритетПериодичности.ПериодичностьВыдачиПриоритет = ВТ_СоставНормы.ПериодичностьВыдачиПриоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ИсходнаяТаблица.НоменклатураНормы КАК НоменклатураНормы,
		|	СУММА(ВТ_ИсходнаяТаблица.Выдано) КАК Выдано,
		|	ВТ_МаксимальнаяПериодичность.ПериодичностьВыдачиТипПериода КАК ТипПериода,
		|	ВТ_МаксимальнаяПериодичность.ПериодичностьВыдачиКоличествоПериодов КАК КоличествоПериодов,
		|	МАКСИМУМ(ВТ_ИсходнаяТаблица.Требуется) КАК Требуется
		|ИЗ
		|	ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаксимальнаяПериодичность КАК ВТ_МаксимальнаяПериодичность
		|		ПО ВТ_ИсходнаяТаблица.НоменклатураНормы = ВТ_МаксимальнаяПериодичность.НоменклатураНормы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ИсходнаяТаблица.НоменклатураНормы,
		|	ВТ_МаксимальнаяПериодичность.ПериодичностьВыдачиТипПериода,
		|	ВТ_МаксимальнаяПериодичность.ПериодичностьВыдачиКоличествоПериодов";
		
		Запрос.УстановитьПараметр("ТаблицаДанных",Объект.ТаблицаВыдачи.Выгрузить());
		
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицыДанныхПоСотруднику Из Объект.ТаблицаВыдачи Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхПоСотруднику.НормаВыдачи) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхПоСотруднику.Требуется) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхПоСотруднику.ДатаВыдачи) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(Новый Структура("НоменклатураНормы",СтрокаТаблицыДанныхПоСотруднику.НоменклатураНормы)); 
			
			Если НайденныеСтроки[0].Требуется > НайденныеСтроки[0].Выдано Тогда //выдача неполная - потребность не двигаем
				СтрокаТаблицыДанныхПоСотруднику.НоваяДатаПотребности = СтрокаТаблицыДанныхПоСотруднику.ДатаВыдачи;
				Продолжить;
			КонецЕсли;
			
			ТипПериода 			= НайденныеСтроки[0].ТипПериода;
			КоличествоПериодов 	= НайденныеСтроки[0].КоличествоПериодов;
			КоличествоМесяцев 	= ?(ТипПериода = Перечисления.ДоступныеПериодыОтчета.Год, КоличествоПериодов * 12, КоличествоПериодов);
			
			СтрокаТаблицыДанныхПоСотруднику.НоваяДатаПотребности = ДобавитьМесяц(СтрокаТаблицыДанныхПоСотруднику.ДатаВыдачи,КоличествоМесяцев);
			
		КонецЦикла;
		
	ИначеЕсли Объект.Организация.ИспользоватьАлгоритм_0_0_0_3 ИЛИ Объект.Организация.ИспользоватьАлгоритм_0_0_0_4 Тогда //формула: ДНП = ДВ + СНпоНорме
		
		Для Каждого СтрокаТаблицыДанныхПоСотруднику Из Объект.ТаблицаВыдачи Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхПоСотруднику.НормаВыдачи) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхПоСотруднику.Требуется) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыДанныхПоСотруднику.Выдано = 0 Тогда
				СтрокаТаблицыДанныхПоСотруднику.НоваяДатаПотребности = СтрокаТаблицыДанныхПоСотруднику.ДатаПотребности;
				Продолжить;
			КонецЕсли;
			
			ПериодичностьВыдачи = СтрокаТаблицыДанныхПоСотруднику.НормаВыдачи.СоставНормы.НайтиСтроки(Новый Структура("НоменклатураНормы",СтрокаТаблицыДанныхПоСотруднику.НоменклатураНормы))[0].ПериодичностьВыдачи; 
			ТипПериода 			= ПериодичностьВыдачи.ТипПериода;
			КоличествоПериодов 	= ПериодичностьВыдачи.КоличествоПериодов;
			КоличествоМесяцев 	= ?(ТипПериода = Перечисления.ДоступныеПериодыОтчета.Год, КоличествоПериодов * 12, КоличествоПериодов);
			
			СтрокаТаблицыДанныхПоСотруднику.НоваяДатаПотребности = ДобавитьМесяц(СтрокаТаблицыДанныхПоСотруднику.ДатаВыдачи,КоличествоМесяцев);
			
		КонецЦикла;
		
	КонецЕсли;
	
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(Объект.Сотрудник);
	
	ДатаАнализа = ТекущаяДата();
	
	//отсутствие на рабочем месте
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтсутствиеНаРабочемМестеСрезПоследних.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.ОтсутствиеНаРабочемМесте.СрезПоследних(
	|			&ДатаАнализа,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК ОтсутствиеНаРабочемМестеСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаАнализа",ДатаАнализа);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник",	Объект.Сотрудник);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		ТаблицаЗапроса = Результат.Выгрузить();
		
		ДатаПотребности = КонецДня(ТаблицаЗапроса[0].ДатаОкончания) + 1;
	
		Для Каждого СтрокаТаблицы Из Объект.ТаблицаВыдачи Цикл
			
			Если СтрокаТаблицы.НоваяДатаПотребности < ДатаПотребности Тогда
				СтрокаТаблицы.НоваяДатаПотребности = ДатаПотребности;
			КонецЕсли;
			
		КонецЦикла;	
	
	КонецЕсли;
	
	//учет зимы
	ТаблицаЗанятыхРМ 			= ПроцедурыРаботыСНормамиСервер.ПолучитьТаблицуЗанятыхРабочихМестСУсловиями(МассивСотрудников,Объект.Организация,ДатаАнализа);
	ТаблицаУстановленныхНорм 	= ПроцедурыРаботыСНормамиСервер.ПолучитьТаблицуУстановленныхНорм(Объект.Организация,ДатаАнализа,ТаблицаЗанятыхРМ.ВыгрузитьКолонку("Подразделение"),ТаблицаЗанятыхРМ.ВыгрузитьКолонку("Должность"));
	ТаблицаСНормами 			= ПроцедурыРаботыСНормамиСервер.ПодобратьНормы(ТаблицаЗанятыхРМ,ТаблицаУстановленныхНорм,Объект.Организация,ДатаАнализа);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодобранныеНормы.Сотрудник КАК Сотрудник,
	|	ПодобранныеНормы.Подразделение КАК Подразделение,
	|	ПодобранныеНормы.ЭтоЗима КАК ЭтоЗима,
	|	ПодобранныеНормы.НормаВыдачи КАК НормаВыдачи,
	|	ПодобранныеНормы.НоменклатураНормы КАК НоменклатураНормы
	|ПОМЕСТИТЬ ВТ_ПодобранныеНормы
	|ИЗ
	|	&ПодобранныеНормы КАК ПодобранныеНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.НормаВыдачи КАК НормаВыдачи,
	|	ТаблицаДанных.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаДанных.НоваяДатаПотребности КАК НоваяДатаПотребности,
	|	ТаблицаДанных.Требуется КАК Требуется
	|ПОМЕСТИТЬ ВТ_ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПодобранныеНормы.Сотрудник КАК Сотрудник,
	|	ВТ_ПодобранныеНормы.Подразделение КАК Подразделение,
	|	ВТ_ПодобранныеНормы.ЭтоЗима КАК ЭтоЗима,
	|	ВТ_ТаблицаДанных.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаДанных.НоменклатураНормы КАК НоменклатураНормы,
	|	ВЫБОР
	|		КОГДА ВТ_ПодобранныеНормы.ЭтоЗима
	|			ТОГДА ВЫБОР
	|					КОГДА ГОД(ВТ_ТаблицаДанных.НоваяДатаПотребности) < ГОД(&ТекущаяДата)
	|						ТОГДА &ТекущаяДата
	|					ИНАЧЕ ВТ_ТаблицаДанных.НоваяДатаПотребности
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаДанных.НоваяДатаПотребности
	|	КОНЕЦ КАК ДатаПотребности,
	|	ВТ_ТаблицаДанных.Требуется КАК КоличествоПотребность
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодобранныеНормы КАК ВТ_ПодобранныеНормы
	|		ПО ВТ_ТаблицаДанных.НормаВыдачи = ВТ_ПодобранныеНормы.НормаВыдачи
	|			И ВТ_ТаблицаДанных.НоменклатураНормы = ВТ_ПодобранныеНормы.НоменклатураНормы
	|ГДЕ
	|	НЕ ВТ_ПодобранныеНормы.Подразделение ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Сотрудник КАК Сотрудник,
	|	ВТ_Результат.Подразделение КАК Подразделение,
	|	ВТ_Результат.ЭтоЗима КАК ЭтоЗима,
	|	ВТ_Результат.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_Результат.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_Результат.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_Результат.КоличествоПотребность КАК КоличествоПотребность
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Результат.Подразделение КАК Подразделение
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Результат.ДатаПотребности КАК ДатаПотребности
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат";
	
	Запрос.УстановитьПараметр("ПодобранныеНормы",	ТаблицаСНормами);
	Запрос.УстановитьПараметр("ТаблицаДанных",		Объект.ТаблицаВыдачи.Выгрузить());
	Запрос.УстановитьПараметр("ТекущаяДата",		ТекущаяДата());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗапроса 			= Результат[3].Выгрузить();
	ТаблицаПодразделений 	= Результат[4].Выгрузить();
	ТаблицаДатПотребности 	= Результат[5].Выгрузить();
	
	//***Трегубов А.А.*** -- №60931 на 12 алгоритме при пустой дате потребности получаем ошибку при расчете зимы --  11.10.2021 <<<
	Если Объект.Организация.ИспользоватьАлгоритм_0_0_1_2 Тогда   
		
		МассивСтрокСПустойДатойПотребности = ТаблицаДатПотребности.НайтиСтроки(новый Структура("ДатаПотребности",Дата(1,1,1)));
		Для Каждого НайденнаяСтрока из МассивСтрокСПустойДатойПотребности Цикл 
			
			ТаблицаДатПотребности.Удалить(НайденнаяСтрока);
			
		КонецЦикла;	
		
	КонецЕсли;
	//***Трегубов А.А.*** -- №60931 на 12 алгоритме при пустой дате потребности получаем ошибку при расчете зимы --  11.10.2021 >>>
	
	ТаблицаЗимы = ПроцедурыРаботыСНормамиСервер.ПолучитьТаблицуЗимы(ТаблицаПодразделений.ВыгрузитьКолонку("Подразделение"),Объект.Организация,ДатаАнализа,ТаблицаДатПотребности.ВыгрузитьКолонку("ДатаПотребности"));
	
	ПроцедурыРаботыСНормамиСервер.УточнитьПотребностьПоЗиме(ТаблицаЗапроса,ТаблицаЗимы);
	
	Для Каждого СтрокаТаблицыДанныхПоСотруднику Из Объект.ТаблицаВыдачи Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДанныхПоСотруднику.Требуется) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Сотрудник,НормаВыдачи,НоменклатураНормы",Объект.Сотрудник,СтрокаТаблицыДанныхПоСотруднику.НормаВыдачи,СтрокаТаблицыДанныхПоСотруднику.НоменклатураНормы);
		НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НайденныеСтроки[0].ЭтоЗима Тогда
			СтрокаТаблицыДанныхПоСотруднику.НоваяДатаПотребности = НайденныеСтроки[0].ДатаПотребности;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Объект.Организация.ИспользоватьАлгоритм_0_0_0_3 Тогда
		ПолучитьПроцентИзносаДляНовойДатыПотребности();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПроцентИзносаДляНовойДатыПотребности()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДляВыдачи.Корректировать КАК Корректировать,
	|	ТаблицаДляВыдачи.НормаВыдачи КАК НормаВыдачи,
	|	ТаблицаДляВыдачи.НоменклатураНормы КАК НоменклатураНормы,
	|	ТаблицаДляВыдачи.Условие КАК Условие,
	|	ТаблицаДляВыдачи.Требуется КАК Требуется,
	|	ТаблицаДляВыдачи.ДатаПотребности КАК ДатаПотребности,
	|	ТаблицаДляВыдачи.Номенклатура КАК Номенклатура,
	|	ТаблицаДляВыдачи.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаДляВыдачи.ДатаВыдачи КАК ДатаВыдачи,
	|	ТаблицаДляВыдачи.Выдано КАК Выдано,
	|	ТаблицаДляВыдачи.НоваяДатаПотребности КАК НоваяДатаПотребности,
	|	ТаблицаДляВыдачи.ПроизвольнаяНоменклатураНормы КАК ПроизвольнаяНоменклатураНормы,
	|	ТаблицаДляВыдачи.ВПП_ДатаВыдачи КАК ВПП_ДатаВыдачи,
	|	ТаблицаДляВыдачи.ВПП_ПроцентИзноса КАК ВПП_ПроцентИзноса,
	|	ТаблицаДляВыдачи.ВПП_Остаток КАК ВПП_Остаток
	|ПОМЕСТИТЬ ВТ_ТаблицаДляВыдачи
	|ИЗ
	|	&ТаблицаДляВыдачи КАК ТаблицаДляВыдачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыдачаПоПотребностиОстатки.НормаВыдачи КАК НормаВыдачи,
	|	ВыдачаПоПотребностиОстатки.НоменклатураНормы КАК НоменклатураНормы,
	|	ВыдачаПоПотребностиОстатки.ДатаПотребности КАК ДатаПотребности,
	|	ВыдачаПоПотребностиОстатки.ДатаВыдачи КАК ДатаВыдачи,
	|	ВыдачаПоПотребностиОстатки.ПроцентИзноса КАК ПроцентИзноса
	|ПОМЕСТИТЬ ВТ_ВПП
	|ИЗ
	|	РегистрНакопления.ВыдачаПоПотребности.Остатки(
	|			,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК ВыдачаПоПотребностиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДляВыдачи.Корректировать КАК Корректировать,
	|	ВТ_ТаблицаДляВыдачи.НормаВыдачи КАК НормаВыдачи,
	|	ВТ_ТаблицаДляВыдачи.НоменклатураНормы КАК НоменклатураНормы,
	|	ВТ_ТаблицаДляВыдачи.Условие КАК Условие,
	|	ВТ_ТаблицаДляВыдачи.Требуется КАК Требуется,
	|	ВТ_ТаблицаДляВыдачи.ДатаПотребности КАК ДатаПотребности,
	|	ВТ_ТаблицаДляВыдачи.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаДляВыдачи.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВТ_ТаблицаДляВыдачи.ДатаВыдачи КАК ДатаВыдачи,
	|	ВТ_ТаблицаДляВыдачи.Выдано КАК Выдано,
	|	ВТ_ТаблицаДляВыдачи.НоваяДатаПотребности КАК НоваяДатаПотребности,
	|	ВТ_ТаблицаДляВыдачи.ПроизвольнаяНоменклатураНормы КАК ПроизвольнаяНоменклатураНормы,
	|	ВТ_ТаблицаДляВыдачи.ВПП_ДатаВыдачи КАК ВПП_ДатаВыдачи,
	|	ВТ_ТаблицаДляВыдачи.ВПП_ПроцентИзноса КАК ВПП_ПроцентИзноса,
	|	ВТ_ТаблицаДляВыдачи.ВПП_Остаток КАК ВПП_Остаток,
	|	ЕСТЬNULL(ВТ_ВПП.ПроцентИзноса, 0) КАК ВПП_ПроцентИзносаДляНовойДатыПотребности
	|ИЗ
	|	ВТ_ТаблицаДляВыдачи КАК ВТ_ТаблицаДляВыдачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВПП КАК ВТ_ВПП
	|		ПО ВТ_ТаблицаДляВыдачи.НормаВыдачи = ВТ_ВПП.НормаВыдачи
	|			И ВТ_ТаблицаДляВыдачи.НоменклатураНормы = ВТ_ВПП.НоменклатураНормы
	|			И ВТ_ТаблицаДляВыдачи.НоваяДатаПотребности = ВТ_ВПП.ДатаПотребности
	|			И ВТ_ТаблицаДляВыдачи.ДатаВыдачи = ВТ_ВПП.ДатаВыдачи";
	
	Запрос.УстановитьПараметр("ТаблицаДляВыдачи",	Объект.ТаблицаВыдачи.Выгрузить());
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник",			Объект.Сотрудник);
	
	Объект.ТаблицаВыдачи.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаВыдачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыдачиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаВыдачи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.НормаВыдачи) Тогда
			Элементы.ТаблицаВыдачи.ПодчиненныеЭлементы.ТаблицаВыдачиПроизвольнаяНоменклатураНормы.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ТаблицаВыдачи.ПодчиненныеЭлементы.ТаблицаВыдачиПроизвольнаяНоменклатураНормы.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
